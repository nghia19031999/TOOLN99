using System;
using System.CodeDom;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Management;
using System.Net;
using System.Net.Http;
using System.Security.Cryptography;
using System.Security.Policy;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Web;
using System.Web.UI.WebControls;
using System.Windows.Forms;
using System.Xml.Linq;
using KAutoHelper;
using Leaf.xNet;
using MailKit;

using MailKit.Net.Imap;
using MailKit.Search;
using MailKit.Security;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Crypto.Modes;
using Org.BouncyCastle.Crypto.Parameters;
using OtpNet;
using xNet;
using static System.Net.Mime.MediaTypeNames;
using static System.Windows.Forms.LinkLabel;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.Button;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.ProgressBar;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.StartPanel;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.Tab;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TrackBar;
using Application = System.Windows.Forms.Application;
using Button = System.Windows.Forms.Button;
using Cookie = OpenQA.Selenium.Cookie;
using DownloadProgressChangedEventArgs = xNet.DownloadProgressChangedEventArgs;
using FormUrlEncodedContent = Leaf.xNet.FormUrlEncodedContent;
using HtmlDocument = HtmlAgilityPack.HtmlDocument;
using HttpRequest = xNet.HttpRequest;
using Label = System.Windows.Forms.Label;

namespace BMD2
{

    public partial class Form1 : Form
    {
        //string ProfileFolderPath = "Profile";
        //string ExtentionFolderPath = "Extention";
        private Updater updater;
        ChromeDriver driver;
        //private string localVersionFile = Path.Combine(Application.StartupPath, "version.txt");
        //private string latestVersionUrl = "https://raw.githubusercontent.com/nghia19031999/TOOLN99/main/version.json?t=" + DateTime.Now.Ticks; // URL chứa version.json

        //private string latestVersion = "";
        //private string updateZipUrl = "";
        //Khai báo biến toàn cục trong Form
 
        public Form1()
        {
      
            InitializeComponent();
            //changeHmaProxy();
            

            Status();
           
        }

        private void test10()
        {
            try
            {
                for(int k =0; k < 5; k++)
                {
                    var NAME = File.ReadAllLines("NAMEWHATAPP.txt").ToList();
                    Random rnd = new Random();
                    int indexRandom = rnd.Next(0, NAME.Count);
                    string name_WhatApp = NAME[indexRandom];
                    if (string.IsNullOrEmpty(name_WhatApp))
                    {
                        if (tb_NAME_WHATAPP.InvokeRequired)
                        {
                            tb_NAME_WHATAPP.Invoke(new Action(() =>
                            {
                                name_WhatApp = tb_NAME_WHATAPP.Text;
                            }));

                        }
                    }
                    name_WhatApp = name_WhatApp + $"{k + 1}";

                }
          
            }
            catch { }

        }

        private void button3_Click(object sender, EventArgs e)
        {
            var file_open = cmb_FILE_OPEN.Text;
            string filePath = Path.Combine(Application.StartupPath, file_open);

            if (File.Exists(filePath))
            {
                System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo()
                {
                    FileName = filePath,
                    UseShellExecute = true // mở bằng chương trình mặc định
                });
            }
            else
            {
                MessageBox.Show("Không tìm thấy file: " + filePath, "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        private void Form1_Load_1(object sender, EventArgs e)
        {
            //2
            //var updater = new Updater();
            //updater.CheckForUpdate();

            //1
            updater = new Updater(this,
    "https://raw.githubusercontent.com/nghia19031999/TOOLN99/refs/heads/main/version.json",
    lbnew,
    btUpdate
    );
            updater.CheckForUpdate();
            // Đọc version hiện tại



            //3
            #region
            //string currentVersion = "0.0.0";
            //if (File.Exists(localVersionFile))
            //    currentVersion = File.ReadAllText(localVersionFile).Trim();
            #endregion
            //using (WebClient wc = new WebClient())
            //{
            //    try
            //    {
            //        // Tải nội dung JSON từ GitHub
            //        string jsonContent = wc.DownloadString(latestVersionUrl);

            //        // Parse JSON
            //        dynamic versionData = Newtonsoft.Json.JsonConvert.DeserializeObject(jsonContent);
            //        latestVersion = versionData.version;
            //        updateZipUrl = versionData.url;

            //        if (latestVersion != currentVersion)
            //        {
            //            MessageBox.Show($"Có bản cập nhật mới: {latestVersion} (hiện tại: {currentVersion})");
            //            btUpdate.Enabled = true;
            //        }
            //        else
            //        {
            //            btUpdate.Enabled = false;
            //        }
            //    }
            //    catch (Exception ex)
            //    {
            //        MessageBox.Show("Lỗi kiểm tra cập nhật: " + ex.Message);
            //        btUpdate.Enabled = false;
            //    }
            //}





            var dictionary = new Dictionary<string, DataGridView>
            {

                { "file1.txt",dgv1},
                { "file2.txt",dgv_mail},
                { "file3.txt",dgv2_IG}


            };

            foreach (var item in dictionary)
            {
                LoadDataForDgv(item.Key, item.Value);
            }

            dgv1.KeyDown += dgv1_KeyDown;
            dgv_mail.KeyDown += dgv_mail_KeyDown;

            string path = "SLBMNHAN.txt";
            if (File.Exists(path))
            {
                try
                {
                    string[] textall = File.ReadAllLines(path);
                    string text = textall[textall.Length - 1];
                    tb_BM.Text = Regex.Match(text, "SL:(.*?)\\|").Groups[1].Value.ToString();
                    rtb_ID_BM_Share.Text = text.Split('|')[0].Trim();
                }
                catch { }




            }

            string mailnhanbm50 = "Mailnhanbm50.txt";
            if (File.Exists(mailnhanbm50))
            {
                try
                {
                    var lines = File.ReadLines(mailnhanbm50)
                                    .Where(line => !string.IsNullOrWhiteSpace(line))
                                    .ToArray();
                    rtb_hotmail.Text = string.Join(Environment.NewLine, lines);
                }
                catch { }

            }
            string mailnhanbm350 = "Mailnhanbm350.txt";
            if (File.Exists(mailnhanbm350))
            {
                try
                {
                    var lines = File.ReadLines(mailnhanbm350)
                                    .Where(line => !string.IsNullOrWhiteSpace(line))
                                    .ToArray();
                    rtb_hotmail_BM350.Text = string.Join(Environment.NewLine, lines);
                }
                catch { }

            }


            string path1 = "SLBMBACKUP1NHAN.txt";
            if (File.Exists(path1))
            {
                try
                {
                    string[] textall = File.ReadAllLines(path1);
                    string text = textall[textall.Length - 1];
                    tb_BM_BACK_UP.Text = Regex.Match(text, "SL:(.*?)\\|").Groups[1].Value.ToString();
                    rtb_ID_BM_Share_BACK_UP.Text = text.Split('|')[0].Trim();
                }
                catch { }

            }


            string path2 = "SLBMBACKUP2NHAN.txt";
            if (File.Exists(path2))
            {
                try
                {
                    string[] textall = File.ReadAllLines(path2);
                    string text = textall[textall.Length - 1];
                    tb_BM_BACK_UP2.Text = Regex.Match(text, "SL:(.*?)\\|").Groups[1].Value.ToString();
                    rtb_ID_BM_Share_BACK_UP2.Text = text.Split('|')[0].Trim();
                }
                catch { }

            }
            string path6 = "SLBMBACKUP3NHAN.txt";
            if (File.Exists(path6))
            {
                try
                {
                    string[] textall = File.ReadAllLines(path6);
                    string text = textall[textall.Length - 1];
                    tb_BM_BACK_UP3.Text = Regex.Match(text, "SL:(.*?)\\|").Groups[1].Value.ToString();
                    rtb_ID_BM_Share_BACK_UP3.Text = text.Split('|')[0].Trim();
                }
                catch { }

            }
            string path3 = "SLBMCLOSE1NHAN.txt";
            if (File.Exists(path3))
            {
                try
                {
                    string[] textall = File.ReadAllLines(path3);
                    string text = textall[textall.Length - 1];
                    tb_BM_Close1.Text = Regex.Match(text, "SL:(.*?)\\|").Groups[1].Value.ToString();
                    rtb_IDBM_CLOSE.Text = text.Split('|')[0].Trim();
                }
                catch { }

            }
            string path4 = "SLBMCLOSE2NHAN.txt";
            if (File.Exists(path4))
            {
                try
                {
                    string[] textall = File.ReadAllLines(path4);
                    string text = textall[textall.Length - 1];
                    tb_BM_Close_2.Text = Regex.Match(text, "SL:(.*?)\\|").Groups[1].Value.ToString();
                    rtb_IDBM_CLOSE_2.Text = text.Split('|')[0].Trim();
                }
                catch { }

            }
            string path5 = "SLBMCLOSE3NHAN.txt";
            if (File.Exists(path5))
            {
                try
                {
                    string[] textall = File.ReadAllLines(path5);
                    string text = textall[textall.Length - 1];
                    tb_BM_Close_3.Text = Regex.Match(text, "SL:(.*?)\\|").Groups[1].Value.ToString();
                    rtb_IDBM_CLOSE_3.Text = text.Split('|')[0].Trim();
                }
                catch { }

            }
            string path7 = "SLBMCLOSE4NHAN.txt";
            if (File.Exists(path7))
            {
                try
                {
                    string[] textall = File.ReadAllLines(path7);
                    string text = textall[textall.Length - 1];
                    tb_BM_Close_4.Text = Regex.Match(text, "SL:(.*?)\\|").Groups[1].Value.ToString();
                    rtb_IDBM_CLOSE_4.Text = text.Split('|')[0].Trim();
                }
                catch { }

            }

        }
        #region
        //2
        //public class Updater
        //{
        //    private string versionUrl = "https://raw.githubusercontent.com/nghia19031999/TOOLN99/refs/heads/main/version.json"; // URL chứa JSON version
        //    private string latestVersion = string.Empty;
        //    private string versionFilePath;
        //    private string appExeName;

        //    public Updater()
        //    {
        //        appExeName = Path.GetFileName(Application.ExecutablePath);
        //        versionFilePath = Path.Combine(Application.StartupPath, "version.txt");
        //    }

        //    public void CheckForUpdate()
        //    {
        //        try
        //        {
        //            // Đọc version hiện tại từ file version.txt
        //            string currentVersion = File.Exists(versionFilePath)
        //                ? File.ReadAllText(versionFilePath).Trim()
        //                : Application.ProductVersion;

        //            // Lấy dữ liệu JSON từ server
        //            string jsonData = new WebClient().DownloadString(versionUrl);
        //            var versionInfo = JsonConvert.DeserializeObject<VersionInfo>(jsonData);

        //            string newVersion = versionInfo.version;
        //            string updateUrl = versionInfo.url;
        //            latestVersion = newVersion; // Lưu để sau khi update thì ghi vào file

        //            if (IsNewerVersion(newVersion, currentVersion))
        //            {
        //                if (MessageBox.Show(
        //                    $"Có bản mới ({newVersion}). Bạn có muốn cập nhật không?",
        //                    "Cập nhật",
        //                    MessageBoxButtons.YesNo,
        //                    MessageBoxIcon.Question) == DialogResult.Yes)
        //                {
        //                    DownloadAndUpdate(updateUrl);
        //                }
        //            }
        //            else
        //            {
        //                // Không hiện thông báo nếu bạn muốn silent check
        //                Console.WriteLine("Phiên bản hiện tại đã mới nhất.");
        //            }
        //        }
        //        catch (Exception ex)
        //        {
        //            MessageBox.Show("Lỗi khi kiểm tra update: " + ex.Message);
        //        }
        //    }

        //    private bool IsNewerVersion(string newVersion, string currentVersion)
        //    {
        //        try
        //        {
        //            Version vNew = new Version(newVersion);
        //            Version vCurrent = new Version(currentVersion);
        //            return vNew > vCurrent;
        //        }
        //        catch
        //        {
        //            return !string.Equals(newVersion, currentVersion);
        //        }
        //    }

        //    private void DownloadAndUpdate(string updateUrl)
        //    {
        //        try
        //        {
        //            string tempZip = Path.Combine(Path.GetTempPath(), "update.zip");
        //            string tempExtract = Path.Combine(Path.GetTempPath(), "update_temp");

        //            if (Directory.Exists(tempExtract)) Directory.Delete(tempExtract, true);

        //            using (var client = new WebClient())
        //            {
        //                client.DownloadFile(updateUrl, tempZip);
        //            }

        //            System.IO.Compression.ZipFile.ExtractToDirectory(tempZip, tempExtract);

        //            // Tạo file batch để copy và khởi động lại
        //            string batPath = Path.Combine(Path.GetTempPath(), "update.bat");

        //            string batContent =
        //                "@echo off\n" +
        //                "echo Dang cap nhat...\n" +
        //                $"taskkill /IM \"{appExeName}\" /F\n" +
        //                $"xcopy \"{tempExtract}\\*\" \"{Application.StartupPath}\\\" /E /Y /I\n" +
        //                $"start \"\" \"{Path.Combine(Application.StartupPath, appExeName)}\"\n" +
        //                $"rd /s /q \"{tempExtract}\"\n" +
        //                "exit";

        //            File.WriteAllText(batPath, batContent);

        //            // Ghi lại version mới để lần sau không hỏi
        //            File.WriteAllText(versionFilePath, latestVersion);

        //            Process.Start(new ProcessStartInfo
        //            {
        //                FileName = batPath,
        //                UseShellExecute = false
        //            });

        //            Application.Exit();
        //        }
        //        catch (Exception ex)
        //        {
        //            MessageBox.Show("Lỗi khi tải hoặc cập nhật: " + ex.Message);
        //        }
        //    }

        //    private class VersionInfo
        //    {
        //        public string version { get; set; }
        //        public string url { get; set; }
        //    }
        //}
        #endregion
        #region
        //1
        public class Updater
        {
         

            private string versionUrl;
            private string tempUpdateFile;
            private Form mainForm;
            private Label lbNewVersion;
            private Button btUpdate;
            // Đổi sang lưu version ở AppData để không bị mất khi build/update
            private string versionFilePath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                "BMD2",
                "version.txt"
            );
            private string latestVersion = string.Empty;
            public Updater(Form form, string versionUrl, Label lbNewVersion, Button btUpdate)
            {
                this.versionUrl = versionUrl;
                this.tempUpdateFile = Path.Combine(Application.StartupPath, "TOOLN.zip");
                this.mainForm = form;
                this.lbNewVersion = lbNewVersion;
                this.btUpdate = btUpdate;

                lbNewVersion.Hide();
                btUpdate.Enabled = false;
                btUpdate.Click += BtUpdate_Click;
            }

            public void CheckForUpdate()
            {
                try
                {
                  

                    // Nếu không có thì coi như 0.0.0.0 để ép update
                    string currentVersion = "0.0.0.0";
                    if (File.Exists(versionFilePath))
                    {
                        try
                        {
                            currentVersion = File.ReadAllText(versionFilePath).Trim();
                        }
                        catch { /* bỏ qua nếu lỗi đọc file */ }
                    }

                    string jsonData = new WebClient().DownloadString(versionUrl);
                    var versionInfo = JsonConvert.DeserializeObject<VersionInfo>(jsonData);

                    string newVersion = versionInfo.version;
                    string updateUrl = versionInfo.url;
            
                    latestVersion = newVersion; // 👈 GÁN GIÁ TRỊ Ở ĐÂY
                    if (IsNewerVersion(newVersion, currentVersion))
                    {
                        if (MessageBox.Show(
                            $"Có bản mới ({newVersion}). Bạn có muốn cập nhật không?",
                            "Update", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                        {
                            lbNewVersion.Text = newVersion;
                            btUpdate.Tag = updateUrl;
                            btUpdate.Enabled = true;
                            lbNewVersion.Show();
                        }
                    }
                    else
                    {
                        MessageBox.Show("Phiên bản hiện tại đã là mới nhất.");

                        lbNewVersion.Text = currentVersion;
                        lbNewVersion.Show();
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Lỗi khi kiểm tra update: " + ex.Message);
                }
            }

            private bool IsNewerVersion(string newV, string currentV)
            {
                Version v1 = new Version(newV);
                Version v2 = new Version(currentV);
                return v1 > v2;
            }

            private void BtUpdate_Click(object sender, EventArgs e)
            {
                try
                {
                    string updateUrl = btUpdate.Tag.ToString();
                    WebClient web = new WebClient();
                    web.DownloadFileCompleted += Web_DownloadFileCompleted;
                    web.DownloadProgressChanged += Web_DownloadProgressChanged;
                    web.DownloadFileAsync(new Uri(updateUrl), tempUpdateFile);
                    btUpdate.Enabled = false;
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Lỗi khi bắt đầu tải update: " + ex.Message);
                }
            }

            private void Web_DownloadProgressChanged(object sender, System.Net.DownloadProgressChangedEventArgs e)
            {
                mainForm.Text = $"Đang tải update... {e.ProgressPercentage}%";
            }


            private void Web_DownloadFileCompleted(object sender, AsyncCompletedEventArgs e)
            {
                if (e.Error != null)
                {
                    MessageBox.Show("Lỗi tải update: " + e.Error.Message);
                    return;
                }

                try
                {
                    // Thư mục tạm để giải nén
                    string tempExtractPath = Path.Combine(Path.GetTempPath(), "Update2Temp");
                    if (Directory.Exists(tempExtractPath))
                        Directory.Delete(tempExtractPath, true);
                    Directory.CreateDirectory(tempExtractPath);

                    // Giải nén file zip vừa tải
                    using (ZipArchive archive = ZipFile.OpenRead(tempUpdateFile))
                    {
                        foreach (ZipArchiveEntry entry in archive.Entries)
                        {
                            string filePath = Path.Combine(tempExtractPath, entry.FullName);
                            Directory.CreateDirectory(Path.GetDirectoryName(filePath));
                            entry.ExtractToFile(filePath, true);
                        }
                    }

                    // Đảm bảo thư mục lưu version tồn tại
                    string folderPath = Path.GetDirectoryName(versionFilePath);
                    if (!Directory.Exists(folderPath))
                    {
                        Directory.CreateDirectory(folderPath);
                    }

                    // Ghi lại version mới
                    File.WriteAllText(versionFilePath, latestVersion);

                    // Tạo file batch để update
                    string exeName = Path.GetFileName(Application.ExecutablePath);
                    string appDir = Application.StartupPath;
                    string batPath = Path.Combine(Path.GetTempPath(), "update.bat");

                    string batContent =
                        "@echo off\n" +
                        "echo Dang cap nhat...\n" +
                        $"set \"tempDir={tempExtractPath}\"\n" +
                        $"set \"appDir={appDir}\"\n" +
                        $"taskkill /IM \"{exeName}\" /F\n" +
                        "timeout /t 1 >nul\n" +
                        "xcopy \"%tempDir%\\*\" \"%appDir%\\\" /E /Y /I\n" +
                        $"start \"\" \"%appDir%\\{exeName}\"\n" +
                        "rd /s /q \"%tempDir%\"\n" +
                        "del \"%~f0\"\n" +
                        "exit";

                    File.WriteAllText(batPath, batContent);

                    // Chạy file bat
                    Process.Start(new ProcessStartInfo()
                    {
                        FileName = batPath,
                        UseShellExecute = false,
                        CreateNoWindow = true
                    });

                    // Thoát app hiện tại
                    Application.Exit();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Lỗi khi giải nén update: " + ex.Message);
                }
            }

            public class VersionInfo
            {
                public string version { get; set; }
                public string url { get; set; }
                public string changelog { get; set; }
            }
        }
        #endregion

        //private void btUpdate_Click(object sender, EventArgs e)
        //{
        //    string tempExtractPath = Path.Combine(Path.GetTempPath(), "UpdateTemp");
        //    string exeName = Path.GetFileName(Application.ExecutablePath);
        //    string batPath = Path.Combine(Path.GetTempPath(), "update.bat");

        //    try
        //    {
        //        if (Directory.Exists(tempExtractPath))
        //            Directory.Delete(tempExtractPath, true);
        //        Directory.CreateDirectory(tempExtractPath);

        //        using (WebClient wc = new WebClient())
        //        {
        //            string zipPath = Path.Combine(tempExtractPath, "update.zip");
        //            wc.DownloadFile(updateZipUrl, zipPath);

        //            System.IO.Compression.ZipFile.ExtractToDirectory(zipPath, tempExtractPath);

        //            string batContent =
        //                "@echo off\n" +
        //                $"taskkill /IM \"{exeName}\" /F\n" +
        //                $"timeout /t 1 /nobreak >nul\n" + // Chờ 1s để process tắt hẳn
        //                $"xcopy \"{tempExtractPath}\\*\" \"{Application.StartupPath}\\\" /E /Y /I\n" +
        //                $"echo {latestVersion} > \"{localVersionFile}\"\n" +
        //                $"timeout /t 1 /nobreak >nul\n" + // Chờ file copy xong
        //                $"start \"\" \"{Application.StartupPath}\\{exeName}\"\n" +
        //                $"rd /s /q \"{tempExtractPath}\"\n" +
        //                $"exit";

        //            File.WriteAllText(batPath, batContent);

        //            Process.Start(new ProcessStartInfo
        //            {
        //                FileName = batPath,
        //                UseShellExecute = false
        //            });

        //            Application.Exit();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show("Lỗi cập nhật: " + ex.Message);
        //    }
        //}
        private class VersionInfo
        {
            public string latestVersion { get; set; }
            public string updateZipUrl { get; set; }
        }
        private ChromeDriver Createchromedrive10()
        {
            ChromeOptions options = new ChromeOptions();

            options.EnableMobileEmulation("Samsung Galaxy A51/71");

            options.AddArguments("--disable-3d-apis",
                "--disable-background-networking",
                "--disable-bundled-ppapi-flash",
                "--disable-client-side-phishing-detection",
                "--disable-default-apps",
                "--disable-hang-monitor",
                "--disable-prompt-on-repost",
                "--disable-sync",
                "--disable-webgl",
                "--enable-blink-features=ShadowDOMV0",
                "--enable-logging",
                "--disable-notifications",
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-web-security",
                "--disable-rtc-smoothness-algorithm",
                "--disable-webrtc-hw-decoding",
                "--disable-webrtc-hw-encoding",
                "--disable-webrtc-multiple-routes",
                "--disable-webrtc-hw-vp8-encoding",
                "--enforce-webrtc-ip-permission-check",
                "--force-webrtc-ip-handling-policy",
                "--ignore-certificate-errors",
                "--disable-infobars",
                "--disable-popup-blocking");

            options.AddArgument("--force-device-scale-factor=0.8");

            // Optional: Set user-agent manually if needed
            //  string userAgent = "Mozilla/5.0 (iPhone; CPU iPhone OS 13_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.2 Mobile/15E148 Safari/604.1";
            string userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36";
            options.AddArguments($"--user-agent={userAgent}");

            // Vị trí cửa sổ nếu bạn vẫn muốn chia tab theo vị trí màn hình
            if (i == 10)
                i = 0;
            if (0 <= i && i <= 4)
                options.AddArguments($"--window-position={470 * i},0");
            if (5 <= i && i < 10)
            {
                if (x == 5 || x == 10)
                    x = 0;
                options.AddArguments($"--window-position={470 * x},650");
            }

            ChromeDriverService chromeDriverService = ChromeDriverService.CreateDefaultService();
            chromeDriverService.DisableBuildCheck = true;
            chromeDriverService.HideCommandPromptWindow = true;

            ChromeDriver chromeDriver = new ChromeDriver(chromeDriverService, options);
            chromeDriver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(60);
            chromeDriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);

            i++;
            x++;

            return chromeDriver;
        }
    
        private void button3_Click_1(object sender, EventArgs e)
        {
            CustomMessageBox.ShowMessage("SPAM IP", "Cảnh báo", "warning.png", "anhhinhnen.jpg");
        }

        private void bt_doi_dinh_dang_Click(object sender, EventArgs e)
        {
            try
            {
                List<string> IDBM_BACK_UP = new List<string>();

                if (rtb_IDBM_CAN_BACK_Up.InvokeRequired)
                {
                    rtb_IDBM_CAN_BACK_Up.Invoke(new Action(() =>
                    {
                        IDBM_BACK_UP = rtb_IDBM_CAN_BACK_Up.Lines.ToList();
                    }));
                }
                else
                {
                    IDBM_BACK_UP = rtb_IDBM_CAN_BACK_Up.Lines.ToList();
                }
                if (rtb_IDBM_CAN_BACK_Up.InvokeRequired)
                {
                    rtb_IDBM_CAN_BACK_Up.Invoke(new Action(() =>
                    {
                        rtb_IDBM_CAN_BACK_Up.Clear();

                    }));
                }
                else
                {
                    rtb_IDBM_CAN_BACK_Up.Clear();
                }

                foreach (var IDVIA_IDBM in IDBM_BACK_UP)
                {
                    if (!string.IsNullOrEmpty(IDVIA_IDBM))
                    {
                        var IDVIA1 = "";

                        try
                        {
                            IDVIA1 = IDVIA_IDBM.Split('\t')[0];
                        }
                        catch { }

                        var IDBM = "";
                        try
                        {
                            IDBM = IDVIA_IDBM.Split('\t')[1];
                        }
                        catch { }
                        if (rtb_IDBM_CAN_BACK_Up.InvokeRequired)
                        {
                            rtb_IDBM_CAN_BACK_Up.Invoke(new Action(() =>
                            {
                                rtb_IDBM_CAN_BACK_Up.AppendText(IDVIA1 + "|" + IDBM + Environment.NewLine);

                            }));
                        }
                        else
                        {
                            rtb_IDBM_CAN_BACK_Up.AppendText(IDVIA1 + "|" + IDBM + Environment.NewLine);

                        }
                    }
                }
            }
            catch { }
        }

        private void btdoidang_Click(object sender, EventArgs e)
        {
            try
            {
                List<string> IDBM_BACK_UP = new List<string>();

                if (rtb_IDBM_KICK_BM3.InvokeRequired)
                {
                    rtb_IDBM_KICK_BM3.Invoke(new Action(() =>
                    {
                        IDBM_BACK_UP = rtb_IDBM_KICK_BM3.Lines.ToList();
                    }));
                }
                else
                {
                    IDBM_BACK_UP = rtb_IDBM_KICK_BM3.Lines.ToList();
                }
                if (rtb_IDBM_KICK_BM3.InvokeRequired)
                {
                    rtb_IDBM_KICK_BM3.Invoke(new Action(() =>
                    {
                        rtb_IDBM_KICK_BM3.Clear();

                    }));
                }
                else
                {
                    rtb_IDBM_KICK_BM3.Clear();
                }

                foreach (var IDVIA_IDBM in IDBM_BACK_UP)
                {
                    if (!string.IsNullOrEmpty(IDVIA_IDBM))
                    {
                        var IDVIA1 = "";

                        try
                        {
                            IDVIA1 = IDVIA_IDBM.Split('\t')[0];
                        }
                        catch { }

                        var IDBM = "";
                        try
                        {
                            IDBM = IDVIA_IDBM.Split('\t')[1];
                        }
                        catch { }
                        if (rtb_IDBM_KICK_BM3.InvokeRequired)
                        {
                            rtb_IDBM_KICK_BM3.Invoke(new Action(() =>
                            {
                                rtb_IDBM_KICK_BM3.AppendText(IDVIA1 + "|" + IDBM + Environment.NewLine);

                            }));
                        }
                        else
                        {
                            rtb_IDBM_KICK_BM3.AppendText(IDVIA1 + "|" + IDBM + Environment.NewLine);

                        }
                    }
                }
            }
            catch { }
        }


        private void Test4()
        {
            try
            {
                //var proxy = ("103.162.31.24", 32749, "user32749", "N7KB");

                //string zipPath = CreateProxyExtension(proxy.Item1, proxy.Item2, proxy.Item3, proxy.Item4);
                //var driver = Createchromedrive_proxy(zipPath, proxy.Item1, proxy.Item2);

                //driver.Navigate().GoToUrl("https://whoer.net/");

            }
            catch { }
        }


        private void btn_update_mail_Click(object sender, EventArgs e)
        {
            try
            {
                var loai_mail = "";
                loai_mail = cmb_MAIL_SHARE_BM_IG.Text;

                if (loai_mail == "HOTMAIL")
                {
                    string mailnhanbm50 = "Mailnhanbm50.txt";
                    if (File.Exists(mailnhanbm50))
                    {
                        try
                        {
                            var lines = File.ReadLines(mailnhanbm50)
                                            .Where(line => !string.IsNullOrWhiteSpace(line))
                                            .ToArray();

                            rtb_hotmail.Clear();
                            rtb_hotmail.Text = string.Join(Environment.NewLine, lines);
                        }
                        catch { }

                    }
                    string mailnhanbm350 = "Mailnhanbm350.txt";
                    if (File.Exists(mailnhanbm350))
                    {
                        try
                        {
                            var lines = File.ReadLines(mailnhanbm350)
                                            .Where(line => !string.IsNullOrWhiteSpace(line))
                                            .ToArray();
                            rtb_hotmail_BM350.Clear();
                            rtb_hotmail_BM350.Text = string.Join(Environment.NewLine, lines);

                        }
                        catch { }

                    }
                }
                if (loai_mail == "MAIL_MOAKT")
                {
                    string mailnhanbm50 = "MailMoaktnhanbm50.txt";
                    if (File.Exists(mailnhanbm50))
                    {
                        try
                        {
                            var lines = File.ReadLines(mailnhanbm50)
                                            .Where(line => !string.IsNullOrWhiteSpace(line))
                                            .ToArray();
                            rtb_hotmail.Clear();
                            rtb_hotmail.Text = string.Join(Environment.NewLine, lines);



                        }
                        catch { }

                    }
                    string mailnhanbm350 = "MailMoaktnhanbm350.txt";
                    if (File.Exists(mailnhanbm350))
                    {
                        try
                        {
                            var lines = File.ReadLines(mailnhanbm350)
                                            .Where(line => !string.IsNullOrWhiteSpace(line))
                                            .ToArray();
                            rtb_hotmail_BM350.Clear();
                            rtb_hotmail_BM350.Text = string.Join(Environment.NewLine, lines);

                        }
                        catch { }

                    }
                }


            }
            catch { }

        }
        private string CreateProxyExtension(string ip, int port, string user, string pass)
        {
            string folder = Path.Combine(Directory.GetCurrentDirectory(), $"proxy_ext_{ip.Replace('.', '_')}");
            string zipFile = folder + ".zip";

            Directory.CreateDirectory(folder);

            // manifest.json
            File.WriteAllText(Path.Combine(folder, "manifest.json"), @"{
              ""version"": ""1.0.0"",
              ""manifest_version"": 2,
              ""name"": ""Proxy Auto Auth"",
              ""permissions"": [
                ""proxy"",
                ""tabs"",
                ""unlimitedStorage"",
                ""storage"",
                ""<all_urls>"",
                ""webRequest"",
                ""webRequestBlocking""
              ],
              ""background"": {
                ""scripts"": [""background.js""]
              }
            }");

                // background.js
                string background = $@"
                    var config = {{
                    mode: ""fixed_servers"",
                    rules: {{
                    singleProxy: {{
                    scheme: ""http"",
                    host: ""{ip}"",
                    port: parseInt(""{port}"")
                    }},
                    bypassList: [""localhost""]
                    }}
                    }};
                    chrome.proxy.settings.set({{value: config, scope: ""regular""}}, function(){{}});
                    function callbackFn(details) {{
                    return {{
                    authCredentials: {{
                    username: ""{user}"",
                    password: ""{pass}""
                    }}
                    }};
                    }}
                    chrome.webRequest.onAuthRequired.addListener(
                    callbackFn,
                    {{urls: [""<all_urls>""]}},
                    [""blocking""]
                    );
                ";
            File.WriteAllText(Path.Combine(folder, "background.js"), background);

            if (File.Exists(zipFile)) File.Delete(zipFile);
            ZipFile.CreateFromDirectory(folder, zipFile);

            return zipFile;
        }




        // chrome chia 10 màn
        private ChromeDriver Createchromedrive_proxy(string extensionZip, string ip, int port)
        {
            ChromeOptions options = new ChromeOptions();
            options.AddArguments("--disable-3d-apis",
                "--disable-background-networking",
                "--disable-bundled-ppapi-flash",
                "--disable-client-side-phishing-detection",
                "--disable-default-apps",
                "--disable-hang-monitor",
                "--disable-prompt-on-repost",
                "--disable-sync",
                "--disable-webgl",
                "--enable-blink-features=ShadowDOMV0",
                "--enable-logging",
                "--disable-notifications",
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-web-security",
                "--disable-rtc-smoothness-algorithm",
                "--disable-webrtc-hw-decoding",
                "--disable-webrtc-hw-encoding",
                "--disable-webrtc-multiple-routes",
                "--disable-webrtc-hw-vp8-encoding",
                "--enforce-webrtc-ip-permission-check",
                "--force-webrtc-ip-handling-policy",
                "--ignore-certificate-errors",
                "--disable-infobars",
                "--disable-blink-features=\"BlockCredentialedSubresources\"",
                "--disable-popup-blocking");
            options.AddArgument("--window-size=500,650");
            options.AddArgument("--force-device-scale-factor=0.8");

            string userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36";
            options.AddArguments($"--user-agent={userAgent}");
            options.AddExtension(extensionZip);
            options.AddArgument($"--proxy-server=http://{ip}:{port}");
            options.AddArgument("--start-maximized");
            if (i == 10)
            {
                i = 0;
            }
            if (0 <= i & i <= 4)
            {
                options.AddArguments($"--window-position={470 * i},0");
            }
            if (5 <= i & i < 10)
            {
                if (x == 5 || x == 10)
                {
                    x = 0;
                }
                options.AddArguments($"--window-position={470 * x},650");
            }

            ChromeDriverService chromeDriverService = ChromeDriverService.CreateDefaultService();
            chromeDriverService.DisableBuildCheck = true;
            chromeDriverService.HideCommandPromptWindow = true;
            ChromeDriver chromeDriver = new ChromeDriver(chromeDriverService, options);
            chromeDriver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(60);
            chromeDriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);
            i++;
            x++;
            return chromeDriver;
        }
        private ChromeDriver Createchromedrive_proxy1(string extensionZip, string ip, int port)
        {
            ChromeOptions options = new ChromeOptions();
            options.AddArguments("--disable-3d-apis",
                "--disable-background-networking",
                "--disable-bundled-ppapi-flash",
                "--disable-client-side-phishing-detection",
                "--disable-default-apps",
                "--disable-hang-monitor",
                "--disable-prompt-on-repost",
                "--disable-sync",
                "--disable-webgl",
                "--enable-blink-features=ShadowDOMV0",
                "--enable-logging",
                "--disable-notifications",
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-web-security",
                "--disable-rtc-smoothness-algorithm",
                "--disable-webrtc-hw-decoding",
                "--disable-webrtc-hw-encoding",
                "--disable-webrtc-multiple-routes",
                "--disable-webrtc-hw-vp8-encoding",
                "--enforce-webrtc-ip-permission-check",
                "--force-webrtc-ip-handling-policy",
                "--ignore-certificate-errors",
                "--disable-infobars",
                "--disable-blink-features=\"BlockCredentialedSubresources\"",
                "--disable-popup-blocking");
            options.AddArgument("--window-size=1200,1000");
            options.AddExtension(extensionZip);
            options.AddArgument($"--proxy-server=http://{ip}:{port}");
            options.AddArgument("--start-maximized");

            ChromeDriverService chromeDriverService = ChromeDriverService.CreateDefaultService();
            chromeDriverService.DisableBuildCheck = true;
            chromeDriverService.HideCommandPromptWindow = true;
            ChromeDriver chromeDriver = new ChromeDriver(chromeDriverService, options);
            chromeDriver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(60);
            chromeDriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);



            return chromeDriver;
        }
        private void test()
        {
            try
            {
                HttpRequest httpRequest = new HttpRequest();
                httpRequest.KeepAlive = true;
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.AllowAutoRedirect = true;
                httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36";
                httpRequest.AddHeader("authority", "accounts.google.com");
                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httpRequest.AddHeader("cache-control", "max-age=0");
                httpRequest.AddHeader("priority", "u=0, i");
                httpRequest.AddHeader("referer", "https://www.google.com/");
                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                httpRequest.AddHeader("sec-ch-ua-arch", "\"x86\"");
                httpRequest.AddHeader("sec-ch-ua-bitness", "\"64\"");
                httpRequest.AddHeader("sec-ch-ua-form-factors", "\"Desktop\"");
                httpRequest.AddHeader("sec-ch-ua-full-version", "\"135.0.7049.85\"");
                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.85\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.85\"");
                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                httpRequest.AddHeader("sec-ch-ua-wow64", "?0");
                httpRequest.AddHeader("sec-fetch-dest", "document");
                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                httpRequest.AddHeader("sec-fetch-user", "?1");
                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                httpRequest.AddHeader("x-browser-channel", "stable");
                httpRequest.AddHeader("x-browser-copyright", "Copyright 2025 Google LLC. All rights reserved.");
                httpRequest.AddHeader("x-browser-validation", "GN89Pm3qNoE4Gva8lUvpibT2MUc=");
                httpRequest.AddHeader("x-browser-year", "2025");
                httpRequest.AddHeader("x-chrome-id-consistency-request", "version=1,client_id=77185425430.apps.googleusercontent.com,device_id=f550a666-243c-4c76-ac8b-c6a1ee85995d,signin_mode=all_accounts,signout_mode=show_confirmation");
                httpRequest.AddHeader("x-client-data", "CIm2yQEIpLbJAQipncoBCJPdygEIlaHLAQiRo8sBCJr+zAEIhaDNAQj+pc4BCLrnzgE=Decoded:message ClientVariations {  // Active Google-visible variation IDs on this client. These are reported for analysis, but do not directly affect any server-side behavior.  repeated int32 variation_id = [3300105, 3300132, 3313321, 3321491, 3330197, 3330449, 3358490, 3362821, 3379966, 3388346];}");

                var response = httpRequest.Get("https://accounts.google.com/v3/signin/identifier?btmpl=mobile_tier2&hl=vi&ifkv=AXH0vVu6u2yyF98oMhA7cco9EDCaEESUTLQoRd1nvSD7LuDfshhcGt6oi0XoisYTVJ6cnhGnDEr8zQ&service=mail&flowName=GlifWebSignIn&flowEntry=ServiceLogin&dsh=S-1626347375%3A174477976084116");
                if (response.IsOK)
                {
                    var responseSTr = response.ToString();


                    httpRequest.AddHeader("authority", "accounts.google.com");
                    httpRequest.AddHeader("accept", "*/*");
                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                    httpRequest.AddHeader("origin", "https://accounts.google.com");
                    httpRequest.AddHeader("priority", "u=1, i");
                    httpRequest.AddHeader("referer", "https://accounts.google.com/");
                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                    httpRequest.AddHeader("sec-ch-ua-arch", "\"x86\"");
                    httpRequest.AddHeader("sec-ch-ua-bitness", "\"64\"");
                    httpRequest.AddHeader("sec-ch-ua-form-factors", "\"Desktop\"");
                    httpRequest.AddHeader("sec-ch-ua-full-version", "\"135.0.7049.85\"");
                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.85\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.85\"");
                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                    httpRequest.AddHeader("sec-ch-ua-wow64", "?0");
                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                    httpRequest.AddHeader("x-chrome-id-consistency-request", "version=1,client_id=77185425430.apps.googleusercontent.com,device_id=f550a666-243c-4c76-ac8b-c6a1ee85995d,signin_mode=all_accounts,signout_mode=show_confirmation");
                    httpRequest.AddHeader("x-client-data", "CIm2yQEIpLbJAQipncoBCJPdygEIlaHLAQiRo8sBCJr+zAEIhaDNAQj+pc4BCLrnzgE=Decoded:message ClientVariations {// Active Google-visible variation IDs on this client. These are reported for analysis, but do not directly affect any server-side behavior.  repeated int32 variation_id = [3300105, 3300132, 3313321, 3321491, 3330197, 3330449, 3358490, 3362821, 3379966, 3388346];}");
                    httpRequest.AddHeader("x-goog-ext-278367001-jspb", "[\"GlifWebSignIn\"]");
                    httpRequest.AddHeader("x-goog-ext-391502476-jspb", "[\"S-1626347375:1744779760841167\",\"mail\",null,\"AXH0vVu6u2yyF98oMhA7cco9EDCaEESUTLQoRd1nvSD7LuDfshhcGt6oi0XoisYTVJ6cnhGnDEr8zQ\"]");
                    httpRequest.AddHeader("x-same-domain", "1");

                    var url = "https://accounts.google.com/v3/signin/_/AccountsSignInUi/data/batchexecute?rpcids=V1UmUe&source-path=%2Fv3%2Fsignin%2Fidentifier&f.sid=-5143636836915293598&bl=boq_identityfrontendauthuiserver_20250408.08_p0&hl=vi&_reqid=843365&rt=c";
                    var payload = $"f.req=[[[\"V1UmUe\",\"[null,\\\"willafitzpatricksrj52637i@xpic.us\\\",1,null,null,1,1,null,null,\\\"S-1626347375:1744779760841167\\\",null,null,null,null,null,null,null,null,[null,\\\"mail\\\"],null,\\\"\\\",\\\"VN\\\",[null,null,\\\"S-1626347375:1744779760841167\\\",\\\"ServiceLogin\\\",null,\\\"mail\\\",[[\\\"btmpl\\\",\\\"mobile_tier2\\\"],[\\\"hl\\\",\\\"vi\\\"],[\\\"ifkv\\\",\\\"AXH0vVu6u2yyF98oMhA7cco9EDCaEESUTLQoRd1nvSD7LuDfshhcGt6oi0XoisYTVJ6cnhGnDEr8zQ\\\"],[\\\"service\\\",\\\"mail\\\"],[\\\"flowName\\\",\\\"GlifWebSignIn\\\"],[\\\"flowEntry\\\",\\\"ServiceLogin\\\"],[\\\"dsh\\\",\\\"S-1626347375:1744779760841167\\\"]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[],null,null,null,null,null,[]],[\\\"youtube:294\\\",\\\"youtube\\\",1],null,null,[null,null,null,null,null,null,null,1,0,1,\\\"\\\",null,null,2,1,2],null,7,null,[[\\\"identity-signin-identifier\\\",\\\"!T0ylTBTNAAYKOoS0KjpCGuGD8OIZGAw7ADQBEArZ1Kb14nARaTqUE8ElgSWlZHTFt3u1o1NuOyx4OCwtAcrCy7GfKXbNaOm9MkQf9fGJAgAAABhSAAAAD2gBB34AS6zq77l5wYIeUqqfn4kK4iEvdrSstxEhSEWTB2XYrP36D2-iKgx1AasI9bBKDhmoBTQcG0RZf8aomq7RmSe5T5M0UyWqTcBcsT3ppJkHgi9BjYfCqmH0x1VbgsK46HvTApWxDZ6H3aAAA-fQpcjgPZ_0hOhnP-9ApDyNgeUd6-5z2SQxYO0eV3QSmq2IS3-yfko9mK3Cts6f9jhCFM_HUKWjfDPB9SONtjsnitMKEKwoToUJqM_h1OQDy91-hs4JOA5p2nRKZwK5eaKXJYV5DFqRwHCsr4zQRdXPTa6cRTCrgQw0l_-jqp9mb2VGDfZVxik83NhaFwXADpoAeJttJhqCCLX6HlfjJ3rXUk6_aRS5tRDSwHg8RlriCV3hFsIu4Ho4r1DyAKBK_6S4Bnvfxl-2f6SO0k63mf7ZYTWqieDOqZgHRxjPSkLUvjPIBYQNRSyKQCPYY4cd2OsP3K02mHyENAjlA6sQIQxfH6gjHzs1bKj2ihWua_hQq4oxExJC7cc623tnHiw8T1qaK7KdoESGNWgVGbGWND2kKzVr3jMv1eyV9ilnyE0VEXBM5nPRxGZkkEN-WCHInmswwicVlcvo9UkHa-TCWQwx5w-TVpRLtcn4NyY4jmJyD71Y_qi1jARnJHM_FQDrjsZHpeiHkjxr8OzM3Ljtqg9ax3VA5fJXuN4IMb_DGGBLiSLMk_-dbEPlRd_-q8xxUujaPk8fU58EzhwpvhI2JscoKVijDTvrOWN1gSyvU_g20udCS8kiwdkvjGEXHhvTnDx9wDHbexL213_QSZOjBHKuEmFLp531N7RmTPCjRmWvNdxVKvNPYGyVCOxWXKm3q8ozrYGA3mDxDmcvS6nkJH_N21HaxBCX3aTNe1UEJDfU5aMEqbICUZHDv1nqH2r2mMf_to5K75nZ6PeynDv_gRkYeQfgjyPUtzskBFYET8nNzaZ4N9_oWQ-Rn3b37ZDxlKlbjVkz5HAhG2hrDHShaJWqBmA3fbIX6HAgwRGheZ-IDlZ4Ba-BovvieWY8XtCViDiW9ltU9TJyFysT30sfjfUW-aqKQ__u7JBl_fFnR6cz5bfVtsrLJ08S37hkawZwOPBq5e7c5az_x-it2rl1QUum3w1k7hD9ySc1d8AfLOy3CDvsYtIEZkMYzgfQhVoEZf8011eZdMYXcup0DuBbIEVmysHbyeob49n8SyDTqQ1IG59HcC2JmBFIi1OfHb20sjp4spfPoNM2DOTZVQfhIIboZj2yq2OeNZV18SfTzVGwetfJUKA7j2iVm-Lwcvnnvn1VQjMlQTNs7n_M5sEXp1G4FI9fFLudTBXmDI7a5IQvLljN3XbT1aHGZKBxdwIUkSq46jiGSXXZYYnSuPX-AN2SiToWXbqJW5xSVFBN5hk2s7MMRNMWIZbPtxn51VHZb1Zw1R5idW-jqeBqbLiirfv5yCKfwkEX3LfAIC6OFXWPDdIML5ifhlCRQ4f304cDH0s1ujRPcJij6T7MhH-BbyUX2vwDlSMopP0H9idySa0rRbMXVXHsN-r9V6Qm_G8kRKUQQ6k1-4U_zGsWbDAj4z-HEa2e5H_P0j3JRl-bIpvgH9d_kaUC6kOzkDRZi-ZRyoxI7p06uoLJ09olOYeI_RMYypgjWuIQeEica27OlbzEnA8I0OywUd7RaxAZnTg1dgQszHQliF_51Ne6VNHNB9LQ6bGzFs0fMsD6_QJgnL-QPF4DDxeAhaIYyvjMb7SCCC3QG-zdB7pKMODezWlxOlZVFvZ_Mpv65_Q6mJ8YsPrSH0P0Y9qLnAHnTCLr2k4-RYI5LJAKogaPCE6Zfpdt-Us70LZ1YSBcbRNh_8pd1GlpU6CIPVHQsbREvds-QutJcu_eHneL_DIAHyAK993f_zgQU1MXQ77-ARsst3k7tc3cVp9-Zq0FioD7gKjrllvllm9DiUBLweM2nmfOTuIVuL2sSeQqq-3oKnRNRJ_9yaVAvdZ8nuAvj8C7vDxi89jsCcFsv0PAX9BjG7WxjCJZpC-DhJl5-7jTdTjFht0y42pAUUYB3LuFHRjcbeVJen3wSXQExVjpfNtULit8dA7cAu0XAdR3WuSrfJ21qc6JFhBY8LEZm2ZHOaxFU-BqaAZpoc8P29TlB7vJk6Xj8kjbSg98Zz42QJJMkzCe6RAp3Ip4tKiCgFnkw1zUK_JIeUrDyUl98pYiBV98mJfqqp_j5gxyBwqWZcwxrD3C0rDVm9U-wu2dbBvrg4ZE15oBmW10NHNW8L9uDIQ2z0ShRPxoqO0FRdulT_ABLB_X4YyQTtS0u9QMaoBL4YO0MYF28QuLJOUtiGZxhZauGPn82AERHDeo41wsf35vuYwMDP9I60AHuYEXFklofu2jMXNu0Yr5m4D__LUJcQyyVNcoHowvsfT3ZX6vqJVxi6z-t2e7_QP2DuPbKIBBhabiDvQt50p4OTJia-fi2Nry6cvvxWIiwrslJa70pwro1_pJcm7FBoOs5l8anF-NiIo9gb77PD4s6uH3rqxH_iLyEstCTl0ACA4XDZ3tTkIT8i04dA2BDirK4qJK6Yy22J1sAKqsoprFGOPXbFh8JI0KMdNMuNiI2plT7S421uE7sfxAwP5e-6cB2BiM6Jvroi00H0uU2SRTr8a24NyJdlN7t5G3omdz9nY8da194Isc\\\"]],[null,null,null,null,null,[null,[[\\\"btmpl\\\",[\\\"mobile_tier2\\\"]],[\\\"hl\\\",[\\\"vi\\\"]],[\\\"ifkv\\\",[\\\"AXH0vVu6u2yyF98oMhA7cco9EDCaEESUTLQoRd1nvSD7LuDfshhcGt6oi0XoisYTVJ6cnhGnDEr8zQ\\\"]],[\\\"service\\\",[\\\"mail\\\"]],[\\\"flowName\\\",[\\\"GlifWebSignIn\\\"]],[\\\"flowEntry\\\",[\\\"ServiceLogin\\\"]],[\\\"dsh\\\",[\\\"S-1626347375:1744779760841167\\\"]]]],null,\\\"S-1626347375:1744779760841167\\\"]]\",null,\"generic\"]]]&at=AAQ76x5181m83_qyeBhdLRuX5qCB:1744779763421&";

                    response = httpRequest.Post(url, payload, "application/x-www-form-urlencoded;charset=UTF-8");
                    if (response.IsOK)
                    {
                        var responseSTR1 = response.ToString();


                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");
                        httpRequest.AddHeader("", "");



                    }













                }


            }
            catch { }




        }



        private int mail_0 = 0;

        private int i = 0;
        private int x = 0;
        private int c = 0;
        private int k = 0;

        private void Status()
        {
            // BO BM_DIE
            cmb_bo_DIE.Items.Add("ON");
            cmb_bo_DIE.Items.Add("OFF");
            cmb_bo_DIE.SelectedItem = "ON";

            tb_NAME_WHATAPP.SelectedText = "WA HOO";

            //KICK IG BM3
            cmb_kick_BM3_IG.Items.Add("ON");
            cmb_kick_BM3_IG.Items.Add("OFF");
            cmb_kick_BM3_IG.SelectedItem ="OFF";

            //DOC LINK MAIL AO BM IG
            cmb_doc_luon_link_mail_ao.Items.Add("ON");
            cmb_doc_luon_link_mail_ao.Items.Add("OFF");
            cmb_doc_luon_link_mail_ao.SelectedItem = "OFF";


            // TAO TK BM350 BM50
            cmb_TTK_BM50.Items.Add("ON");
            cmb_TTK_BM50.Items.Add("OFF");
            cmb_TTK_BM50.SelectedItem = "ON";

            // TAO TK BM350 BM50
            cmb_TTK_BM350.Items.Add("ON");
            cmb_TTK_BM350.Items.Add("OFF");
            cmb_TTK_BM350.SelectedItem = "ON";



            // REG BM IG
            cmb_REG_BM_IG_API_CHROME.Items.Add("API");
            cmb_REG_BM_IG_API_CHROME.Items.Add("CHROME");
            cmb_REG_BM_IG_API_CHROME.SelectedItem = "CHROME";

            // MAIL SHARE BM IG
            cmb_loai_mail_nhan_bm_ig.Items.Add("Hotmail");
            cmb_loai_mail_nhan_bm_ig.Items.Add("Moakt");
            cmb_loai_mail_nhan_bm_ig.SelectedItem = "Hotmail";
            // share bm t6 350
            cmb_sharebmt6_350.Items.Add("Share_Ve_link_T3");
            cmb_sharebmt6_350.Items.Add("Share_Ve_link_Nhan");
            cmb_sharebmt6_350.SelectedItem = "Share_Ve_link_T3";

            // share bm t6 350
            cmb_sharebmt6_50.Items.Add("Share_Ve_link_T3");
            cmb_sharebmt6_50.Items.Add("Share_Ve_link_Nhan");
            cmb_sharebmt6_50.SelectedItem = "Share_Ve_link_T3";


            // mau bm350
            cmb_color350.Items.Add("Red");
            cmb_color350.Items.Add("Black");
            cmb_color350.Items.Add("White");
            cmb_color350.Items.Add("Gray");
            cmb_color350.Items.Add("DarkGray");
            cmb_color350.Items.Add("LightGray");
            cmb_color350.Items.Add("Blue");
            cmb_color350.Items.Add("Green");
            cmb_color350.Items.Add("Yellow");
            cmb_color350.Items.Add("Orange");
            cmb_color350.Items.Add("Purple");
            cmb_color350.Items.Add("Purple");
            cmb_color350.Items.Add("Brown");
            cmb_color350.Items.Add("Cyan");
            cmb_color350.Items.Add("Magenta");
            cmb_color350.Items.Add("Pink");
            cmb_color350.Items.Add("Gold");
            cmb_color350.Items.Add("Silver");
            cmb_color350.Items.Add("Aqua");
            cmb_color350.Items.Add("Lime");
            cmb_color350.Items.Add("Navy");
            cmb_color350.Items.Add("Maroon");
            cmb_color350.Items.Add("Olive");
            cmb_color350.Items.Add("Teal");
            cmb_color350.SelectedItem = "Green";
            // TAO 5BM IG
            cmb_Tao_5BM_IG.Items.Add("5");
            cmb_Tao_5BM_IG.Items.Add("1");
            cmb_Tao_5BM_IG.SelectedItem = "5";

            // FILE CẦN MỞ

            cmb_FILE_OPEN.Items.Add("AccountIGREG.txt");
            cmb_FILE_OPEN.Items.Add("LINKBM350THU3.txt");
            cmb_FILE_OPEN.Items.Add("LINKBM50THU3.txt");
            cmb_FILE_OPEN.Items.Add("NAMEACCOUNTBM.txt");
            cmb_FILE_OPEN.Items.Add("kytu.txt");
            cmb_FILE_OPEN.Items.Add("kytuchuname.txt");
            cmb_FILE_OPEN.Items.Add("kytuhotmail.txt");
            cmb_FILE_OPEN.Items.Add("BMCLONE.txt");
            cmb_FILE_OPEN.Items.Add("MailMoaktnhanbm50.txt");
            cmb_FILE_OPEN.Items.Add("MailMoaktnhanbm350.txt");
            cmb_FILE_OPEN.Items.Add("Mailnhanbm50.txt");
            cmb_FILE_OPEN.Items.Add("Mailnhanbm350.txt");
            cmb_FILE_OPEN.Items.Add("NAMEWHATAPP.txt");
            //UP WEB
            cmb_UP_WEB.Items.Add("ON");
            cmb_UP_WEB.Items.Add("OFF");
            cmb_UP_WEB.SelectedItem = "OFF";

            tb_TK_NAM.SelectedText = "phamphunam";
            tb_MK_NAM.SelectedText = "anhnam2001";

            tb_ID_UP.SelectedText = "6326";

            // Check ADMIN BM IG
            cmb_CHECK_ADMIN.Items.Add("ON");
            cmb_CHECK_ADMIN.Items.Add("OFF");
            cmb_CHECK_ADMIN.SelectedItem = "ON";


            // ẨN CHROME REG IG
            cmb_AN_CHROME.Items.Add("ON");
            cmb_AN_CHROME.Items.Add("OFF");
            cmb_AN_CHROME.SelectedItem = "ON";

            //TẮT BẬT SÁNG TẠO 

            cmb_TAT_BAT_SANG_TAO.Items.Add("ON");
            cmb_TAT_BAT_SANG_TAO.Items.Add("OFF");
            cmb_TAT_BAT_SANG_TAO.SelectedItem = "ON";


            cmb_User_Agent.Items.Add("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36");
            cmb_User_Agent.SelectedItem = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36";

            cmb_Tao_TK_BM.Items.Add("ON");
            cmb_Tao_TK_BM.Items.Add("OFF");
            cmb_Tao_TK_BM.SelectedItem = "OFF";

            cmb_REG_BM_Clone_API.Items.Add("ON");
            cmb_REG_BM_Clone_API.Items.Add("OFF");
            cmb_REG_BM_Clone_API.SelectedItem = "OFF";

            cmb_CLOSE_SHARE.Items.Add("ON");
            cmb_CLOSE_SHARE.Items.Add("OFF");
            cmb_CLOSE_SHARE.SelectedItem = "ON";


            cmb_ADD_Tra_Truoc.Items.Add("ON");
            cmb_ADD_Tra_Truoc.Items.Add("OFF");
            cmb_ADD_Tra_Truoc.SelectedItem = "OFF";

            // ĐỒNG VĂN
            tx_MK_Dong_Vanox2.SelectedText = "Nghia@19031999";
            tx_TK_Dong_Van.SelectedText = "VoThan1999";
            Tx_Key_API_DongVan.SelectedText = "RQm2tBafVGsmG0TyL3OuMouhp";

            cmb_ID_MAIL.Items.Add("1");
            cmb_ID_MAIL.Items.Add("2");
            cmb_ID_MAIL.Items.Add("3");
            cmb_ID_MAIL.Items.Add("5");
            cmb_ID_MAIL.Items.Add("6");

            cmb_ID_MAIL.Items.Add("52");
            cmb_ID_MAIL.Items.Add("53");
            cmb_ID_MAIL.Items.Add("57");
            cmb_ID_MAIL.Items.Add("58");
            cmb_ID_MAIL.SelectedItem = "1";

            cmb_DONG_VAN.Items.Add("OFF");
            cmb_DONG_VAN.Items.Add("ON");
            cmb_DONG_VAN.SelectedItem = "OFF";

            cmb_Chuc_Nang.Items.Add("SHARE_DONG2_API");
            cmb_Chuc_Nang.Items.Add("REG_CLONE");
            cmb_Chuc_Nang.Items.Add("REG_PHONE");
            cmb_Chuc_Nang.Items.Add("REG_IG");
            cmb_Chuc_Nang.Items.Add("REG_IG_PHONE");
            cmb_Chuc_Nang.Items.Add("MAIL_accessToken");
            cmb_Chuc_Nang.Items.Add("LAY_COOKIE");
            cmb_Chuc_Nang.Items.Add("LOGIN_VIA");
            cmb_Chuc_Nang.SelectedItem = "SHARE_DONG2_API";
            cmb_Chuc_Nang.Items.Add("CHECKIG_LIVE_DIE");
            cmb_Chuc_Nang.Items.Add("REG_BM_IG");
            cmb_Chuc_Nang.Items.Add("REG_IG_API");
            cmb_Chuc_Nang.Items.Add("LOGIN_IG_COOKIE");
            cmb_Chuc_Nang.Items.Add("REG_IG_GMAIL");
            cmb_Chuc_Nang.Items.Add("DOC_LINK_BM");
            cmb_Chuc_Nang.Items.Add("REG_BM_IG_2025");
            cmb_Chuc_Nang.Items.Add("RIP_IG");

            cmb_IP.Items.Add("VN");
            cmb_IP.Items.Add("RANDOM");

            cmb_IP.SelectedItem = "VN";


            cmb_noveri.Items.Add("ON");
            cmb_noveri.Items.Add("OFF");
            cmb_noveri.SelectedItem = "OFF";


            // KeyCaptcha
            cmbKeyCaptcha.Items.Add("f4ff134fd1bd4d7758b9c23b310f0aa9");
            string textkey = "";
            cmbKeyCaptcha.Items.Add($"{textkey}");
            cmbKeyCaptcha.SelectedItem = "f4ff134fd1bd4d7758b9c23b310f0aa9";


            //REG HOTMAIL
            cmb_REGHOTMAIL.Items.Add("ON");
            cmb_REGHOTMAIL.Items.Add("OFF");

            cmb_REGHOTMAIL.SelectedItem = "OFF";

            // NAME
            cmb_VN_US.Items.Add("VN");
            cmb_VN_US.Items.Add("US");
            cmb_VN_US.Items.Add("INDIA");
            cmb_VN_US.Items.Add("THAILAND");
            cmb_VN_US.Items.Add("KOREA");
            cmb_VN_US.Items.Add("CAMPUCHIA");
            cmb_VN_US.SelectedItem = "US";


            //LOGIN IG
            cmb_LOGIN_IG.Items.Add("2FA");
            cmb_LOGIN_IG.Items.Add("Cookie");

            cmb_LOGIN_IG.SelectedItem = "2FA";


            // TIỀN TỆ BM CLONE
            cmb_Tien_Te_TK_BM.Items.Add("USD");
            cmb_Tien_Te_TK_BM.SelectedItem = "USD";
            // TÊN TK BM
            cmb_TEN_TK_BM.Items.Add("N");
            cmb_TEN_TK_BM.SelectedItem = "N";
            // MÚI GIỜ
            cmb_Mui_Gio_TK_BM.Items.Add("132");
            cmb_Mui_Gio_TK_BM.SelectedItem = "132";

            // SHARE PARTNER
            cmb_Share_DOI_TAC.Items.Add("ON");
            cmb_Share_DOI_TAC.Items.Add("OFF");

            cmb_Share_DOI_TAC.SelectedItem = "OFF";

            // SHARE BM CLONE
            cmb_Share_BM_CLone.Items.Add("ON");
            cmb_Share_BM_CLone.Items.Add("OFF");
            cmb_Share_BM_CLone.SelectedItem = "OFF";

            //LOGIN
            cmbVIA.Items.Add("2FA");
            cmbVIA.Items.Add("NO2FA");
            cmbVIA.Items.Add("Cookie");
            cmbVIA.SelectedItem = "Cookie";

            // ON/OFF CHROME
            cmbonoffchrome.Items.Add("ON");
            cmbonoffchrome.Items.Add("OFF");
            cmbonoffchrome.SelectedItem = "OFF";

            // LẤY COOKIE
            cmb_lay_Cookie.Items.Add("ON");
            cmb_lay_Cookie.Items.Add("OFF");
            cmb_lay_Cookie.SelectedItem = "OFF";

            // DỪNG ĐỌC LINK BM NEW

            cmb_DUNG_DOC_LINK_BACKUP.Items.Add("ON");
            cmb_DUNG_DOC_LINK_BACKUP.Items.Add("OFF");
            cmb_DUNG_DOC_LINK_BACKUP.SelectedItem = "ON";
            //LOGIN 
            cmbLogin.Items.Add("API");
            cmbLogin.Items.Add("Chrome");
            cmbLogin.SelectedItem = "Chrome";
            // HOTMAIL_GMAIL PHONE
            cmb_HOTMAIL_GMAIL.Items.Add("HOTMAIL");
            cmb_HOTMAIL_GMAIL.Items.Add("GMAIL");
            cmb_HOTMAIL_GMAIL.SelectedItem = "GMAIL";


            cmb_ON_OFF_2FAIG.Items.Add("ON");
            cmb_ON_OFF_2FAIG.Items.Add("OFF");
            cmb_ON_OFF_2FAIG.SelectedItem = "ON";

            cmb_Admin_BM.Items.Add("ADMIN");
            cmb_Admin_BM.Items.Add("EMPLOYEE");
            cmb_Admin_BM.SelectedItem = "ADMIN";

            cmb_MAIL_SHARE_BM_IG.Items.Add("HOTMAIL");
            cmb_MAIL_SHARE_BM_IG.Items.Add("MAIL_MOAKT");
            cmb_MAIL_SHARE_BM_IG.SelectedItem = "HOTMAIL";


            //
            cmb_DOC_LINK_MAX.Items.Add("ON");
            cmb_DOC_LINK_MAX.Items.Add("OFF");

            cmb_DOC_LINK_MAX.SelectedItem = "ON";

            // LOẠI MAIL 

            cmb_loai_mail.Items.Add("MoaKt.com");
            cmb_loai_mail.Items.Add("Hotmail.com");

            cmb_loai_mail.SelectedItem = "MoaKt.com";

            // QUYỀN BM
            cmb_Admin_BM1.Items.Add("Quyền Admin");
            cmb_Admin_BM1.Items.Add("Quyền Nhân Viên");
            cmb_Admin_BM1.SelectedItem = "";

            // UID_LINK BM ADD Business_Info
            cmbAPI_Auto_selenium_NhanBM.Items.Add("API");
            cmbAPI_Auto_selenium_NhanBM.Items.Add("Auto");

            cmbAPI_Auto_selenium_NhanBM.SelectedItem = "API";

            // KIỂU NHẬN LINK

            cmb_CACH_NHAN_LINK.Items.Add("1_1");
            cmb_CACH_NHAN_LINK.Items.Add("NHAN_NHIEU");

            cmb_CACH_NHAN_LINK.SelectedItem = "NHAN_NHIEU";


            // 2FA IG
            cmb_2FA_IG.Items.Add("API");
            cmb_2FA_IG.Items.Add("Auto_selenium");
            cmb_2FA_IG.SelectedItem = "API";

            // REG_BM
            cmb_REG_BM_IG1.Items.Add("ON");
            cmb_REG_BM_IG1.Items.Add("OFF");
            cmb_REG_BM_IG1.SelectedItem = "ON";

            // TẠO TK BM_IG
            cmb_TTKQC_BM_IG.Items.Add("ON");
            cmb_TTKQC_BM_IG.Items.Add("OFF");
            cmb_TTKQC_BM_IG.SelectedItem = "ON";

            // STOP NHẬN BM IG
            cmb_STOP.Items.Add("ON");
            cmb_STOP.Items.Add("OFF");
            cmb_STOP.SelectedItem = "ON";

            for (int z = 1; z <= 40; z++)
            {
                var textbox = this.Controls.Find($"tb_{z}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                if (textbox != null)
                {
                    textbox.Text = "0";
                }
            }

            for (int k = 1; k <= 40; k++)
            {
                var textbox = this.Controls.Find($"tb_nhan{k}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                if (textbox != null)
                {
                    textbox.Text = "0";
                }
            }


            cmbAPI_Auto_selenium_NhanBM_IG.Items.Add("API");
            cmbAPI_Auto_selenium_NhanBM_IG.Items.Add("Auto");
            cmbAPI_Auto_selenium_NhanBM_IG.Items.Add("API_GET");
            cmbAPI_Auto_selenium_NhanBM_IG.SelectedItem = "API_GET";




            // LOẠI BM NHẬN
            CMB_LOAI_BM_NHAN.Items.Add("BM50");
            CMB_LOAI_BM_NHAN.Items.Add("BM350");
            CMB_LOAI_BM_NHAN.SelectedItem = "BM50";
            //LOẠI LINK
            cmb_LOAI_LINK.Items.Add("https://business.facebook.com/invitation/?token=");
            cmb_LOAI_LINK.Items.Add("https://fb.me/");
            cmb_LOAI_LINK.SelectedItem = "https://fb.me/";


            // CHI SHARE BM350
            cmb_chishare_bm350.Items.Add("ON");
            cmb_chishare_bm350.Items.Add("OFF");
            cmb_chishare_bm350.SelectedItem = "OFF";


            // on off chrome
            cmb_on_off_chrome.Items.Add("ON");
            cmb_on_off_chrome.Items.Add("Off");
            cmb_on_off_chrome.SelectedItem = "ON";

            //BM T6
            cmb_BMT6.Items.Add("ON");
            cmb_BMT6.Items.Add("OFF");
            cmb_BMT6.SelectedItem = "OFF";

            //RIPIG
            cmb_RIPIG.Items.Add("ON");
            cmb_RIPIG.Items.Add("OFF");
            cmb_RIPIG.SelectedItem = "OFF";

            // ĐỌC LINK MAIL MOAKt
            cmb_chi_doc_link_mail_ao.Items.Add("ON");
            cmb_chi_doc_link_mail_ao.Items.Add("OFF");
            cmb_chi_doc_link_mail_ao.SelectedItem = "OFF";


            // TẠO KHOẢN QUẢNG CÁO BM3
            cmb_TTKQCBM3.Items.Add("ON");
            cmb_TTKQCBM3.Items.Add("OFF");
            cmb_TTKQCBM3.SelectedItem = "OFF";

            // CLEAR LINK BM DIE
            cmb_DIE_BM_CLEAR.Items.Add("ON");
            cmb_DIE_BM_CLEAR.Items.Add("OFF");
            cmb_DIE_BM_CLEAR.SelectedItem = "ON";

            // TAO KICK BM 3
            cmb_Tao_1_5.Items.Add("TẠO 1-5");
            cmb_Tao_1_5.Items.Add("FULL5");
            cmb_Tao_1_5.SelectedItem = "FULL5";

            // LOAD BM
            cmb_LOAD_API_CHROME.Items.Add("API");
            cmb_LOAD_API_CHROME.Items.Add("CHROME");
            cmb_LOAD_API_CHROME.SelectedItem = "CHROME";

            // BACK UP BM THEO ID
            cmb_API_CHROME_BACK_UP_BM_THEO_ID.Items.Add("API");
            cmb_API_CHROME_BACK_UP_BM_THEO_ID.Items.Add("CHROME");
            cmb_API_CHROME_BACK_UP_BM_THEO_ID.SelectedItem = "CHROME";
        }

        private bool isStop = false;
        private void btn_RUN_Click(object sender, EventArgs e)
        {
            try
            {
                //test1();
               // Createchromedrive();


                isStop = false;
                var MUA_MAIL = "";
                if (cmb_DONG_VAN.InvokeRequired)
                {
                    cmb_DONG_VAN.Invoke(new Action(() =>
                    {
                        MUA_MAIL = cmb_DONG_VAN.Text;
                    }));
                }
                else
                {
                    MUA_MAIL = cmb_DONG_VAN.Text;
                }
                if (MUA_MAIL == "ON")
                {
                    // Hoặc nếu trong phương thức đồng bộ:
                    var return01 = Mail_Dong_Van().Result;
                    if (return01 == "FAIL")
                    {
                        goto out1;
                    }
                }

                var CHUC_NANG = "";
                if (cmb_Chuc_Nang.InvokeRequired)
                {
                    cmb_Chuc_Nang.Invoke(new Action(() =>
                    {
                        CHUC_NANG = cmb_Chuc_Nang.Text;

                    }));
                }
                else
                {
                    CHUC_NANG = cmb_Chuc_Nang.Text;
                }
                if (CHUC_NANG == "CHECKIG_LIVE_DIE")
                {
                    Task.Run(() =>
                    {

                        CHECKIG_LIVE_DIE();

                    });
                }
                if (CHUC_NANG == "DOC_LINK_BM")
                {
                    Task.Run(() =>
                    {
                        DOC_LINK_DA_LUONG();
                    });
                }
                mail_0 = 0;
                i = 0; x = 0; c = 0; k = 0;
                var iThread = 0;
                int n = 0;
                var maxThread = (int)numericUpDown1.Value;

                var processingThread = new Thread(() =>
                {
                    var Threads = new List<Thread>();
                    while (n < dgv1.Rows.Count)
                    {
                        if (iThread < maxThread)
                        {
                            int rowi = n;
                            Interlocked.Increment(ref iThread);
                            var Thread = new Thread(() =>
                            {
                                DataGridViewRow row = dgv1.Rows[rowi];
                                var username = row.Cells[1].Value.ToString();
                                var pass = row.Cells[2].Value.ToString();
                                var cookie = row.Cells[3].Value.ToString();
                                var mail = row.Cells[4].Value.ToString();
                                var passmail = row.Cells[5].Value.ToString();
                                var mailkhoiphuc = row.Cells[6].Value.ToString();

                                if (CHUC_NANG == "SHARE_DONG2_API")
                                {
                                    SHARE_D2_API(row, username, pass, cookie, mail, passmail, mailkhoiphuc);
                                }
                                if (CHUC_NANG == "REG_CLONE")
                                {
                                    REGCLONE(row, username, pass, cookie, mail, passmail, mailkhoiphuc);
                                }
                                if (CHUC_NANG == "MAIL_accessToken")
                                {
                                    MAIL_accessToken(row, username, pass, cookie, mail, passmail, mailkhoiphuc);
                                }
                                if (CHUC_NANG == "REG_PHONE")
                                {
                                    REG_PHONE(row, username, pass, cookie, mail, passmail, mailkhoiphuc);

                                }
                                if (CHUC_NANG == "LAY_COOKIE")
                                {
                                    Login_LAY_Cookie(row, username, pass, cookie, mail, passmail, mailkhoiphuc);
                                }
                                if (CHUC_NANG == "REG_IG")
                                {

                                    REG_IG(row, username, pass, cookie, mail, passmail, mailkhoiphuc);

                                }
                                if (CHUC_NANG == "REG_IG_PHONE")
                                {
                                    REG_IG_PHONE(row, username, pass, cookie, mail, passmail, mailkhoiphuc);
                                }
                                if (CHUC_NANG == "REG_BM_IG")
                                {
                                    REG_BM_IG(row, username, pass, cookie, mail, passmail, mailkhoiphuc);
                                }
                                if (CHUC_NANG == "LOGIN_VIA")
                                {
                                    MAINFUNCTION(row, username, pass, cookie, mail, passmail, mailkhoiphuc);
                                }
                                if (CHUC_NANG == "REG_IG_API")
                                {
                                    REG_IG_API(row, username, pass, cookie, mail, passmail, mailkhoiphuc);
                                }
                                if (CHUC_NANG == "LOGIN_IG_COOKIE")
                                {

                                    LOGIN_IG_COOKIE1(row, username, pass, cookie, mail, passmail, mailkhoiphuc);
                                }
                                if (CHUC_NANG == "REG_IG_GMAIL")
                                {
                                    REG_IG_GMAIL(row, username, pass, cookie, mail, passmail, mailkhoiphuc);
                                }
                                if (CHUC_NANG == "REG_BM_IG_2025")
                                {
                                    REG_BM_2025_NEW(row, username, pass, cookie, mail, passmail, mailkhoiphuc,"");
                                }
                                if (CHUC_NANG == "RIP_IG")
                                {
                                    RIP_IG1(row, username, pass, cookie, mail, passmail, mailkhoiphuc);
                                }


                                Interlocked.Decrement(ref iThread);

                            });
                            Threads.Add(Thread);
                            Thread.Start();
                            n++;
                            Thread.Sleep(100);
                            if (CHUC_NANG == "REG_CLONE"

                            || CHUC_NANG == "LAY_COOKIE"
                            || CHUC_NANG == "LOGIN_VIA"
                            || CHUC_NANG == "REG_PHONE"
                            || CHUC_NANG == "REG_IG_API"
                            || CHUC_NANG == "LOGIN_IG_COOKIE"
                            || CHUC_NANG == "REG_IG_GMAIL"
                           || CHUC_NANG == "REG_BM_IG_2025"
                            )
                            {
                                Thread.Sleep(3000);
                            }
                            if (CHUC_NANG == "REG_IG")
                            {
                                Thread.Sleep(5000);
                            }
                        }
                        else
                        {
                            Thread.Sleep(100);
                        }
                    }

                });
                processingThread.Start();
            out1:
                Thread.Sleep(1);
            }
            catch { }
         

        }

        private void btn_Stop_Click(object sender, EventArgs e)
        {
            if (btn_Stop.Text == "STOP")
            {
                isStop = true;
                btn_Stop.Text = "CONTINUE";
            }
            else
            {
                btn_Stop.Text = "STOP";
                isStop = false;
            }

        }

        private void loginVIAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv1.Rows)
            {
                var select = row.Cells["cSelect"].Value;

                if (select != null && (bool)select)
                {

                    i = 0; x = 0; c = 0; k = 0;

                    isStop = false;
                    var username = row.Cells[1].Value.ToString();
                    var pass = row.Cells[2].Value.ToString();
                    string chuc_nang = "";
                    if (cmb_Chuc_Nang.InvokeRequired)
                    {
                        cmb_Chuc_Nang.Invoke(new Action(() =>
                        {
                            chuc_nang = cmb_Chuc_Nang.Text;
                        }));
                    }
                    else
                    {
                        chuc_nang = cmb_Chuc_Nang.Text;
                    }
                    string status = "";
                    if (cmbVIA.InvokeRequired)
                    {
                        cmbVIA.Invoke(new Action(() =>
                        {
                            status = cmbVIA.Text;
                        }));
                    }
                    else
                    {
                        status = cmbVIA.Text;
                    }

                    Task.Run(() =>
                    {
                        if (status == "2FA")
                        {
                            var c2FA = row.Cells[3].Value.ToString();
                            var mail = row.Cells[4].Value.ToString();
                            var passmail = row.Cells[5].Value.ToString();
                            var mailkhoiphuc = row.Cells[6].Value.ToString();

                            if (chuc_nang == "LOGIN_VIA")
                            {
                                MAINFUNCTION(row, username, pass, c2FA, mail, passmail, mailkhoiphuc);
                            }
                 

                        }
                        if (status == "NO2FA")
                        {
                            var mail = row.Cells[4].Value.ToString();
                            var passmail = row.Cells[5].Value.ToString();
                            var mailkhoiphuc = row.Cells[6].Value.ToString();

                            if (chuc_nang == "LOGIN_VIA")
                            {
                                MAINFUNCTION(row, username, pass, "", mail, passmail, mailkhoiphuc);
                            }
                    
                        }
                        if (status == "Cookie")
                        {
                            var cookie = row.Cells[3].Value.ToString();
                            var mail = row.Cells[4].Value.ToString();
                            var passmail = row.Cells[5].Value.ToString();
                            var mailkhoiphuc = row.Cells[6].Value.ToString();
                            if (chuc_nang == "LOGIN_VIA")
                            {
                                MAINFUNCTION(row, username, pass, cookie, mail, passmail, mailkhoiphuc);
                            }
               
                        }
                    });





                }
            }


        }


        private void test1()
        {
            try
            {
                List<string> ID_link = new List<string>();
                var LINK1 = "1345967360460870|https://business.facebook.com/invitation/?token=Afn89SA3YIQB8I0zid-ezGUfqsRT-2Ma0t4iheozEhsvoUDvNiTaL4fmmDERaZaBuONVfdJnAYMSu_whK1_rsgdLuofqug6RMvnoRdBEGhTrjfNm5ifUYjQ7Ul39ehtNROOqKNXHVmJ3Yi8eKFP1s1bK6AOV8Jz2VHHlQv4qDyaQbhfYrJikc45_ZbKpINjZGL1VmDM3IQSxDSnAOEviP8Ro48L8ZiWIfZ-6KI5XE0aLHbFezrlyzIvM2LwZ5zBFWoqbFl1Yt1PRXZI7OOM-i5eoFYC07ccPGv8";

                ID_link.Add(LINK1);
                var link = "";
                foreach (var id_link in ID_link)
                {
                    if (string.IsNullOrEmpty(id_link))
                    {
                        goto out4;

                    }
                    var IDBM = "";
                    try
                    {
                        IDBM = id_link.Split('|')[0].ToString();
                        link = id_link.Split('|')[1].ToString();
                    }
                    catch { }
                }
            out4:
                Thread.Sleep(1);
            }
            catch { }




        }

        // Sửa đổi lstDataChrome để lưu trữ AccountData
        private Dictionary<ChromeDriver, AccountData> lstDataChrome = new Dictionary<ChromeDriver, AccountData>();
        private void button2_Click(object sender, EventArgs e)
        {

            var proxy = ("pama02.quat.uk", 51051, "LhNXw4", "7aV0Xf");

            string zipPath = CreateProxyExtension(proxy.Item1, proxy.Item2, proxy.Item3, proxy.Item4);
            var chromedriver = Createchromedrive_proxy(zipPath, proxy.Item1, proxy.Item2);

            chromedriver.Navigate().GoToUrl("https://whoer.net/");

        }

        //ADD BUSINESS_INFO
        private class AccountData
        {
            public DataGridViewRow Row { get; set; }
            public string User { get; set; }

        }


        private Dictionary<HttpRequest, AccountDatahttp> lstDatahttprequest_via = new Dictionary<HttpRequest, AccountDatahttp>();

        private class AccountDatahttp
        {
            public DataGridViewRow Row { get; set; }
            public string User { get; set; }

        }
        private readonly object linkLock = new object();  // Lock object để đồng bộ hóa các thao tác trên Link
        private void DOC_LINK_DA_LUONG()
        {
            try
            {
            doc_link:
                List<string> Link = new List<string>();
                List<string> Mail = new List<string>();
                List<string> Link1 = new List<string>();

                var max_doc_link = "";
                if (cmb_DOC_LINK_MAX.InvokeRequired)
                {
                    cmb_DOC_LINK_MAX.Invoke(new Action(() =>
                    {
                        max_doc_link = cmb_DOC_LINK_MAX.Text;
                    }));

                }
                else
                {
                    max_doc_link = cmb_DOC_LINK_MAX.Text;
                }

         

                // Lấy dữ liệu từ rich_MAIL_DOC_LINK
                if (rtb_hotmail.InvokeRequired)
                {
                    rtb_hotmail.Invoke(new Action(() =>
                    {
                        Mail = rtb_hotmail.Lines.ToList();
                    }));
                }
                else
                {
                    Mail = rtb_hotmail.Lines.ToList();
                }

                // Khởi tạo danh sách các Task để xử lý bất đồng bộ
                List<Task> tasks = new List<Task>();

                foreach (var mail_n in Mail)
                {
                    var mail_share1 = mail_n.Split('|')[0].ToString();
                    var pass_mail_1 = mail_n.Split('|')[1].ToString();
                    var mailkhoiphuc = mail_n.Split('|')[2].ToString();
                    // Tạo task xử lý cho mỗi email
                    var task = new Task(() =>
                    {
                        try
                        {
                            var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_BM_IG(mail_share1, pass_mail_1, mailkhoiphuc);
                            //if (string.IsNullOrEmpty(accessToken))
                            //{
                            //    Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                            //    (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail_share1, pass_mail_1);
                            //}
                            if (string.IsNullOrEmpty(accessToken))
                            {
                                Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                                (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_BM_IG(mail_share1, pass_mail_1,mailkhoiphuc);
                            }
                            if (string.IsNullOrEmpty(accessToken))
                            {
                                Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                                (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_BM_IG(mail_share1, pass_mail_1, mailkhoiphuc);
                            }

                            // Lấy Link từ tài khoản email
                            Link1 = GetLinkBm_IG(mail_share1, pass_mail_1, accessToken, refreshToken);
                            // Sử dụng lock để thêm liên kết vào danh sách Link một cách đồng bộ
                            lock (linkLock)
                            {
                                Link.AddRange(Link1);
                            }

                        }
                        catch (Exception ex)
                        {

                        }
                    });

                    tasks.Add(task);
                    task.Start();
                }

                // Đợi tất cả các Task hoàn thành
                Task.WhenAll(tasks).Wait();

                // Làm sạch rtblink_doc và thêm các liên kết vào đó
                if (max_doc_link == "OFF")
                {

                    if (rtb_Link_BM_IG.InvokeRequired)
                    {
                        rtb_Link_BM_IG.Invoke(new Action(() =>
                        {
                            rtb_Link_BM_IG.Clear();
                        }));
                    }
                    else
                    {
                        rtb_Link_BM_IG.Clear();
                    }



                }

                // Cập nhật liên kết vào rtblink_doc
                foreach (var link in Link)
                {
                    try
                    {
                        var loaiBM = link.Split('|')[2];

                        var linkBM = link.Split('|')[0] + "|" + link.Split('|')[1];
                        if (loaiBM== "BM350III")
                        {

                            if (rtb_Link_BM350_IG.InvokeRequired)
                            {
                                rtb_Link_BM350_IG.Invoke(new Action(() =>
                                {
                                    rtb_Link_BM350_IG.AppendText(linkBM +"| BM THỨ 3"+ Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_Link_BM350_IG.AppendText(linkBM + "| BM THỨ 3" + Environment.NewLine);
                            }
                            StreamWriter sw = new StreamWriter("LINKBM350THU3.txt", true);
                            sw.WriteLine($"{linkBM}|{DateTime.Now}");
                            sw.Close();

                        }
                        if (loaiBM == "BM350V")
                        {
                            if (rtb_10_link_bm350.InvokeRequired)
                            {
                                rtb_10_link_bm350.Invoke(new Action(() =>
                                {
                                    rtb_10_link_bm350.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_10_link_bm350.AppendText(linkBM + Environment.NewLine);
                            }

                            StreamWriter sw = new StreamWriter("LINKBM35010LINK.txt", true);
                            sw.WriteLine($"{linkBM}|{DateTime.Now}");
                            sw.Close();
                        }
                        if (loaiBM == "BM50X")
                        {
                            if (rtb_10_link_bm50.InvokeRequired)
                            {
                                rtb_10_link_bm50.Invoke(new Action(() =>
                                {
                                    rtb_10_link_bm50.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_10_link_bm50.AppendText(linkBM + Environment.NewLine);
                            }

                            StreamWriter sw = new StreamWriter("LINKBM5010LINK.txt", true);
                            sw.WriteLine($"{linkBM}|{DateTime.Now}");
                            sw.Close();
                        }
                        if (loaiBM == "BMIII")
                        {
                            if (rtb_BMIII.InvokeRequired)
                            {
                                rtb_BMIII.Invoke(new Action(() =>
                                {
                                    rtb_BMIII.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_BMIII.AppendText(linkBM + Environment.NewLine);
                            }
                            StreamWriter sw = new StreamWriter("LINKBM50THU3.txt", true);
                            sw.WriteLine($"{linkBM}|{DateTime.Now}");
                            sw.Close();
                        }
                        if (loaiBM == "BM350")
                        {
                            if (rtb_Link_BM350_IG.InvokeRequired)
                            {
                                rtb_Link_BM350_IG.Invoke(new Action(() =>
                                {
                                    rtb_Link_BM350_IG.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_Link_BM350_IG.AppendText(linkBM + Environment.NewLine);
                            }
                        }
                        if (loaiBM == "BM50")
                        {

                            if (rtb_Link_BM_IG.InvokeRequired)
                            {
                                rtb_Link_BM_IG.Invoke(new Action(() =>
                                {
                                    rtb_Link_BM_IG.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_Link_BM_IG.AppendText(linkBM + Environment.NewLine);
                            }
                        }
                    }
                    catch { }
             
                }


                if (max_doc_link == "ON")
                {
                    Thread.Sleep(10000);
                    goto doc_link;
                 

                }
            }
            catch (Exception e)
            {

            }
        }

      

        private void MAINFUNCTION(DataGridViewRow row, string username, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {

          

                // LOGIN 
                var LOGIN = "";
                if (cmbLogin.InvokeRequired)
                {
                    cmbLogin.Invoke(new Action(() =>
                    {
                        LOGIN = cmbLogin.Text;
                    }));
                }
                //VIA
                var VIA = "";
                if (cmbVIA.InvokeRequired)
                {
                    cmbVIA.Invoke(new Action(() =>
                    {
                        VIA = cmbVIA.Text;
                    }));
                }

                if (LOGIN == "Chrome")
                {
                    Thread.Sleep(1000);
                    var chromedriver = Createchromedrive();
                    var LAY_COOKIE = "";

                    if (cmb_lay_Cookie.InvokeRequired)
                    {
                        cmb_lay_Cookie.Invoke(new Action(() =>
                        {
                            LAY_COOKIE = cmb_lay_Cookie.Text;
                        }));
                    }
                    else
                    {
                        LAY_COOKIE = cmb_lay_Cookie.Text;
                    }


                    if (VIA == "NO2FA")
                    {
                        var return1 = LoginVIANO2FA_Chrome(chromedriver, row, username, password, mail, passmail, mailkhoiphuc);
                        if (return1 == "Login Fail" || return1 == "282")
                        {
                            goto out1;
                        }
                        if (return1 == "Login OK")
                        {
                            if (LAY_COOKIE == "ON")
                            {
                                Cookie_VIA(chromedriver, row, username, password, "", mail, passmail, mailkhoiphuc);
                            }

                        }
                    }
                    if (VIA == "2FA")
                    {
                        var return3 = Login2FA(chromedriver, row, username, password, c2FAvsCookie, mail, passmail, mailkhoiphuc);
                        if (return3 == "login error")
                        {
                            goto out1;
                        }
                        if (return3 == "Login OK")
                        {
                            if (LAY_COOKIE == "ON")
                            {
                                Cookie_VIA(chromedriver, row, username, password, c2FAvsCookie, mail, passmail, mailkhoiphuc);
                            }
                        }
                    }
                    if (VIA == "Cookie")
                    {
                        var return2 = LOGIN_COOKIE(chromedriver, row, username, password, c2FAvsCookie, mail, passmail, mailkhoiphuc);
                        if (return2 == "FAIL")
                        {
                            goto out1;
                        }
                        if (return2 == "DONE")
                        {
                            if (LAY_COOKIE == "ON")
                            {
                                Cookie_VIA(chromedriver, row, username, password, "", mail, passmail, mailkhoiphuc);
                            }
                        }
                    }

                out1:
                    lstDataChrome.Add(chromedriver, new AccountData { Row = row, User = username });
                    var on_off_chrome = "";
                    if (cmbonoffchrome.InvokeRequired)
                    {
                        cmbonoffchrome.Invoke(new Action(() =>
                        {
                            on_off_chrome = cmbonoffchrome.Text;

                        }));
                    }
                    if (on_off_chrome == "ON")
                    {
                        chromedriver.Close();
                        chromedriver.Quit();
                    }
                    Thread.Sleep(100);

                }
                else
                {

                    try
                    {

                        var url = "";
                        HttpRequest httpRequest = new HttpRequest();
                        httpRequest.Cookies = new CookieDictionary();
                        httpRequest.KeepAlive = true;
                        httpRequest.AllowAutoRedirect = true;
                        httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                        //httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36";
                        var cookieRaw = c2FAvsCookie.Split(';');
                        foreach (var cookie in cookieRaw)
                        {
                            try
                            {
                                var key = cookie.Split('=')[0].ToString().Trim();
                                var value = cookie.Split('=')[1].ToString().Trim();
                                httpRequest.Cookies.Add(key, value);

                            }
                            catch { }
                        }
                        httpRequest["authority"] = "www.facebook.com";
                        httpRequest["accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                        httpRequest["sec-fetch-dest"] = "document";
                        httpRequest["sec-fetch-mode"] = "navigate";
                        httpRequest["sec-fetch-site"] = "same-origin";
                        httpRequest["sec-fetch-user"] = "?1";
                        httpRequest["priority"] = "u=0, i";
                        httpRequest["sec-ch-ua"] = "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"";
                        httpRequest["sec-fetch-site"] = "none";
                        httpRequest["sec-ch-ua-mobile"] = "?0";
                        httpRequest["sec-ch-ua-platform"] = "1";
                        httpRequest["upgrade-insecure-requests"] = "\"Windows\"";
                        httpRequest["cache-control"] = "max-age=0";
                        httpRequest["upgrade-insecure-requests"] = "1";
                        httpRequest["Accept-Language"] = "en-US,en;q=0.9";

                        var response = httpRequest.Get("https://www.facebook.com/");
                        if (response.IsOK)
                        {

                            var responseStr = response.ToString();
                            url = httpRequest.Address.ToString();
                            if (url.Contains("https://www.facebook.com/checkpoint/828281030927956/?next=https%3A%2F%2Fwww.facebook.com%2F#"))
                            {
                                row.Cells["cStatus2"].Value = "956";
                                goto next1;



                            }

                            var responseStr9_1 = "";
                            var responseStr9_2 = "";
                            if (url.Contains("https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice"))
                            {
                                //row.Cells["cStatus"].Value = "Cho phép sử dụng cookie.....";
                                httpRequest.AddHeader("authority", "www.facebook.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                httpRequest.AddHeader("x-asbd-id", "129477");
                                httpRequest.AddHeader("x-fb-friendly-name", "useSaharaCometConsentPostPromptOutcomeServerMutation");
                                var fb_dtsg1 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                var jazoest1 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                var lsd1 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                var experience_id = Regex.Match(responseStr, "experience_id\":\"(.*?)\"").Groups[1].Value.ToString();
                                var id = experience_id;
                                var payload_1 = $"av={username}&__user={username}&__a=1&__req=6&__hs=20092.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019149319&__s=::07m5uu&__hsi=7456086034100500556&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0lW4o0B-q1ew2io2awt81s8hwnU6a3a1YwBgao6C0Mo2swlo5q4U2zxe2GewbS361qw8Xwn82Lw5XwSyES1Tw8W0Lo6-1CG0hq1Iwqo5p0qZ6goK1sAwHwtU5K2G0F8iw&__csr=hXOcxd92rFx6iFFWAGbryoC8gzyQWzFpbBgDDGui9y-EcoG48K2W6Qii3mdwdm3i0b5K0qK0bJw02H-E0lQw&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019149319&__spin_b=trunk&__spin_t=1736005310&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useSaharaCometConsentPostPromptOutcomeServerMutation&variables={{\"input\":{{\"client_mutation_id\":\"2\",\"actor_id\":\"{username}\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"__aectx__\\\":\\\"{{\\\\\\\"id\\\\\\\":\\\\\\\"{id}\\\\\\\",\\\\\\\"flows\\\\\\\":[{{\\\\\\\"id\\\\\\\":\\\\\\\"user_cookie_choice_v2\\\\\\\",\\\\\\\"prompts\\\\\\\":[{{\\\\\\\"id\\\\\\\":\\\\\\\"user_cookie_choice_granular_control\\\\\\\"}}]}}]}}\\\"}}\",\"flow\":\"USER_COOKIE_CHOICE_V2\",\"inputs_json\":\"{{\\\"other_company_trackers_on_foa\\\":\\\"\\\",\\\"fb_trackers_on_other_companies\\\":\\\"\\\",\\\"advertising\\\":\\\"\\\",\\\"analytics\\\":\\\"\\\",\\\"content_and_media\\\":\\\"\\\",\\\"productivity\\\":\\\"\\\",\\\"ADOBE_MARKETO\\\":\\\"\\\",\\\"GOOGLE_ADS\\\":\\\"\\\",\\\"KOCHAVA\\\":\\\"\\\",\\\"LINKEDIN_MARKETING\\\":\\\"\\\",\\\"X_ADS\\\":\\\"\\\",\\\"GOOGLE_ANALYTICS\\\":\\\"\\\",\\\"MEDALLIA\\\":\\\"\\\",\\\"AMAZON_AWS_CONTENT\\\":\\\"\\\",\\\"BLINGS_IO\\\":\\\"\\\",\\\"CLOUDFRONT\\\":\\\"\\\",\\\"GIPHY\\\":\\\"\\\",\\\"GOOGLE_MEDIA\\\":\\\"\\\",\\\"NEW_YORK_TIMES\\\":\\\"\\\",\\\"SOUNDCLOUD\\\":\\\"\\\",\\\"SPOTIFY\\\":\\\"\\\",\\\"SPREAKER\\\":\\\"\\\",\\\"TED\\\":\\\"\\\",\\\"TENOR\\\":\\\"\\\",\\\"TIKTOK\\\":\\\"\\\",\\\"VIMEO\\\":\\\"\\\",\\\"X\\\":\\\"\\\",\\\"YOUTUBE\\\":\\\"\\\",\\\"CHILI_PIPER\\\":\\\"\\\",\\\"GOOGLE\\\":\\\"\\\",\\\"JIO\\\":\\\"\\\",\\\"MAPBOX\\\":\\\"\\\",\\\"MICROSOFT\\\":\\\"\\\",\\\"card_index_0_learnt_more\\\":\\\"\\\",\\\"card_index_1_learnt_more\\\":\\\"\\\",\\\"card_index_2_learnt_more\\\":\\\"\\\",\\\"card_index_3_learnt_more\\\":\\\"\\\"}}\",\"outcome\":\"APPROVED\",\"outcome_data_json\":\"{{}}\",\"prompt\":\"USER_COOKIE_CHOICE_GRANULAR_CONTROL\",\"runtime\":\"SAHARA\",\"source\":\"pft_user_cookie_choice\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=8906652576046836";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_1, "application/x-www-form-urlencoded");
                                if (response.IsOK)
                                {

                                    var responseStr8 = response.ToString();
                                    url = httpRequest.Address.ToString();

                                    httpRequest.AddHeader("authority", "www.facebook.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=4, i");
                                    httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "no-cors");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    fb_dtsg1 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                    jazoest1 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                    lsd1 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                    var payload1 = $"__a=1&__ccg=MODERATE&__comet_req=1&__hs=20093.HYP%3Acomet_plat_default_pkg.2.1.0.2.1&__hsi=7456292581936758885&__req=7&__rev=1019152068&__s=%3A%3A55p7kf&__spin_b=trunk&__spin_r=1019152068&__spin_t=1736053401&__user={username}&dpr=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&ph=C3";
                                    var url_post = $"https://www.facebook.com/ajax/bnzai?__a=1&__ccg=MODERATE&__comet_req=1&__hs=20093.HYP%3Acomet_plat_default_pkg.2.1.0.2.1&__hsi=7456292581936758885&__req=7&__rev=1019152068&__s=%3A%3A55p7kf&__spin_b=trunk&__spin_r=1019152068&__spin_t=1736053401&__user={username}&dpr=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&ph=C3";
                                    response = httpRequest.Post(url_post, payload1, "multipart/form-data; boundary=----WebKitFormBoundaryzyTDgA13uKCw1uhv");
                                    responseStr8 = response.ToString();
                                    url = httpRequest.Address.ToString();



                                    var cookie = httpRequest.Cookies.ToString();
                                    httpRequest.AddHeader("authority", "www.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("dpr", "0.800000011920929");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "1305");
                                    response = httpRequest.Get("https://www.facebook.com/");
                                    if (response.IsOK)
                                    {
                                        responseStr9_1 = response.ToString();
                                        url = httpRequest.Address.ToString();
                                        if (url == "https://www.facebook.com/")
                                        {
                                            row.Cells["cStatus2"].Value = "Cho phép sử dụng cookie DONE";
                                        }
                                    }
                                }
                            }
                            if (url.Contains("https://www.facebook.com/privacy/consent/pipa/?params%5Bpft_surface%5D=facebook_comet&params%5Bis_new_user_blocking_flow%5D=true&params%5Bgcl_experience_id%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&params%5Bpft_session_key%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&source=pipa_blocking_flow"))
                            {
                                row.Cells["cStatus2"].Value = "Cho phép sử dụng cookie 2.....";

                                httpRequest.AddHeader("authority", "www.facebook.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/pipa/?params%5Bpft_surface%5D=facebook_comet&params%5Bis_new_user_blocking_flow%5D=true&params%5Bgcl_experience_id%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&params%5Bpft_session_key%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&source=pipa_blocking_flow");
                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                httpRequest.AddHeader("x-asbd-id", "129477");
                                httpRequest.AddHeader("x-fb-friendly-name", "useConsentLoggingPlatformGQLEndpointMutation");
                                var fb_dtsg1 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                var jazoest1 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                var lsd1 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                var experience_id = Regex.Match(responseStr, "experience_id\":\"(.*?)\"").Groups[1].Value.ToString();
                                var id = experience_id;
                                var gcl_experience_id = Regex.Match(responseStr, "gcl_experience_id\\\\\":\\\\\"(.*?)\\\\\"").Groups[1].Value.ToString();
                                var pft_session_key = Regex.Match(responseStr, "pft_session_key\\\\\":\\\\\"(.*?)\\\\\"").Groups[1].Value.ToString();
                                var payload_c1 = $"av={username}&__user={username}&__a=1&__req=9&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{username}\",\"event\":\"consent_interactions_toggle_on\",\"event_data\":\"{{\\\"name\\\":\\\"personal_data_toggle\\\",\\\"value\\\":\\\"true\\\"}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_main\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c1, "application/x-www-form-urlencoded");
                                var payload_c2 = $"av={username}&__user={username}&__a=1&__req=a&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"4\",\"actor_id\":\"{username}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_data_json\":\"{{\\\"name\\\":\\\"personal_data_toggle\\\",\\\"type\\\":\\\"toggle\\\"}}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"ON\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INPUT\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c2, "application/x-www-form-urlencoded");
                                var payload_c3 = $"av={username}&__user={username}&__a=1&__req=b&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"{username}\",\"event\":\"consent_interactions_toggle_on\",\"event_data\":\"{{\\\"name\\\":\\\"data_shared_3pd_toggle\\\",\\\"value\\\":\\\"true\\\"}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_main\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c3, "application/x-www-form-urlencoded");
                                var payload_c4 = $"av={username}&__user={username}&__a=1&__req=c&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"6\",\"actor_id\":\"{username}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_data_json\":\"{{\\\"name\\\":\\\"data_shared_3pd_toggle\\\",\\\"type\\\":\\\"toggle\\\"}}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"ON\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INPUT\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c4, "application/x-www-form-urlencoded");
                                var payload_c5 = $"av={username}&__user={username}&__a=1&__req=d&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"7\",\"actor_id\":\"{username}\",\"event\":\"consent_interactions_toggle_on\",\"event_data\":\"{{\\\"name\\\":\\\"cross_border_data_transfer_toggle\\\",\\\"value\\\":\\\"true\\\"}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_main\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c5, "application/x-www-form-urlencoded");
                                var payload_c6 = $"av={username}&__user={username}&__a=1&__req=e&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"8\",\"actor_id\":\"{username}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_data_json\":\"{{\\\"name\\\":\\\"cross_border_data_transfer_toggle\\\",\\\"type\\\":\\\"toggle\\\"}}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"ON\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INPUT\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c6, "application/x-www-form-urlencoded");
                                var payload_c7 = $"av={username}&__user={username}&__a=1&__req=f&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"9\",\"actor_id\":\"{username}\",\"event\":\"consent_interactions_toggle_on\",\"event_data\":\"{{\\\"name\\\":\\\"location_info_toggle\\\",\\\"value\\\":\\\"true\\\"}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_main\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c7, "application/x-www-form-urlencoded");
                                var payload_c8 = $"av={username}&__user={username}&__a=1&__req=g&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"10\",\"actor_id\":\"{username}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_data_json\":\"{{\\\"name\\\":\\\"location_info_toggle\\\",\\\"type\\\":\\\"toggle\\\"}}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"ON\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INPUT\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c8, "application/x-www-form-urlencoded");
                                var payload_c9 = $"av={username}&__user={username}&__a=1&__req=h&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptFormValidationMutation&variables={{\"input\":{{\"client_mutation_id\":\"11\",\"actor_id\":\"{username}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INTRODUCTION\",\"outcome\":\"APPROVED\",\"server_on_complete_params_darray_json\":\"{{\\\"personal_data_toggle\\\":\\\"true\\\",\\\"data_shared_3pd_toggle\\\":\\\"true\\\",\\\"cross_border_data_transfer_toggle\\\":\\\"true\\\",\\\"location_info_toggle\\\":\\\"true\\\"}}\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=9407571762647749";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c9, "application/x-www-form-urlencoded");
                                var payload_c10 = $"av={username}&__user={username}&__a=1&__req=i&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptOutcomeBatchedMutation&variables={{\"input\":{{\"client_mutation_id\":\"12\",\"actor_id\":\"{username}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INTRODUCTION\",\"outcome\":\"APPROVED\",\"server_on_complete_params_darray_json\":\"{{\\\"personal_data_toggle\\\":\\\"true\\\",\\\"data_shared_3pd_toggle\\\":\\\"true\\\",\\\"cross_border_data_transfer_toggle\\\":\\\"true\\\",\\\"location_info_toggle\\\":\\\"true\\\"}}\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6100374023362838";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c10, "application/x-www-form-urlencoded");
                                var payload_c11 = $"av={username}&__user={username}&__a=1&__req=j&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}7&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"13\",\"actor_id\":\"{username}\",\"event\":\"consent_interactions_prompt_impression\",\"event_data\":\"{{\\\"device_permission\\\":null,\\\"device_permissions_result\\\":null,\\\"privacy_control_id\\\":null,\\\"prompt_type\\\":8}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_outro\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c11, "application/x-www-form-urlencoded");
                                var payload_c12 = $"av={username}&__user={username}&__a=1&__req=k&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"14\",\"actor_id\":\"{username}\",\"config_enum\":\"PIPA_OUTRO\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"IMPRESSION\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"CONCLUSION\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c12, "application/x-www-form-urlencoded");
                                var payload_c13 = $"av={username}&__user={username}&__a=1&__req=l&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptOutcomeBatchedMutation&variables={{\"input\":{{\"client_mutation_id\":\"15\",\"actor_id\":\"{username}\",\"config_enum\":\"PIPA_OUTRO\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"CONCLUSION\",\"outcome\":\"APPROVED\",\"server_on_complete_params_darray_json\":\"{{}}\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6100374023362838";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c13, "application/x-www-form-urlencoded");
                                var payload_c14 = $"av={username}&__user={username}&__a=1&__req=m&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptEndOfFlowBatchedMutation&variables={{\"input\":{{\"client_mutation_id\":\"16\",\"actor_id\":\"{username}\",\"config_enum\":\"PIPA_OUTRO\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"CONCLUSION\",\"outcome\":\"APPROVED\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6494107973937368";
                                response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c14, "application/x-www-form-urlencoded");

                                httpRequest.AddHeader("authority", "www.facebook.com");
                                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("dpr", "0.800000011920929");
                                httpRequest.AddHeader("priority", "u=0, i");
                                httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/pipa/?params%5Bpft_surface%5D=facebook_comet&params%5Bis_new_user_blocking_flow%5D=true&params%5Bgcl_experience_id%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&params%5Bpft_session_key%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&source=pipa_blocking_flow");
                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                httpRequest.AddHeader("sec-fetch-dest", "document");
                                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                httpRequest.AddHeader("sec-fetch-user", "?1");
                                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                httpRequest.AddHeader("viewport-width", "1420");
                                response = httpRequest.Get("https://www.facebook.com/");
                                responseStr9_2 = response.ToString();
                                url = httpRequest.Address.ToString();


                            }

                            if (responseStr.Contains("ACCOUNT_ID") || responseStr9_1.Contains("ACCOUNT_ID") || responseStr9_2.Contains("ACCOUNT_ID"))
                            {
                                var responseStr9 = "";
                                var responseStr1 = "";
                                var ACCOUNT_ID = Regex.Match(responseStr, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                                var ACCOUNT_ID3 = Regex.Match(responseStr9_1, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                                var ACCOUNT_ID_2 = Regex.Match(responseStr9_2, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                                var ACCOUNT_ID1 = Regex.Match(responseStr1, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                                if (ACCOUNT_ID == "0" || ACCOUNT_ID3 == "0" || ACCOUNT_ID_2 == "0")
                                {
                                    row.Cells["cStatus"].Value = "Login Cookie FAIL....";

                                    goto next1;
                                }
                                var ACCOUNT_ID2 = Regex.Match(responseStr9, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();

                                ACCOUNT_ID3 = Regex.Match(responseStr9_1, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                                ACCOUNT_ID_2 = Regex.Match(responseStr9_2, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();

                                if (ACCOUNT_ID == username.Trim() || ACCOUNT_ID1 == username.Trim() || ACCOUNT_ID3 == username.Trim() || ACCOUNT_ID_2 == username.Trim())
                                {
                                    url = httpRequest.Address.ToString();
                                    if (url.Contains("282"))
                                    {
                                        row.Cells["cStatus"].Value = "282";

                                        goto next1;
                                    }

                                    row.Cells["cStatus"].Value = "Login Done";
                                    lstDatahttprequest_via.Add(httpRequest, new AccountDatahttp { Row = row, User = username });


                                }
                                else
                                {
                                    StreamWriter sw1 = new StreamWriter("URL.txt", true);
                                    sw1.WriteLine(url);
                                    sw1.Close();
                                    row.Cells["cStatus"].Value = "Login FAIL!";
                                }
                            }
                        }

                    next1:
                        Thread.Sleep(1000);
                    }
                    catch { }

                }
            }
            catch { }
        }

        // RIP IG
        private void RIP_IG1(DataGridViewRow row, string username, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {
                var chromedriver = Createchromedrive();
                var C2FA = "";
                if (!mail.Contains("@"))
                {
                    C2FA = mail;
                }
       


                chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                row.Cells["cStatus"].Value = "Login.....";
                var cookieRaw = c2FAvsCookie.Split(';');
                foreach (var cookieItem in cookieRaw)
                {
                    try
                    {
                        var cookieJar = cookieItem.Split('=');

                        Cookie cookieChrome = new Cookie(cookieJar[0].Trim(), cookieJar[1].Trim(), "instagram.com", "/", DateTime.Now.AddDays(10));
                        chromedriver.Manage().Cookies.AddCookie(cookieChrome);
                    }
                    catch { }
                }
                chromedriver.Navigate().Refresh();
                chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                Thread.Sleep(5000);
                var url = chromedriver.Url;
                if (url.Contains("https://www.instagram.com/challenge/"))
                {

                    var dissmiss = chromedriver.FindElements(By.XPath("//div[@aria-label='Dismiss']"));
                    if (dissmiss.Count > 0)
                    {
                        dissmiss.LastOrDefault().Click();
                        Thread.Sleep(5000);
                    }
                }
                if (chromedriver.Url.Contains("https://www.instagram.com/accounts/suspended"))
                {
                    row.Cells["cStatus"].Value = "282";
                    chromedriver.Close();
                    chromedriver.Quit();
                    goto next;
                }
                chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                Thread.Sleep(5000);
                var uid_ig = Regex.Match(chromedriver.PageSource, "NON_FACEBOOK_USER_ID\":\"(.*?)\"").Groups[1].Value;
                if (uid_ig != "0")
                {
                    if (chromedriver.Url.Contains("https://www.instagram.com/accounts/suspended"))
                    {
                        row.Cells["cStatus"].Value = "282";
                        chromedriver.Close();
                        chromedriver.Quit();
                        goto next;
                    }
                    row.Cells["cStatus"].Value = "LOGIN DONE";

                    RIP(chromedriver,row, username, password, c2FAvsCookie, mail, passmail, mailkhoiphuc);


                }
                else
                {
                    row.Cells["cStatus"].Value = "LOGIN FAIL!";


                    chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                    row.Cells["cStatus"].Value = "Login.....";
                    row.Cells["cStatus"].Value = "LOGIN UID PASS";

                    var enter_user = chromedriver.FindElements(By.XPath("//input[@name='username']"));
                    if (enter_user.Count > 0)
                    {
                        enter_user.LastOrDefault().SendKeys(username);
                        Thread.Sleep(1000);

                    }

                    var enter_password = chromedriver.FindElements(By.XPath("//input[@name='password']"));
                    if (enter_password.Count > 0)
                    {
                        enter_password.LastOrDefault().SendKeys(password);
                        Thread.Sleep(1000);

                    }

                    var login = chromedriver.FindElements(By.XPath("//button[@type='submit']"));
                    if (login.Count > 0)
                    {
                        login.LastOrDefault().Click();
                        Thread.Sleep(5000);

                    }
                    if (!string.IsNullOrEmpty(mail))
                    {
                        row.Cells["cStatus"].Value = "ENTER CODE 2FA ";
                        var code = GetCode(mail);
                        var enter_code = chromedriver.FindElements(By.XPath("//input[@name='verificationCode']"));
                        if (enter_code.Count > 0)
                        {
                            enter_code.LastOrDefault().SendKeys(code);
                            Thread.Sleep(2000);
                        }
                        var confirm = chromedriver.FindElements(By.XPath("//form/div[2]/button"));
                        if (confirm.Count > 0)
                        {
                            confirm.LastOrDefault().Click();
                            Thread.Sleep(10000);
                        }
                        url = chromedriver.Url;
                        if (url.Contains("https://www.instagram.com/challenge/"))
                        {

                            var dissmiss = chromedriver.FindElements(By.XPath("//div[@aria-label='Dismiss']"));
                            if (dissmiss.Count > 0)
                            {
                                dissmiss.LastOrDefault().Click();
                                Thread.Sleep(5000);
                            }
                        }
                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                        string cookiestring = "";
                        foreach (var cookie in cookiess)
                        {
                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                        }
                        c2FAvsCookie = cookiestring;
                        row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                    }
                    else
                    {
                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                        string cookiestring = "";
                        foreach (var cookie in cookiess)
                        {
                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                        }
                        c2FAvsCookie = cookiestring;
                        row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                    }
                    var uid_ig1 = Regex.Match(chromedriver.PageSource, "NON_FACEBOOK_USER_ID\":\"(.*?)\"").Groups[1].Value;

                    if (uid_ig1 != "0")
                    {
                        try
                        {
                            row.Cells["cStatus"].Value = "LOGIN DONE";
                            Thread.Sleep(5000);
                            url = chromedriver.Url;
                            if (url.Contains("https://www.instagram.com/challenge/"))
                            {

                                var dissmiss = chromedriver.FindElements(By.XPath("//div[@aria-label='Dismiss']"));
                                if (dissmiss.Count > 0)
                                {
                                    dissmiss.LastOrDefault().Click();
                                    Thread.Sleep(5000);
                                }
                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                string cookiestring = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                }
                                c2FAvsCookie = cookiestring;
                                row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();


                            }
                            if (chromedriver.Url.Contains("https://www.instagram.com/accounts/suspended"))
                            {
                                row.Cells["cStatus"].Value = "282";
                                chromedriver.Close();
                                chromedriver.Quit();
                                goto next;
                            }

                            RIP(chromedriver, row, username, password, c2FAvsCookie, mail, passmail, mailkhoiphuc);
                        }
                        catch { }


                    }

                }

                next:

                Thread.Sleep(1000);
              
            }
            catch { }
        
        }


        private void RIP(ChromeDriver chromedriver, DataGridViewRow row, string username, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {
                var on_off_chrome = "";
                if (cmb_on_off_chrome.InvokeRequired)
                {
                    cmb_on_off_chrome.Invoke(new Action(() =>
                    {
                        on_off_chrome = cmb_on_off_chrome.Text;


                    }));

                }
                row.Cells["cStatus"].Value = "RIP .....";
                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                var cookiestring = "";
                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }
                cookiestring = cookiestring.Trim(';');

                HttpRequest httpRequest = new HttpRequest();
                httpRequest.AllowAutoRedirect = true;
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                EnsurePostWWWLoginHDFull(httpRequest);
                httpRequest.KeepAlive = true;
                var cookieRaws = cookiestring.Split(';');
                foreach (var cookieraw in cookieRaws)
                {
                    var cookieJAr = cookieraw.Split('=');
                    try
                    {
                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                    }
                    catch { }
                }
                httpRequest.AddHeader("authority", "accountscenter.instagram.com");
                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httpRequest.AddHeader("dpr", "0.800000011920929");
                httpRequest.AddHeader("priority", "u=0, i");
                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                httpRequest.AddHeader("sec-ch-ua", "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Google Chrome\";v=\"138\"");
                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"\"");
                httpRequest.AddHeader("sec-fetch-dest", "document");
                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                httpRequest.AddHeader("sec-fetch-user", "?1");
                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                httpRequest.AddHeader("viewport-width", "1849");

                var response = httpRequest.Get("https://accountscenter.instagram.com/personal_info/");
                if (response.IsOK)
                {
                    var responseStr = response.ToString();

                    httpRequest.AddHeader("authority", "accountscenter.instagram.com");
                    httpRequest.AddHeader("accept", "*/*");
                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                    httpRequest.AddHeader("priority", "u=1, i");
                    httpRequest.AddHeader("referer", "https://accountscenter.instagram.com/personal_info/birthday/?entrypoint=accounts_center");
                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                    httpRequest.AddHeader("sec-ch-ua", "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Google Chrome\";v=\"138\"");
                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"\"");
                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                    httpRequest.AddHeader("x-asbd-id", "359341");
                    httpRequest.AddHeader("x-fb-friendly-name", "useFXSettingsEditBirthdayMutation");
                    httpRequest.AddHeader("x-fb-lsd", "KH-WQryA-nAVNa3T8Awrhr");
                    httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                    var uid_ig = Regex.Match(responseStr, "NON_FACEBOOK_USER_ID\":\"(.*?)\"").Groups[1].Value;
                    var fb_dtsg = Regex.Match(responseStr, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                    var lsd = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                    var jazoest = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                    var day =  ngay_rip.Value.ToString();
                    var month = thang_rip.Value.ToString();
                    var year = nam_rip.Value.ToString();

                    var payload = $"av={uid_ig}&__user=0&__a=1&__req=w&__hs=20310.HYP:accounts_center_pkg.2.1...0&dpr=1&__ccg=GOOD&__rev=1025722814&__s=w8l0rw:dy8cxl:aicbrk&__hsi=7536887764758473040&__dyn=7xeUmwlEnwn8K2Wmh0no6u5U4e0yoW3q32360CEbo1nEhw2nVE4W099w8G1Dz81s8hwnU2lwv89k2C1Fwc60D82IzXwae4UaEW0Loco5G0zK1swa-0raazo7u0zEiwaG1LwTwNw4mwr86C1nw4xxW1owLwHwea&__csr=gZ68nEpf999juJaz9dCnhqPsJnivDXRmBFXHi5QyOqqQjWZeg8h4yK_RAjdWFkBiKy9l89F9FQmrmBQVttbCF4ulkihlQ8FUOvFWgDy5CDHLgBu5FahvO9LQVOfG26oGVFkt-jXyQQqh2XF4HGQ-6A5oWiaVAiBCCGA6ubyFkqmm448zaxC3K01waw08Ly8Pw0t_9A2qiXwd20FQUeuq31BK4Kl01BW1Cw2LE0boAq2ydwSChonxt0m80OR165AEakgIg69U-Q1zgbUbQWBxIQAzka0JglwKzE4-EKFGGuquifGiF4UGqeKeCGVpHXwTzooxOH-6okwZCDi8466E5-4obOo2zwfJ1mhqKeDx2WGeAyE-XK5opKi-U88gBjQ6SpaAiKmp2oa9994FUhK5Wjyp82_wpJwaNw11605po0kUw1wi0nC07lo28w16C6o0Vfx20fExy11w&__hsdp=gl9Kb4gxg452VA8gdoGueIiswF6aahpWa8x58X4689zN8SoNUN2phpy0yx6Q3W-qdXJ0CzluA2O8J1l38TgO6ay8Fzax2EBTCx2FfoWivh8Oq9C89y8twBGF9-uumVoGFUsgC2m13xS4ohU1dUy3u6EbU7m0xoeaxq3G3K7UmzEbVUO8xpu1yx7w4Ywf2cKfwvo-2K3i2G0MV8K11xC2CexOE20zA7pki3K2212gtyUO2G78nwDyUqwXwuU5OHK2y2u9wKw&__hblp=0mE5i1kgc8ObLAgb4ax62C7VUhxm6oPzogwxo5Cbx22q1pwKwgUeqw8258kwAU8oOF8bU1B82yDw4bw4qgvxa4o1BU2DgbUoxq0MA2y18yomwLwwwZg31w8a6ohwjouw9a0X8421uK7984S3B0&__sjsp=glbKbem9WwgkbCgC3maw8gUbC4Vz7wl8lg4bCzXK2u15ybgcQcxybyCcG4aynuq4aAZzF9WAz8gC84EtwEDDUpwUgC1Fw7nwam0k-7U9o0N-0DoaUd83Kw9q0HUW1CwwwgA0BE11E5-&__comet_req=24&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1025722814&__spin_b=trunk&__spin_t=1754818429&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useFXSettingsEditBirthdayMutation&variables={{\"input\":{{\"client_mutation_id\":\"917b4dd6-ee65-4d37-94d2-2f7cfaaeeb5a\",\"actor_id\":\"{uid_ig}\",\"mutate_params\":{{\"current_birthday\":{{\"day\":10,\"month\":2,\"year\":1985}},\"mutation_source\":\"AC_EDIT_BIRTHDAY\",\"mutation_type\":\"EDIT_BIRTHDAY\",\"new_birthday\":{{\"day\":10,\"month\":2,\"year\":2017}}}},\"fdid\":\"device_id_fetch_ig_did\"}}}}&server_timestamps=true&doc_id=23882543468040528";

                    response = httpRequest.Post("https://accountscenter.instagram.com/api/graphql/", payload, "application/x-www-form-urlencoded");

                    if (response.IsOK)
                    {
                        var responseStr1 = response.ToString();
                        if (responseStr1.Contains("{\"data\":{\"xfb_fx_settings_edit_birthday\":{"))
                        {

                            chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                            Thread.Sleep(2000);
                            if (chromedriver.Url.Contains("https://www.instagram.com/accounts/suspended"))
                            {
                                row.Cells["cStatus"].Value = "RIP DONE";
                            
                                if (on_off_chrome == "ON")
                                {
                                    chromedriver.Close();
                                    chromedriver.Quit();
                                }
                              
                              
                            }
                            else
                            {
                                row.Cells["cStatus"].Value = "RIP FAIL!";
                                if (on_off_chrome == "ON")
                                {
                                    chromedriver.Close();
                                    chromedriver.Quit();
                                }
                            }
                        }
                        else
                        {
                            row.Cells["cStatus"].Value = "RIP FAIL!";
                            if (on_off_chrome == "ON")
                            {
                                chromedriver.Close();
                                chromedriver.Quit();
                            }
                        }

                    }



                }




            }
            catch { }



        }

        // LOGIN_CHROME
        private string LoginVIANO2FA_Chrome(ChromeDriver chromdriver, DataGridViewRow row, string username, string password, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {
                chromdriver.Navigate().GoToUrl("https://www.facebook.com");
                Thread.Sleep(100);
                row.Cells["cStatus"].Value = "Login.....";
                while (isStop)
                {
                    Thread.Sleep(1000);

                }
                IWebElement tbmai = chromdriver.FindElement(By.Name("email"));
                tbmai.SendKeys(username);
                Thread.Sleep(100);
                while (isStop)
                {
                    Thread.Sleep(1000);
                }
                IWebElement tbpass = chromdriver.FindElement(By.Name("pass"));
                tbpass.SendKeys(password);
                Thread.Sleep(100);
                while (isStop)
                {
                    Thread.Sleep(1000);

                }
                var btnlogin = chromdriver.FindElements(By.Name("login"));
                if (btnlogin.Count > 0)
                {
                    btnlogin.FirstOrDefault().Click();
                }
                if (btnlogin.Count == 0)
                {
                    btnlogin = chromdriver.FindElements(By.XPath("//div[@role='button']//div[@role='none']"));
                    if (btnlogin.Count > 0)
                    {
                        btnlogin[0].Click();
                    }

                }

                Thread.Sleep(100);
                while (isStop)
                {
                    Thread.Sleep(1000);
                }
                var url7 = chromdriver.Url;
                if (url7.Contains("https://www.facebook.com/two_step_verification/two_factor/"))
                {
                    row.Cells["cStatus"].Value = "Xác Thực 2 yếu tố bằng mobile";
                    return "Login Fail";

                }
                if (url7.Contains("two_step_verification"))
                {
                    row.Cells["cStatus"].Value = "Giải Captcha .....";
                    var captchaResponse = TEXT_CAPTCHA(chromdriver);
                    if (string.IsNullOrEmpty(captchaResponse))
                    {
                        row.Cells["cStatus"].Value = "Lấy Mã Captcha FAIL";
                        return "Login Fail";
                    }
                    row.Cells["cStatus"].Value = "Nhập Mã Captcha.....";
                    var entercaptcha = chromdriver.FindElements(By.XPath("//input[@type='text']"));
                    if (entercaptcha.Count > 0)
                    {
                        entercaptcha.FirstOrDefault().SendKeys(captchaResponse);
                        Thread.Sleep(2000);

                    }

                    var continue01 = chromdriver.FindElements(By.XPath("//div//div[@role='button']"));
                    if (continue01.Count > 0)
                    {
                        continue01.LastOrDefault().Click();
                        Thread.Sleep(10000);
                    }
                }
                var urlChrome = chromdriver.Url;
                while (urlChrome.Contains("https://www.facebook.com/recover/initiate/?lara_product=www_first_password_failure")
               || urlChrome.Contains("https://www.facebook.com/login/device-based/regular/login")
               || urlChrome.Contains("https://www.facebook.com/login/?privacy_mutation_token=")
               || urlChrome.Contains("https://www.facebook.com/login/web/?email=")
               || urlChrome.Contains("https://www.facebook.com/login/web/?cuid="))
                {

                    while (isStop)
                    {
                        Thread.Sleep(1000);
                    }
                    ReLogin(chromdriver, row, username, password);
                    urlChrome = chromdriver.Url;
                    break;
                }
                if (urlChrome.Contains("two_step_verification"))
                {
                    row.Cells["cStatus"].Value = "VIA SPAM";
                    StreamWriter sw1 = new StreamWriter("viaspam.txt", true);
                    sw1.WriteLine(username + "|" + password + "|" + mail + "|" + passmail + "|" + mailkhoiphuc);
                    sw1.Close();
                    return "Login Fail";
                }
                while (isStop)
                {
                    Thread.Sleep(1000);
                }
                var urlChrome11 = chromdriver.Url;
                if (urlChrome11.Contains("https://www.facebook.com/login/help.php"))
                {
                    row.Cells["cStatus"].Value = "sai pass";
                    StreamWriter sw1 = new StreamWriter("saipass.txt", true);
                    sw1.WriteLine(username + "|" + password + "|" + mail + "|" + passmail + "|" + mailkhoiphuc);
                    sw1.Close();

                    return "Login Fail";
                }
                if (urlChrome11.Contains("https://www.facebook.com/login/device-based/regular/login"))
                {
                    row.Cells["cStatus"].Value = "VIA SPAM";
                    StreamWriter sw1 = new StreamWriter("viaspam.txt", true);
                    sw1.WriteLine(username + "|" + password + "|" + mail + "|" + passmail + "|" + mailkhoiphuc);
                    sw1.Close();
                    return "Login Fail";
                }
                if (urlChrome.Contains("1501092823525282"))
                {
                    row.Cells["cStatus"].Value = "282";
                    StreamWriter sw = new StreamWriter("282.txt", true);
                    sw.WriteLine(username + "|" + password + "|" + mail + "|" + passmail + "|" + mailkhoiphuc);
                    sw.Close();
                    return "282";
                }
                if (urlChrome.Contains("https://www.facebook.com/checkpoint/disabled"))
                {
                    row.Cells["cStatus"].Value = "VHH";
                    StreamWriter sw = new StreamWriter("VHH.txt", true);
                    sw.WriteLine(username + "|" + password + "|" + mail + "|" + passmail + "|" + mailkhoiphuc);
                    sw.Close();
                    return "Login Fail";
                }
                var url = chromdriver.Url;
                if (url.Contains("828281030927956"))
                {
                    row.Cells["cStatus"].Value = "956";

                    // login hotmail
                    row.Cells["cStatus"].Value = "Login HotMail .....";
                    var return01 = LoginMailAPI(mail, passmail, row);
                    if (return01 == "LOGINHOTMAILDONE")
                    {
                        row.Cells["cStatus"].Value = "Login HotMail Done";
                    }
                    if (return01 == "login fail")
                    {
                        return "Login Fail";
                    }
                    var return2 = OPEN956_CHROME(chromdriver, row);
                    if (return2 == "FAIL")
                    {
                        return "Login Fail";
                    }

                    goto next01;
                }
                // n
                var url8 = chromdriver.Url;
                while (url8.Contains("https://www.facebook.com/checkpoint/?next"))
                {
                    var urlChrome22 = chromdriver.Url;
                    if (!urlChrome22.Contains("https://www.facebook.com/checkpoint/?next"))
                    {
                        break;
                    }
                    Thread.Sleep(100);
                }

                urlChrome = chromdriver.Url;
                if (urlChrome.Contains("465803052217681")
                   || urlChrome.Contains("/auth_platform/codesubmit/")
                   || urlChrome.Contains("https://www.facebook.com/auth_platform/afad/"))
                {
                    var return681 = F681(chromdriver, row, username, password, mail, passmail, mailkhoiphuc, urlChrome);
                    if (return681 == "FAIL")
                    {
                        row.Cells["cStatus"].Value = "login FAIL";
                        return "Login Fail";
                    }
                    if (return681 == "gmail")
                    {
                        row.Cells["cStatus"].Value = "MÃ VỀ GMAIL";
                        return "Login Fail";
                    }
                    if (return681 == "mailkhac")
                    {
                        row.Cells["cStatus"].Value = "MÃ VỀ MAIL KHÁC";
                        return "Login Fail";
                    }
                    if (return681 == "WhatApp")
                    {
                        row.Cells["cStatus"].Value = "WhatApp";
                        return "Login Fail";
                    }
                }

                // login hotmail
                row.Cells["cStatus"].Value = "Login HotMail .....";
                var return1 = LoginMailAPI(mail, passmail, row);
                if (return1 == "LOGINHOTMAILDONE")
                {
                    row.Cells["cStatus"].Value = "Login HotMail Done";
                }
                if (return1 == "login fail")
                {
                    return "Login Fail";
                }

                var codehotmail1 = "";
                // MAIL GET CODE
                var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail, passmail);

                if (string.IsNullOrEmpty(accessToken))
                {
                    Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                    (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail, passmail);
                }
                Thread.Sleep(1000);
                //var getanewcode = chromdriver.FindElements(By.XPath("//input[@name='send_code']"));
                //try
                //{
                //    getanewcode[0].Click();
                //}
                //catch { }

                if (urlChrome.Contains("465803052217681")
                    || urlChrome.Contains("/auth_platform/"))
                {

                    Task.Delay(TimeSpan.FromSeconds(50)).Wait();
                    row.Cells["cStatus"].Value = "lấy Code mail.....";
                    //codehotmail1 = ReadHotmail(username1, accessToken, username);
                    codehotmail1 = ReadHotmail_c(username1, accessToken, username);

                    if (codehotmail1 == "LOGIN HOTMAIL FAIL")
                    {
                        row.Cells["cStatus"].Value = "LOGIN HOTMAIL FAIL";
                        return "Login Fail";
                    }



                    while (string.IsNullOrEmpty(codehotmail1))
                    {
                        Thread.Sleep(1000);
                        var getanewcode = chromdriver.FindElements(By.XPath("//input[@name='send_code']"));
                        getanewcode[0].Click();
                        Task.Delay(TimeSpan.FromSeconds(35)).Wait();
                        //codehotmail1 = ReadHotmail(username1, accessToken, username);

                        codehotmail1 = ReadHotmail_c(username1, accessToken, username);
                        if (codehotmail1 == "LOGIN HOTMAIL FAIL")
                        {
                            row.Cells["cStatus"].Value = "LOGIN HOTMAIL FAIL";
                            return "Login Fail";
                        }
                    }

                }


            entercodehotmail:

                Thread.Sleep(1000);
                if (!string.IsNullOrEmpty(codehotmail1))
                {
                    var entercodehotmail = chromdriver.FindElement(By.XPath("//input[@type='text']"));

                    entercodehotmail.SendKeys(codehotmail1);
                    Thread.Sleep(3000);
                }
                var continuem = chromdriver.FindElements(By.XPath("//div/button[@name='submit[Continue]']"));
                if (continuem.Count > 0)
                {
                    continuem.FirstOrDefault().Click();
                    Thread.Sleep(8000);
                }
                url = chromdriver.Url;
                if (url.Contains("828281030927956"))
                {
                    row.Cells["cStatus"].Value = "956";

                    // login hotmail
                    row.Cells["cStatus"].Value = "Login HotMail .....";
                    var return01 = LoginMailAPI(mail, passmail, row);
                    if (return01 == "LOGINHOTMAILDONE")
                    {
                        row.Cells["cStatus"].Value = "Login HotMail Done";
                    }
                    if (return01 == "login fail")
                    {
                        return "Login Fail";
                    }
                    var return2 = OPEN956_CHROME(chromdriver, row);
                    if (return2 == "FAIL")
                    {
                        return "Login Fail";
                    }


                }
                // nếu nhập sai code cũ

                if (url.Contains("https://www.facebook.com/checkpoint/"))
                {
                    try
                    {

                        codehotmail1 = ReadHotmail_c(username1, accessToken, username);
                        if (codehotmail1 == "LOGIN HOTMAIL FAIL")
                        {
                            row.Cells["cStatus"].Value = "LOGIN HOTMAIL FAIL";
                            return "Login Fail";
                        }
                        while (string.IsNullOrEmpty(codehotmail1))
                        {
                            var sendcode = chromdriver.FindElements(By.XPath("//input[@name='send_code']"));
                            sendcode.FirstOrDefault().Click();
                            Task.Delay(TimeSpan.FromSeconds(30)).Wait();
                            codehotmail1 = ReadHotmail_c(username1, accessToken, username);
                            if (codehotmail1 == "LOGIN HOTMAIL FAIL")
                            {
                                row.Cells["cStatus"].Value = "LOGIN HOTMAIL FAIL";
                                return "Login Fail";
                            }
                        }
                        goto entercodehotmail;
                    }
                    catch { }

                }
            next01:
                urlChrome = chromdriver.Url;
                if (urlChrome.Contains("https://www.facebook.com/checkpoint/disabled/?next"))
                {
                    row.Cells["cStatus"].Value = "VIA VHH";
                    StreamWriter sw1 = new StreamWriter("VIAVHH.txt", true);
                    sw1.WriteLine(username + "|" + password + "|" + mail + "|" + passmail + "|" + mailkhoiphuc);
                    sw1.Close();
                    return "Login Fail";
                }
                if (urlChrome.Contains("828281030927956"))
                {

                    row.Cells["cStatus"].Value = "956";
                    OPEN956_CHROME(chromdriver, row);
                    return "Login Fail";
                }
                var urlchrome2 = chromdriver.Url;
                if (urlchrome2.Contains("1501092823525282"))
                {
                    row.Cells["cStatus"].Value = "282";
                    StreamWriter sw = new StreamWriter("282.txt", true);
                    sw.WriteLine(username + "|" + password + "|" + mail + "|" + passmail + "|" + mailkhoiphuc);
                    sw.Close();
                    return "282";
                }
                if (urlchrome2.Contains("https://www.facebook.com/login/web/"))
                {
                    row.Cells["cStatus"].Value = "VIA SPAM";
                    StreamWriter sw = new StreamWriter("spam.txt", true);
                    sw.WriteLine(username + "|" + password + "|" + mail + "|" + passmail + "|" + mailkhoiphuc);
                    sw.Close();
                    return "Login Fail";
                }

                var htmlfacebook = chromdriver.PageSource;
                var usermanex = Regex.Match(htmlfacebook, "user=(.*?)&").Groups[1].Value;
                if (usermanex == $"{username}")
                {
                    var urldissmiss = chromdriver.Url;
                    if (urldissmiss.Contains("checkpoint/601051028565049/"))
                    {
                        var dissmiss = chromdriver.FindElements(By.XPath("//div[@role='button']"));
                        dissmiss[2].Click();

                    }
                    var status = row.Cells["cStatus"].Value.ToString();
                    if (status == "G")
                    {

                    }
                    row.Cells["cStatus"].Value = "LOGIN OK";


                    return "Login OK";
                }
                else
                {
                    return "Login Fail";
                }
            }
            catch { }


            return "Login Fail";
        }
        private void ReLogin(ChromeDriver chromdriver, DataGridViewRow row, string username, string password)
        {
            row.Cells["cStatus"].Value = "Login";

            IWebElement tbpass = null;
            try
            {
                tbpass = chromdriver.FindElement(By.Name("pass"));
                tbpass.SendKeys(password);
                Thread.Sleep(100);

                IWebElement btnlogin = chromdriver.FindElement(By.Name("login"));
                btnlogin.Click();
                Thread.Sleep(100);

                var urlchrome = chromdriver.Url;
                if (urlchrome.Contains("https://www.facebook.com/login/device-based/regular/login"))
                {
                    chromdriver.Navigate().GoToUrl("https://www.facebook.com/");
                    row.Cells["cStatus"].Value = "Login";
                    IWebElement tbmai = chromdriver.FindElement(By.Name("email"));
                    tbmai.SendKeys(username);
                    Thread.Sleep(100);
                    IWebElement tbpass1 = chromdriver.FindElement(By.Name("pass"));
                    tbpass1.SendKeys(password);
                    Thread.Sleep(100);
                    IWebElement btnlogin1 = chromdriver.FindElement(By.Name("login"));
                    btnlogin1.Click();
                    Thread.Sleep(200);

                    IWebElement tbpass11 = null;
                    tbpass11 = chromdriver.FindElement(By.Name("pass"));
                    tbpass11.SendKeys(password);
                    Thread.Sleep(100);

                    IWebElement btnlogin11 = chromdriver.FindElement(By.Name("login"));
                    btnlogin11.Click();
                    Thread.Sleep(100);
                }

            }
            catch { }

            if (tbpass == null)
            {
                chromdriver.Navigate().GoToUrl("https://www.facebook.com/");

                row.Cells["cStatus"].Value = "Login";
                IWebElement tbmai = chromdriver.FindElement(By.Name("email"));
                tbmai.SendKeys(username);
                Thread.Sleep(1000);
                tbpass = chromdriver.FindElement(By.Name("pass"));
                tbpass.SendKeys(password);
                Thread.Sleep(1000);
                IWebElement btnlogin = chromdriver.FindElement(By.Name("login"));
                btnlogin.Click();
                Thread.Sleep(1000);
            }

            Thread.Sleep(3000);
            var urlchrome2 = chromdriver.Url;
            if (urlchrome2.Contains("https://www.facebook.com/login/?privacy_mutation_token="))
            {
                tbpass = chromdriver.FindElement(By.Name("pass"));
                tbpass.SendKeys(password);
                Thread.Sleep(1000);
                IWebElement btnlogin = chromdriver.FindElement(By.Name("login"));
                btnlogin.Click();
                Thread.Sleep(1000);

            }

        }
        private string F681(ChromeDriver chromdriver, DataGridViewRow row, string username, string password, string mail, string passmail, string mailkhoiphuc, string urlChrome)
        {
            try
            {
                chromdriver.Navigate().GoToUrl("https://www.facebook.com/checkpoint/?next");
                var Continuer = chromdriver.FindElements(By.XPath("//div//div//button[@name='submit[Confirm identity another way]']"));
                if (Continuer.Count > 0)
                {
                    Continuer.LastOrDefault().Click();
                    Thread.Sleep(1000);
                }

                IJavaScriptExecutor js = (IJavaScriptExecutor)chromdriver;
                IWebElement radioButton = chromdriver.FindElement(By.Name("verification_method"));
                js.ExecuteScript("arguments[0].click();", radioButton);
                Thread.Sleep(1000);
                var Continuer2 = chromdriver.FindElements(By.XPath("//div//div//button[@name='submit[Continue]']"));
                if (Continuer2.Count > 0)
                {
                    try
                    {
                        // Cuộn đến phần tử
                        var element = Continuer2.FirstOrDefault();
                        ((IJavaScriptExecutor)chromdriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                    }
                    catch { }
                }
                var maskmail = MaskEmail(mail);
                var html = chromdriver.PageSource;
                var gmail = Regex.Match(html, "type=\"radio\" name=\"eindex\" value=\"(.*?)\"").Groups[1].Value;
                if (gmail.Contains("@gmail"))
                {
                    return "gmail";
                }
                if (gmail.Contains("@") && !gmail.Contains("@hotmail.com"))
                {
                    return "mailkhac";
                }
                var SMS = Regex.Match(html, "<\\/span><\\/div><span>(.*?)<\\/span>").Groups[1].Value;
                if (SMS == "SMS")
                {
                    return "WhatApp";
                }


                IJavaScriptExecutor js1 = (IJavaScriptExecutor)chromdriver;
                IWebElement radioButton1 = chromdriver.FindElement(By.XPath($"//input[@value='{maskmail}']"));
                js1.ExecuteScript("arguments[0].click();", radioButton1);

                var Continuer3 = chromdriver.FindElements(By.XPath("//div//div//button[@name='submit[Continue]']"));
                if (Continuer3.Count > 0)
                {
                    Continuer3.FirstOrDefault().Click();
                    Thread.Sleep(1000);
                }
                return "OK";
            }
            catch { }
            return "FAIL";

        }
        private string LOGIN_COOKIE(ChromeDriver chromedriver, DataGridViewRow row, string username, string password, string cookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {
                chromedriver.Navigate().GoToUrl("https://www.facebook.com/");
                row.Cells["cStatus"].Value = "Login.....";
                var cookieRaw = cookie.Split(';');
                foreach (var cookieItem in cookieRaw)
                {
                    try
                    {
                        var cookieJar = cookieItem.Split('=');

                        Cookie cookieChrome = new Cookie(cookieJar[0].Trim(), cookieJar[1].Trim(), "facebook.com", "/", DateTime.Now.AddDays(10));
                        chromedriver.Manage().Cookies.AddCookie(cookieChrome);
                    }
                    catch { }
                }
                chromedriver.Navigate().Refresh();
                chromedriver.Navigate().GoToUrl("https://www.facebook.com/");
                Thread.Sleep(1000);
                while (isStop)
                {
                    Thread.Sleep(1000);
                }
                // kiểm tra login 
                var url = chromedriver.Url;
                if (url.Contains("828281030927956"))
                {
                    row.Cells["cStatus"].Value = "956";

                    // login hotmail
                    row.Cells["cStatus"].Value = "Login HotMail .....";
                    var return1 = LoginMailAPI(mail, passmail, row);
                    if (return1 == "LOGINHOTMAILDONE")
                    {
                        row.Cells["cStatus"].Value = "Login HotMail Done";
                    }
                    if (return1 == "login fail")
                    {
                        return "Login Fail";
                    }
                    var return2 = OPEN956_CHROME(chromedriver, row);
                    if (return2 == "FAIL")
                    {
                        return "FAIL";
                    }

                }
                var htmlfacebook = chromedriver.PageSource;
                var usermanex = Regex.Match(htmlfacebook, "user=(.*?)&").Groups[1].Value;
                if (usermanex == $"{username}")
                {
                    row.Cells["cStatus"].Value = "LOGIN OK";
                    while (isStop)
                    {
                        Thread.Sleep(1000);
                    }
                    var urlChrome = chromedriver.Url;
                    if (urlChrome.Contains("1501092823525282"))
                    {
                        row.Cells["cStatus"].Value = "282";
                        StreamWriter sw = new StreamWriter("282.txt", true);
                        sw.WriteLine(username + "|" + password + "|" + mail + "|" + passmail + "|" + mailkhoiphuc);
                        sw.Close();
                        return "282";
                    }
                    if (urlChrome.Contains("https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice"))
                    {
                        var allow_all_cookie = chromedriver.FindElements(By.XPath("//div[@role='button']//div[@role='none']//div//div[@role='none']"));
                        if (allow_all_cookie.Count > 0)
                        {
                            allow_all_cookie[4].Click();
                            Thread.Sleep(1000);
                        }

                    }
                    if (urlChrome.Contains("https://www.facebook.com/privacy/consent/pipa"))
                    {
                        var checkbox = chromedriver.FindElements(By.XPath("//input[@type='checkbox']"));
                        if (checkbox.Count > 0)
                        {
                            try
                            {
                                foreach (var element in checkbox)
                                {
                                    // Cuộn đến phần tử
                                    ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                                    // Đợi một chút để trang có thể cuộn xong
                                    Thread.Sleep(500);
                                    // Click vào phần tử
                                    element.Click();

                                }

                            }
                            catch { }
                        }
                        var allow_all_cookie = chromedriver.FindElements(By.XPath("//div[@role='button']//div[@role='none']//div//div[@role='none']"));
                        if (allow_all_cookie.Count > 0)
                        {
                            allow_all_cookie.FirstOrDefault().Click();
                            Thread.Sleep(1000);
                        }

                        var allow_all_cookie2 = chromedriver.FindElements(By.XPath("//div[@role='button']//div[@role='none']//div//div[@role='none']"));
                        if (allow_all_cookie2.Count > 0)
                        {
                            allow_all_cookie2.FirstOrDefault().Click();
                            Thread.Sleep(1000);
                        }

                    }
                    var urldissmiss = chromedriver.Url;
                    if (urldissmiss.Contains("checkpoint/601051028565049/"))
                    {
                        var dissmiss = chromedriver.FindElements(By.XPath("//div[@role='button']"));
                        dissmiss[2].Click();

                    }


                    return "DONE";

                }
                else
                {

                    row.Cells["cStatus"].Value = "Login Fail";
                    return "FAIL";
                }
            }
            catch { }
            return "FAIL";

        }
        private string Login2FA(ChromeDriver chromeDriver, DataGridViewRow row, string username, string password, string c2FA, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {
                chromeDriver.Navigate().GoToUrl("https://www.facebook.com/");
                //chromeDriver.Navigate().GoToUrl("https://business.facebook.com/login");
                Thread.Sleep(2000);
                row.Cells["cStatus"].Value = "Login....";
                IWebElement tbmai = chromeDriver.FindElement(By.Name("email"));
                tbmai.SendKeys(username);
                while (isStop)
                {
                    Thread.Sleep(1000);
                }
                Thread.Sleep(1000);
                IWebElement tbpass = chromeDriver.FindElement(By.Name("pass"));
                tbpass.SendKeys(password);
                while (isStop)
                {
                    Thread.Sleep(1000);
                }
                Thread.Sleep(1000);
                IWebElement btnlogin = chromeDriver.FindElement(By.Name("login"));
                btnlogin.Click();
                while (isStop)
                {
                    Thread.Sleep(1000);
                }
                Thread.Sleep(5000);
                var urlChrome222 = chromeDriver.Url;
                while (urlChrome222.Contains("https://www.facebook.com/two_step_verification/authentication/"))
                {
                    row.Cells["cStatus"].Value = "Giải Captcha .....";
                    var captchaResponse = TEXT_CAPTCHA(chromeDriver);
                    if (string.IsNullOrEmpty(captchaResponse))
                    {
                        row.Cells["cStatus"].Value = "Lấy Mã Captcha FAIL";
                        return "Login Fail";
                    }
                    row.Cells["cStatus"].Value = "Nhập Mã Captcha.....";
                    var entercaptcha = chromeDriver.FindElements(By.XPath("//input[@type='text']"));
                    if (entercaptcha.Count > 0)
                    {
                        entercaptcha.FirstOrDefault().SendKeys(captchaResponse);
                        Thread.Sleep(100);

                    }

                    var continue01 = chromeDriver.FindElements(By.XPath("//div//div[@role='button']"));
                    if (continue01.Count > 0)
                    {
                        continue01.LastOrDefault().Click();
                        Thread.Sleep(10000);
                    }
                    urlChrome222 = chromeDriver.Url;
                }
                if (urlChrome222.Contains("https://business.facebook.com/login/device-based/regular/login/")
                    || urlChrome222.Contains("https://www.facebook.com/login/?privacy_mutation_token")
                    || urlChrome222.Contains("https://www.facebook.com/login/device-based/regular/login/?login_attempt=1&next=https%3A%2F%2Fwww.facebook.com%2F&lwv=100"))
                {
                    row.Cells["cStatus"].Value = "saipass";
                    StreamWriter sw1 = new StreamWriter("saipass.txt", true);
                    sw1.WriteLine(username + "|" + password + "|" + c2FA + "|" + mail + "|" + passmail + "|" + mailkhoiphuc);
                    sw1.Close();

                    return "login error";
                }
                if (urlChrome222.Contains("https://www.facebook.com/login/device-based/regular/login/") || urlChrome222.Contains("https://www.facebook.com/login/web/"))
                {
                    row.Cells["cStatus"].Value = "VĂNG";
                    StreamWriter sw1 = new StreamWriter("VIAVANG.txt", true);
                    sw1.WriteLine(username + "|" + password + "|" + c2FA + "|" + mail + "|" + passmail + "|" + mailkhoiphuc);
                    sw1.Close();
                    return "login error";
                }

                chromeDriver.Navigate().GoToUrl("https://www.facebook.com/checkpoint/");

                var urlChrome = chromeDriver.Url;
                if (urlChrome.Contains("https://www.facebook.com/checkpoint/"))
                {

                    IWebElement tbCode = null;
                    try
                    {


                        row.Cells["cStatus"].Value = "Lấy code 2FA .....";
                        var code2Fa = GetCode(c2FA);
                        Thread.Sleep(1000);
                        row.Cells["cStatus"].Value = "Nhập code 2FA .....";
                        tbCode = chromeDriver.FindElement(By.Id("approvals_code"));
                        tbCode.SendKeys(code2Fa);
                        Thread.Sleep(1000);
                        while (isStop)
                        {
                            Thread.Sleep(1000);
                        }

                        var btnNext = chromeDriver.FindElements(By.XPath("//button[@name='submit[Continue]']"));
                        if (btnNext.Count > 0)
                        {
                            try
                            {
                                // Cuộn đến phần tử
                                var element = btnNext.FirstOrDefault();
                                ((IJavaScriptExecutor)chromeDriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                                // Đợi một chút để trang có thể cuộn xong
                                Thread.Sleep(500);
                                // Click vào phần tử
                                element.Click();
                            }
                            catch { }
                        }

                        Thread.Sleep(5000);
                        while (isStop)
                        {
                            Thread.Sleep(1000);
                        }

                        var btnNext2 = chromeDriver.FindElement(By.Id("checkpointSubmitButton"));
                        btnNext2.Click();
                        Thread.Sleep(5000);
                        var skip = chromeDriver.FindElements(By.XPath("//button[@name='submit[Skip]']"));
                        if (skip.Count > 0)
                        {
                            try
                            {
                                // Cuộn đến phần tử
                                var element = skip.LastOrDefault();
                                ((IJavaScriptExecutor)chromeDriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                                // Đợi một chút để trang có thể cuộn xong
                                Thread.Sleep(500);
                                // Click vào phần tử
                                element.Click();
                            }
                            catch { }
                        }
                        var checkpointSubmitButton = chromeDriver.FindElements(By.Id("checkpointSubmitButton"));
                        if (checkpointSubmitButton.Count > 0)
                        {
                            checkpointSubmitButton.LastOrDefault().Click();
                            Thread.Sleep(1000);

                            var thiswasme = chromeDriver.FindElement(By.XPath("//button[@name='submit[This was me]']"));
                            thiswasme.Click();
                            Thread.Sleep(1000);

                            var Continue = chromeDriver.FindElement(By.XPath("//button[@name='submit[Continue]']"));
                            Continue.Click();
                            Thread.Sleep(3000);

                        }


                        var urldissmiss = chromeDriver.Url;
                        if (urldissmiss.Contains("checkpoint/601051028565049"))
                        {
                            Thread.Sleep(1000);
                            var dissmiss = chromeDriver.FindElements(By.XPath("//div[@role='button']"));
                            dissmiss[2].Click();

                        }
                    }
                    catch { }

                }
                var urlm = chromeDriver.Url;
                if (urlm.Contains("1501092823525282"))
                {
                    row.Cells["cStatus"].Value = "282";
                    StreamWriter sw1 = new StreamWriter("VIA282.txt", true);
                    sw1.WriteLine(username + "|" + password + "|" + c2FA + "|" + mail + "|" + passmail + "|" + mailkhoiphuc);
                    sw1.Close();
                    return "login error";
                }
                urlm = chromeDriver.Url;
                if (urlm.Contains("828281030927956"))
                {
                    row.Cells["cStatus"].Value = "956";
                    //return "login error";
                    //login hotmail
                    row.Cells["cStatus"].Value = "Login HotMail .....";
                    var return01 = LoginMailAPI(mail, passmail, row);
                    if (return01 == "LOGINHOTMAILDONE")
                    {
                        row.Cells["cStatus"].Value = "Login HotMail Done";
                    }
                    if (return01 == "login fail")
                    {
                        return "Login Fail";
                    }
                    var return2 = OPEN956_CHROME(chromeDriver, row);
                    if (return2 == "FAIL")
                    {
                        return "login error";
                    }

                }

                Thread.Sleep(3000);
                var htmlfacebook = chromeDriver.PageSource;
                var usermanex = Regex.Match(htmlfacebook, "user=(.*?)&").Groups[1].Value;
                if (usermanex == $"{username}")
                {
                    var urldissmiss = chromeDriver.Url;
                    if (urldissmiss.Contains("checkpoint/601051028565049/"))
                    {
                        Thread.Sleep(1000);
                        var dissmiss = chromeDriver.FindElements(By.XPath("//div[@role='button']"));
                        dissmiss[2].Click();

                    }
                    if (urldissmiss.Contains("https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice"))
                    {
                        var allow_all_cookie = chromeDriver.FindElements(By.XPath("//div[@role='button']//div[@role='none']//div//div[@role='none']"));
                        if (allow_all_cookie.Count > 0)
                        {
                            allow_all_cookie[4].Click();
                            Thread.Sleep(1000);
                        }

                    }

                    row.Cells["cStatus"].Value = "LOGIN OK";

                    return "Login OK";
                }
                else
                {
                    row.Cells["cStatus"].Value = "LOGIN FAIL";
                    return "Login Fail";
                }


            }
            catch { }
            row.Cells["cStatus"].Value = "login error";
            return "login error";
        }

        private void Cookie_VIA(ChromeDriver chromdriver, DataGridViewRow row, string username, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {
                var cookiess = chromdriver.Manage().Cookies.AllCookies;
                var cookiestring = "";
                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }
                if (string.IsNullOrEmpty(c2FAvsCookie))
                {
                    row.Cells["cCheckBM"].Value = username + "|" + password + "|" + cookiestring + "|" + mail + "|" + passmail + "|" + mailkhoiphuc;
                }
                else
                {
                    row.Cells["cCheckBM"].Value = username + "|" + password + "|" + cookiestring + "|" + c2FAvsCookie + "|" + mail + "|" + passmail + "|" + mailkhoiphuc;
                }



            }
            catch { }
        }
        



        private int login = 0;
        private int sl_tk_bm = 0;
        private int sl_tk_bm_back_up = 0;
        private int sl_tk_bm_back_up_2 = 0;
        private int sl_tk_bm_back_up_3 = 0;
        private int sl_tk_bm_close1 = 0;
        private int sl_tk_bm_close2 = 0;
        private int sl_tk_bm_close3 = 0;
        private int sl_tk_bm_close4 = 0;

        private int sl_tk_share_fail_1 = 0;
        private int sl_tk_share_fail_2 = 0;
        private int sl_tk_share_fail_3 = 0;
        private int sl_tk_share_fail_4 = 0;

        private int sl_tk_share_fail_live1 = 0;
        private int sl_tk_share_fail_live2 = 0;
        private int sl_tk_share_fail_live3 = 0;
        private int sl_tk_share_fail_live4 = 0;

        private int sl_tk_share_fail_c1 = 0;
        private int sl_tk_share_fail_c2 = 0;
        private int sl_tk_share_fail_c3 = 0;
        private int sl_tk_share_fail_c4 = 0;
        private int sl_tk_share_done = 0;
        private int sl_tk_282 = 0;
        private int SL_BM = 0;
        private int SL_BM_PARTNER = 0;

        private void SHARE_D2_API(DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {

        login_:
            var url = "";
            try
            {
                login = 0;
                var token_EEAB = "";
                var REG_BM = "";
                if (cmb_REG_BM_Clone_API.InvokeRequired)
                {
                    cmb_REG_BM_Clone_API.Invoke(new Action(() =>
                    {
                        REG_BM = cmb_REG_BM_Clone_API.Text;
                    }));
                }
                else
                {
                    REG_BM = cmb_REG_BM_Clone_API.Text;
                }

                var CLOSE_SHARE = "";
                if (cmb_CLOSE_SHARE.InvokeRequired)
                {
                    cmb_CLOSE_SHARE.Invoke(new Action(() =>
                    {
                        CLOSE_SHARE = cmb_CLOSE_SHARE.Text;
                    }));
                }
                else
                {
                    CLOSE_SHARE = cmb_CLOSE_SHARE.Text;
                }
                row.Cells["cStatus"].Value = "Login.....";
                HashSet<string> resultList = new HashSet<string>();
                // Danh sách để lưu trữ các phần tử với account_status = "ACTIVE"
                List<string> activeItems = new List<string>();

                // Danh sách lưu trữ các phần tử còn lại
                List<string> otherItems = new List<string>();
            checkID:
                List<string> BM_THAY_THE = new List<string>();
                List<string> BM_BACK_UP_THAY_THE = new List<string>();
                List<string> BM_BACK_UP_2_THAY_THE = new List<string>();
                List<string> BM_BACK_UP_3_THAY_THE = new List<string>();


                List<string> BM_CLOSE1_THAY_THE = new List<string>();
                List<string> BM_CLOSE2_THAY_THE = new List<string>();
                List<string> BM_CLOSE3_THAY_THE = new List<string>();
                List<string> BM_CLOSE4_THAY_THE = new List<string>();

                List<string> BM_PARTNER_THAY_THE = new List<string>();


                HttpRequest httpRequest = new HttpRequest();
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.KeepAlive = true;
                httpRequest.AllowAutoRedirect = true;
                httpRequest.UserAgent = "";
                if (cmb_User_Agent.InvokeRequired)
                {
                    cmb_User_Agent.Invoke(new Action(() =>
                    {
                        httpRequest.UserAgent = cmb_User_Agent.Text;
                    }));
                }
                else
                {
                    httpRequest.UserAgent = cmb_User_Agent.Text;
                }
                var cookieRaw = c2FAvsCookie.Split(';');
                foreach (var cookie in cookieRaw)
                {
                    try
                    {
                        var key = cookie.Split('=')[0].ToString().Trim();
                        var value = cookie.Split('=')[1].ToString().Trim();
                        httpRequest.Cookies.Add(key, value);

                    }
                    catch { }
                }
                httpRequest["authority"] = "www.facebook.com";
                httpRequest["accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                httpRequest["sec-fetch-dest"] = "document";
                httpRequest["sec-fetch-mode"] = "navigate";
                httpRequest["sec-fetch-site"] = "same-origin";
                httpRequest["sec-fetch-user"] = "?1";
                httpRequest["priority"] = "u=0, i";
                httpRequest["sec-ch-ua"] = "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"";
                httpRequest["sec-fetch-site"] = "none";
                httpRequest["sec-ch-ua-mobile"] = "?0";
                httpRequest["sec-ch-ua-platform"] = "1";
                httpRequest["upgrade-insecure-requests"] = "\"Windows\"";
                httpRequest["cache-control"] = "max-age=0";
                httpRequest["upgrade-insecure-requests"] = "1";
                httpRequest["Accept-Language"] = "en-US,en;q=0.9";

                var response = httpRequest.Get("https://www.facebook.com/");
                if (response.IsOK)
                {

                    var responseStr = response.ToString();
                    url = httpRequest.Address.ToString();
                    var responseStr9_1 = "";
                    var responseStr9_2 = "";
                    if (url.Contains("https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice"))
                    {
                        row.Cells["cStatus"].Value = "Cho phép sử dụng cookie.....";
                        httpRequest.AddHeader("authority", "www.facebook.com");
                        httpRequest.AddHeader("accept", "*/*");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httpRequest.AddHeader("priority", "u=1, i");
                        httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                        httpRequest.AddHeader("x-asbd-id", "129477");
                        httpRequest.AddHeader("x-fb-friendly-name", "useSaharaCometConsentPostPromptOutcomeServerMutation");
                        var fb_dtsg1 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                        var jazoest1 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                        var lsd1 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                        var experience_id = Regex.Match(responseStr, "experience_id\":\"(.*?)\"").Groups[1].Value.ToString();
                        var id = experience_id;
                        var payload_1 = $"av={uid}&__user={uid}&__a=1&__req=6&__hs=20092.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019149319&__s=::07m5uu&__hsi=7456086034100500556&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0lW4o0B-q1ew2io2awt81s8hwnU6a3a1YwBgao6C0Mo2swlo5q4U2zxe2GewbS361qw8Xwn82Lw5XwSyES1Tw8W0Lo6-1CG0hq1Iwqo5p0qZ6goK1sAwHwtU5K2G0F8iw&__csr=hXOcxd92rFx6iFFWAGbryoC8gzyQWzFpbBgDDGui9y-EcoG48K2W6Qii3mdwdm3i0b5K0qK0bJw02H-E0lQw&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019149319&__spin_b=trunk&__spin_t=1736005310&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useSaharaCometConsentPostPromptOutcomeServerMutation&variables={{\"input\":{{\"client_mutation_id\":\"2\",\"actor_id\":\"{uid}\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"__aectx__\\\":\\\"{{\\\\\\\"id\\\\\\\":\\\\\\\"{id}\\\\\\\",\\\\\\\"flows\\\\\\\":[{{\\\\\\\"id\\\\\\\":\\\\\\\"user_cookie_choice_v2\\\\\\\",\\\\\\\"prompts\\\\\\\":[{{\\\\\\\"id\\\\\\\":\\\\\\\"user_cookie_choice_granular_control\\\\\\\"}}]}}]}}\\\"}}\",\"flow\":\"USER_COOKIE_CHOICE_V2\",\"inputs_json\":\"{{\\\"other_company_trackers_on_foa\\\":\\\"\\\",\\\"fb_trackers_on_other_companies\\\":\\\"\\\",\\\"advertising\\\":\\\"\\\",\\\"analytics\\\":\\\"\\\",\\\"content_and_media\\\":\\\"\\\",\\\"productivity\\\":\\\"\\\",\\\"ADOBE_MARKETO\\\":\\\"\\\",\\\"GOOGLE_ADS\\\":\\\"\\\",\\\"KOCHAVA\\\":\\\"\\\",\\\"LINKEDIN_MARKETING\\\":\\\"\\\",\\\"X_ADS\\\":\\\"\\\",\\\"GOOGLE_ANALYTICS\\\":\\\"\\\",\\\"MEDALLIA\\\":\\\"\\\",\\\"AMAZON_AWS_CONTENT\\\":\\\"\\\",\\\"BLINGS_IO\\\":\\\"\\\",\\\"CLOUDFRONT\\\":\\\"\\\",\\\"GIPHY\\\":\\\"\\\",\\\"GOOGLE_MEDIA\\\":\\\"\\\",\\\"NEW_YORK_TIMES\\\":\\\"\\\",\\\"SOUNDCLOUD\\\":\\\"\\\",\\\"SPOTIFY\\\":\\\"\\\",\\\"SPREAKER\\\":\\\"\\\",\\\"TED\\\":\\\"\\\",\\\"TENOR\\\":\\\"\\\",\\\"TIKTOK\\\":\\\"\\\",\\\"VIMEO\\\":\\\"\\\",\\\"X\\\":\\\"\\\",\\\"YOUTUBE\\\":\\\"\\\",\\\"CHILI_PIPER\\\":\\\"\\\",\\\"GOOGLE\\\":\\\"\\\",\\\"JIO\\\":\\\"\\\",\\\"MAPBOX\\\":\\\"\\\",\\\"MICROSOFT\\\":\\\"\\\",\\\"card_index_0_learnt_more\\\":\\\"\\\",\\\"card_index_1_learnt_more\\\":\\\"\\\",\\\"card_index_2_learnt_more\\\":\\\"\\\",\\\"card_index_3_learnt_more\\\":\\\"\\\"}}\",\"outcome\":\"APPROVED\",\"outcome_data_json\":\"{{}}\",\"prompt\":\"USER_COOKIE_CHOICE_GRANULAR_CONTROL\",\"runtime\":\"SAHARA\",\"source\":\"pft_user_cookie_choice\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=8906652576046836";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_1, "application/x-www-form-urlencoded");
                        if (response.IsOK)
                        {

                            var responseStr8 = response.ToString();
                            url = httpRequest.Address.ToString();

                            httpRequest.AddHeader("authority", "www.facebook.com");
                            httpRequest.AddHeader("accept", "*/*");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httpRequest.AddHeader("priority", "u=4, i");
                            httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                            httpRequest.AddHeader("sec-fetch-mode", "no-cors");
                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                            fb_dtsg1 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                            jazoest1 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                            lsd1 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                            var payload1 = $"__a=1&__ccg=MODERATE&__comet_req=1&__hs=20093.HYP%3Acomet_plat_default_pkg.2.1.0.2.1&__hsi=7456292581936758885&__req=7&__rev=1019152068&__s=%3A%3A55p7kf&__spin_b=trunk&__spin_r=1019152068&__spin_t=1736053401&__user={uid}&dpr=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&ph=C3";
                            var url_post = $"https://www.facebook.com/ajax/bnzai?__a=1&__ccg=MODERATE&__comet_req=1&__hs=20093.HYP%3Acomet_plat_default_pkg.2.1.0.2.1&__hsi=7456292581936758885&__req=7&__rev=1019152068&__s=%3A%3A55p7kf&__spin_b=trunk&__spin_r=1019152068&__spin_t=1736053401&__user={uid}&dpr=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&ph=C3";
                            response = httpRequest.Post(url_post, payload1, "multipart/form-data; boundary=----WebKitFormBoundaryzyTDgA13uKCw1uhv");
                            responseStr8 = response.ToString();
                            url = httpRequest.Address.ToString();



                            var cookie = httpRequest.Cookies.ToString();
                            httpRequest.AddHeader("authority", "www.facebook.com");
                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httpRequest.AddHeader("dpr", "0.800000011920929");
                            httpRequest.AddHeader("priority", "u=0, i");
                            httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                            httpRequest.AddHeader("sec-fetch-dest", "document");
                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                            httpRequest.AddHeader("sec-fetch-user", "?1");
                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                            httpRequest.AddHeader("viewport-width", "1305");
                            response = httpRequest.Get("https://www.facebook.com/");
                            if (response.IsOK)
                            {
                                responseStr9_1 = response.ToString();
                                url = httpRequest.Address.ToString();
                                if (url == "https://www.facebook.com/")
                                {
                                    row.Cells["cStatus"].Value = "Cho phép sử dụng cookie DONE";
                                }
                            }
                        }
                    }
                    if (url.Contains("https://www.facebook.com/privacy/consent/pipa/?params%5Bpft_surface%5D=facebook_comet&params%5Bis_new_user_blocking_flow%5D=true&params%5Bgcl_experience_id%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&params%5Bpft_session_key%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&source=pipa_blocking_flow"))
                    {
                        row.Cells["cStatus"].Value = "Cho phép sử dụng cookie 2.....";

                        httpRequest.AddHeader("authority", "www.facebook.com");
                        httpRequest.AddHeader("accept", "*/*");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httpRequest.AddHeader("priority", "u=1, i");
                        httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/pipa/?params%5Bpft_surface%5D=facebook_comet&params%5Bis_new_user_blocking_flow%5D=true&params%5Bgcl_experience_id%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&params%5Bpft_session_key%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&source=pipa_blocking_flow");
                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                        httpRequest.AddHeader("x-asbd-id", "129477");
                        httpRequest.AddHeader("x-fb-friendly-name", "useConsentLoggingPlatformGQLEndpointMutation");
                        var fb_dtsg1 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                        var jazoest1 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                        var lsd1 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                        var experience_id = Regex.Match(responseStr, "experience_id\":\"(.*?)\"").Groups[1].Value.ToString();
                        var id = experience_id;
                        var gcl_experience_id = Regex.Match(responseStr, "gcl_experience_id\\\\\":\\\\\"(.*?)\\\\\"").Groups[1].Value.ToString();
                        var pft_session_key = Regex.Match(responseStr, "pft_session_key\\\\\":\\\\\"(.*?)\\\\\"").Groups[1].Value.ToString();
                        var payload_c1 = $"av={uid}&__user={uid}&__a=1&__req=9&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{uid}\",\"event\":\"consent_interactions_toggle_on\",\"event_data\":\"{{\\\"name\\\":\\\"personal_data_toggle\\\",\\\"value\\\":\\\"true\\\"}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_main\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c1, "application/x-www-form-urlencoded");
                        var payload_c2 = $"av={uid}&__user={uid}&__a=1&__req=a&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"4\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_data_json\":\"{{\\\"name\\\":\\\"personal_data_toggle\\\",\\\"type\\\":\\\"toggle\\\"}}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"ON\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INPUT\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c2, "application/x-www-form-urlencoded");
                        var payload_c3 = $"av={uid}&__user={uid}&__a=1&__req=b&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"{uid}\",\"event\":\"consent_interactions_toggle_on\",\"event_data\":\"{{\\\"name\\\":\\\"data_shared_3pd_toggle\\\",\\\"value\\\":\\\"true\\\"}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_main\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c3, "application/x-www-form-urlencoded");
                        var payload_c4 = $"av={uid}&__user={uid}&__a=1&__req=c&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"6\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_data_json\":\"{{\\\"name\\\":\\\"data_shared_3pd_toggle\\\",\\\"type\\\":\\\"toggle\\\"}}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"ON\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INPUT\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c4, "application/x-www-form-urlencoded");
                        var payload_c5 = $"av={uid}&__user={uid}&__a=1&__req=d&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"7\",\"actor_id\":\"{uid}\",\"event\":\"consent_interactions_toggle_on\",\"event_data\":\"{{\\\"name\\\":\\\"cross_border_data_transfer_toggle\\\",\\\"value\\\":\\\"true\\\"}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_main\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c5, "application/x-www-form-urlencoded");
                        var payload_c6 = $"av={uid}&__user={uid}&__a=1&__req=e&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"8\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_data_json\":\"{{\\\"name\\\":\\\"cross_border_data_transfer_toggle\\\",\\\"type\\\":\\\"toggle\\\"}}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"ON\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INPUT\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c6, "application/x-www-form-urlencoded");
                        var payload_c7 = $"av={uid}&__user={uid}&__a=1&__req=f&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"9\",\"actor_id\":\"{uid}\",\"event\":\"consent_interactions_toggle_on\",\"event_data\":\"{{\\\"name\\\":\\\"location_info_toggle\\\",\\\"value\\\":\\\"true\\\"}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_main\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c7, "application/x-www-form-urlencoded");
                        var payload_c8 = $"av={uid}&__user={uid}&__a=1&__req=g&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"10\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_data_json\":\"{{\\\"name\\\":\\\"location_info_toggle\\\",\\\"type\\\":\\\"toggle\\\"}}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"ON\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INPUT\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c8, "application/x-www-form-urlencoded");
                        var payload_c9 = $"av={uid}&__user={uid}&__a=1&__req=h&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptFormValidationMutation&variables={{\"input\":{{\"client_mutation_id\":\"11\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INTRODUCTION\",\"outcome\":\"APPROVED\",\"server_on_complete_params_darray_json\":\"{{\\\"personal_data_toggle\\\":\\\"true\\\",\\\"data_shared_3pd_toggle\\\":\\\"true\\\",\\\"cross_border_data_transfer_toggle\\\":\\\"true\\\",\\\"location_info_toggle\\\":\\\"true\\\"}}\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=9407571762647749";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c9, "application/x-www-form-urlencoded");
                        var payload_c10 = $"av={uid}&__user={uid}&__a=1&__req=i&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptOutcomeBatchedMutation&variables={{\"input\":{{\"client_mutation_id\":\"12\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INTRODUCTION\",\"outcome\":\"APPROVED\",\"server_on_complete_params_darray_json\":\"{{\\\"personal_data_toggle\\\":\\\"true\\\",\\\"data_shared_3pd_toggle\\\":\\\"true\\\",\\\"cross_border_data_transfer_toggle\\\":\\\"true\\\",\\\"location_info_toggle\\\":\\\"true\\\"}}\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6100374023362838";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c10, "application/x-www-form-urlencoded");
                        var payload_c11 = $"av={uid}&__user={uid}&__a=1&__req=j&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}7&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"13\",\"actor_id\":\"{uid}\",\"event\":\"consent_interactions_prompt_impression\",\"event_data\":\"{{\\\"device_permission\\\":null,\\\"device_permissions_result\\\":null,\\\"privacy_control_id\\\":null,\\\"prompt_type\\\":8}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_outro\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c11, "application/x-www-form-urlencoded");
                        var payload_c12 = $"av={uid}&__user={uid}&__a=1&__req=k&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"14\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_OUTRO\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"IMPRESSION\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"CONCLUSION\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c12, "application/x-www-form-urlencoded");
                        var payload_c13 = $"av={uid}&__user={uid}&__a=1&__req=l&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptOutcomeBatchedMutation&variables={{\"input\":{{\"client_mutation_id\":\"15\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_OUTRO\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"CONCLUSION\",\"outcome\":\"APPROVED\",\"server_on_complete_params_darray_json\":\"{{}}\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6100374023362838";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c13, "application/x-www-form-urlencoded");
                        var payload_c14 = $"av={uid}&__user={uid}&__a=1&__req=m&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptEndOfFlowBatchedMutation&variables={{\"input\":{{\"client_mutation_id\":\"16\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_OUTRO\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"CONCLUSION\",\"outcome\":\"APPROVED\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6494107973937368";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c14, "application/x-www-form-urlencoded");

                        httpRequest.AddHeader("authority", "www.facebook.com");
                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httpRequest.AddHeader("dpr", "0.800000011920929");
                        httpRequest.AddHeader("priority", "u=0, i");
                        httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/pipa/?params%5Bpft_surface%5D=facebook_comet&params%5Bis_new_user_blocking_flow%5D=true&params%5Bgcl_experience_id%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&params%5Bpft_session_key%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&source=pipa_blocking_flow");
                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                        httpRequest.AddHeader("sec-fetch-dest", "document");
                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                        httpRequest.AddHeader("sec-fetch-user", "?1");
                        httpRequest.AddHeader("upgrade-insecure-requests", "1");
                        httpRequest.AddHeader("viewport-width", "1420");
                        response = httpRequest.Get("https://www.facebook.com/");
                        responseStr9_2 = response.ToString();
                        url = httpRequest.Address.ToString();
                    }

                    if (responseStr.Contains("ACCOUNT_ID") || responseStr9_1.Contains("ACCOUNT_ID") || responseStr9_2.Contains("ACCOUNT_ID"))
                    {
                        var responseStr9 = "";
                        var responseStr1 = "";
                        var responseStr_F = "";
                        var ACCOUNT_ID = Regex.Match(responseStr, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                        var ACCOUNT_ID3 = Regex.Match(responseStr9_1, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                        var ACCOUNT_ID_2 = Regex.Match(responseStr9_2, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                        var ACCOUNT_ID1 = Regex.Match(responseStr1, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                        if (ACCOUNT_ID == "0" || ACCOUNT_ID3 == "0" || ACCOUNT_ID_2 == "0")
                        {
                            row.Cells["cStatus"].Value = "Login Cookie FAIL....";
                            //login fail
                            httpRequest.Cookies = new CookieDictionary();


                            EnsurePostWWWLoginHDFull(httpRequest);
                            var response1 = httpRequest.Get("https://www.facebook.com/login");

                            if (response1.IsOK)
                            {
                                row.Cells["cStatus"].Value = "Login Cookie UID|PASS....";
                                responseStr1 = response1.ToString();


                                var document = new HtmlDocument();
                                document.LoadHtml(responseStr1);
                                var jazoestNode = document.DocumentNode.SelectNodes("//input[@name='jazoest']").FirstOrDefault();
                                var jazoest = jazoestNode.Attributes["Value"].Value;
                                var lsdNode = document.DocumentNode.SelectNodes("//input[@name='lsd']").FirstOrDefault();
                                var lsd = lsdNode.Attributes["Value"].Value;
                                var acttionlogin = document.DocumentNode.SelectNodes("//form[@id='login_form']").FirstOrDefault();
                                var token = acttionlogin.Attributes["action"].Value.Replace("amp;", "");
                                httpRequest.AddHeader("origin", "https://www.facebook.com");
                                httpRequest.AddHeader("referer", "https://www.facebook.com/login");
                                EnsurePostWWWLoginHDFull(httpRequest);
                                var playload = $"jazoest={jazoest}&lsd={lsd}&display=&isprivate=&return_session=&skip_api_login=&signed_next=&trynum=1&timezone=-420&lgndim=eyJ3IjoxOTIwLCJoIjoxMDgwLCJhdyI6MTkyMCwiYWgiOjEwNDAsImMiOjI0fQ==&lgnrnd=002449_hss0&lgnjs=1733300694&email={uid}&prefill_contact_point={uid}&prefill_source=browser_dropdown&prefill_type=password&first_prefill_source=browser_dropdown&first_prefill_type=contact_point&had_cp_prefilled=true&had_password_prefilled=true&ab_test_data=AAAA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/A/AAAA/BAAA&encpass={password}";
                                response = httpRequest.Post($"https://www.facebook.com{token}", playload, "application/x-www-form-urlencoded");
                                responseStr1 = response.ToString();
                                var cookieStr = httpRequest.Cookies.ToString();

                                if (cookieStr.Contains("xs="))
                                {

                                    url = httpRequest.Address.ToString();
                                    if (url.Contains("https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice"))
                                    {
                                        row.Cells["cStatus"].Value = "Cho phép sử dụng cookie.....";
                                        httpRequest.AddHeader("authority", "www.facebook.com");
                                        httpRequest.AddHeader("accept", "*/*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                        httpRequest.AddHeader("x-asbd-id", "129477");
                                        httpRequest.AddHeader("x-fb-friendly-name", "useSaharaCometConsentPostPromptOutcomeServerMutation");
                                        var fb_dtsg = Regex.Match(responseStr1, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                        jazoest = Regex.Match(responseStr1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                        lsd = Regex.Match(responseStr1, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                        var experience_id = Regex.Match(responseStr1, "experience_id\":\"(.*?)\"").Groups[1].Value.ToString();
                                        var id = experience_id;
                                        var payload = $"av={uid}&__user={uid}&__a=1&__req=6&__hs=20092.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019149319&__s=::07m5uu&__hsi=7456086034100500556&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0lW4o0B-q1ew2io2awt81s8hwnU6a3a1YwBgao6C0Mo2swlo5q4U2zxe2GewbS361qw8Xwn82Lw5XwSyES1Tw8W0Lo6-1CG0hq1Iwqo5p0qZ6goK1sAwHwtU5K2G0F8iw&__csr=hXOcxd92rFx6iFFWAGbryoC8gzyQWzFpbBgDDGui9y-EcoG48K2W6Qii3mdwdm3i0b5K0qK0bJw02H-E0lQw&__comet_req=1&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019149319&__spin_b=trunk&__spin_t=1736005310&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useSaharaCometConsentPostPromptOutcomeServerMutation&variables={{\"input\":{{\"client_mutation_id\":\"2\",\"actor_id\":\"{uid}\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"__aectx__\\\":\\\"{{\\\\\\\"id\\\\\\\":\\\\\\\"{id}\\\\\\\",\\\\\\\"flows\\\\\\\":[{{\\\\\\\"id\\\\\\\":\\\\\\\"user_cookie_choice_v2\\\\\\\",\\\\\\\"prompts\\\\\\\":[{{\\\\\\\"id\\\\\\\":\\\\\\\"user_cookie_choice_granular_control\\\\\\\"}}]}}]}}\\\"}}\",\"flow\":\"USER_COOKIE_CHOICE_V2\",\"inputs_json\":\"{{\\\"other_company_trackers_on_foa\\\":\\\"\\\",\\\"fb_trackers_on_other_companies\\\":\\\"\\\",\\\"advertising\\\":\\\"\\\",\\\"analytics\\\":\\\"\\\",\\\"content_and_media\\\":\\\"\\\",\\\"productivity\\\":\\\"\\\",\\\"ADOBE_MARKETO\\\":\\\"\\\",\\\"GOOGLE_ADS\\\":\\\"\\\",\\\"KOCHAVA\\\":\\\"\\\",\\\"LINKEDIN_MARKETING\\\":\\\"\\\",\\\"X_ADS\\\":\\\"\\\",\\\"GOOGLE_ANALYTICS\\\":\\\"\\\",\\\"MEDALLIA\\\":\\\"\\\",\\\"AMAZON_AWS_CONTENT\\\":\\\"\\\",\\\"BLINGS_IO\\\":\\\"\\\",\\\"CLOUDFRONT\\\":\\\"\\\",\\\"GIPHY\\\":\\\"\\\",\\\"GOOGLE_MEDIA\\\":\\\"\\\",\\\"NEW_YORK_TIMES\\\":\\\"\\\",\\\"SOUNDCLOUD\\\":\\\"\\\",\\\"SPOTIFY\\\":\\\"\\\",\\\"SPREAKER\\\":\\\"\\\",\\\"TED\\\":\\\"\\\",\\\"TENOR\\\":\\\"\\\",\\\"TIKTOK\\\":\\\"\\\",\\\"VIMEO\\\":\\\"\\\",\\\"X\\\":\\\"\\\",\\\"YOUTUBE\\\":\\\"\\\",\\\"CHILI_PIPER\\\":\\\"\\\",\\\"GOOGLE\\\":\\\"\\\",\\\"JIO\\\":\\\"\\\",\\\"MAPBOX\\\":\\\"\\\",\\\"MICROSOFT\\\":\\\"\\\",\\\"card_index_0_learnt_more\\\":\\\"\\\",\\\"card_index_1_learnt_more\\\":\\\"\\\",\\\"card_index_2_learnt_more\\\":\\\"\\\",\\\"card_index_3_learnt_more\\\":\\\"\\\"}}\",\"outcome\":\"APPROVED\",\"outcome_data_json\":\"{{}}\",\"prompt\":\"USER_COOKIE_CHOICE_GRANULAR_CONTROL\",\"runtime\":\"SAHARA\",\"source\":\"pft_user_cookie_choice\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=8906652576046836";
                                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", playload, "application/x-www-form-urlencoded");
                                        if (response.IsOK)
                                        {

                                            var responseStr8 = response.ToString();
                                            url = httpRequest.Address.ToString();

                                            httpRequest.AddHeader("authority", "www.facebook.com");
                                            httpRequest.AddHeader("accept", "*/*");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("priority", "u=4, i");
                                            httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                                            httpRequest.AddHeader("sec-fetch-mode", "no-cors");
                                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                            fb_dtsg = Regex.Match(responseStr1, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                            jazoest = Regex.Match(responseStr1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                            lsd = Regex.Match(responseStr1, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                            var payload1 = $"__a=1&__ccg=MODERATE&__comet_req=1&__hs=20093.HYP%3Acomet_plat_default_pkg.2.1.0.2.1&__hsi=7456292581936758885&__req=7&__rev=1019152068&__s=%3A%3A55p7kf&__spin_b=trunk&__spin_r=1019152068&__spin_t=1736053401&__user={uid}&dpr=1&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&ph=C3";
                                            var url_post = $"https://www.facebook.com/ajax/bnzai?__a=1&__ccg=MODERATE&__comet_req=1&__hs=20093.HYP%3Acomet_plat_default_pkg.2.1.0.2.1&__hsi=7456292581936758885&__req=7&__rev=1019152068&__s=%3A%3A55p7kf&__spin_b=trunk&__spin_r=1019152068&__spin_t=1736053401&__user={uid}&dpr=1&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&ph=C3";
                                            response = httpRequest.Post(url_post, payload1, "multipart/form-data; boundary=----WebKitFormBoundaryzyTDgA13uKCw1uhv");
                                            responseStr8 = response.ToString();
                                            url = httpRequest.Address.ToString();



                                            var cookie = httpRequest.Cookies.ToString();
                                            httpRequest.AddHeader("authority", "www.facebook.com");
                                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("dpr", "0.800000011920929");
                                            httpRequest.AddHeader("priority", "u=0, i");
                                            httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "document");
                                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                            httpRequest.AddHeader("sec-fetch-user", "?1");
                                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                            httpRequest.AddHeader("viewport-width", "1305");
                                            response = httpRequest.Get("https://www.facebook.com/");
                                            if (response.IsOK)
                                            {
                                                responseStr9 = response.ToString();
                                                url = httpRequest.Address.ToString();
                                                if (url == "https://www.facebook.com/")
                                                {
                                                    row.Cells["cStatus"].Value = "Cho phép sử dụng cookie DONE";
                                                }
                                            }
                                        }

                                    }
                                    if (url.Contains("https://www.facebook.com/checkpoint/601051028565049/"))
                                    {

                                        row.Cells["cStatus"].Value = "DISS MISS";

                                        httpRequest.AddHeader("authority", "www.facebook.com");
                                        httpRequest.AddHeader("accept", "*/*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("origin", "https://www.facebook.com");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        httpRequest.AddHeader("referer", "https://www.facebook.com/checkpoint/601051028565049/?next=https%3A%2F%2Fwww.facebook.com%2F%3Flsrc%3Dlb");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                        httpRequest.AddHeader("x-asbd-id", "129477");
                                        httpRequest.AddHeader("x-fb-friendly-name", "FBScrapingWarningMutation");
                                        var fb_dtsg = Regex.Match(responseStr1, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                        jazoest = Regex.Match(responseStr1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                        lsd = Regex.Match(responseStr1, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                        var payload_d = $"av={uid}&__user={uid}&__a=1&__req=8&__hs=20095.HYP:comet_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019175737&__s=dqxj5a:senuu9:e67otl&__hsi=7457002493664995955&__dyn=7xeUmwlEnwn8K2Wmh0no6u5U4e0yoW3q32360CEbo19oe8hw2nVE4W099w8G1Dz81s8hwnU2lwv89k2C1Fwc60D8vwRwlE-U2zxe2GewbS361qw8Xwn82Lw5XwSyES1Mw9m0Lo6-1Fw4mwr86C0No7S3m1TwLwHwGwbu&__csr=gxiS_GQqVqDzFAfGUzz9aByJAF12iK6Ey4Xh4maxqbwAwMwBwJwJwTxm5E1jo1cEmwee1Bxe0wU2MwPw20E3wwb60O87G0agw06abw2x802kUw&__comet_req=15&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019175737&__spin_b=trunk&__spin_t=1736218690&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=FBScrapingWarningMutation&variables={{}}&server_timestamps=true&doc_id=6339492849481770";
                                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_d, "application/x-www-form-urlencoded");
                                        var responseStr_d = response.ToString();
                                        url = httpRequest.Address.ToString();

                                        response = httpRequest.Get("https://www.facebook.com/?lsrc=lb");
                                        responseStr_F = response.ToString();
                                        url = httpRequest.Address.ToString();
                                        ACCOUNT_ID1 = Regex.Match(responseStr_F, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();

                                    }
                                    if (url.Contains("https://www.facebook.com/login/?next=https%3A%2F%2Fwww.facebook.com%2F"))
                                    {
                                        row.Cells["cStatus"].Value = "SPAM";
                                        //return "DONE";
                                    }
                                }
                                else
                                {
                                    url = httpRequest.Address.ToString();
                                    if (url.Contains("https://www.facebook.com/login/device-based/regular/login/?login_attempt=1&lwv=100"))
                                    {
                                        row.Cells["cStatus"].Value = "SPAM";
                                        //return "DONE";
                                    }
                                    row.Cells["cStatus"].Value = "Login FAIL!";
                                    //return "DONE";
                                }
                            }
                        }
                        var ACCOUNT_ID2 = Regex.Match(responseStr9, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                        ACCOUNT_ID1 = Regex.Match(responseStr1, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();

                        ACCOUNT_ID3 = Regex.Match(responseStr9_1, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                        ACCOUNT_ID_2 = Regex.Match(responseStr9_2, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();

                        if (ACCOUNT_ID == uid || ACCOUNT_ID1 == uid || ACCOUNT_ID3 == uid || ACCOUNT_ID_2 == uid)
                        {
                            url = httpRequest.Address.ToString();
                            if (url.Contains("282"))
                            {
                                sl_tk_282++;
                                if (tb_sl_282.InvokeRequired)
                                {
                                    tb_sl_282.Invoke(new Action(() =>
                                    {
                                        tb_sl_282.Clear();
                                        tb_sl_282.Text = sl_tk_282.ToString();
                                    }));
                                }
                                else
                                {
                                    tb_sl_282.Clear();
                                    tb_sl_282.Text = sl_tk_282.ToString();
                                }
                                row.Cells["cStatus"].Value = "282";
                                goto out1;
                                //return "DONE";
                            }
                            row.Cells["cStatus"].Value = "Login DONE";
                            httpRequest.AddHeader("authority", "www.facebook.com");
                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httpRequest.AddHeader("dpr", "0.800000011920929");
                            httpRequest.AddHeader("priority", "u=0, i");
                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                            httpRequest.AddHeader("sec-fetch-dest", "document");
                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                            httpRequest.AddHeader("sec-fetch-site", "none");
                            httpRequest.AddHeader("sec-fetch-user", "?1");
                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                            httpRequest.AddHeader("viewport-width", "1245");
                            var url_adsmanager = "https://www.facebook.com/adsmanager/";
                            response = httpRequest.Get(url_adsmanager);
                            if (response.IsOK)
                            {
                                var responseStr2 = response.ToString();
                                var cookieads = httpRequest.Cookies.ToString();
                                url = httpRequest.Address.ToString();

                                if (url.Contains("https://adsmanager.facebook.com/adsmanager/"))
                                {

                                    httpRequest.AddHeader("authority", "adsmanager.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("dpr", "0.800000011920929");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "1245");

                                    response = httpRequest.Get("https://adsmanager.facebook.com/adsmanager/");
                                    if (response.IsOK)
                                    {
                                        var responseStr3 = response.ToString();
                                        var cookieads1 = httpRequest.Cookies.ToString();
                                        string text2 = httpRequest.Address.ToString();
                                        var responseStr4 = "";
                                        var url_act = Regex.Match(responseStr3, "window.location.replace\\(\"(.*?)\"").Groups[1].Value.Replace("\\", "");
                                        if (!string.IsNullOrEmpty(url_act))
                                        {
                                            httpRequest.AddHeader("authority", "adsmanager.facebook.com");
                                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("dpr", "0.800000011920929");
                                            httpRequest.AddHeader("priority", "u=0, i");
                                            httpRequest.AddHeader("referer", "https://adsmanager.facebook.com/adsmanager/");
                                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "document");
                                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                            httpRequest.AddHeader("sec-fetch-user", "?1");
                                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                            httpRequest.AddHeader("viewport-width", "1245");
                                            response = httpRequest.Get(url_act);
                                            responseStr4 = response.ToString();
                                        }

                                        if (responseStr4.Contains("window.__accessToken=") || responseStr3.Contains("window.__accessToken="))
                                        {
                                            // reg bm o day

                                            string text5 = httpRequest.Address.ToString();
                                            var ad_account_id = Regex.Match(responseStr4, "\"ad_account_id\\\":\\\"(.*?)\\\"").Groups[1].Value;
                                            if (string.IsNullOrEmpty(ad_account_id))
                                            {
                                                ad_account_id = Regex.Match(responseStr3, "\"ad_account_id\\\":\\\"(.*?)\\\"").Groups[1].Value;
                                            }

                                            try
                                            {
                                                if (REG_BM == "ON")
                                                {

                                                    httpRequest.AddHeader("authority", "adsmanager.facebook.com");
                                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                    httpRequest.AddHeader("cache-control", "max-age=0");
                                                    httpRequest.AddHeader("dpr", "0.800000011920929");
                                                    httpRequest.AddHeader("priority", "u=0, i");
                                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                                    httpRequest.AddHeader("viewport-width", "1496");
                                                    response = httpRequest.Get($"https://adsmanager.facebook.com/adsmanager/manage/campaigns?act={ad_account_id}&filter_set&nav_entry_point=cm_redirect&nav_source=no_referrer&breakdown_regrouping=1");
                                                    var responseStr_99 = response.ToString();
                                                    var url_1 = httpRequest.Address.ToString();

                                                    int currentNumber = 1;
                                                    int GetNextNumber()
                                                    {
                                                        int numberToReturn = currentNumber;
                                                        currentNumber++;

                                                        // Reset lại nếu vượt quá 10
                                                        if (currentNumber > 10)
                                                        {
                                                            currentNumber = 1;
                                                        }

                                                        return numberToReturn;
                                                    }
                                                    var url_reg_bm = "https://adsmanager.facebook.com/api/graphql/?_callFlowletID=0&_triggerFlowletID=10108&qpl_active_flow_instance_ids=1001920343_dcff5009580f5a78a38";
                                                    httpRequest.AddHeader("authority", "adsmanager.facebook.com");
                                                    httpRequest.AddHeader("accept", "*/*");
                                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                    httpRequest.AddHeader("priority", "u=1, i");
                                                    httpRequest.AddHeader("referer", $"https://adsmanager.facebook.com/adsmanager/manage/campaigns?act={ad_account_id}&filter_set&nav_entry_point=cm_redirect&nav_source=no_referrer&breakdown_regrouping=1");
                                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                                    httpRequest.AddHeader("x-asbd-id", "129477");
                                                    httpRequest.AddHeader("x-bh-flowsessionid", "upl_wizard_1735807109978_f54cfb14-882b-4a50-a589-a516dcff0eb2");
                                                    httpRequest.AddHeader("x-fb-friendly-name", "useBusinessCreationMutationMutation");
                                                    httpRequest.AddHeader("x-fb-upl-sessionid", "upl_1735807109978_4167fe02-0a9c-4caa-90be-b7df2f9a0b9b");

                                                    var fb_dtsg = Regex.Match(responseStr4, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                    if (string.IsNullOrEmpty(fb_dtsg))
                                                    {
                                                        fb_dtsg = Regex.Match(responseStr3, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                    }
                                                    var lsd = Regex.Match(responseStr4, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                    if (string.IsNullOrEmpty(lsd))
                                                    {
                                                        lsd = Regex.Match(responseStr3, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                    }

                                                    int z = (int)for_reg_bm.Value;
                                                    int delay_reg = (int)delay_reg_bm.Value;
                                                    for (int regbm = 0; regbm < z; regbm++)
                                                    {
                                                        row.Cells["cStatus"].Value = "REG BM.....";

                                                        var user_last_name = "goc";
                                                        var danhsacnhmailbusiness = File.ReadAllLines("Danhsachmailbusiness.txt").ToList();
                                                        Random rnd = new Random();
                                                        int indexRandom = rnd.Next(0, danhsacnhmailbusiness.Count);
                                                        var user_email = danhsacnhmailbusiness[indexRandom];
                                                        // Gọi hàm để lấy số theo thứ tự
                                                        int number = GetNextNumber(); // Sẽ trả về 1, sau đó 2, sau đó 3
                                                                                      //Random rd = new Random();
                                                                                      //int randomNumber = rd.Next(1,10);
                                                        string bmName = $"{uid} " + number;
                                                        var payload = $"av={uid}&__usid=6-Tspgdb419u1aml:Pspgdbs1a50mks:0-Aspgdb4oaej1x-RV=6:F=&__aaid={ad_account_id}&__user={uid}&__a=1&__req=27&__hs=20090.BP:ads_manager_pkg.2.0.0.0.0&dpr=1&__ccg=UNKNOWN&__rev=1019112896&__s=dgniy2:odt1v9:coisil&__hsi=7455234711095925955&__dyn=7AgSXgWGgWEjgDBxmSudg9omoiyoK6FVpkihG5Xx2m2q3K2KmeGqKi5axeqaScCCG225pojACjyocuF98SmqnK7GzUuwDxq4EOezoK26UKbC-mdwTxOESegGbwgEmK9y8Gdz8hyUuxqt1eiUO4EgCyku4oS4EWfGUhwyg9p44889EScxyu6UGq13yHGmmUTxJe9LgbeqECutk2dmm2adAyXzAbwxyU29xep3bBAzECi9lpubwIxecAwXzogyo464Xy-cwuEnxaFo5a7EN1O74q9DByUObAzE89rxy3Giu4rwnVUC4UK4EigK7kbAwOxG8gdoJ3byEZ0Wxq2Sq7oV1JyEgx2aK48Oi4p8y7rKfxefKaxWi2y2i7Qm4VEhGcx22uexm4ofp8rxefzoc8jyEG4E949BCxK9J7yUnwUzpUqy8doHxe7edxiFFEC48C9wFjQfyoaoym9yA4Ekx24oK4Ehzawwy9pEHyU8Uiwj8G1LDDV8sw8KmbwVzi1y4fz8coiGQU9EeU-eC-5u8Bxu6u2m3K4ouK5Sm78ohXF3U8pE8FUlxuiueyKvyUkgC9wgEeEmxl4K2S4kUy2iijDix68UkyEy3aQ48B5xa22um4EoAgCi79oG&__csr=&__comet_req=25&fb_dtsg={fb_dtsg}&jazoest=25159&lsd={lsd}&__spin_r=1019112896&__spin_b=trunk&__spin_t=1735807096&__jssesw=1&qpl_active_flow_ids=1001920343&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useBusinessCreationMutationMutation&variables={{\"input\":{{\"client_mutation_id\":\"1\",\"actor_id\":\"{uid}\",\"business_name\":\"{bmName}\",\"user_first_name\":\"{uid}\",\"user_last_name\":\"{user_last_name}\",\"user_email\":\"{user_email}\",\"creation_source\":\"AM_BUSINESS_CREATION_IN_SCOPE_SELECTOR\",\"entry_point\":\"UNIFIED_GLOBAL_SCOPE_SELECTOR\"}}}}&server_timestamps=true&doc_id=7780408488685584&fb_api_analytics_tags=[\"qpl_active_flow_ids=1001920343\"]";
                                                        response = httpRequest.Post(url_reg_bm, payload, "application/x-www-form-urlencoded");
                                                        var responseStr_reg = response.ToString();


                                                        Thread.Sleep(TimeSpan.FromSeconds(delay_reg));


                                                    }
                                                }

                                            }
                                            catch
                                            {
                                                if (login < 3)
                                                {
                                                    row.Cells["cStatus"].Value = "REGBM VĂNG => Login....";
                                                    login++;
                                                    goto login_;
                                                }
                                                else
                                                {
                                                    row.Cells["cStatus"].Value = $"REG BM => CLONE VĂNG";
                                                    //return "FAIL";
                                                }
                                            }



                                            try
                                            {
                                                for (int x = 0; x < 3; x++)
                                                {
                                                    if (x < 2)
                                                    {
                                                        row.Cells["cStatus"].Value = "CLOSE AD ACCOUNT....";
                                                    }
                                                    if (x >= 2)
                                                    {
                                                        row.Cells["cStatus"].Value = "CHECK AD ACCOUNT....";
                                                    }

                                                    resultList = new HashSet<string>();
                                                    // Danh sách để lưu trữ các phần tử với account_status = "ACTIVE"
                                                    activeItems = new List<string>();

                                                    // Danh sách lưu trữ các phần tử còn lại
                                                    otherItems = new List<string>();
                                                    // close tk

                                                    var url_ad_account_settings = $"https://adsmanager.facebook.com/adsmanager/manage/ad_account_settings/ad_account_setup?act={ad_account_id}&breakdown_regrouping=true&nav_source=no_referrer";
                                                    //var url_ad_account_settings = $"https://adsmanager.facebook.com/adsmanager/manage/campaigns?act={ad_account_id}&filter_set&nav_entry_point=cm_redirect&nav_source=no_referrer#";
                                                    httpRequest.AddHeader("authority", "adsmanager.facebook.com");
                                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                    httpRequest.AddHeader("cache-control", "max-age=0");
                                                    httpRequest.AddHeader("dpr", "0.800000011920929");
                                                    httpRequest.AddHeader("priority", "u=0, i");
                                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                                    httpRequest.AddHeader("viewport-width", "1411");
                                                    response = httpRequest.Get(url_ad_account_settings);
                                                    if (response.IsOK)
                                                    {
                                                        var responseStr5 = response.ToString();
                                                        string text3 = httpRequest.Address.ToString();
                                                        token_EEAB = Regex.Match(responseStr4, "{window\\.__accessToken=\"(.*?)\"").Groups[1].Value.ToString();
                                                        if (string.IsNullOrEmpty(token_EEAB))
                                                        {
                                                            token_EEAB = Regex.Match(responseStr3, "window\\.__accessToken=\"(.*?)\"").Groups[1].Value.ToString();
                                                        }
                                                        //   var checkactive = $"https://graph.facebook.com/v15.0/me/adaccounts?access_token={token_EEAB}&limit=10&fields=id,name,status,account_id,account_status,adtrust_dsl,currency,timezone_offset,spend_cap,amount_spent,daily_spend_limit,business,created_time,is_notifications_enabled,is_automated_rules_enabled,campaign_group,campaign_group_name,fbu,funding_source,owner";
                                                        var checkactive = $"https://graph.facebook.com/v19.0/me/adaccounts?access_token={token_EEAB}&limit=10&fields=id,name,account_id,adtrust_dsl,account_status,status,currency,timezone_offset,spend_cap,amount_spent,business,created_time,is_notifications_enabled,is_automated_rules_enabled,campaign_group,campaign_group_name,fbu,funding_source,owner";
                                                             response = httpRequest.Get(checkactive);
                                                        if (response.IsOK)
                                                        {
                                                            var responseSTR6 = response.ToString();
                                                            HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                                                            doc.LoadHtml(responseSTR6);
                                                            JObject jobject = JObject.Parse(responseSTR6);
                                                            var dataValues = jobject["data"];
                                                            if (dataValues != null)
                                                            {
                                                                var dataValuesArr = dataValues.ToObject<JArray>();
                                                                foreach (var itemObject in dataValuesArr)
                                                                {

                                                                    var name = itemObject["name"].ToString();
                                                                    var account_id = itemObject["account_id"].ToString();
                                                                    var account_status = itemObject["account_status"].ToString();
                                                                    if (account_status == "1")
                                                                    {
                                                                        account_status = "ACTIVE";
                                                                        activeItems.Add($"{account_id}|{account_status}");
                                                                        //ACTIVE
                                                                    }
                                                                    if (account_status == "3")
                                                                    {
                                                                        account_status = "DISABLED";
                                                                        //DISABLED
                                                                        otherItems.Add($"{account_id}|{account_status}");
                                                                    }
                                                                    if (account_status == "100")
                                                                    {
                                                                        account_status = "PENDING";
                                                                        otherItems.Add($"{account_id}|{account_status}");
                                                                        //PENDING

                                                                    }
                                                                    var adtrust_dsl = itemObject["adtrust_dsl"].ToString();
                                                                    var currency = itemObject["currency"].ToString();

                                                                    if (currency == "VND")
                                                                    {
                                                                        MessageBox.Show("VND");
                                                                        //return "FAIL";
                                                                    }

                                                                    if (x == 2)
                                                                    {
                                                                        row.Cells["cCheckBM"].Value += $"{account_id}|{account_status}|{adtrust_dsl}|{currency}|";
                                                                    }


                                                                    //nameBM = itemObject["name"].ToString();

                                                                }
                                                            }
                                                            // Kết hợp lại, activeItems sẽ được thêm vào đầu tiên
                                                            var sortedResultList = activeItems.Concat(otherItems).ToList();

                                                            // Nếu cần, bạn có thể chuyển lại sang HashSet nếu muốn
                                                            resultList = new HashSet<string>(sortedResultList);
                                                        }

                                                        if (resultList.Count >= 3)
                                                        {
                                                            goto next;
                                                        }
                                                        if (CLOSE_SHARE == "ON")
                                                        {

                                                            foreach (var value in resultList)
                                                            {
                                                                int closed_1 = 0;
                                                            closed:
                                                                try
                                                                {
                                                                    string IDACCOUNT = value.Split('|')[0];
                                                                    string status = value.Split('|')[1];
                                                                    row.Cells["cStatus"].Value = $"CLOSE AD ACCOUNT {IDACCOUNT}";
                                                                    if (status == "ACTIVE")
                                                                    {
                                                                        httpRequest.AddHeader("authority", "adsmanager.facebook.com");
                                                                        httpRequest.AddHeader("accept", "*/*");
                                                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                                        httpRequest.AddHeader("priority", "u=1, i");
                                                                        httpRequest.AddHeader("referer", $"https://adsmanager.facebook.com/adsmanager/manage/ad_account_settings/ad_account_setup?act={IDACCOUNT}&nav_entry_point=ads_ecosystem_navigation_menu&breakdown_regrouping=1&nav_source=ads_manager");
                                                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.140\", \"Chromium\";v=\"131.0.6778.140\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                                                        httpRequest.AddHeader("x-asbd-id", "129477");
                                                                        httpRequest.AddHeader("x-fb-lsd", "AlU_F2BtvM1rVJTJBNDhDY");

                                                                        var fb_dtsg = Regex.Match(responseStr4, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                                        if (string.IsNullOrEmpty(fb_dtsg))
                                                                        {
                                                                            fb_dtsg = Regex.Match(responseStr3, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                                        }
                                                                        var lsd = Regex.Match(responseStr4, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                                        if (string.IsNullOrEmpty(lsd))
                                                                        {
                                                                            lsd = Regex.Match(responseStr3, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                                        }
                                                                        var url1 = $"https://adsmanager.facebook.com/ads/ajax/account_close/?_callFlowletID=8482&_triggerFlowletID=8709";
                                                                        var payload = $"account_id={IDACCOUNT}&flow_session_id=uplserver_1735049722_140ce931-d71b-4c2f-9681-ff712106998b&session_id=uplserver_1735049722_140ce931-d71b-4c2f-9681-ff712106998b&__usid=6-Tsp04k01fmfawj:Psp04lnviqilx:0-Asp04k0zvc5n9-RV=6:F=&__aaid={IDACCOUNT}&__user={uid}&__a=1&__req=1v&__hs=20081.BP:ads_manager_pkg.2.0.0.0.0&dpr=1&__ccg=UNKNOWN&__rev=1019070744&__s=51h7ty:akz0db:b2tvoe&__hsi=7451979962976171599&__dyn=7AgSXgWGgWEjgDBxmSudg9omoiyoK6FVpkihG5Xx2m2q3K2KmeGqKi5axeqaScCCG225pojACjyocuF98SmqnK7GzUuwDxq4EOezoKfx6UKbC-mdwTxOESegGbwgEmK9y8Gdz8hyUuxqt1eiUO4EgCyku4oS4EWfGUhwyg9p44889EScxyu6UGq13yHGmmUTxJe9LgbeqECutk2dmm2adAyXzAbwxyU29xep3bBAzECi9lpubwIxecAwXzogyo464Xy-cwuEnxaFo5a7EN1O74q9DByUObAzE89rxy3Giu4rwnVUC4UK4EigK7kbAwOxG8gdoJ3byEZ0Wxq2Sq7oV1JyEgx2aK48Oi4p8y7rKfxefKaxWi2y2i7Qm4VEhGcx22uexm4ofp8rxefzoc8jyEG4E949BCxK9J7yUnwUzpUqy8doHxe7edxiFFEC48C9wFjQfyoaoym9yA4Ekx24oK4Ehzawwy9pEHyU8Uiwj8G1LDDV8sw8KmbwVzi1y4fz8coiGQU9EeVVUWrUlUym5UpU9oeUhxWUnposxx7KAfwxCwyDxm5V9UWaV-bxh2oC5EaUeEmxl4K2S4kUy2iijDix68UkyEy68WaJ129hoiwwDBxa6949AxOmaw&__csr=&__comet_req=25&fb_dtsg={fb_dtsg}&jazoest=25404&lsd={lsd}&__spin_r=1019070744&__spin_b=trunk&__spin_t=1735049291&__jssesw=1";
                                                                        response = httpRequest.Post(url1, payload, "application/x-www-form-urlencoded");
                                                                        if (response.IsOK)
                                                                        {
                                                                            var responseStr6 = response.ToString();
                                                                            if (responseStr6.Contains("for (;;);{\"__ar\":1,\"payload\":[],\"lid\":\""))
                                                                            {
                                                                                row.Cells["cStatus"].Value = $"CLOSE AD ACCOUNT {IDACCOUNT} DONE";

                                                                                var url_ad_close = $"https://adsmanager.facebook.com/adsmanager/manage/ad_account_settings/ad_account_setup?nav_entry_point=cm_redirect&breakdown_regrouping=1&nav_source=no_referrer&act={IDACCOUNT}";
                                                                                httpRequest.AddHeader("authority", "adsmanager.facebook.com");
                                                                                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                                                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                                                httpRequest.AddHeader("cache-control", "max-age=0");
                                                                                httpRequest.AddHeader("dpr", "0.800000011920929");
                                                                                httpRequest.AddHeader("priority", "u=0, i");
                                                                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                                                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                                                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                                                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                                                                httpRequest.AddHeader("sec-fetch-dest", "document");
                                                                                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                                                                httpRequest.AddHeader("sec-fetch-site", "none");
                                                                                httpRequest.AddHeader("sec-fetch-user", "?1");
                                                                                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                                                                httpRequest.AddHeader("viewport-width", "1849");
                                                                                response = httpRequest.Get(url_ad_close);
                                                                                if (response.IsOK)
                                                                                {
                                                                                    var responseStr7 = response.ToString();
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                row.Cells["cStatus"].Value = $"CLOSE AD ACCOUNT {IDACCOUNT} FAIL!";
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                catch
                                                                {
                                                                    if (closed_1 < 2)
                                                                    {
                                                                        closed_1++;
                                                                        goto closed;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (login < 3)
                                                                        {
                                                                            row.Cells["cStatus"].Value = "CLOSE AC ..... VĂNG => Login....";
                                                                            login++;
                                                                            goto login_;
                                                                        }
                                                                        else
                                                                        {
                                                                            row.Cells["cStatus"].Value = $"CLOSE AC => CLONE VĂNG";
                                                                            //return "FAIL";
                                                                        }
                                                                    }
                                                                }


                                                            }

                                                        }


                                                    }


                                                next:
                                                    Thread.Sleep(1000);

                                                }
                                            }
                                            catch
                                            {
                                                if (login < 3)
                                                {
                                                    row.Cells["cStatus"].Value = "CHECK AD ACCOUNT & CLOSE AD ACCOUNT.... VĂNG => Login....";
                                                    login++;
                                                    goto login_;
                                                }
                                                else
                                                {
                                                    row.Cells["cStatus"].Value = $"CHECK AC => CLONE VĂNG";
                                                    //return "FAIL";
                                                }

                                            }
                                        }



                                    }
                                }

                            }
                        }
                        else
                        {
                            StreamWriter sw3 = new StreamWriter("URL.txt", true);
                            sw3.WriteLine(url);
                            sw3.Close();
                            row.Cells["cStatus"].Value = "Login FAIL!";
                        }
                    }
                }

                if (CLOSE_SHARE == "ON")
                {
                    #region CHECK_THONG_SO
                    var IDBM = "";
                    if (rtb_ID_BM_Share.InvokeRequired)
                    {
                        rtb_ID_BM_Share.Invoke(new Action(() =>
                        {
                            IDBM = rtb_ID_BM_Share.Text;
                        }));
                    }


                    var IDBM_BACKUP = "";

                    if (rtb_ID_BM_Share_BACK_UP.InvokeRequired)
                    {
                        rtb_ID_BM_Share_BACK_UP.Invoke(new Action(() =>
                        {
                            IDBM_BACKUP = rtb_ID_BM_Share_BACK_UP.Text;
                        }));
                    }

                    var IDBM_BACKUP_2 = "";

                    if (rtb_ID_BM_Share_BACK_UP2.InvokeRequired)
                    {
                        rtb_ID_BM_Share_BACK_UP2.Invoke(new Action(() =>
                        {
                            IDBM_BACKUP_2 = rtb_ID_BM_Share_BACK_UP2.Text;
                        }));
                    }

                    var IDBM_BACKUP_3 = "";

                    if (rtb_ID_BM_Share_BACK_UP3.InvokeRequired)
                    {
                        rtb_ID_BM_Share_BACK_UP3.Invoke(new Action(() =>
                        {
                            IDBM_BACKUP_3 = rtb_ID_BM_Share_BACK_UP3.Text;
                        }));
                    }





                    var IDBM_CLOSE = "";
                    if (rtb_IDBM_CLOSE.InvokeRequired)
                    {
                        rtb_IDBM_CLOSE.Invoke(new Action(() =>
                        {
                            IDBM_CLOSE = rtb_IDBM_CLOSE.Text;

                        }));
                    }
                    var IDBM_CLOSE_2 = "";
                    if (rtb_IDBM_CLOSE_2.InvokeRequired)
                    {
                        rtb_IDBM_CLOSE_2.Invoke(new Action(() =>
                        {
                            IDBM_CLOSE_2 = rtb_IDBM_CLOSE_2.Text;
                        }));
                    }

                    var IDBM_CLOSE_3 = "";
                    if (rtb_IDBM_CLOSE_3.InvokeRequired)
                    {
                        rtb_IDBM_CLOSE_3.Invoke(new Action(() =>
                        {
                            IDBM_CLOSE_3 = rtb_IDBM_CLOSE_3.Text;
                        }));
                    }

                    var IDBM_CLOSE_4 = "";
                    if (rtb_IDBM_CLOSE_4.InvokeRequired)
                    {
                        rtb_IDBM_CLOSE_4.Invoke(new Action(() =>
                        {
                            IDBM_CLOSE_4 = rtb_IDBM_CLOSE_4.Text;
                        }));
                    }



                    int sl_tk_bm_bm_back_up_nhan = (int)sl_nhan_Bm_BM_BACKUP.Value;
                    int sl_tk_bm_Close_1_2 = (int)sl_Nhan_BM_CLOSE1_2.Value;
                    int sl_tk_bm_PARTNER = (int)sl_Nhan_BM_PARTNER.Value;
                    var stk_bm = "";

                    if (tb_BM.InvokeRequired)
                    {
                        tb_BM.Invoke(new Action(() =>
                        {
                            stk_bm = tb_BM.Text;
                        }));
                    }
                    else
                    {
                        stk_bm = tb_BM.Text;
                    }

                    if (!string.IsNullOrEmpty(stk_bm))
                    {
                        sl_tk_bm = int.Parse(stk_bm);

                    }


                    var stk_bm_back_up = "";

                    if (tb_BM_BACK_UP.InvokeRequired)
                    {
                        tb_BM_BACK_UP.Invoke(new Action(() =>
                        {
                            stk_bm_back_up = tb_BM_BACK_UP.Text;
                        }));
                    }
                    else
                    {
                        stk_bm_back_up = tb_BM_BACK_UP.Text;
                    }
                    if (!string.IsNullOrEmpty(stk_bm_back_up))
                    {
                        sl_tk_bm_back_up = int.Parse(stk_bm_back_up);

                    }

                    var stk_bm_back_up_2 = "";

                    if (tb_BM_BACK_UP2.InvokeRequired)
                    {
                        tb_BM_BACK_UP2.Invoke(new Action(() =>
                        {
                            stk_bm_back_up_2 = tb_BM_BACK_UP2.Text;
                        }));
                    }
                    else
                    {
                        stk_bm_back_up_2 = tb_BM_BACK_UP2.Text;
                    }
                    if (!string.IsNullOrEmpty(stk_bm_back_up_2))
                    {
                        sl_tk_bm_back_up_2 = int.Parse(stk_bm_back_up_2);

                    }

                    var stk_bm_back_up_3 = "";

                    if (tb_BM_BACK_UP3.InvokeRequired)
                    {
                        tb_BM_BACK_UP3.Invoke(new Action(() =>
                        {
                            stk_bm_back_up_3 = tb_BM_BACK_UP3.Text;
                        }));
                    }
                    else
                    {
                        stk_bm_back_up_3 = tb_BM_BACK_UP3.Text;
                    }
                    if (!string.IsNullOrEmpty(stk_bm_back_up_3))
                    {
                        sl_tk_bm_back_up_3 = int.Parse(stk_bm_back_up_3);

                    }

                    var stk_bm_close1 = "";

                    if (tb_BM_Close1.InvokeRequired)
                    {
                        tb_BM_Close1.Invoke(new Action(() =>
                        {
                            stk_bm_close1 = tb_BM_Close1.Text;
                        }));
                    }
                    else
                    {
                        stk_bm_close1 = tb_BM_Close1.Text;
                    }
                    if (!string.IsNullOrEmpty(stk_bm_close1))
                    {
                        sl_tk_bm_close1 = int.Parse(stk_bm_close1);

                    }
                    var stk_bm_close2 = "";
                    if (tb_BM_Close_2.InvokeRequired)
                    {
                        tb_BM_Close_2.Invoke(new Action(() =>
                        {
                            stk_bm_close2 = tb_BM_Close_2.Text;
                        }));
                    }
                    else
                    {
                        stk_bm_close2 = tb_BM_Close_2.Text;
                    }

                    if (!string.IsNullOrEmpty(stk_bm_close2))
                    {
                        sl_tk_bm_close2 = int.Parse(stk_bm_close2);

                    }


                    var stk_bm_close3 = "";
                    if (tb_BM_Close_3.InvokeRequired)
                    {
                        tb_BM_Close_3.Invoke(new Action(() =>
                        {
                            stk_bm_close3 = tb_BM_Close_3.Text;
                        }));
                    }
                    else
                    {
                        stk_bm_close3 = tb_BM_Close_3.Text;
                    }

                    if (!string.IsNullOrEmpty(stk_bm_close3))
                    {
                        sl_tk_bm_close3 = int.Parse(stk_bm_close3);

                    }
                    var stk_bm_close4 = "";
                    if (tb_BM_Close_4.InvokeRequired)
                    {
                        tb_BM_Close_4.Invoke(new Action(() =>
                        {
                            stk_bm_close4 = tb_BM_Close_4.Text;
                        }));
                    }
                    else
                    {
                        stk_bm_close4 = tb_BM_Close_4.Text;
                    }

                    if (!string.IsNullOrEmpty(stk_bm_close4))
                    {
                        sl_tk_bm_close4 = int.Parse(stk_bm_close4);

                    }
                    var ID_BM_PARTNERS = "";
                    if (rtb_IDBM_PARTNER.InvokeRequired)
                    {
                        rtb_IDBM_PARTNER.Invoke(new Action(() =>
                        {
                            ID_BM_PARTNERS = rtb_IDBM_PARTNER.Text;
                        }));
                    }
                    else
                    {
                        ID_BM_PARTNERS = rtb_IDBM_PARTNER.Text;
                    }

                    #endregion


                    // Giả sử DataGridView có tên là 'dataGridView1'
                    int lastRowIndex = dgv1.Rows.Count - 1; // Đếm số hàng (trừ hàng trống cuối cùng nếu có)
                    if (lastRowIndex >= 0)  // Kiểm tra xem có hàng nào trong DataGridView không
                    {
                        // Lấy giá trị từ cột STT (giả sử cột STT có chỉ số 0)
                        var lastStt = dgv1.Rows[lastRowIndex].Cells["cStt"].Value.ToString();

                        var stt = "";
                        try
                        {
                            stt = row.Cells["cStt"].Value.ToString();
                        }
                        catch { }
                        if (lastStt == stt)
                        {
                            if (sl_tk_bm >= sl_tk_bm_bm_back_up_nhan)
                            {


                                if (rtb_BM_Nhan_Du.InvokeRequired)
                                {
                                    rtb_BM_Nhan_Du.Invoke(new Action(() =>
                                    {
                                        rtb_BM_Nhan_Du.AppendText(IDBM + "|BM|" + sl_tk_bm + "|" + DateTime.Now + Environment.NewLine);

                                    }));
                                }
                                else
                                {
                                    rtb_BM_Nhan_Du.AppendText(IDBM + "|BM|" + sl_tk_bm + "|" + DateTime.Now + Environment.NewLine);
                                }

                                StreamWriter sw = new StreamWriter("BMDANHAN.txt", true);
                                sw.WriteLine(IDBM + "|BM|" + sl_tk_bm + "|" + DateTime.Now);
                                sw.Close();

                                if (rtb_BM_THAY_THE.InvokeRequired)
                                {
                                    rtb_BM_THAY_THE.Invoke(new Action(() =>
                                    {
                                        BM_THAY_THE = rtb_BM_THAY_THE.Lines.ToList();
                                    }));
                                }
                                else
                                {
                                    BM_THAY_THE = rtb_BM_THAY_THE.Lines.ToList();
                                }
                                sl_tk_bm = 0;
                                for (int i = 0; i < BM_THAY_THE.Count; i++)
                                {

                                    if (tb_BM.InvokeRequired)
                                    {
                                        tb_BM.Invoke(new Action(() =>
                                        {
                                            tb_BM.Clear();
                                        }));
                                    }
                                    else
                                    {
                                        tb_BM.Clear();
                                    }
                                    var ID_CUOIBM = "";
                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                    if (i == BM_THAY_THE.Count - 1)
                                    {
                                        ID_CUOIBM = BM_THAY_THE[i].ToString();
                                    }
                                    if (IDBM == ID_CUOIBM)
                                    {
                                        MessageBox.Show("HẾT ID BM IDBM");
                                        Thread.Sleep(10000);
                                        goto checkID;
                                    }

                                    if (!BM_THAY_THE.Contains(IDBM))
                                    {
                                        IDBM = BM_THAY_THE[0].ToString();
                                        if (rtb_ID_BM_Share.InvokeRequired)
                                        {
                                            rtb_ID_BM_Share.Invoke(new Action(() =>
                                            {
                                                rtb_ID_BM_Share.Clear();
                                                rtb_ID_BM_Share.AppendText(IDBM);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_ID_BM_Share.Clear();
                                            rtb_ID_BM_Share.AppendText(IDBM);
                                        }
                                        goto next;

                                    }
                                    if (IDBM == BM_THAY_THE[i])
                                    {
                                        IDBM = BM_THAY_THE[i + 1].ToString();
                                        if (rtb_ID_BM_Share.InvokeRequired)
                                        {
                                            rtb_ID_BM_Share.Invoke(new Action(() =>
                                            {
                                                rtb_ID_BM_Share.Clear();
                                                rtb_ID_BM_Share.AppendText(IDBM);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_ID_BM_Share.Clear();
                                            rtb_ID_BM_Share.AppendText(IDBM);
                                        }
                                        goto next;

                                    }



                                }

                            }
                        next:
                            if (sl_tk_bm_back_up >= sl_tk_bm_bm_back_up_nhan)
                            {
                                if (rtb_BM_Nhan_Du.InvokeRequired)
                                {
                                    rtb_BM_Nhan_Du.Invoke(new Action(() =>
                                    {
                                        rtb_BM_Nhan_Du.AppendText(IDBM_BACKUP + "|BMBACKUP|" + sl_tk_bm_back_up + "|" + DateTime.Now + Environment.NewLine);

                                    }));
                                }
                                else
                                {
                                    rtb_BM_Nhan_Du.AppendText(IDBM_BACKUP + "|BMBACKUP|" + sl_tk_bm_back_up + "|" + DateTime.Now + Environment.NewLine);
                                }

                                StreamWriter sw = new StreamWriter("BMDANHAN.txt", true);
                                sw.WriteLine(IDBM_BACKUP + "|BMBACKUP|" + sl_tk_bm_back_up + "|" + DateTime.Now);
                                sw.Close();


                                if (rtb_BM_BACKUP_THAY_THE.InvokeRequired)
                                {
                                    rtb_BM_BACKUP_THAY_THE.Invoke(new Action(() =>
                                    {
                                        BM_BACK_UP_THAY_THE = rtb_BM_BACKUP_THAY_THE.Lines.ToList();
                                    }));
                                }
                                else
                                {
                                    BM_BACK_UP_THAY_THE = rtb_BM_BACKUP_THAY_THE.Lines.ToList();
                                }
                                sl_tk_bm_back_up = 0;
                                for (int i = 0; i < BM_BACK_UP_THAY_THE.Count; i++)
                                {
                                    if (tb_BM_BACK_UP.InvokeRequired)
                                    {
                                        tb_BM_BACK_UP.Invoke(new Action(() =>
                                        {
                                            tb_BM_BACK_UP.Clear();

                                        }));
                                    }
                                    else
                                    {
                                        tb_BM_BACK_UP.Clear();

                                    }
                                    var ID_CUOIBM = "";
                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                    if (i == BM_BACK_UP_THAY_THE.Count - 1)
                                    {
                                        ID_CUOIBM = BM_BACK_UP_THAY_THE[i].ToString();
                                    }
                                    if (IDBM_BACKUP == ID_CUOIBM)
                                    {
                                        MessageBox.Show("HẾT ID BM BMBACKUP1");
                                        Thread.Sleep(10000);
                                        goto checkID;
                                    }
                                    if (!BM_BACK_UP_THAY_THE.Contains(IDBM_BACKUP))
                                    {
                                        IDBM_BACKUP = BM_BACK_UP_THAY_THE[0].ToString();
                                        if (rtb_ID_BM_Share_BACK_UP.InvokeRequired)
                                        {
                                            rtb_ID_BM_Share_BACK_UP.Invoke(new Action(() =>
                                            {
                                                rtb_ID_BM_Share_BACK_UP.Clear();
                                                rtb_ID_BM_Share_BACK_UP.AppendText(IDBM_BACKUP);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_ID_BM_Share_BACK_UP.Clear();
                                            rtb_ID_BM_Share_BACK_UP.AppendText(IDBM_BACKUP);
                                        }
                                        goto next1;
                                    }

                                    if (IDBM_BACKUP == BM_BACK_UP_THAY_THE[i])
                                    {
                                        IDBM_BACKUP = BM_BACK_UP_THAY_THE[i + 1].ToString();

                                        if (rtb_ID_BM_Share_BACK_UP.InvokeRequired)
                                        {
                                            rtb_ID_BM_Share_BACK_UP.Invoke(new Action(() =>
                                            {
                                                rtb_ID_BM_Share_BACK_UP.Clear();
                                                rtb_ID_BM_Share_BACK_UP.AppendText(IDBM_BACKUP);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_ID_BM_Share_BACK_UP.Clear();
                                            rtb_ID_BM_Share_BACK_UP.AppendText(IDBM_BACKUP);
                                        }
                                        goto next1;
                                    }




                                }

                            }
                        next1:
                            if (sl_tk_bm_back_up_2 >= sl_tk_bm_bm_back_up_nhan)
                            {
                                if (rtb_BM_Nhan_Du.InvokeRequired)
                                {
                                    rtb_BM_Nhan_Du.Invoke(new Action(() =>
                                    {
                                        rtb_BM_Nhan_Du.AppendText(IDBM_BACKUP_2 + "|BMBACKUP2|" + sl_tk_bm_back_up_2 + "|" + DateTime.Now + Environment.NewLine);

                                    }));
                                }
                                else
                                {
                                    rtb_BM_Nhan_Du.AppendText(IDBM_BACKUP_2 + "|BMBACKUP2|" + sl_tk_bm_back_up_2 + "|" + DateTime.Now + Environment.NewLine);
                                }

                                StreamWriter sw = new StreamWriter("BMDANHAN.txt", true);
                                sw.WriteLine(IDBM_BACKUP_2 + "|BMBACKUP2|" + sl_tk_bm_back_up_2 + "|" + DateTime.Now);
                                sw.Close();


                                if (rtb_BM_BACKUP2_THAY_THE.InvokeRequired)
                                {
                                    rtb_BM_BACKUP2_THAY_THE.Invoke(new Action(() =>
                                    {
                                        BM_BACK_UP_2_THAY_THE = rtb_BM_BACKUP2_THAY_THE.Lines.ToList();
                                    }));
                                }
                                else
                                {
                                    BM_BACK_UP_2_THAY_THE = rtb_BM_BACKUP2_THAY_THE.Lines.ToList();
                                }
                                sl_tk_bm_back_up_2 = 0;
                                for (int i = 0; i < BM_BACK_UP_2_THAY_THE.Count; i++)
                                {
                                    if (tb_BM_BACK_UP2.InvokeRequired)
                                    {
                                        tb_BM_BACK_UP2.Invoke(new Action(() =>
                                        {
                                            tb_BM_BACK_UP2.Clear();

                                        }));
                                    }
                                    else
                                    {
                                        tb_BM_BACK_UP2.Clear();

                                    }
                                    var ID_CUOIBM = "";
                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                    if (i == BM_BACK_UP_2_THAY_THE.Count - 1)
                                    {
                                        ID_CUOIBM = BM_BACK_UP_2_THAY_THE[i].ToString();
                                    }
                                    if (IDBM_BACKUP_2 == ID_CUOIBM)
                                    {
                                        MessageBox.Show("HẾT ID BM BMBACKUP2");
                                        Thread.Sleep(10000);


                                        goto checkID;
                                    }
                                    if (!BM_BACK_UP_2_THAY_THE.Contains(IDBM_BACKUP_2))
                                    {
                                        IDBM_BACKUP_2 = BM_BACK_UP_2_THAY_THE[0].ToString();
                                        if (rtb_ID_BM_Share_BACK_UP2.InvokeRequired)
                                        {
                                            rtb_ID_BM_Share_BACK_UP2.Invoke(new Action(() =>
                                            {
                                                rtb_ID_BM_Share_BACK_UP2.Clear();
                                                rtb_ID_BM_Share_BACK_UP2.AppendText(IDBM_BACKUP_2);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_ID_BM_Share_BACK_UP2.Clear();
                                            rtb_ID_BM_Share_BACK_UP2.AppendText(IDBM_BACKUP_2);
                                        }
                                        goto next4;
                                    }

                                    if (IDBM_BACKUP_2 == BM_BACK_UP_2_THAY_THE[i])
                                    {
                                        IDBM_BACKUP_2 = BM_BACK_UP_2_THAY_THE[i + 1].ToString();

                                        if (rtb_ID_BM_Share_BACK_UP2.InvokeRequired)
                                        {
                                            rtb_ID_BM_Share_BACK_UP2.Invoke(new Action(() =>
                                            {
                                                rtb_ID_BM_Share_BACK_UP2.Clear();
                                                rtb_ID_BM_Share_BACK_UP2.AppendText(IDBM_BACKUP_2);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_ID_BM_Share_BACK_UP2.Clear();
                                            rtb_ID_BM_Share_BACK_UP2.AppendText(IDBM_BACKUP_2);
                                        }
                                        goto next4;
                                    }



                                }

                            }
                        next4:
                            if (sl_tk_bm_back_up_3 >= sl_tk_bm_bm_back_up_nhan)
                            {
                                if (rtb_BM_Nhan_Du.InvokeRequired)
                                {
                                    rtb_BM_Nhan_Du.Invoke(new Action(() =>
                                    {
                                        rtb_BM_Nhan_Du.AppendText(IDBM_BACKUP_3 + "|BMBACKUP3|" + sl_tk_bm_back_up_3 + "|" + DateTime.Now + Environment.NewLine);

                                    }));
                                }
                                else
                                {
                                    rtb_BM_Nhan_Du.AppendText(IDBM_BACKUP_3 + "|BMBACKUP3|" + sl_tk_bm_back_up_3 + "|" + DateTime.Now + Environment.NewLine);
                                }

                                StreamWriter sw = new StreamWriter("BMDANHAN.txt", true);
                                sw.WriteLine(IDBM_BACKUP_3 + "|BMBACKUP3|" + sl_tk_bm_back_up_3 + "|" + DateTime.Now);
                                sw.Close();


                                if (rtb_BM_BACKUP3_THAY_THE.InvokeRequired)
                                {
                                    rtb_BM_BACKUP3_THAY_THE.Invoke(new Action(() =>
                                    {
                                        BM_BACK_UP_3_THAY_THE = rtb_BM_BACKUP3_THAY_THE.Lines.ToList();
                                    }));
                                }
                                else
                                {
                                    BM_BACK_UP_3_THAY_THE = rtb_BM_BACKUP3_THAY_THE.Lines.ToList();
                                }
                                sl_tk_bm_back_up_3 = 0;
                                for (int i = 0; i < BM_BACK_UP_3_THAY_THE.Count; i++)
                                {
                                    if (tb_BM_BACK_UP3.InvokeRequired)
                                    {
                                        tb_BM_BACK_UP3.Invoke(new Action(() =>
                                        {
                                            tb_BM_BACK_UP3.Clear();

                                        }));
                                    }
                                    else
                                    {
                                        tb_BM_BACK_UP3.Clear();

                                    }
                                    var ID_CUOIBM = "";
                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                    if (i == BM_BACK_UP_3_THAY_THE.Count - 1)
                                    {
                                        ID_CUOIBM = BM_BACK_UP_3_THAY_THE[i].ToString();
                                    }
                                    if (IDBM_BACKUP_3 == ID_CUOIBM)
                                    {
                                        MessageBox.Show("HẾT ID BM BMBACKUP3");
                                        Thread.Sleep(10000);


                                        goto checkID;
                                    }
                                    if (!BM_BACK_UP_3_THAY_THE.Contains(IDBM_BACKUP_3))
                                    {

                                        IDBM_BACKUP_3 = BM_BACK_UP_3_THAY_THE[0].ToString();
                                        if (rtb_ID_BM_Share_BACK_UP3.InvokeRequired)
                                        {
                                            rtb_ID_BM_Share_BACK_UP3.Invoke(new Action(() =>
                                            {
                                                rtb_ID_BM_Share_BACK_UP3.Clear();
                                                rtb_ID_BM_Share_BACK_UP3.AppendText(IDBM_BACKUP_3);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_ID_BM_Share_BACK_UP3.Clear();
                                            rtb_ID_BM_Share_BACK_UP3.AppendText(IDBM_BACKUP_3);
                                        }
                                        goto next6;
                                    }
                                    if (IDBM_BACKUP_3 == BM_BACK_UP_3_THAY_THE[i])
                                    {
                                        IDBM_BACKUP_3 = BM_BACK_UP_3_THAY_THE[i + 1].ToString();

                                        if (rtb_ID_BM_Share_BACK_UP3.InvokeRequired)
                                        {
                                            rtb_ID_BM_Share_BACK_UP3.Invoke(new Action(() =>
                                            {
                                                rtb_ID_BM_Share_BACK_UP3.Clear();
                                                rtb_ID_BM_Share_BACK_UP3.AppendText(IDBM_BACKUP_3);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_ID_BM_Share_BACK_UP3.Clear();
                                            rtb_ID_BM_Share_BACK_UP3.AppendText(IDBM_BACKUP_3);
                                        }
                                        goto next6;
                                    }


                                }
                            }
                        next6:
                            if (sl_tk_bm_close1 >= sl_tk_bm_Close_1_2)
                            {
                                if (rtb_BM_Nhan_Du.InvokeRequired)
                                {
                                    rtb_BM_Nhan_Du.Invoke(new Action(() =>
                                    {
                                        rtb_BM_Nhan_Du.AppendText(IDBM_CLOSE + "|BMCLOSE1|" + sl_tk_bm_close1 + "|" + DateTime.Now + Environment.NewLine);

                                    }));
                                }
                                else
                                {
                                    rtb_BM_Nhan_Du.AppendText(IDBM_CLOSE + "|BMCLOSE1|" + sl_tk_bm_close1 + "|" + DateTime.Now + Environment.NewLine);
                                }
                                StreamWriter sw = new StreamWriter("BMDANHAN.txt", true);
                                sw.WriteLine(IDBM_CLOSE + "|BMCLOSE1|" + sl_tk_bm_close1 + "|" + DateTime.Now);
                                sw.Close();


                                if (rtb_BM_CLOSE_THAY_THE.InvokeRequired)
                                {
                                    rtb_BM_CLOSE_THAY_THE.Invoke(new Action(() =>
                                    {
                                        BM_CLOSE1_THAY_THE = rtb_BM_CLOSE_THAY_THE.Lines.ToList();
                                    }));
                                }
                                else
                                {
                                    BM_CLOSE1_THAY_THE = rtb_BM_CLOSE_THAY_THE.Lines.ToList();
                                }
                                sl_tk_bm_close1 = 0;
                                for (int i = 0; i < BM_CLOSE1_THAY_THE.Count; i++)
                                {
                                    if (tb_BM_Close1.InvokeRequired)
                                    {
                                        tb_BM_Close1.Invoke(new Action(() =>
                                        {
                                            tb_BM_Close1.Clear();

                                        }));
                                    }
                                    else
                                    {
                                        tb_BM_Close1.Clear();
                                    }

                                    var ID_CUOIBM = "";
                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                    if (i == BM_CLOSE1_THAY_THE.Count - 1)
                                    {
                                        ID_CUOIBM = BM_CLOSE1_THAY_THE[i].ToString();
                                    }

                                    if (IDBM_CLOSE == ID_CUOIBM)
                                    {
                                        MessageBox.Show("HẾT ID BM CLOSE1");
                                        Thread.Sleep(10000);
                                        goto checkID;

                                    }
                                    if (!BM_CLOSE1_THAY_THE.Contains(IDBM_CLOSE))
                                    {
                                        IDBM_CLOSE = BM_CLOSE1_THAY_THE[0].ToString();
                                        if (rtb_IDBM_CLOSE.InvokeRequired)
                                        {
                                            rtb_IDBM_CLOSE.Invoke(new Action(() =>
                                            {
                                                rtb_IDBM_CLOSE.Clear();
                                                rtb_IDBM_CLOSE.AppendText(IDBM_CLOSE);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_IDBM_CLOSE.Clear();
                                            rtb_IDBM_CLOSE.AppendText(IDBM_CLOSE);
                                        }
                                        goto next2;
                                    }
                                    if (IDBM_CLOSE == BM_CLOSE1_THAY_THE[i])
                                    {
                                        IDBM_CLOSE = BM_CLOSE1_THAY_THE[i + 1].ToString();
                                        if (rtb_IDBM_CLOSE.InvokeRequired)
                                        {
                                            rtb_IDBM_CLOSE.Invoke(new Action(() =>
                                            {
                                                rtb_IDBM_CLOSE.Clear();
                                                rtb_IDBM_CLOSE.AppendText(IDBM_CLOSE);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_IDBM_CLOSE.Clear();
                                            rtb_IDBM_CLOSE.AppendText(IDBM_CLOSE);
                                        }
                                        goto next2;
                                    }


                                }
                            }
                        next2:
                            if (sl_tk_bm_close2 >= sl_tk_bm_Close_1_2)
                            {
                                if (rtb_BM_Nhan_Du.InvokeRequired)
                                {
                                    rtb_BM_Nhan_Du.Invoke(new Action(() =>
                                    {
                                        rtb_BM_Nhan_Du.AppendText(IDBM_CLOSE_2 + "|BMCLOSE2|" + sl_tk_bm_close2 + "|" + DateTime.Now + Environment.NewLine);

                                    }));
                                }
                                else
                                {
                                    rtb_BM_Nhan_Du.AppendText(IDBM_CLOSE_2 + "|BMCLOSE2|" + sl_tk_bm_close2 + "|" + DateTime.Now + Environment.NewLine);
                                }
                                StreamWriter sw = new StreamWriter("BMDANHAN.txt", true);
                                sw.WriteLine(IDBM_CLOSE_2 + "|BMCLOSE2|" + sl_tk_bm_close2 + "|" + DateTime.Now);
                                sw.Close();

                                if (rtb_BM_CLOSE_2_THAY_THE.InvokeRequired)
                                {
                                    rtb_BM_CLOSE_2_THAY_THE.Invoke(new Action(() =>
                                    {
                                        BM_CLOSE2_THAY_THE = rtb_BM_CLOSE_2_THAY_THE.Lines.ToList();
                                    }));
                                }
                                else
                                {
                                    BM_CLOSE2_THAY_THE = rtb_BM_CLOSE_2_THAY_THE.Lines.ToList();
                                }
                                sl_tk_bm_close2 = 0;
                                for (int i = 0; i < BM_CLOSE2_THAY_THE.Count; i++)
                                {
                                    if (tb_BM_Close_2.InvokeRequired)
                                    {
                                        tb_BM_Close_2.Invoke(new Action(() =>
                                        {
                                            tb_BM_Close_2.Clear();
                                        }));
                                    }
                                    else
                                    {
                                        tb_BM_Close_2.Clear();
                                    }
                                    var ID_CUOIBM = "";
                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                    if (i == BM_CLOSE2_THAY_THE.Count - 1)
                                    {
                                        ID_CUOIBM = BM_CLOSE2_THAY_THE[i].ToString();
                                    }
                                    if (IDBM_CLOSE_2 == ID_CUOIBM)
                                    {
                                        MessageBox.Show("HẾT ID BM CLOSE2");
                                        Thread.Sleep(10000);
                                        goto checkID;

                                    }
                                    if (!BM_CLOSE2_THAY_THE.Contains(IDBM_CLOSE_2))
                                    {
                                        IDBM_CLOSE_2 = BM_CLOSE2_THAY_THE[0].ToString();
                                        if (rtb_IDBM_CLOSE_2.InvokeRequired)
                                        {
                                            rtb_IDBM_CLOSE_2.Invoke(new Action(() =>
                                            {
                                                rtb_IDBM_CLOSE_2.Clear();
                                                rtb_IDBM_CLOSE_2.AppendText(IDBM_CLOSE_2);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_IDBM_CLOSE_2.Clear();
                                            rtb_IDBM_CLOSE_2.AppendText(IDBM_CLOSE_2);
                                        }
                                        goto next3;
                                    }
                                    if (IDBM_CLOSE_2 == BM_CLOSE2_THAY_THE[i])
                                    {
                                        IDBM_CLOSE_2 = BM_CLOSE2_THAY_THE[i + 1].ToString();
                                        if (rtb_IDBM_CLOSE_2.InvokeRequired)
                                        {
                                            rtb_IDBM_CLOSE_2.Invoke(new Action(() =>
                                            {
                                                rtb_IDBM_CLOSE_2.Clear();
                                                rtb_IDBM_CLOSE_2.AppendText(IDBM_CLOSE_2);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_IDBM_CLOSE_2.Clear();
                                            rtb_IDBM_CLOSE_2.AppendText(IDBM_CLOSE_2);
                                        }
                                        goto next3;
                                    }


                                }
                            }
                        next3:
                            if (sl_tk_bm_close3 >= sl_tk_bm_Close_1_2)
                            {
                                if (rtb_BM_Nhan_Du.InvokeRequired)
                                {
                                    rtb_BM_Nhan_Du.Invoke(new Action(() =>
                                    {
                                        rtb_BM_Nhan_Du.AppendText(IDBM_CLOSE_3 + "|BMCLOSE3|" + sl_tk_bm_close3 + "|" + DateTime.Now + Environment.NewLine);

                                    }));
                                }
                                else
                                {
                                    rtb_BM_Nhan_Du.AppendText(IDBM_CLOSE_3 + "|BMCLOSE3|" + sl_tk_bm_close3 + "|" + DateTime.Now + Environment.NewLine);
                                }
                                StreamWriter sw = new StreamWriter("BMDANHAN.txt", true);
                                sw.WriteLine(IDBM_CLOSE_3 + "|BMCLOSE3|" + sl_tk_bm_close3 + "|" + DateTime.Now);
                                sw.Close();

                                if (rtb_BM_CLOSE_3_THAY_THE.InvokeRequired)
                                {
                                    rtb_BM_CLOSE_3_THAY_THE.Invoke(new Action(() =>
                                    {
                                        BM_CLOSE3_THAY_THE = rtb_BM_CLOSE_3_THAY_THE.Lines.ToList();
                                    }));
                                }
                                else
                                {
                                    BM_CLOSE3_THAY_THE = rtb_BM_CLOSE_3_THAY_THE.Lines.ToList();
                                }

                                sl_tk_bm_close3 = 0;
                                for (int i = 0; i < BM_CLOSE3_THAY_THE.Count; i++)
                                {
                                    if (tb_BM_Close_3.InvokeRequired)
                                    {
                                        tb_BM_Close_3.Invoke(new Action(() =>
                                        {
                                            tb_BM_Close_3.Clear();
                                        }));
                                    }
                                    else
                                    {
                                        tb_BM_Close_3.Clear();
                                    }
                                    var ID_CUOIBM = "";
                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                    if (i == BM_CLOSE3_THAY_THE.Count - 1)
                                    {
                                        ID_CUOIBM = BM_CLOSE3_THAY_THE[i].ToString();
                                    }
                                    if (IDBM_CLOSE_3 == ID_CUOIBM)
                                    {
                                        MessageBox.Show("HẾT ID BM CLOSE3");
                                        Thread.Sleep(10000);
                                        goto checkID;
                                    }
                                    if (!BM_CLOSE3_THAY_THE.Contains(IDBM_CLOSE_3))
                                    {
                                        IDBM_CLOSE_3 = BM_CLOSE3_THAY_THE[0].ToString();
                                        if (rtb_IDBM_CLOSE_3.InvokeRequired)
                                        {
                                            rtb_IDBM_CLOSE_3.Invoke(new Action(() =>
                                            {
                                                rtb_IDBM_CLOSE_3.Clear();
                                                rtb_IDBM_CLOSE_3.AppendText(IDBM_CLOSE_3);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_IDBM_CLOSE_3.Clear();
                                            rtb_IDBM_CLOSE_3.AppendText(IDBM_CLOSE_3);
                                        }
                                        goto next5;
                                    }
                                    if (IDBM_CLOSE_3 == BM_CLOSE3_THAY_THE[i])
                                    {
                                        IDBM_CLOSE_3 = BM_CLOSE3_THAY_THE[i + 1].ToString();
                                        if (rtb_IDBM_CLOSE_3.InvokeRequired)
                                        {
                                            rtb_IDBM_CLOSE_3.Invoke(new Action(() =>
                                            {
                                                rtb_IDBM_CLOSE_3.Clear();
                                                rtb_IDBM_CLOSE_3.AppendText(IDBM_CLOSE_3);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_IDBM_CLOSE_3.Clear();
                                            rtb_IDBM_CLOSE_3.AppendText(IDBM_CLOSE_3);
                                        }
                                        goto next5;
                                    }


                                }
                            }
                        next5:
                            if (sl_tk_bm_close4 >= sl_tk_bm_Close_1_2)
                            {
                                if (rtb_BM_Nhan_Du.InvokeRequired)
                                {
                                    rtb_BM_Nhan_Du.Invoke(new Action(() =>
                                    {
                                        rtb_BM_Nhan_Du.AppendText(IDBM_CLOSE_4 + "|BMCLOSE4|" + sl_tk_bm_close4 + "|" + DateTime.Now + Environment.NewLine);

                                    }));
                                }
                                else
                                {
                                    rtb_BM_Nhan_Du.AppendText(IDBM_CLOSE_4 + "|BMCLOSE4|" + sl_tk_bm_close4 + "|" + DateTime.Now + Environment.NewLine);
                                }
                                StreamWriter sw = new StreamWriter("BMDANHAN.txt", true);
                                sw.WriteLine(IDBM_CLOSE_4 + "|BMCLOSE4|" + sl_tk_bm_close4 + "|" + DateTime.Now);
                                sw.Close();

                                if (rtb_BM_CLOSE_4_THAY_THE.InvokeRequired)
                                {
                                    rtb_BM_CLOSE_4_THAY_THE.Invoke(new Action(() =>
                                    {
                                        BM_CLOSE4_THAY_THE = rtb_BM_CLOSE_4_THAY_THE.Lines.ToList();
                                    }));
                                }
                                else
                                {
                                    BM_CLOSE4_THAY_THE = rtb_BM_CLOSE_4_THAY_THE.Lines.ToList();
                                }

                                sl_tk_bm_close4 = 0;
                                for (int i = 0; i < BM_CLOSE4_THAY_THE.Count; i++)
                                {
                                    if (tb_BM_Close_4.InvokeRequired)
                                    {
                                        tb_BM_Close_4.Invoke(new Action(() =>
                                        {
                                            tb_BM_Close_4.Clear();
                                        }));
                                    }
                                    else
                                    {
                                        tb_BM_Close_4.Clear();
                                    }
                                    var ID_CUOIBM = "";
                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                    if (i == BM_CLOSE4_THAY_THE.Count - 1)
                                    {
                                        ID_CUOIBM = BM_CLOSE4_THAY_THE[i].ToString();
                                    }
                                    if (IDBM_CLOSE_4 == ID_CUOIBM)
                                    {
                                        MessageBox.Show("HẾT ID BM CLOSE4");
                                        Thread.Sleep(10000);
                                        goto checkID;

                                    }
                                    if (!BM_CLOSE4_THAY_THE.Contains(IDBM_CLOSE_4))
                                    {
                                        IDBM_CLOSE_4 = BM_CLOSE4_THAY_THE[0].ToString();
                                        if (rtb_IDBM_CLOSE_4.InvokeRequired)
                                        {
                                            rtb_IDBM_CLOSE_4.Invoke(new Action(() =>
                                            {
                                                rtb_IDBM_CLOSE_4.Clear();
                                                rtb_IDBM_CLOSE_4.AppendText(IDBM_CLOSE_4);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_IDBM_CLOSE_4.Clear();
                                            rtb_IDBM_CLOSE_4.AppendText(IDBM_CLOSE_4);
                                        }
                                        goto next7;
                                    }
                                    if (IDBM_CLOSE_4 == BM_CLOSE4_THAY_THE[i])
                                    {
                                        IDBM_CLOSE_4 = BM_CLOSE4_THAY_THE[i + 1].ToString();
                                        if (rtb_IDBM_CLOSE_4.InvokeRequired)
                                        {
                                            rtb_IDBM_CLOSE_4.Invoke(new Action(() =>
                                            {
                                                rtb_IDBM_CLOSE_4.Clear();
                                                rtb_IDBM_CLOSE_4.AppendText(IDBM_CLOSE_4);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_IDBM_CLOSE_4.Clear();
                                            rtb_IDBM_CLOSE_4.AppendText(IDBM_CLOSE_4);
                                        }
                                        goto next7;
                                    }


                                }
                            }
                        next7:
                            if (SL_BM_PARTNER >= sl_tk_bm_PARTNER)
                            {

                                if (rtb_BM_Nhan_Du.InvokeRequired)
                                {
                                    rtb_BM_Nhan_Du.Invoke(new Action(() =>
                                    {
                                        rtb_BM_Nhan_Du.AppendText(ID_BM_PARTNERS + "|BMPARTNER|" + SL_BM_PARTNER + "|" + DateTime.Now + Environment.NewLine);

                                    }));
                                }
                                else
                                {
                                    rtb_BM_Nhan_Du.AppendText(ID_BM_PARTNERS + "|BMPARTNER|" + SL_BM_PARTNER + "|" + DateTime.Now + Environment.NewLine);
                                }
                                StreamWriter sw = new StreamWriter("BMDANHAN.txt", true);
                                sw.WriteLine(ID_BM_PARTNERS + "|BMPARTNER|" + SL_BM_PARTNER + "|" + DateTime.Now);
                                sw.Close();

                                if (rtb_BM_PARTNER_THAY_THE.InvokeRequired)
                                {
                                    rtb_BM_PARTNER_THAY_THE.Invoke(new Action(() =>
                                    {
                                        BM_PARTNER_THAY_THE = rtb_BM_PARTNER_THAY_THE.Lines.ToList();
                                    }));
                                }
                                else
                                {
                                    BM_PARTNER_THAY_THE = rtb_BM_PARTNER_THAY_THE.Lines.ToList();
                                }

                                SL_BM_PARTNER = 0;
                                for (int i = 0; i < BM_PARTNER_THAY_THE.Count; i++)
                                {
                                    if (tb_so_luong_BM_PARTNER.InvokeRequired)
                                    {
                                        tb_so_luong_BM_PARTNER.Invoke(new Action(() =>
                                        {
                                            tb_so_luong_BM_PARTNER.Clear();
                                        }));
                                    }
                                    else
                                    {
                                        tb_so_luong_BM_PARTNER.Clear();
                                    }
                                    var ID_CUOIBM = "";
                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                    if (i == BM_PARTNER_THAY_THE.Count - 1)
                                    {
                                        ID_CUOIBM = BM_PARTNER_THAY_THE[i].ToString();
                                    }
                                    if (ID_BM_PARTNERS == ID_CUOIBM)
                                    {
                                        MessageBox.Show("HẾT ID BM PARTNER");
                                        Thread.Sleep(10000);
                                        goto checkID;

                                    }
                                    if (!BM_PARTNER_THAY_THE.Contains(ID_BM_PARTNERS))
                                    {
                                        ID_BM_PARTNERS = BM_PARTNER_THAY_THE[0].ToString();
                                        if (rtb_IDBM_PARTNER.InvokeRequired)
                                        {
                                            rtb_IDBM_PARTNER.Invoke(new Action(() =>
                                            {
                                                rtb_IDBM_PARTNER.Clear();
                                                rtb_IDBM_PARTNER.AppendText(ID_BM_PARTNERS);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_IDBM_PARTNER.Clear();
                                            rtb_IDBM_PARTNER.AppendText(ID_BM_PARTNERS);
                                        }
                                        goto next8;
                                    }
                                    if (ID_BM_PARTNERS == BM_PARTNER_THAY_THE[i])
                                    {
                                        ID_BM_PARTNERS = BM_PARTNER_THAY_THE[i + 1].ToString();
                                        if (rtb_IDBM_PARTNER.InvokeRequired)
                                        {
                                            rtb_IDBM_PARTNER.Invoke(new Action(() =>
                                            {
                                                rtb_IDBM_PARTNER.Clear();
                                                rtb_IDBM_PARTNER.AppendText(ID_BM_PARTNERS);
                                            }));
                                        }
                                        else
                                        {
                                            rtb_IDBM_PARTNER.Clear();
                                            rtb_IDBM_PARTNER.AppendText(ID_BM_PARTNERS);
                                        }
                                        goto next8;
                                    }

                                }
                            }
                        next8:
                            Thread.Sleep(100);
                        }
                    }

                    var url_check = httpRequest.Address.ToString();
                    List<string> ID_SHARE_DONE = new List<string>();

                    if (rtbdone.InvokeRequired)
                    {
                        rtbdone.Invoke(new Action(() =>
                        {
                            ID_SHARE_DONE = rtbdone.Lines.ToList();

                        }));
                    }
                    else
                    {
                        ID_SHARE_DONE = rtbdone.Lines.ToList();
                    }



                    try
                    {
                        int delay_sh = (int)delayshare.Value;

                        foreach (var value in resultList)
                        {
                            string IDACCOUNT = value.Split('|')[0];
                            foreach (var item in ID_SHARE_DONE)
                            {
                                if (item.Contains(IDACCOUNT))
                                {
                                    goto next_s;
                                }
                            }
                            string status = value.Split('|')[1];
                            var ADD_TRA_TRUOC = "";
                            if (cmb_ADD_Tra_Truoc.InvokeRequired)
                            {
                                cmb_ADD_Tra_Truoc.Invoke(new Action(() =>
                                {
                                    ADD_TRA_TRUOC = cmb_ADD_Tra_Truoc.Text;

                                }));
                            }
                            var text02 = httpRequest.Address.ToString();
                            if (ADD_TRA_TRUOC == "ON")
                            {
                                if (status == "ACTIVE")
                                {
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");

                                    response = httpRequest.Get("https://business.facebook.com/overview");

                                    var responesStroverview1 = response.ToString();

                                    httpRequest.AddHeader("authority", "adsmanager.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9,vi;q=0.8");
                                    httpRequest.AddHeader("dpr", "1");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Chromium\";v=\"134.0.6998.89\", \"Not:A-Brand\";v=\"24.0.0.0\", \"Google Chrome\";v=\"134.0.6998.89\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "950");

                                    var url_02 = $"https://adsmanager.facebook.com/adsmanager/manage/ad_account_settings/ad_account_setup?act={IDACCOUNT}&nav_entry_point=cm_redirect&nav_source=no_referrer";

                                    response = httpRequest.Get(url_02);
                                    if (response.IsOK)
                                    {

                                        var responseStr05 = response.ToString();

                                        // ADD TRẢ TRƯỚC
                                        row.Cells["cStatus"].Value = $"ADD TRẢ TRƯỚC {IDACCOUNT}";



                                        httpRequest.AddHeader("authority", "business.facebook.com");
                                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("dpr", "1");
                                        httpRequest.AddHeader("priority", "u=0, i");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Chromium\";v=\"134.0.6998.89\", \"Not:A-Brand\";v=\"24.0.0.0\", \"Google Chrome\";v=\"134.0.6998.89\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "document");
                                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                        httpRequest.AddHeader("sec-fetch-site", "none");
                                        httpRequest.AddHeader("sec-fetch-user", "?1");
                                        httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                        httpRequest.AddHeader("viewport-width", "1365");


                                        var url_business = $"https://business.facebook.com/billing_hub/payment_settings/?asset_id={IDACCOUNT}&placement=ads_manager";

                                        response = httpRequest.Get(url_business);
                                        if (response.IsOK)
                                        {
                                            var responseStr2 = response.ToString();
                                            var text = httpRequest.Address.ToString();

                                            httpRequest["authority"] = "business.facebook.com";
                                            httpRequest["accept"] = "*/*";
                                            httpRequest["sec-fetch-dest"] = "document";
                                            httpRequest["sec-fetch-mode"] = "navigate";
                                            httpRequest["sec-fetch-site"] = "same-origin";
                                            httpRequest["origin"] = "https://business.facebook.com";
                                            httpRequest["referer"] = $"https://business.facebook.com/billing_hub/payment_settings?asset_id={IDACCOUNT}";
                                            httpRequest["priority"] = "u=0, i";
                                            httpRequest["sec-ch-ua"] = "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"";
                                            httpRequest["sec-fetch-site"] = "none";
                                            httpRequest["sec-ch-ua-mobile"] = "?0";
                                            httpRequest["upgrade-insecure-requests"] = "\"Windows\"";
                                            httpRequest["Accept-Language"] = "en-US,en;q=0.9";
                                            httpRequest["x-asbd-id"] = "359341";
                                            httpRequest["x-bh-flowsessionid"] = "upl_wizard_1741947140558_ffd50505-cb67-4f8d-ada6-5b2446b5f639";
                                            httpRequest["x-fb-friendly-name"] = "BillingNewUserUtilsLockIntoStandardMutation";
                                            httpRequest["x-fb-upl-sessionid"] = "upl_1741947140558_1467f416-d70d-49bb-90b0-77b33eab79a9";
                                            var fb_dtsg1 = Regex.Match(responseStr2, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                            var lsd1 = Regex.Match(responseStr2, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();

                                            var url_business1 = "https://business.facebook.com/api/graphql/?_callFlowletID=0&_triggerFlowletID=4542";
                                            var payload = $"av={uid}&__aaid={IDACCOUNT}&__user={uid}&__a=1&__req=1w&__hs=20161.BP:payments_noncomet_pkg.2.0...0&dpr=1&__ccg=MODERATE&__rev=1020903593&__s=58995n:nbswrz:wozl0x&__hsi=7481670890429236489&__dyn=7xeUmxa2C5rgydwCwRyU8EKmhe2Om2q1DxiFGxK7oG484S4UKewSAAzpoixW4E726US2Sfxq4U5i4824yoyaxG4o4B0l898885G2O1QwCCwjFEK2Z162-8G6kE8Rpo46Urwxw9m4VA48a8lwWxe4oeUa85Cdw9-0CE4a4ouyUd85WUpwoVUao9k2B2V8cE98451KfwXxq1-orx2ewyx6i2GU8U-U98C2i48nwCAzEowwwTxu1cwh8S1qxa3O6UW4UnwhFA0FUkx22W11wCz84e2K7EOicwVyES2e0UFU6K19xq1ox3wlF8aE4KeyE9Eco9U6O6Uc8sg5qiu4810U7u1rx-16x-3G227o2dw&__csr=&__hsdp=&__hblp=&fb_dtsg={fb_dtsg1}&jazoest=25483&lsd={lsd1}&__spin_r=1020903593&__spin_b=trunk&__spin_t=1741962249&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BillingAccountInformationUtilsUpdateAccountMutation&variables={{\"input\":{{\"billable_account_payment_legacy_account_id\":\"{IDACCOUNT}\",\"currency\":null,\"device_country\":null,\"tax\":{{\"business_address\":{{\"country_code\":\"CN\"}}}},\"timezone\":null,\"upl_logging_data\":{{\"context\":\"billingaddpm\",\"entry_point\":\"BILLING_HUB\",\"external_flow_id\":\"upl_1741962252557_7b0f6386-19a8-47d8-bf20-8c71683bd066\",\"target_name\":\"BillingAccountInformationUtilsUpdateAccountMutation\",\"user_session_id\":\"upl_1741962252557_7b0f6386-19a8-47d8-bf20-8c71683bd066\",\"wizard_config_name\":\"ADD_PM\",\"wizard_name\":\"ADD_PM\",\"wizard_screen_name\":\"country_currency_state_display\",\"wizard_session_id\":\"upl_wizard_1741962252557_784451ac-6170-4552-9843-fcb2acf3c73f\",\"wizard_state_name\":\"country_currency_state_display\"}},\"actor_id\":\"{uid}\",\"client_mutation_id\":\"8\"}},\"billingEntryPoint\":\"BILLING_HUB\"}}&server_timestamps=true&doc_id=9672874009413061";

                                            response = httpRequest.Post(url_business1, payload, "application/x-www-form-urlencoded");

                                            if (response.IsOK)
                                            {
                                                var responseStr03 = response.ToString();
                                                httpRequest["authority"] = "business.facebook.com";
                                                httpRequest["accept"] = "*/*";
                                                httpRequest["sec-fetch-dest"] = "document";
                                                httpRequest["sec-fetch-mode"] = "navigate";
                                                httpRequest["sec-fetch-site"] = "same-origin";
                                                httpRequest["origin"] = "https://business.facebook.com";
                                                httpRequest["referer"] = $"https://business.facebook.com/billing_hub/payment_settings/?asset_id={IDACCOUNT}&placement=ads_manager";
                                                httpRequest["priority"] = "u=0, i";
                                                httpRequest["sec-ch-ua"] = "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"";
                                                httpRequest["sec-fetch-site"] = "none";
                                                httpRequest["sec-ch-ua-mobile"] = "?0";
                                                httpRequest["upgrade-insecure-requests"] = "\"Windows\"";
                                                httpRequest["Accept-Language"] = "en-US,en;q=0.9";
                                                httpRequest["x-asbd-id"] = "359341";
                                                httpRequest["x-bh-flowsessionid"] = "upl_wizard_1741947140558_ffd50505-cb67-4f8d-ada6-5b2446b5f639";
                                                httpRequest["x-fb-friendly-name"] = "BillingNewUserUtilsLockIntoStandardMutation";
                                                httpRequest["x-fb-upl-sessionid"] = "upl_1741947140558_1467f416-d70d-49bb-90b0-77b33eab79a9";

                                                //var jazoet1 = Regex.Match(responseStr2, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                var url_business2 = "https://business.facebook.com/api/graphql/?_callFlowletID=4630&_triggerFlowletID=4578";
                                                var payload2 = $"av={uid}&__aaid={IDACCOUNT}&__user={uid}&__a=1&__req=21&__hs=20161.BP:payments_noncomet_pkg.2.0...0&dpr=1&__ccg=GOOD&__rev=1020901188&__s=005rqe:kgyera:fnbovu&__hsi=7481605989335610748&__dyn=7xeUmxa2C5rgydwCwRyU8EKmhe2Om2q1DxiFGxK7oG484S4UKewSAAzpoixW4E726US2Sfxq4U5i4824yoyaxG4o4B0l898885G2O1QwCCwjFEK2Z162-8G6kE8Rpo46Urwxw9m4VA48a8lwWxe4oeUa85Cdw9-0CE4a4ouyUd85WUpwoVUao9k2B2V8cE98451KfwXxq1-orx2ewyx6i2GU8U-U98C2i48nwCAzEowwwTxu1cwh8S1qxa3O6UW4UnwhFA0FUkx22W11wCz84e2K7EOicwVyES2e0UFU6K19xq1ox3wlF8aE4KeyE9Eco9U6O6Uc8sg5qiu4810U7u1rx-15gvwWwwxS0zo&__csr=&__hsdp=&__hblp=&fb_dtsg={fb_dtsg1}&jazoest=25294&lsd={lsd1}&__spin_r=1020901188&__spin_b=trunk&__spin_t=1741947138&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BillingNewUserUtilsLockIntoStandardMutation&variables={{\"input\":{{\"billable_account_payment_legacy_account_id\":\"{IDACCOUNT}\",\"recurring_enabled\":false,\"upl_logging_data\":{{\"context\":\"billingaddpm\",\"credential_id\":\"platformized_lpm_alipay_cn\",\"credential_type\":\"ALT_PAY\",\"entry_point\":\"BILLING_HUB\",\"external_flow_id\":\"upl_1741947140558_1467f416-d70d-49bb-90b0-77b33eab79a9\",\"target_name\":\"BillingNewUserUtilsLockIntoStandardMutation\",\"user_session_id\":\"upl_1741947140558_1467f416-d70d-49bb-90b0-77b33eab79a9\",\"wizard_config_name\":\"ADD_PM\",\"wizard_name\":\"ADD_PM\",\"wizard_screen_name\":\"wizard_landing_state_display\",\"wizard_session_id\":\"upl_wizard_1741947140558_ffd50505-cb67-4f8d-ada6-5b2446b5f639\",\"wizard_state_name\":\"account_initialize_state_decision\"}},\"actor_id\":\"{uid}\",\"client_mutation_id\":\"12\"}}}}&server_timestamps=true&doc_id=9196680433784220";

                                                response = httpRequest.Post(url_business2, payload2, "application/x-www-form-urlencoded");
                                                if (response.IsOK)
                                                {
                                                    var responseStr3 = response.ToString();
                                                    var text1 = httpRequest.Address.ToString();
                                                    if (responseStr3.Contains("NOT_CONFIGURED"))
                                                    {
                                                        row.Cells["cStatus"].Value = $"ADD TRẢ TRƯỚC {IDACCOUNT} DONE";
                                                        Thread.Sleep(2000);
                                                    }



                                                }

                                            }
                                        }
                                    }
                                }
                            }

                            row.Cells["cStatus"].Value = "Share: " + IDACCOUNT + ".....";

                            string IDBM_C = "";
                            string IDBM_C_2 = "";
                            string IDBM_C_3 = "";
                            string IDBM_C_4 = "";
                            if (status == "ACTIVE")
                            {
                                IDBM_C = IDBM;
                                IDBM_C_2 = IDBM_BACKUP;
                                IDBM_C_3 = IDBM_BACKUP_2;
                                IDBM_C_4 = IDBM_BACKUP_3;
                            }
                            if (status == "PENDING")
                            {
                                IDBM_C = IDBM_CLOSE;
                                IDBM_C_2 = IDBM_CLOSE_2;
                                IDBM_C_3 = IDBM_CLOSE_3;
                                IDBM_C_4 = IDBM_CLOSE_4;
                            }

                            httpRequest.AddHeader("authority", "business.facebook.com");
                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httpRequest.AddHeader("priority", "u=0, i");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-fetch-dest", "document");
                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                            httpRequest.AddHeader("sec-fetch-site", "none");
                            httpRequest.AddHeader("sec-fetch-user", "?1");
                            httpRequest.AddHeader("upgrade-insecure-requests", "1");

                            response = httpRequest.Get("https://business.facebook.com/overview");

                            var responesStroverview = response.ToString();



                            var assetID = Regex.Match(responesStroverview, "assetID\":\"(.*?)\"").Groups[1].Value.ToString();
                            httpRequest.AddHeader("authority", "business.facebook.com");
                            httpRequest.AddHeader("accept", "*");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httpRequest.AddHeader("priority", "u=1, i");
                            if (string.IsNullOrEmpty(assetID))
                            {
                                httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/ad_accounts?business_id={IDBM_C}");
                            }
                            else
                            {
                                httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/ad_accounts?business_id={IDBM_C}&nav_ref=bm_settings_redirect_migration&bm_redirect_migration=true&selected_asset_id={assetID}&selected_asset_type=ad-account");
                            }
                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.140\", \"Chromium\";v=\"131.0.6778.140\", \"Not_A Brand\";v=\"24.0.0.0\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                            httpRequest.AddHeader("x-asbd-id", "129477");
                            httpRequest.AddHeader("x-bh-flowsessionid", "upl_wizard_1734668114085_491553ea-0cc7-4567-83a0-cf44d8da996d");
                            httpRequest.AddHeader("x-fb-friendly-name", "BizKitSettingsRequestAdAccountAccessMutation");
                            httpRequest.AddHeader("x-fb-upl-sessionid", "upl_1734668114085_273bf307-35aa-4d07-8c4c-8138ea1829e9");
                            var fb_dtsg = Regex.Match(responesStroverview, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"}").Groups[1].Value;
                            var lsd = Regex.Match(responesStroverview, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                            var jazoest = Regex.Match(responesStroverview, "&jazoest=(.*?)\",").Groups[1].Value;
                            var url1 = "";
                            var payload1 = "";
                            if (string.IsNullOrEmpty(assetID))
                            {
                                url1 = "https://business.facebook.com/api/graphql/?_callFlowletID=9422&_triggerFlowletID=9417";
                                payload1 = $"av={uid}&__usid=6-Tsow8xd59fixy:Psowd5g1gmnk7z:0-Asowd5sn01u2v-RV=6:F=&__aaid=0&__bid={IDBM_C}&__user={uid}&__a=1&__req=13&__hs=20079.HYP:bizweb_comet_pkg.2.1.0.0.0&dpr=1&__ccg=GOOD&__rev=1019055684&__s=q5syll:s1c085:h2jnyd&__hsi=7451226006509486975&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgE7R04zwIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48comwkE-UbE7i4UaEW2G261fwwwJK1qxa1ozEjU4Wdwoo4S5ayocE3BwMzUbVEHyU8U3ywbS1LwTwNAK2q0z8co9U4S7E6C13www4kxW1owmUaEeE5K22&__csr=g44hsh3a5lfsnklHb5h2OQzdGyfcyiv9jkzdJ5IHSO8IigybnOuz94l6ncBdnZfqmGZaqhpuAahQKWmJaFHkzJurYGnlEGuh9DGiWHRBRh_FkOmQ9miKHA-QF5GmGGZqVe9yanh9eidu9h9VbzKLqKrJrGCLxaP39p8Kt5KGyFqDppBnBqxuWBpAifyZajGBJrCxei5v-muECiV99--exauuvBCBAAJ6yWAiAGu4oGGGqbAghjyFV_K443m7HxmmezEhyUnwl8y6WVGG2m4kayoux69XgOex7AG2C8wgppVAufU4TBwRDwIxS1QwDxu1awBAwg83tzXXmQ3K1bg0bmE1eEiDAy8O581oy8nkh518laBf2svNv7w5mw7dw5szyG4A0QEk809oG0tGA0Vo2-weybw6mwpo1co4e6m1qw58a0wEW5Eqw0tWE04JGv805ho1Op206jg2OBu17Cw1gu07RozCVmUdo710TClwJw1bu0fIabg-03Ju0q62q0c0a04BEow4PDw0yNg1jQ0f4S32vwhK0WES0uiq0qq&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019055684&__spin_b=trunk&__spin_t=1734873747&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsRequestAdAccountAccessMutation&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{uid}\",\"ad_account_id\":\"{IDACCOUNT}\",\"permitted_roles\":[\"864195700451909\",\"151821535410699\",\"610690166001223\",\"186595505260379\"],\"permitted_tasks\":[],\"requesting_business_id\":\"{IDBM_C}\"}}}}&server_timestamps=true&doc_id=7293074874139866";
                            }
                            else
                            {
                                url1 = "https://business.facebook.com/api/graphql/?_callFlowletID=7586&_triggerFlowletID=7581";
                                payload1 = $"av={uid}&__usid=6-Tsorxnw1cqywsa:Psoryh6saf6vd:0-Asorxmrr70q24-RV=6:F=&__aaid=0&__bid={IDBM_C}&__user={uid}&__a=1&__req=15&__hs=20077.HYP:bizweb_comet_pkg.2.1.0.0.0&dpr=1&__ccg=EXCELLENT&__rev=1019018670&__s=7zkooo:lgz5dd:nka6jh&__hsi=7450342785382626345&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgE7R04zwIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48comwkE-UbE7i4UaEW2G261fwwwJK1qxa1ozEjU4Wdwoo4S5ayocE3BwMzUbVEHyU8U3ywbS1LwTwNAK2q0z8co9U4S7E6C13www4kxW1owmUaEeE5K22&__csr=g4X8DayPq4kwwBYO4n5nmRdeReB9kOIh4niSxdObQDLlNlbLQOv8hf9CQylnLeWimQnHp4HVrCtXVliWjWmRhZk-SpcAV9tAWXmCty5-p5ioLDivGhCAp9m_HgyH-aqiA-hHyoPCyJ5BKlaKhfjAAF6LQjiSUPLy65ZoxHgN9ppAEJ4FpoyF9eQut17UOnDiUyKKmWAKKdCx12k4ay9oGczKnigkDK9yHDy-l4GhpHyeEoxq7paXBVF8Rwgoy68ycxC5oaO7U9E-UKUWmayQGxSuaQfxmUkxa6XxaE-mGG26Utxl1ecw8bw_K5Umxu8wNDyE5O3i4U5611xyq0qO0LUug0Glddehd4w1v-8g0zga2oxgjG3i6Q1j1k5hkC0fYw2u963S1nGdw4-Hwk87eaw2LU0H2E4W0NU4S0Qro2Fwfy0hu4UkQ0AKmi011Jw0s7UGgw0oVzUHa0Ao0jMIw1xoy6p5iw9aO0iogBg0jIw2Y2yQ022yC1ogW02c602wm09ag5G05hyw5MwlU1tu02bKu0iJ0sk0czwp6dBo32wo80RS0ht0&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019018670&__spin_b=trunk&__spin_t=1734668106&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsRequestAdAccountAccessMutation&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{uid}\",\"ad_account_id\":\"{IDACCOUNT}\",\"permitted_roles\":[\"864195700451909\",\"151821535410699\",\"610690166001223\",\"186595505260379\"],\"permitted_tasks\":[],\"requesting_business_id\":\"{IDBM_C}\"}}}}&server_timestamps=true&doc_id=7293074874139866";
                            }
                            var responsePost = httpRequest.Post(url1, payload1, "application/x-www-form-urlencoded");
                            if (responsePost.IsOK)
                            {
                                var responseStr2 = responsePost.ToString();
                                if (responseStr2.Contains("CRITICAL"))
                                {
                                    row.Cells["cStatus"].Value = "Share FAIL: " + IDACCOUNT + " BM: " + IDBM_C;

                                    Thread.Sleep(TimeSpan.FromSeconds(delay_sh));

                                    if (lastRowIndex >= 0)  // Kiểm tra xem có hàng nào trong DataGridView không
                                    {
                                        // Lấy giá trị từ cột STT (giả sử cột STT có chỉ số 0)
                                        var lastStt = dgv1.Rows[lastRowIndex].Cells["cStt"].Value.ToString();

                                        if (lastStt == "1")
                                        {
                                            sl_tk_share_fail_1++;

                                            int live = (int)gioi_han_1.Value;

                                            if (sl_tk_share_fail_1 >= live)
                                            {
                                                if (status == "ACTIVE")
                                                {
                                                    // BM DIE
                                                    if (rtb_BMDIE.InvokeRequired)
                                                    {
                                                        rtb_BMDIE.Invoke(new Action(() =>
                                                        {
                                                            rtb_BMDIE.AppendText(IDBM + "|BM|" + sl_tk_bm + "|" + DateTime.Now + Environment.NewLine);

                                                        }));
                                                    }
                                                    else
                                                    {
                                                        rtb_BMDIE.AppendText(IDBM + "|BM|" + sl_tk_bm + "|" + DateTime.Now + Environment.NewLine);
                                                    }

                                                    StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                    sw.WriteLine(IDBM + "|BM|" + sl_tk_bm + "|" + DateTime.Now);
                                                    sw.Close();

                                                    if (rtb_BM_THAY_THE.InvokeRequired)
                                                    {
                                                        rtb_BM_THAY_THE.Invoke(new Action(() =>
                                                        {
                                                            BM_THAY_THE = rtb_BM_THAY_THE.Lines.ToList();
                                                        }));
                                                    }
                                                    else
                                                    {
                                                        BM_THAY_THE = rtb_BM_THAY_THE.Lines.ToList();
                                                    }
                                                    sl_tk_bm = 0;
                                                    sl_tk_share_fail_1 = 0;
                                                    for (int i = 0; i < BM_THAY_THE.Count; i++)
                                                    {

                                                        if (tb_BM.InvokeRequired)
                                                        {
                                                            tb_BM.Invoke(new Action(() =>
                                                            {
                                                                tb_BM.Clear();
                                                            }));
                                                        }
                                                        else
                                                        {
                                                            tb_BM.Clear();
                                                        }
                                                        var ID_CUOIBM = "";
                                                        // Chỉ lấy giá trị của phần tử cuối cùng
                                                        if (i == BM_THAY_THE.Count - 1)
                                                        {
                                                            ID_CUOIBM = BM_THAY_THE[i].ToString();
                                                        }
                                                        if (IDBM == ID_CUOIBM)
                                                        {
                                                            MessageBox.Show("HẾT ID BM IDBM");
                                                            Thread.Sleep(10000);
                                                            goto checkID;
                                                        }
                                                        if (!BM_THAY_THE.Contains(IDBM))
                                                        {
                                                            IDBM = BM_THAY_THE[0].ToString();
                                                            if (rtb_ID_BM_Share.InvokeRequired)
                                                            {
                                                                rtb_ID_BM_Share.Invoke(new Action(() =>
                                                                {
                                                                    rtb_ID_BM_Share.Clear();
                                                                    rtb_ID_BM_Share.AppendText(IDBM);
                                                                }));
                                                            }
                                                            else
                                                            {
                                                                rtb_ID_BM_Share.Clear();
                                                                rtb_ID_BM_Share.AppendText(IDBM);
                                                            }
                                                            goto next;

                                                        }
                                                        if (IDBM == BM_THAY_THE[i])
                                                        {
                                                            IDBM = BM_THAY_THE[i + 1].ToString();
                                                            if (rtb_ID_BM_Share.InvokeRequired)
                                                            {
                                                                rtb_ID_BM_Share.Invoke(new Action(() =>
                                                                {
                                                                    rtb_ID_BM_Share.Clear();
                                                                    rtb_ID_BM_Share.AppendText(IDBM);
                                                                }));
                                                            }
                                                            else
                                                            {
                                                                rtb_ID_BM_Share.Clear();
                                                                rtb_ID_BM_Share.AppendText(IDBM);
                                                            }
                                                            goto next;

                                                        }

                                                    }

                                                }
                                                if (status == "PENDING")
                                                {

                                                    if (rtb_BMDIE.InvokeRequired)
                                                    {
                                                        rtb_BMDIE.Invoke(new Action(() =>
                                                        {
                                                            rtb_BMDIE.AppendText(IDBM_CLOSE + "|BMCLOSE1|" + sl_tk_bm_close1 + "|" + DateTime.Now + Environment.NewLine);

                                                        }));
                                                    }
                                                    else
                                                    {
                                                        rtb_BMDIE.AppendText(IDBM_CLOSE + "|BMCLOSE1|" + sl_tk_bm_close1 + "|" + DateTime.Now + Environment.NewLine);
                                                    }
                                                    StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                    sw.WriteLine(IDBM_CLOSE + "|BMCLOSE1|" + sl_tk_bm_close1 + "|" + DateTime.Now);
                                                    sw.Close();


                                                    if (rtb_BM_CLOSE_THAY_THE.InvokeRequired)
                                                    {
                                                        rtb_BM_CLOSE_THAY_THE.Invoke(new Action(() =>
                                                        {
                                                            BM_CLOSE1_THAY_THE = rtb_BM_CLOSE_THAY_THE.Lines.ToList();
                                                        }));
                                                    }
                                                    else
                                                    {
                                                        BM_CLOSE1_THAY_THE = rtb_BM_CLOSE_THAY_THE.Lines.ToList();
                                                    }
                                                    sl_tk_bm_close1 = 0;
                                                    for (int i = 0; i < BM_CLOSE1_THAY_THE.Count; i++)
                                                    {
                                                        if (tb_BM_Close1.InvokeRequired)
                                                        {
                                                            tb_BM_Close1.Invoke(new Action(() =>
                                                            {
                                                                tb_BM_Close1.Clear();

                                                            }));
                                                        }
                                                        else
                                                        {
                                                            tb_BM_Close1.Clear();
                                                        }

                                                        var ID_CUOIBM = "";
                                                        // Chỉ lấy giá trị của phần tử cuối cùng
                                                        if (i == BM_CLOSE1_THAY_THE.Count - 1)
                                                        {
                                                            ID_CUOIBM = BM_CLOSE1_THAY_THE[i].ToString();
                                                        }

                                                        if (IDBM_CLOSE == ID_CUOIBM)
                                                        {
                                                            MessageBox.Show("HẾT ID BM CLOSE1");
                                                            Thread.Sleep(10000);
                                                            goto checkID;

                                                        }
                                                        if (!BM_CLOSE1_THAY_THE.Contains(IDBM_CLOSE))
                                                        {
                                                            IDBM_CLOSE = BM_CLOSE1_THAY_THE[0].ToString();
                                                            if (rtb_IDBM_CLOSE.InvokeRequired)
                                                            {
                                                                rtb_IDBM_CLOSE.Invoke(new Action(() =>
                                                                {
                                                                    rtb_IDBM_CLOSE.Clear();
                                                                    rtb_IDBM_CLOSE.AppendText(IDBM_CLOSE);
                                                                }));
                                                            }
                                                            else
                                                            {
                                                                rtb_IDBM_CLOSE.Clear();
                                                                rtb_IDBM_CLOSE.AppendText(IDBM_CLOSE);
                                                            }
                                                            goto next;
                                                        }
                                                        if (IDBM_CLOSE == BM_CLOSE1_THAY_THE[i])
                                                        {
                                                            IDBM_CLOSE = BM_CLOSE1_THAY_THE[i + 1].ToString();
                                                            if (rtb_IDBM_CLOSE.InvokeRequired)
                                                            {
                                                                rtb_IDBM_CLOSE.Invoke(new Action(() =>
                                                                {
                                                                    rtb_IDBM_CLOSE.Clear();
                                                                    rtb_IDBM_CLOSE.AppendText(IDBM_CLOSE);
                                                                }));
                                                            }
                                                            else
                                                            {
                                                                rtb_IDBM_CLOSE.Clear();
                                                                rtb_IDBM_CLOSE.AppendText(IDBM_CLOSE);
                                                            }
                                                            goto next;
                                                        }


                                                    }

                                                }

                                            next:
                                                Thread.Sleep(100);

                                            }
                                        }
                                        else
                                        {

                                            var stt = "";
                                            try
                                            {
                                                stt = row.Cells["cStt"].Value.ToString();
                                            }
                                            catch { }
                                            if (status == "ACTIVE")
                                            {

                                                sl_tk_share_fail_live1++;

                                                if (stt == lastStt)
                                                {
                                                    int live = (int)gioi_han_live.Value;

                                                    if (sl_tk_share_fail_live1 >= live)
                                                    {


                                                        // BM DIE
                                                        if (rtb_BMDIE.InvokeRequired)
                                                        {
                                                            rtb_BMDIE.Invoke(new Action(() =>
                                                            {
                                                                rtb_BMDIE.AppendText(IDBM + "|BM|" + sl_tk_bm + "|" + DateTime.Now + Environment.NewLine);

                                                            }));
                                                        }
                                                        else
                                                        {
                                                            rtb_BMDIE.AppendText(IDBM + "|BM|" + sl_tk_bm + "|" + DateTime.Now + Environment.NewLine);
                                                        }

                                                        StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                        sw.WriteLine(IDBM + "|BM|" + sl_tk_bm + "|" + DateTime.Now);
                                                        sw.Close();

                                                        if (rtb_BM_THAY_THE.InvokeRequired)
                                                        {
                                                            rtb_BM_THAY_THE.Invoke(new Action(() =>
                                                            {
                                                                BM_THAY_THE = rtb_BM_THAY_THE.Lines.ToList();
                                                            }));
                                                        }
                                                        else
                                                        {
                                                            BM_THAY_THE = rtb_BM_THAY_THE.Lines.ToList();
                                                        }
                                                        sl_tk_bm = 0;

                                                        for (int i = 0; i < BM_THAY_THE.Count; i++)
                                                        {

                                                            if (tb_BM.InvokeRequired)
                                                            {
                                                                tb_BM.Invoke(new Action(() =>
                                                                {
                                                                    tb_BM.Clear();
                                                                }));
                                                            }
                                                            else
                                                            {
                                                                tb_BM.Clear();
                                                            }
                                                            var ID_CUOIBM = "";
                                                            // Chỉ lấy giá trị của phần tử cuối cùng
                                                            if (i == BM_THAY_THE.Count - 1)
                                                            {
                                                                ID_CUOIBM = BM_THAY_THE[i].ToString();
                                                            }
                                                            if (IDBM == ID_CUOIBM)
                                                            {
                                                                MessageBox.Show("HẾT ID BM IDBM");
                                                                Thread.Sleep(10000);
                                                                goto checkID;
                                                            }
                                                            if (!BM_THAY_THE.Contains(IDBM))
                                                            {
                                                                IDBM = BM_THAY_THE[0].ToString();
                                                                if (rtb_ID_BM_Share.InvokeRequired)
                                                                {
                                                                    rtb_ID_BM_Share.Invoke(new Action(() =>
                                                                    {
                                                                        rtb_ID_BM_Share.Clear();
                                                                        rtb_ID_BM_Share.AppendText(IDBM);
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    rtb_ID_BM_Share.Clear();
                                                                    rtb_ID_BM_Share.AppendText(IDBM);
                                                                }
                                                                goto next;

                                                            }
                                                            if (IDBM == BM_THAY_THE[i])
                                                            {
                                                                IDBM = BM_THAY_THE[i + 1].ToString();
                                                                if (rtb_ID_BM_Share.InvokeRequired)
                                                                {
                                                                    rtb_ID_BM_Share.Invoke(new Action(() =>
                                                                    {
                                                                        rtb_ID_BM_Share.Clear();
                                                                        rtb_ID_BM_Share.AppendText(IDBM);
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    rtb_ID_BM_Share.Clear();
                                                                    rtb_ID_BM_Share.AppendText(IDBM);
                                                                }
                                                                goto next;

                                                            }

                                                        }

                                                    next:
                                                        Thread.Sleep(1);



                                                    }

                                                }
                                            }

                                            if (status == "PENDING")
                                            {

                                                sl_tk_share_fail_c1++;


                                                if (stt == lastStt)
                                                {
                                                    int close = (int)gioi_han_close.Value;


                                                    if (sl_tk_share_fail_c1 >= close)
                                                    {
                                                        // BM DIE




                                                        if (rtb_BMDIE.InvokeRequired)
                                                        {
                                                            rtb_BMDIE.Invoke(new Action(() =>
                                                            {
                                                                rtb_BMDIE.AppendText(IDBM_CLOSE + "|BMCLOSE1|" + sl_tk_bm_close1 + "|" + DateTime.Now + Environment.NewLine);

                                                            }));
                                                        }
                                                        else
                                                        {
                                                            rtb_BMDIE.AppendText(IDBM_CLOSE + "|BMCLOSE1|" + sl_tk_bm_close1 + "|" + DateTime.Now + Environment.NewLine);
                                                        }
                                                        StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                        sw.WriteLine(IDBM_CLOSE + "|BMCLOSE1|" + sl_tk_bm_close1 + "|" + DateTime.Now);
                                                        sw.Close();


                                                        if (rtb_BM_CLOSE_THAY_THE.InvokeRequired)
                                                        {
                                                            rtb_BM_CLOSE_THAY_THE.Invoke(new Action(() =>
                                                            {
                                                                BM_CLOSE1_THAY_THE = rtb_BM_CLOSE_THAY_THE.Lines.ToList();
                                                            }));
                                                        }
                                                        else
                                                        {
                                                            BM_CLOSE1_THAY_THE = rtb_BM_CLOSE_THAY_THE.Lines.ToList();
                                                        }
                                                        sl_tk_bm_close1 = 0;
                                                        for (int i = 0; i < BM_CLOSE1_THAY_THE.Count; i++)
                                                        {
                                                            if (tb_BM_Close1.InvokeRequired)
                                                            {
                                                                tb_BM_Close1.Invoke(new Action(() =>
                                                                {
                                                                    tb_BM_Close1.Clear();

                                                                }));
                                                            }
                                                            else
                                                            {
                                                                tb_BM_Close1.Clear();
                                                            }

                                                            var ID_CUOIBM = "";
                                                            // Chỉ lấy giá trị của phần tử cuối cùng
                                                            if (i == BM_CLOSE1_THAY_THE.Count - 1)
                                                            {
                                                                ID_CUOIBM = BM_CLOSE1_THAY_THE[i].ToString();
                                                            }

                                                            if (IDBM_CLOSE == ID_CUOIBM)
                                                            {
                                                                MessageBox.Show("HẾT ID BM CLOSE1");
                                                                Thread.Sleep(10000);
                                                                goto checkID;

                                                            }
                                                            if (!BM_CLOSE1_THAY_THE.Contains(IDBM_CLOSE))
                                                            {
                                                                IDBM_CLOSE = BM_CLOSE1_THAY_THE[0].ToString();
                                                                if (rtb_IDBM_CLOSE.InvokeRequired)
                                                                {
                                                                    rtb_IDBM_CLOSE.Invoke(new Action(() =>
                                                                    {
                                                                        rtb_IDBM_CLOSE.Clear();
                                                                        rtb_IDBM_CLOSE.AppendText(IDBM_CLOSE);
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    rtb_IDBM_CLOSE.Clear();
                                                                    rtb_IDBM_CLOSE.AppendText(IDBM_CLOSE);
                                                                }
                                                                goto next;
                                                            }
                                                            if (IDBM_CLOSE == BM_CLOSE1_THAY_THE[i])
                                                            {
                                                                IDBM_CLOSE = BM_CLOSE1_THAY_THE[i + 1].ToString();
                                                                if (rtb_IDBM_CLOSE.InvokeRequired)
                                                                {
                                                                    rtb_IDBM_CLOSE.Invoke(new Action(() =>
                                                                    {
                                                                        rtb_IDBM_CLOSE.Clear();
                                                                        rtb_IDBM_CLOSE.AppendText(IDBM_CLOSE);
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    rtb_IDBM_CLOSE.Clear();
                                                                    rtb_IDBM_CLOSE.AppendText(IDBM_CLOSE);
                                                                }
                                                                goto next;
                                                            }


                                                        }










                                                    }
                                                next:
                                                    Thread.Sleep(100);
                                                }
                                            }


                                        }
                                    }

                                    assetID = Regex.Match(responesStroverview, "assetID\":\"(.*?)\"").Groups[1].Value.ToString();
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    if (string.IsNullOrEmpty(assetID))
                                    {
                                        httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/ad_accounts?business_id={IDBM_C_2}");
                                    }
                                    else
                                    {
                                        httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/ad_accounts?business_id={IDBM_C_2}&nav_ref=bm_settings_redirect_migration&bm_redirect_migration=true&selected_asset_id={assetID}&selected_asset_type=ad-account");
                                    }
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.140\", \"Chromium\";v=\"131.0.6778.140\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("x-asbd-id", "129477");
                                    httpRequest.AddHeader("x-bh-flowsessionid", "upl_wizard_1734668114085_491553ea-0cc7-4567-83a0-cf44d8da996d");
                                    httpRequest.AddHeader("x-fb-friendly-name", "BizKitSettingsRequestAdAccountAccessMutation");
                                    httpRequest.AddHeader("x-fb-upl-sessionid", "upl_1734668114085_273bf307-35aa-4d07-8c4c-8138ea1829e9");
                                    fb_dtsg = Regex.Match(responesStroverview, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"}").Groups[1].Value;
                                    lsd = Regex.Match(responesStroverview, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                                    jazoest = Regex.Match(responesStroverview, "&jazoest=(.*?)\",").Groups[1].Value;
                                    url1 = "";
                                    payload1 = "";
                                    if (string.IsNullOrEmpty(assetID))
                                    {
                                        url1 = "https://business.facebook.com/api/graphql/?_callFlowletID=9422&_triggerFlowletID=9417";
                                        payload1 = $"av={uid}&__usid=6-Tsow8xd59fixy:Psowd5g1gmnk7z:0-Asowd5sn01u2v-RV=6:F=&__aaid=0&__bid={IDBM_C_2}&__user={uid}&__a=1&__req=13&__hs=20079.HYP:bizweb_comet_pkg.2.1.0.0.0&dpr=1&__ccg=GOOD&__rev=1019055684&__s=q5syll:s1c085:h2jnyd&__hsi=7451226006509486975&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgE7R04zwIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48comwkE-UbE7i4UaEW2G261fwwwJK1qxa1ozEjU4Wdwoo4S5ayocE3BwMzUbVEHyU8U3ywbS1LwTwNAK2q0z8co9U4S7E6C13www4kxW1owmUaEeE5K22&__csr=g44hsh3a5lfsnklHb5h2OQzdGyfcyiv9jkzdJ5IHSO8IigybnOuz94l6ncBdnZfqmGZaqhpuAahQKWmJaFHkzJurYGnlEGuh9DGiWHRBRh_FkOmQ9miKHA-QF5GmGGZqVe9yanh9eidu9h9VbzKLqKrJrGCLxaP39p8Kt5KGyFqDppBnBqxuWBpAifyZajGBJrCxei5v-muECiV99--exauuvBCBAAJ6yWAiAGu4oGGGqbAghjyFV_K443m7HxmmezEhyUnwl8y6WVGG2m4kayoux69XgOex7AG2C8wgppVAufU4TBwRDwIxS1QwDxu1awBAwg83tzXXmQ3K1bg0bmE1eEiDAy8O581oy8nkh518laBf2svNv7w5mw7dw5szyG4A0QEk809oG0tGA0Vo2-weybw6mwpo1co4e6m1qw58a0wEW5Eqw0tWE04JGv805ho1Op206jg2OBu17Cw1gu07RozCVmUdo710TClwJw1bu0fIabg-03Ju0q62q0c0a04BEow4PDw0yNg1jQ0f4S32vwhK0WES0uiq0qq&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019055684&__spin_b=trunk&__spin_t=1734873747&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsRequestAdAccountAccessMutation&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{uid}\",\"ad_account_id\":\"{IDACCOUNT}\",\"permitted_roles\":[\"864195700451909\",\"151821535410699\",\"610690166001223\",\"186595505260379\"],\"permitted_tasks\":[],\"requesting_business_id\":\"{IDBM_C_2}\"}}}}&server_timestamps=true&doc_id=7293074874139866";
                                    }
                                    else
                                    {
                                        url1 = "https://business.facebook.com/api/graphql/?_callFlowletID=7586&_triggerFlowletID=7581";
                                        payload1 = $"av={uid}&__usid=6-Tsorxnw1cqywsa:Psoryh6saf6vd:0-Asorxmrr70q24-RV=6:F=&__aaid=0&__bid={IDBM_C_2}&__user={uid}&__a=1&__req=15&__hs=20077.HYP:bizweb_comet_pkg.2.1.0.0.0&dpr=1&__ccg=EXCELLENT&__rev=1019018670&__s=7zkooo:lgz5dd:nka6jh&__hsi=7450342785382626345&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgE7R04zwIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48comwkE-UbE7i4UaEW2G261fwwwJK1qxa1ozEjU4Wdwoo4S5ayocE3BwMzUbVEHyU8U3ywbS1LwTwNAK2q0z8co9U4S7E6C13www4kxW1owmUaEeE5K22&__csr=g4X8DayPq4kwwBYO4n5nmRdeReB9kOIh4niSxdObQDLlNlbLQOv8hf9CQylnLeWimQnHp4HVrCtXVliWjWmRhZk-SpcAV9tAWXmCty5-p5ioLDivGhCAp9m_HgyH-aqiA-hHyoPCyJ5BKlaKhfjAAF6LQjiSUPLy65ZoxHgN9ppAEJ4FpoyF9eQut17UOnDiUyKKmWAKKdCx12k4ay9oGczKnigkDK9yHDy-l4GhpHyeEoxq7paXBVF8Rwgoy68ycxC5oaO7U9E-UKUWmayQGxSuaQfxmUkxa6XxaE-mGG26Utxl1ecw8bw_K5Umxu8wNDyE5O3i4U5611xyq0qO0LUug0Glddehd4w1v-8g0zga2oxgjG3i6Q1j1k5hkC0fYw2u963S1nGdw4-Hwk87eaw2LU0H2E4W0NU4S0Qro2Fwfy0hu4UkQ0AKmi011Jw0s7UGgw0oVzUHa0Ao0jMIw1xoy6p5iw9aO0iogBg0jIw2Y2yQ022yC1ogW02c602wm09ag5G05hyw5MwlU1tu02bKu0iJ0sk0czwp6dBo32wo80RS0ht0&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019018670&__spin_b=trunk&__spin_t=1734668106&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsRequestAdAccountAccessMutation&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{uid}\",\"ad_account_id\":\"{IDACCOUNT}\",\"permitted_roles\":[\"864195700451909\",\"151821535410699\",\"610690166001223\",\"186595505260379\"],\"permitted_tasks\":[],\"requesting_business_id\":\"{IDBM_C_2}\"}}}}&server_timestamps=true&doc_id=7293074874139866";
                                    }
                                    responsePost = httpRequest.Post(url1, payload1, "application/x-www-form-urlencoded");

                                    var responseStr3 = responsePost.ToString();
                                    if (responseStr3.Contains("CRITICAL"))
                                    {
                                        row.Cells["cStatus"].Value = "Share FAIL: " + IDACCOUNT + " BM: " + IDBM_C_2;

                                        Thread.Sleep(TimeSpan.FromSeconds(delay_sh));


                                        if (lastRowIndex >= 0)  // Kiểm tra xem có hàng nào trong DataGridView không
                                        {
                                            // Lấy giá trị từ cột STT (giả sử cột STT có chỉ số 0)
                                            var lastStt = dgv1.Rows[lastRowIndex].Cells["cStt"].Value.ToString();

                                            if (lastStt == "1")
                                            {
                                                sl_tk_share_fail_2++;
                                                int live = (int)gioi_han_1.Value;
                                                if (sl_tk_share_fail_2 >= live)
                                                {
                                                    if (status == "ACTIVE")
                                                    {

                                                        if (rtb_BMDIE.InvokeRequired)
                                                        {
                                                            rtb_BMDIE.Invoke(new Action(() =>
                                                            {
                                                                rtb_BMDIE.AppendText(IDBM_BACKUP + "|BMBACKUP|" + sl_tk_bm_back_up + "|" + DateTime.Now + Environment.NewLine);

                                                            }));
                                                        }
                                                        else
                                                        {
                                                            rtb_BMDIE.AppendText(IDBM_BACKUP + "|BMBACKUP|" + sl_tk_bm_back_up + "|" + DateTime.Now + Environment.NewLine);
                                                        }

                                                        StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                        sw.WriteLine(IDBM_BACKUP + "|BMBACKUP|" + sl_tk_bm_back_up + "|" + DateTime.Now);
                                                        sw.Close();


                                                        if (rtb_BM_BACKUP_THAY_THE.InvokeRequired)
                                                        {
                                                            rtb_BM_BACKUP_THAY_THE.Invoke(new Action(() =>
                                                            {
                                                                BM_BACK_UP_THAY_THE = rtb_BM_BACKUP_THAY_THE.Lines.ToList();
                                                            }));
                                                        }
                                                        else
                                                        {
                                                            BM_BACK_UP_THAY_THE = rtb_BM_BACKUP_THAY_THE.Lines.ToList();
                                                        }
                                                        sl_tk_bm_back_up = 0;
                                                        sl_tk_share_fail_2 = 0;
                                                        for (int i = 0; i < BM_BACK_UP_THAY_THE.Count; i++)
                                                        {
                                                            if (tb_BM_BACK_UP.InvokeRequired)
                                                            {
                                                                tb_BM_BACK_UP.Invoke(new Action(() =>
                                                                {
                                                                    tb_BM_BACK_UP.Clear();

                                                                }));
                                                            }
                                                            else
                                                            {
                                                                tb_BM_BACK_UP.Clear();

                                                            }
                                                            var ID_CUOIBM = "";
                                                            // Chỉ lấy giá trị của phần tử cuối cùng
                                                            if (i == BM_BACK_UP_THAY_THE.Count - 1)
                                                            {
                                                                ID_CUOIBM = BM_BACK_UP_THAY_THE[i].ToString();
                                                            }
                                                            if (IDBM_BACKUP == ID_CUOIBM)
                                                            {
                                                                MessageBox.Show("HẾT ID BM BMBACKUP1");
                                                                Thread.Sleep(10000);


                                                                goto checkID;
                                                            }
                                                            if (!BM_BACK_UP_THAY_THE.Contains(IDBM_BACKUP))
                                                            {
                                                                IDBM_BACKUP = BM_BACK_UP_THAY_THE[0].ToString();
                                                                if (rtb_ID_BM_Share_BACK_UP.InvokeRequired)
                                                                {
                                                                    rtb_ID_BM_Share_BACK_UP.Invoke(new Action(() =>
                                                                    {
                                                                        rtb_ID_BM_Share_BACK_UP.Clear();
                                                                        rtb_ID_BM_Share_BACK_UP.AppendText(IDBM_BACKUP);
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    rtb_ID_BM_Share_BACK_UP.Clear();
                                                                    rtb_ID_BM_Share_BACK_UP.AppendText(IDBM_BACKUP);
                                                                }
                                                                goto next1;
                                                            }
                                                            if (IDBM_BACKUP == BM_BACK_UP_THAY_THE[i])
                                                            {
                                                                IDBM_BACKUP = BM_BACK_UP_THAY_THE[i + 1].ToString();

                                                                if (rtb_ID_BM_Share_BACK_UP.InvokeRequired)
                                                                {
                                                                    rtb_ID_BM_Share_BACK_UP.Invoke(new Action(() =>
                                                                    {
                                                                        rtb_ID_BM_Share_BACK_UP.Clear();
                                                                        rtb_ID_BM_Share_BACK_UP.AppendText(IDBM_BACKUP);
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    rtb_ID_BM_Share_BACK_UP.Clear();
                                                                    rtb_ID_BM_Share_BACK_UP.AppendText(IDBM_BACKUP);
                                                                }
                                                                goto next1;
                                                            }




                                                        }


                                                    next1:
                                                        Thread.Sleep(1);

                                                    }
                                                    if (status == "PENDING")
                                                    {
                                                        if (rtb_BMDIE.InvokeRequired)
                                                        {
                                                            rtb_BMDIE.Invoke(new Action(() =>
                                                            {
                                                                rtb_BMDIE.AppendText(IDBM_CLOSE_2 + "|BMCLOSE2|" + sl_tk_bm_close2 + "|" + DateTime.Now + Environment.NewLine);

                                                            }));
                                                        }
                                                        else
                                                        {
                                                            rtb_BMDIE.AppendText(IDBM_CLOSE_2 + "|BMCLOSE2|" + sl_tk_bm_close2 + "|" + DateTime.Now + Environment.NewLine);
                                                        }
                                                        StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                        sw.WriteLine(IDBM_CLOSE_2 + "|BMCLOSE2|" + sl_tk_bm_close2 + "|" + DateTime.Now);
                                                        sw.Close();

                                                        if (rtb_BM_CLOSE_2_THAY_THE.InvokeRequired)
                                                        {
                                                            rtb_BM_CLOSE_2_THAY_THE.Invoke(new Action(() =>
                                                            {
                                                                BM_CLOSE2_THAY_THE = rtb_BM_CLOSE_2_THAY_THE.Lines.ToList();
                                                            }));
                                                        }
                                                        else
                                                        {
                                                            BM_CLOSE2_THAY_THE = rtb_BM_CLOSE_2_THAY_THE.Lines.ToList();
                                                        }
                                                        sl_tk_bm_close2 = 0;
                                                        sl_tk_share_fail_2 = 0;
                                                        for (int i = 0; i < BM_CLOSE2_THAY_THE.Count; i++)
                                                        {
                                                            if (tb_BM_Close_2.InvokeRequired)
                                                            {
                                                                tb_BM_Close_2.Invoke(new Action(() =>
                                                                {
                                                                    tb_BM_Close_2.Clear();
                                                                }));
                                                            }
                                                            else
                                                            {
                                                                tb_BM_Close_2.Clear();
                                                            }
                                                            var ID_CUOIBM = "";
                                                            // Chỉ lấy giá trị của phần tử cuối cùng
                                                            if (i == BM_CLOSE2_THAY_THE.Count - 1)
                                                            {
                                                                ID_CUOIBM = BM_CLOSE2_THAY_THE[i].ToString();
                                                            }
                                                            if (IDBM_CLOSE_2 == ID_CUOIBM)
                                                            {
                                                                MessageBox.Show("HẾT ID BM CLOSE2");
                                                                Thread.Sleep(10000);
                                                                goto checkID;

                                                            }
                                                            if (!BM_CLOSE2_THAY_THE.Contains(IDBM_CLOSE_2))
                                                            {
                                                                IDBM_CLOSE_2 = BM_CLOSE2_THAY_THE[0].ToString();
                                                                if (rtb_IDBM_CLOSE_2.InvokeRequired)
                                                                {
                                                                    rtb_IDBM_CLOSE_2.Invoke(new Action(() =>
                                                                    {
                                                                        rtb_IDBM_CLOSE_2.Clear();
                                                                        rtb_IDBM_CLOSE_2.AppendText(IDBM_CLOSE_2);
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    rtb_IDBM_CLOSE_2.Clear();
                                                                    rtb_IDBM_CLOSE_2.AppendText(IDBM_CLOSE_2);
                                                                }
                                                                goto next3;
                                                            }
                                                            if (IDBM_CLOSE_2 == BM_CLOSE2_THAY_THE[i])
                                                            {
                                                                IDBM_CLOSE_2 = BM_CLOSE2_THAY_THE[i + 1].ToString();
                                                                if (rtb_IDBM_CLOSE_2.InvokeRequired)
                                                                {
                                                                    rtb_IDBM_CLOSE_2.Invoke(new Action(() =>
                                                                    {
                                                                        rtb_IDBM_CLOSE_2.Clear();
                                                                        rtb_IDBM_CLOSE_2.AppendText(IDBM_CLOSE_2);
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    rtb_IDBM_CLOSE_2.Clear();
                                                                    rtb_IDBM_CLOSE_2.AppendText(IDBM_CLOSE_2);
                                                                }
                                                                goto next3;
                                                            }


                                                        }



                                                    }

                                                next3:
                                                    Thread.Sleep(100);

                                                }
                                            }
                                            else
                                            {

                                                var stt = "";
                                                try
                                                {
                                                    stt = row.Cells["cStt"].Value.ToString();
                                                }
                                                catch { }



                                                if (status == "ACTIVE")
                                                {
                                                    sl_tk_share_fail_live2++;
                                                    if (stt == lastStt)
                                                    {

                                                        int live = (int)gioi_han_live.Value;
                                                        if (sl_tk_share_fail_live2 >= live)
                                                        {
                                                            if (rtb_BMDIE.InvokeRequired)
                                                            {
                                                                rtb_BMDIE.Invoke(new Action(() =>
                                                                {
                                                                    rtb_BMDIE.AppendText(IDBM_BACKUP + "|BMBACKUP|" + sl_tk_bm_back_up + "|" + DateTime.Now + Environment.NewLine);

                                                                }));
                                                            }
                                                            else
                                                            {
                                                                rtb_BMDIE.AppendText(IDBM_BACKUP + "|BMBACKUP|" + sl_tk_bm_back_up + "|" + DateTime.Now + Environment.NewLine);
                                                            }

                                                            StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                            sw.WriteLine(IDBM_BACKUP + "|BMBACKUP|" + sl_tk_bm_back_up + "|" + DateTime.Now);
                                                            sw.Close();


                                                            if (rtb_BM_BACKUP_THAY_THE.InvokeRequired)
                                                            {
                                                                rtb_BM_BACKUP_THAY_THE.Invoke(new Action(() =>
                                                                {
                                                                    BM_BACK_UP_THAY_THE = rtb_BM_BACKUP_THAY_THE.Lines.ToList();
                                                                }));
                                                            }
                                                            else
                                                            {
                                                                BM_BACK_UP_THAY_THE = rtb_BM_BACKUP_THAY_THE.Lines.ToList();
                                                            }
                                                            sl_tk_bm_back_up = 0;

                                                            for (int i = 0; i < BM_BACK_UP_THAY_THE.Count; i++)
                                                            {
                                                                if (tb_BM_BACK_UP.InvokeRequired)
                                                                {
                                                                    tb_BM_BACK_UP.Invoke(new Action(() =>
                                                                    {
                                                                        tb_BM_BACK_UP.Clear();

                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    tb_BM_BACK_UP.Clear();

                                                                }
                                                                var ID_CUOIBM = "";
                                                                // Chỉ lấy giá trị của phần tử cuối cùng
                                                                if (i == BM_BACK_UP_THAY_THE.Count - 1)
                                                                {
                                                                    ID_CUOIBM = BM_BACK_UP_THAY_THE[i].ToString();
                                                                }
                                                                if (IDBM_BACKUP == ID_CUOIBM)
                                                                {
                                                                    MessageBox.Show("HẾT ID BM BMBACKUP1");
                                                                    Thread.Sleep(10000);


                                                                    goto checkID;
                                                                }
                                                                if (!BM_BACK_UP_THAY_THE.Contains(IDBM_BACKUP))
                                                                {
                                                                    IDBM_BACKUP = BM_BACK_UP_THAY_THE[0].ToString();
                                                                    if (rtb_ID_BM_Share_BACK_UP.InvokeRequired)
                                                                    {
                                                                        rtb_ID_BM_Share_BACK_UP.Invoke(new Action(() =>
                                                                        {
                                                                            rtb_ID_BM_Share_BACK_UP.Clear();
                                                                            rtb_ID_BM_Share_BACK_UP.AppendText(IDBM_BACKUP);
                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        rtb_ID_BM_Share_BACK_UP.Clear();
                                                                        rtb_ID_BM_Share_BACK_UP.AppendText(IDBM_BACKUP);
                                                                    }
                                                                    goto next1;
                                                                }

                                                                if (IDBM_BACKUP == BM_BACK_UP_THAY_THE[i])
                                                                {
                                                                    IDBM_BACKUP = BM_BACK_UP_THAY_THE[i + 1].ToString();

                                                                    if (rtb_ID_BM_Share_BACK_UP.InvokeRequired)
                                                                    {
                                                                        rtb_ID_BM_Share_BACK_UP.Invoke(new Action(() =>
                                                                        {
                                                                            rtb_ID_BM_Share_BACK_UP.Clear();
                                                                            rtb_ID_BM_Share_BACK_UP.AppendText(IDBM_BACKUP);
                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        rtb_ID_BM_Share_BACK_UP.Clear();
                                                                        rtb_ID_BM_Share_BACK_UP.AppendText(IDBM_BACKUP);
                                                                    }
                                                                    goto next1;
                                                                }



                                                            }


                                                        next1:
                                                            Thread.Sleep(1);
                                                        }
                                                    }
                                                }


                                                if (status == "PENDING")
                                                {
                                                    sl_tk_share_fail_c2++;
                                                    if (stt == lastStt)
                                                    {
                                                        int close = (int)gioi_han_close.Value;
                                                        if (sl_tk_share_fail_c2 >= close)
                                                        {

                                                            if (status == "PENDING")
                                                            {
                                                                if (rtb_BMDIE.InvokeRequired)
                                                                {
                                                                    rtb_BMDIE.Invoke(new Action(() =>
                                                                    {
                                                                        rtb_BMDIE.AppendText(IDBM_CLOSE_2 + "|BMCLOSE2|" + sl_tk_bm_close2 + "|" + DateTime.Now + Environment.NewLine);

                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    rtb_BMDIE.AppendText(IDBM_CLOSE_2 + "|BMCLOSE2|" + sl_tk_bm_close2 + "|" + DateTime.Now + Environment.NewLine);
                                                                }
                                                                StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                                sw.WriteLine(IDBM_CLOSE_2 + "|BMCLOSE2|" + sl_tk_bm_close2 + "|" + DateTime.Now);
                                                                sw.Close();

                                                                if (rtb_BM_CLOSE_2_THAY_THE.InvokeRequired)
                                                                {
                                                                    rtb_BM_CLOSE_2_THAY_THE.Invoke(new Action(() =>
                                                                    {
                                                                        BM_CLOSE2_THAY_THE = rtb_BM_CLOSE_2_THAY_THE.Lines.ToList();
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    BM_CLOSE2_THAY_THE = rtb_BM_CLOSE_2_THAY_THE.Lines.ToList();
                                                                }
                                                                sl_tk_bm_close2 = 0;
                                                                for (int i = 0; i < BM_CLOSE2_THAY_THE.Count; i++)
                                                                {
                                                                    if (tb_BM_Close_2.InvokeRequired)
                                                                    {
                                                                        tb_BM_Close_2.Invoke(new Action(() =>
                                                                        {
                                                                            tb_BM_Close_2.Clear();
                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        tb_BM_Close_2.Clear();
                                                                    }
                                                                    var ID_CUOIBM = "";
                                                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                                                    if (i == BM_CLOSE2_THAY_THE.Count - 1)
                                                                    {
                                                                        ID_CUOIBM = BM_CLOSE2_THAY_THE[i].ToString();
                                                                    }
                                                                    if (IDBM_CLOSE_2 == ID_CUOIBM)
                                                                    {
                                                                        MessageBox.Show("HẾT ID BM CLOSE2");
                                                                        Thread.Sleep(10000);
                                                                        goto checkID;

                                                                    }
                                                                    if (!BM_CLOSE2_THAY_THE.Contains(IDBM_CLOSE_2))
                                                                    {
                                                                        IDBM_CLOSE_2 = BM_CLOSE2_THAY_THE[0].ToString();
                                                                        if (rtb_IDBM_CLOSE_2.InvokeRequired)
                                                                        {
                                                                            rtb_IDBM_CLOSE_2.Invoke(new Action(() =>
                                                                            {
                                                                                rtb_IDBM_CLOSE_2.Clear();
                                                                                rtb_IDBM_CLOSE_2.AppendText(IDBM_CLOSE_2);
                                                                            }));
                                                                        }
                                                                        else
                                                                        {
                                                                            rtb_IDBM_CLOSE_2.Clear();
                                                                            rtb_IDBM_CLOSE_2.AppendText(IDBM_CLOSE_2);
                                                                        }
                                                                        goto next3;
                                                                    }
                                                                    if (IDBM_CLOSE_2 == BM_CLOSE2_THAY_THE[i])
                                                                    {
                                                                        IDBM_CLOSE_2 = BM_CLOSE2_THAY_THE[i + 1].ToString();
                                                                        if (rtb_IDBM_CLOSE_2.InvokeRequired)
                                                                        {
                                                                            rtb_IDBM_CLOSE_2.Invoke(new Action(() =>
                                                                            {
                                                                                rtb_IDBM_CLOSE_2.Clear();
                                                                                rtb_IDBM_CLOSE_2.AppendText(IDBM_CLOSE_2);
                                                                            }));
                                                                        }
                                                                        else
                                                                        {
                                                                            rtb_IDBM_CLOSE_2.Clear();
                                                                            rtb_IDBM_CLOSE_2.AppendText(IDBM_CLOSE_2);
                                                                        }
                                                                        goto next3;
                                                                    }


                                                                }



                                                            }

                                                        next3:
                                                            Thread.Sleep(100);
                                                        }
                                                    }

                                                }
                                            }
                                        }

                                        // share vao bm THỨ 3
                                        assetID = Regex.Match(responesStroverview, "assetID\":\"(.*?)\"").Groups[1].Value.ToString();
                                        httpRequest.AddHeader("authority", "business.facebook.com");
                                        httpRequest.AddHeader("accept", "*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        if (string.IsNullOrEmpty(assetID))
                                        {
                                            httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/ad_accounts?business_id={IDBM_C_3}");
                                        }
                                        else
                                        {
                                            httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/ad_accounts?business_id={IDBM_C_3}&nav_ref=bm_settings_redirect_migration&bm_redirect_migration=true&selected_asset_id={assetID}&selected_asset_type=ad-account");
                                        }
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.140\", \"Chromium\";v=\"131.0.6778.140\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                        httpRequest.AddHeader("x-asbd-id", "129477");
                                        httpRequest.AddHeader("x-bh-flowsessionid", "upl_wizard_1734668114085_491553ea-0cc7-4567-83a0-cf44d8da996d");
                                        httpRequest.AddHeader("x-fb-friendly-name", "BizKitSettingsRequestAdAccountAccessMutation");
                                        httpRequest.AddHeader("x-fb-upl-sessionid", "upl_1734668114085_273bf307-35aa-4d07-8c4c-8138ea1829e9");
                                        fb_dtsg = Regex.Match(responesStroverview, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"}").Groups[1].Value;
                                        lsd = Regex.Match(responesStroverview, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                                        jazoest = Regex.Match(responesStroverview, "&jazoest=(.*?)\",").Groups[1].Value;
                                        url1 = "";
                                        payload1 = "";
                                        if (string.IsNullOrEmpty(assetID))
                                        {
                                            url1 = "https://business.facebook.com/api/graphql/?_callFlowletID=9422&_triggerFlowletID=9417";
                                            payload1 = $"av={uid}&__usid=6-Tsow8xd59fixy:Psowd5g1gmnk7z:0-Asowd5sn01u2v-RV=6:F=&__aaid=0&__bid={IDBM_C_3}&__user={uid}&__a=1&__req=13&__hs=20079.HYP:bizweb_comet_pkg.2.1.0.0.0&dpr=1&__ccg=GOOD&__rev=1019055684&__s=q5syll:s1c085:h2jnyd&__hsi=7451226006509486975&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgE7R04zwIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48comwkE-UbE7i4UaEW2G261fwwwJK1qxa1ozEjU4Wdwoo4S5ayocE3BwMzUbVEHyU8U3ywbS1LwTwNAK2q0z8co9U4S7E6C13www4kxW1owmUaEeE5K22&__csr=g44hsh3a5lfsnklHb5h2OQzdGyfcyiv9jkzdJ5IHSO8IigybnOuz94l6ncBdnZfqmGZaqhpuAahQKWmJaFHkzJurYGnlEGuh9DGiWHRBRh_FkOmQ9miKHA-QF5GmGGZqVe9yanh9eidu9h9VbzKLqKrJrGCLxaP39p8Kt5KGyFqDppBnBqxuWBpAifyZajGBJrCxei5v-muECiV99--exauuvBCBAAJ6yWAiAGu4oGGGqbAghjyFV_K443m7HxmmezEhyUnwl8y6WVGG2m4kayoux69XgOex7AG2C8wgppVAufU4TBwRDwIxS1QwDxu1awBAwg83tzXXmQ3K1bg0bmE1eEiDAy8O581oy8nkh518laBf2svNv7w5mw7dw5szyG4A0QEk809oG0tGA0Vo2-weybw6mwpo1co4e6m1qw58a0wEW5Eqw0tWE04JGv805ho1Op206jg2OBu17Cw1gu07RozCVmUdo710TClwJw1bu0fIabg-03Ju0q62q0c0a04BEow4PDw0yNg1jQ0f4S32vwhK0WES0uiq0qq&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019055684&__spin_b=trunk&__spin_t=1734873747&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsRequestAdAccountAccessMutation&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{uid}\",\"ad_account_id\":\"{IDACCOUNT}\",\"permitted_roles\":[\"864195700451909\",\"151821535410699\",\"610690166001223\",\"186595505260379\"],\"permitted_tasks\":[],\"requesting_business_id\":\"{IDBM_C_3}\"}}}}&server_timestamps=true&doc_id=7293074874139866";
                                        }
                                        else
                                        {
                                            url1 = "https://business.facebook.com/api/graphql/?_callFlowletID=7586&_triggerFlowletID=7581";
                                            payload1 = $"av={uid}&__usid=6-Tsorxnw1cqywsa:Psoryh6saf6vd:0-Asorxmrr70q24-RV=6:F=&__aaid=0&__bid={IDBM_C_3}&__user={uid}&__a=1&__req=15&__hs=20077.HYP:bizweb_comet_pkg.2.1.0.0.0&dpr=1&__ccg=EXCELLENT&__rev=1019018670&__s=7zkooo:lgz5dd:nka6jh&__hsi=7450342785382626345&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgE7R04zwIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48comwkE-UbE7i4UaEW2G261fwwwJK1qxa1ozEjU4Wdwoo4S5ayocE3BwMzUbVEHyU8U3ywbS1LwTwNAK2q0z8co9U4S7E6C13www4kxW1owmUaEeE5K22&__csr=g4X8DayPq4kwwBYO4n5nmRdeReB9kOIh4niSxdObQDLlNlbLQOv8hf9CQylnLeWimQnHp4HVrCtXVliWjWmRhZk-SpcAV9tAWXmCty5-p5ioLDivGhCAp9m_HgyH-aqiA-hHyoPCyJ5BKlaKhfjAAF6LQjiSUPLy65ZoxHgN9ppAEJ4FpoyF9eQut17UOnDiUyKKmWAKKdCx12k4ay9oGczKnigkDK9yHDy-l4GhpHyeEoxq7paXBVF8Rwgoy68ycxC5oaO7U9E-UKUWmayQGxSuaQfxmUkxa6XxaE-mGG26Utxl1ecw8bw_K5Umxu8wNDyE5O3i4U5611xyq0qO0LUug0Glddehd4w1v-8g0zga2oxgjG3i6Q1j1k5hkC0fYw2u963S1nGdw4-Hwk87eaw2LU0H2E4W0NU4S0Qro2Fwfy0hu4UkQ0AKmi011Jw0s7UGgw0oVzUHa0Ao0jMIw1xoy6p5iw9aO0iogBg0jIw2Y2yQ022yC1ogW02c602wm09ag5G05hyw5MwlU1tu02bKu0iJ0sk0czwp6dBo32wo80RS0ht0&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019018670&__spin_b=trunk&__spin_t=1734668106&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsRequestAdAccountAccessMutation&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{uid}\",\"ad_account_id\":\"{IDACCOUNT}\",\"permitted_roles\":[\"864195700451909\",\"151821535410699\",\"610690166001223\",\"186595505260379\"],\"permitted_tasks\":[],\"requesting_business_id\":\"{IDBM_C_3}\"}}}}&server_timestamps=true&doc_id=7293074874139866";
                                        }
                                        responsePost = httpRequest.Post(url1, payload1, "application/x-www-form-urlencoded");

                                        var responseStr4 = responsePost.ToString();

                                        if (responseStr4.Contains("CRITICAL"))
                                        {
                                            row.Cells["cStatus"].Value = "Share FAIL: " + IDACCOUNT + " BM: " + IDBM_C_3;
                                            Thread.Sleep(TimeSpan.FromSeconds(delay_sh));
                                            if (lastRowIndex >= 0)  // Kiểm tra xem có hàng nào trong DataGridView không
                                            {
                                                // Lấy giá trị từ cột STT (giả sử cột STT có chỉ số 0)
                                                var lastStt = dgv1.Rows[lastRowIndex].Cells["cStt"].Value.ToString();

                                                if (lastStt == "1")
                                                {
                                                    sl_tk_share_fail_3++;

                                                    int live = (int)gioi_han_1.Value;
                                                    if (sl_tk_share_fail_3 >= live)
                                                    {
                                                        if (status == "ACTIVE")
                                                        {
                                                            if (rtb_BMDIE.InvokeRequired)
                                                            {
                                                                rtb_BMDIE.Invoke(new Action(() =>
                                                                {
                                                                    rtb_BMDIE.AppendText(IDBM_BACKUP_2 + "|BMBACKUP2|" + sl_tk_bm_back_up_2 + "|" + DateTime.Now + Environment.NewLine);

                                                                }));
                                                            }
                                                            else
                                                            {
                                                                rtb_BMDIE.AppendText(IDBM_BACKUP_2 + "|BMBACKUP2|" + sl_tk_bm_back_up_2 + "|" + DateTime.Now + Environment.NewLine);
                                                            }

                                                            StreamWriter sw = new StreamWriter("BMIE.txt", true);
                                                            sw.WriteLine(IDBM_BACKUP_2 + "|BMBACKUP2|" + sl_tk_bm_back_up_2 + "|" + DateTime.Now);
                                                            sw.Close();


                                                            if (rtb_BM_BACKUP2_THAY_THE.InvokeRequired)
                                                            {
                                                                rtb_BM_BACKUP2_THAY_THE.Invoke(new Action(() =>
                                                                {
                                                                    BM_BACK_UP_2_THAY_THE = rtb_BM_BACKUP2_THAY_THE.Lines.ToList();
                                                                }));
                                                            }
                                                            else
                                                            {
                                                                BM_BACK_UP_2_THAY_THE = rtb_BM_BACKUP2_THAY_THE.Lines.ToList();
                                                            }
                                                            sl_tk_bm_back_up_2 = 0;
                                                            sl_tk_share_fail_3 = 0;
                                                            for (int i = 0; i < BM_BACK_UP_2_THAY_THE.Count; i++)
                                                            {
                                                                if (tb_BM_BACK_UP2.InvokeRequired)
                                                                {
                                                                    tb_BM_BACK_UP2.Invoke(new Action(() =>
                                                                    {
                                                                        tb_BM_BACK_UP2.Clear();

                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    tb_BM_BACK_UP2.Clear();

                                                                }
                                                                var ID_CUOIBM = "";
                                                                // Chỉ lấy giá trị của phần tử cuối cùng
                                                                if (i == BM_BACK_UP_2_THAY_THE.Count - 1)
                                                                {
                                                                    ID_CUOIBM = BM_BACK_UP_2_THAY_THE[i].ToString();
                                                                }
                                                                if (IDBM_BACKUP_2 == ID_CUOIBM)
                                                                {
                                                                    MessageBox.Show("HẾT ID BM BMBACKUP2");
                                                                    Thread.Sleep(10000);


                                                                    goto checkID;
                                                                }
                                                                if (!BM_BACK_UP_2_THAY_THE.Contains(IDBM_BACKUP_2))
                                                                {
                                                                    IDBM_BACKUP_2 = BM_BACK_UP_2_THAY_THE[0].ToString();
                                                                    if (rtb_ID_BM_Share_BACK_UP2.InvokeRequired)
                                                                    {
                                                                        rtb_ID_BM_Share_BACK_UP2.Invoke(new Action(() =>
                                                                        {
                                                                            rtb_ID_BM_Share_BACK_UP2.Clear();
                                                                            rtb_ID_BM_Share_BACK_UP2.AppendText(IDBM_BACKUP_2);
                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        rtb_ID_BM_Share_BACK_UP2.Clear();
                                                                        rtb_ID_BM_Share_BACK_UP2.AppendText(IDBM_BACKUP_2);
                                                                    }
                                                                    goto next4;
                                                                }
                                                                if (IDBM_BACKUP_2 == BM_BACK_UP_2_THAY_THE[i])
                                                                {
                                                                    IDBM_BACKUP_2 = BM_BACK_UP_2_THAY_THE[i + 1].ToString();

                                                                    if (rtb_ID_BM_Share_BACK_UP2.InvokeRequired)
                                                                    {
                                                                        rtb_ID_BM_Share_BACK_UP2.Invoke(new Action(() =>
                                                                        {
                                                                            rtb_ID_BM_Share_BACK_UP2.Clear();
                                                                            rtb_ID_BM_Share_BACK_UP2.AppendText(IDBM_BACKUP_2);
                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        rtb_ID_BM_Share_BACK_UP2.Clear();
                                                                        rtb_ID_BM_Share_BACK_UP2.AppendText(IDBM_BACKUP_2);
                                                                    }
                                                                    goto next4;
                                                                }




                                                            }
                                                        next4:
                                                            Thread.Sleep(100);
                                                        }
                                                        if (status == "PENDING")
                                                        {

                                                            if (rtb_BMDIE.InvokeRequired)
                                                            {
                                                                rtb_BMDIE.Invoke(new Action(() =>
                                                                {
                                                                    rtb_BMDIE.AppendText(IDBM_CLOSE_3 + "|BMCLOSE3|" + sl_tk_bm_close3 + "|" + DateTime.Now + Environment.NewLine);

                                                                }));
                                                            }
                                                            else
                                                            {
                                                                rtb_BMDIE.AppendText(IDBM_CLOSE_3 + "|BMCLOSE3|" + sl_tk_bm_close3 + "|" + DateTime.Now + Environment.NewLine);
                                                            }
                                                            StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                            sw.WriteLine(IDBM_CLOSE_3 + "|BMCLOSE3|" + sl_tk_bm_close3 + "|" + DateTime.Now);
                                                            sw.Close();

                                                            if (rtb_BM_CLOSE_3_THAY_THE.InvokeRequired)
                                                            {
                                                                rtb_BM_CLOSE_3_THAY_THE.Invoke(new Action(() =>
                                                                {
                                                                    BM_CLOSE3_THAY_THE = rtb_BM_CLOSE_3_THAY_THE.Lines.ToList();
                                                                }));
                                                            }
                                                            else
                                                            {
                                                                BM_CLOSE3_THAY_THE = rtb_BM_CLOSE_3_THAY_THE.Lines.ToList();
                                                            }
                                                            sl_tk_share_fail_3 = 0;
                                                            sl_tk_bm_close3 = 0;
                                                            for (int i = 0; i < BM_CLOSE3_THAY_THE.Count; i++)
                                                            {
                                                                if (tb_BM_Close_3.InvokeRequired)
                                                                {
                                                                    tb_BM_Close_3.Invoke(new Action(() =>
                                                                    {
                                                                        tb_BM_Close_3.Clear();
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    tb_BM_Close_3.Clear();
                                                                }
                                                                var ID_CUOIBM = "";
                                                                // Chỉ lấy giá trị của phần tử cuối cùng
                                                                if (i == BM_CLOSE3_THAY_THE.Count - 1)
                                                                {
                                                                    ID_CUOIBM = BM_CLOSE3_THAY_THE[i].ToString();
                                                                }
                                                                if (IDBM_CLOSE_3 == ID_CUOIBM)
                                                                {
                                                                    MessageBox.Show("HẾT ID BM CLOSE3");
                                                                    Thread.Sleep(10000);
                                                                    goto checkID;

                                                                }
                                                                if (!BM_CLOSE3_THAY_THE.Contains(IDBM_CLOSE_3))
                                                                {
                                                                    IDBM_CLOSE_3 = BM_CLOSE3_THAY_THE[0].ToString();
                                                                    if (rtb_IDBM_CLOSE_3.InvokeRequired)
                                                                    {
                                                                        rtb_IDBM_CLOSE_3.Invoke(new Action(() =>
                                                                        {
                                                                            rtb_IDBM_CLOSE_3.Clear();
                                                                            rtb_IDBM_CLOSE_3.AppendText(IDBM_CLOSE_3);
                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        rtb_IDBM_CLOSE_3.Clear();
                                                                        rtb_IDBM_CLOSE_3.AppendText(IDBM_CLOSE_3);
                                                                    }
                                                                    goto next5;

                                                                }
                                                                if (IDBM_CLOSE_3 == BM_CLOSE3_THAY_THE[i])
                                                                {
                                                                    IDBM_CLOSE_3 = BM_CLOSE3_THAY_THE[i + 1].ToString();
                                                                    if (rtb_IDBM_CLOSE_3.InvokeRequired)
                                                                    {
                                                                        rtb_IDBM_CLOSE_3.Invoke(new Action(() =>
                                                                        {
                                                                            rtb_IDBM_CLOSE_3.Clear();
                                                                            rtb_IDBM_CLOSE_3.AppendText(IDBM_CLOSE_3);
                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        rtb_IDBM_CLOSE_3.Clear();
                                                                        rtb_IDBM_CLOSE_3.AppendText(IDBM_CLOSE_3);
                                                                    }
                                                                    goto next5;
                                                                }

                                                            }
                                                        next5:
                                                            Thread.Sleep(100);
                                                        }

                                                    }
                                                }
                                                else
                                                {

                                                    var stt = "";
                                                    try
                                                    {
                                                        stt = row.Cells["cStt"].Value.ToString();
                                                    }
                                                    catch { }

                                                    if (status == "ACTIVE")
                                                    {

                                                        sl_tk_share_fail_live3++;

                                                        if (stt == lastStt)
                                                        {

                                                            int live = (int)gioi_han_live.Value;
                                                            if (sl_tk_share_fail_live3 >= live)
                                                            {

                                                                if (rtb_BMDIE.InvokeRequired)
                                                                {
                                                                    rtb_BMDIE.Invoke(new Action(() =>
                                                                    {
                                                                        rtb_BMDIE.AppendText(IDBM_BACKUP_2 + "|BMBACKUP2|" + sl_tk_bm_back_up_2 + "|" + DateTime.Now + Environment.NewLine);

                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    rtb_BMDIE.AppendText(IDBM_BACKUP_2 + "|BMBACKUP2|" + sl_tk_bm_back_up_2 + "|" + DateTime.Now + Environment.NewLine);
                                                                }

                                                                StreamWriter sw = new StreamWriter("BMIE.txt", true);
                                                                sw.WriteLine(IDBM_BACKUP_2 + "|BMBACKUP2|" + sl_tk_bm_back_up_2 + "|" + DateTime.Now);
                                                                sw.Close();


                                                                if (rtb_BM_BACKUP2_THAY_THE.InvokeRequired)
                                                                {
                                                                    rtb_BM_BACKUP2_THAY_THE.Invoke(new Action(() =>
                                                                    {
                                                                        BM_BACK_UP_2_THAY_THE = rtb_BM_BACKUP2_THAY_THE.Lines.ToList();
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    BM_BACK_UP_2_THAY_THE = rtb_BM_BACKUP2_THAY_THE.Lines.ToList();
                                                                }
                                                                sl_tk_bm_back_up_2 = 0;

                                                                for (int i = 0; i < BM_BACK_UP_2_THAY_THE.Count; i++)
                                                                {
                                                                    if (tb_BM_BACK_UP2.InvokeRequired)
                                                                    {
                                                                        tb_BM_BACK_UP2.Invoke(new Action(() =>
                                                                        {
                                                                            tb_BM_BACK_UP2.Clear();

                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        tb_BM_BACK_UP2.Clear();

                                                                    }
                                                                    var ID_CUOIBM = "";
                                                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                                                    if (i == BM_BACK_UP_2_THAY_THE.Count - 1)
                                                                    {
                                                                        ID_CUOIBM = BM_BACK_UP_2_THAY_THE[i].ToString();
                                                                    }
                                                                    if (IDBM_BACKUP_2 == ID_CUOIBM)
                                                                    {
                                                                        MessageBox.Show("HẾT ID BM BMBACKUP2");
                                                                        Thread.Sleep(10000);


                                                                        goto checkID;
                                                                    }
                                                                    if (!BM_BACK_UP_2_THAY_THE.Contains(IDBM_BACKUP_2))
                                                                    {
                                                                        IDBM_BACKUP_2 = BM_BACK_UP_2_THAY_THE[0].ToString();
                                                                        if (rtb_ID_BM_Share_BACK_UP2.InvokeRequired)
                                                                        {
                                                                            rtb_ID_BM_Share_BACK_UP2.Invoke(new Action(() =>
                                                                            {
                                                                                rtb_ID_BM_Share_BACK_UP2.Clear();
                                                                                rtb_ID_BM_Share_BACK_UP2.AppendText(IDBM_BACKUP_2);
                                                                            }));
                                                                        }
                                                                        else
                                                                        {
                                                                            rtb_ID_BM_Share_BACK_UP2.Clear();
                                                                            rtb_ID_BM_Share_BACK_UP2.AppendText(IDBM_BACKUP_2);
                                                                        }
                                                                        goto next4;
                                                                    }
                                                                    if (IDBM_BACKUP_2 == BM_BACK_UP_2_THAY_THE[i])
                                                                    {
                                                                        IDBM_BACKUP_2 = BM_BACK_UP_2_THAY_THE[i + 1].ToString();

                                                                        if (rtb_ID_BM_Share_BACK_UP2.InvokeRequired)
                                                                        {
                                                                            rtb_ID_BM_Share_BACK_UP2.Invoke(new Action(() =>
                                                                            {
                                                                                rtb_ID_BM_Share_BACK_UP2.Clear();
                                                                                rtb_ID_BM_Share_BACK_UP2.AppendText(IDBM_BACKUP_2);
                                                                            }));
                                                                        }
                                                                        else
                                                                        {
                                                                            rtb_ID_BM_Share_BACK_UP2.Clear();
                                                                            rtb_ID_BM_Share_BACK_UP2.AppendText(IDBM_BACKUP_2);
                                                                        }
                                                                        goto next4;
                                                                    }




                                                                }
                                                            next4:
                                                                Thread.Sleep(100);
                                                            }
                                                        }
                                                    }



                                                    if (status == "PENDING")
                                                    {
                                                        sl_tk_share_fail_c3++;
                                                        if (stt == lastStt)
                                                        {
                                                            int close = (int)gioi_han_close.Value;
                                                            if (sl_tk_share_fail_c3 >= close)
                                                            {


                                                                if (rtb_BMDIE.InvokeRequired)
                                                                {
                                                                    rtb_BMDIE.Invoke(new Action(() =>
                                                                    {
                                                                        rtb_BMDIE.AppendText(IDBM_CLOSE_3 + "|BMCLOSE3|" + sl_tk_bm_close3 + "|" + DateTime.Now + Environment.NewLine);

                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    rtb_BMDIE.AppendText(IDBM_CLOSE_3 + "|BMCLOSE3|" + sl_tk_bm_close3 + "|" + DateTime.Now + Environment.NewLine);
                                                                }
                                                                StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                                sw.WriteLine(IDBM_CLOSE_3 + "|BMCLOSE3|" + sl_tk_bm_close3 + "|" + DateTime.Now);
                                                                sw.Close();

                                                                if (rtb_BM_CLOSE_3_THAY_THE.InvokeRequired)
                                                                {
                                                                    rtb_BM_CLOSE_3_THAY_THE.Invoke(new Action(() =>
                                                                    {
                                                                        BM_CLOSE3_THAY_THE = rtb_BM_CLOSE_3_THAY_THE.Lines.ToList();
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    BM_CLOSE3_THAY_THE = rtb_BM_CLOSE_3_THAY_THE.Lines.ToList();
                                                                }
                                                                sl_tk_share_fail_3 = 0;

                                                                for (int i = 0; i < BM_CLOSE3_THAY_THE.Count; i++)
                                                                {
                                                                    if (tb_BM_Close_3.InvokeRequired)
                                                                    {
                                                                        tb_BM_Close_3.Invoke(new Action(() =>
                                                                        {
                                                                            tb_BM_Close_3.Clear();
                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        tb_BM_Close_3.Clear();
                                                                    }
                                                                    var ID_CUOIBM = "";
                                                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                                                    if (i == BM_CLOSE3_THAY_THE.Count - 1)
                                                                    {
                                                                        ID_CUOIBM = BM_CLOSE3_THAY_THE[i].ToString();
                                                                    }
                                                                    if (IDBM_CLOSE_3 == ID_CUOIBM)
                                                                    {
                                                                        MessageBox.Show("HẾT ID BM CLOSE3");
                                                                        Thread.Sleep(10000);
                                                                        goto checkID;

                                                                    }
                                                                    if (!BM_CLOSE3_THAY_THE.Contains(IDBM_CLOSE_3))
                                                                    {
                                                                        IDBM_CLOSE_3 = BM_CLOSE3_THAY_THE[0].ToString();
                                                                        if (rtb_IDBM_CLOSE_3.InvokeRequired)
                                                                        {
                                                                            rtb_IDBM_CLOSE_3.Invoke(new Action(() =>
                                                                            {
                                                                                rtb_IDBM_CLOSE_3.Clear();
                                                                                rtb_IDBM_CLOSE_3.AppendText(IDBM_CLOSE_3);
                                                                            }));
                                                                        }
                                                                        else
                                                                        {
                                                                            rtb_IDBM_CLOSE_3.Clear();
                                                                            rtb_IDBM_CLOSE_3.AppendText(IDBM_CLOSE_3);
                                                                        }
                                                                        goto next5;

                                                                    }
                                                                    if (IDBM_CLOSE_3 == BM_CLOSE3_THAY_THE[i])
                                                                    {
                                                                        IDBM_CLOSE_3 = BM_CLOSE3_THAY_THE[i + 1].ToString();
                                                                        if (rtb_IDBM_CLOSE_3.InvokeRequired)
                                                                        {
                                                                            rtb_IDBM_CLOSE_3.Invoke(new Action(() =>
                                                                            {
                                                                                rtb_IDBM_CLOSE_3.Clear();
                                                                                rtb_IDBM_CLOSE_3.AppendText(IDBM_CLOSE_3);
                                                                            }));
                                                                        }
                                                                        else
                                                                        {
                                                                            rtb_IDBM_CLOSE_3.Clear();
                                                                            rtb_IDBM_CLOSE_3.AppendText(IDBM_CLOSE_3);
                                                                        }
                                                                        goto next5;
                                                                    }

                                                                }
                                                            next5:
                                                                Thread.Sleep(100);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            // share vao bm THỨ 4
                                            assetID = Regex.Match(responesStroverview, "assetID\":\"(.*?)\"").Groups[1].Value.ToString();
                                            httpRequest.AddHeader("authority", "business.facebook.com");
                                            httpRequest.AddHeader("accept", "*");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("priority", "u=1, i");
                                            if (string.IsNullOrEmpty(assetID))
                                            {
                                                httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/ad_accounts?business_id={IDBM_C_4}");
                                            }
                                            else
                                            {
                                                httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/ad_accounts?business_id={IDBM_C_4}&nav_ref=bm_settings_redirect_migration&bm_redirect_migration=true&selected_asset_id={assetID}&selected_asset_type=ad-account");
                                            }
                                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.140\", \"Chromium\";v=\"131.0.6778.140\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                            httpRequest.AddHeader("x-asbd-id", "129477");
                                            httpRequest.AddHeader("x-bh-flowsessionid", "upl_wizard_1734668114085_491553ea-0cc7-4567-83a0-cf44d8da996d");
                                            httpRequest.AddHeader("x-fb-friendly-name", "BizKitSettingsRequestAdAccountAccessMutation");
                                            httpRequest.AddHeader("x-fb-upl-sessionid", "upl_1734668114085_273bf307-35aa-4d07-8c4c-8138ea1829e9");
                                            fb_dtsg = Regex.Match(responesStroverview, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"}").Groups[1].Value;
                                            lsd = Regex.Match(responesStroverview, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                                            jazoest = Regex.Match(responesStroverview, "&jazoest=(.*?)\",").Groups[1].Value;
                                            url1 = "";
                                            payload1 = "";
                                            if (string.IsNullOrEmpty(assetID))
                                            {
                                                url1 = "https://business.facebook.com/api/graphql/?_callFlowletID=9422&_triggerFlowletID=9417";
                                                payload1 = $"av={uid}&__usid=6-Tsow8xd59fixy:Psowd5g1gmnk7z:0-Asowd5sn01u2v-RV=6:F=&__aaid=0&__bid={IDBM_C_4}&__user={uid}&__a=1&__req=13&__hs=20079.HYP:bizweb_comet_pkg.2.1.0.0.0&dpr=1&__ccg=GOOD&__rev=1019055684&__s=q5syll:s1c085:h2jnyd&__hsi=7451226006509486975&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgE7R04zwIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48comwkE-UbE7i4UaEW2G261fwwwJK1qxa1ozEjU4Wdwoo4S5ayocE3BwMzUbVEHyU8U3ywbS1LwTwNAK2q0z8co9U4S7E6C13www4kxW1owmUaEeE5K22&__csr=g44hsh3a5lfsnklHb5h2OQzdGyfcyiv9jkzdJ5IHSO8IigybnOuz94l6ncBdnZfqmGZaqhpuAahQKWmJaFHkzJurYGnlEGuh9DGiWHRBRh_FkOmQ9miKHA-QF5GmGGZqVe9yanh9eidu9h9VbzKLqKrJrGCLxaP39p8Kt5KGyFqDppBnBqxuWBpAifyZajGBJrCxei5v-muECiV99--exauuvBCBAAJ6yWAiAGu4oGGGqbAghjyFV_K443m7HxmmezEhyUnwl8y6WVGG2m4kayoux69XgOex7AG2C8wgppVAufU4TBwRDwIxS1QwDxu1awBAwg83tzXXmQ3K1bg0bmE1eEiDAy8O581oy8nkh518laBf2svNv7w5mw7dw5szyG4A0QEk809oG0tGA0Vo2-weybw6mwpo1co4e6m1qw58a0wEW5Eqw0tWE04JGv805ho1Op206jg2OBu17Cw1gu07RozCVmUdo710TClwJw1bu0fIabg-03Ju0q62q0c0a04BEow4PDw0yNg1jQ0f4S32vwhK0WES0uiq0qq&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019055684&__spin_b=trunk&__spin_t=1734873747&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsRequestAdAccountAccessMutation&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{uid}\",\"ad_account_id\":\"{IDACCOUNT}\",\"permitted_roles\":[\"864195700451909\",\"151821535410699\",\"610690166001223\",\"186595505260379\"],\"permitted_tasks\":[],\"requesting_business_id\":\"{IDBM_C_4}\"}}}}&server_timestamps=true&doc_id=7293074874139866";
                                            }
                                            else
                                            {
                                                url1 = "https://business.facebook.com/api/graphql/?_callFlowletID=7586&_triggerFlowletID=7581";
                                                payload1 = $"av={uid}&__usid=6-Tsorxnw1cqywsa:Psoryh6saf6vd:0-Asorxmrr70q24-RV=6:F=&__aaid=0&__bid={IDBM_C_4}&__user={uid}&__a=1&__req=15&__hs=20077.HYP:bizweb_comet_pkg.2.1.0.0.0&dpr=1&__ccg=EXCELLENT&__rev=1019018670&__s=7zkooo:lgz5dd:nka6jh&__hsi=7450342785382626345&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgE7R04zwIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48comwkE-UbE7i4UaEW2G261fwwwJK1qxa1ozEjU4Wdwoo4S5ayocE3BwMzUbVEHyU8U3ywbS1LwTwNAK2q0z8co9U4S7E6C13www4kxW1owmUaEeE5K22&__csr=g4X8DayPq4kwwBYO4n5nmRdeReB9kOIh4niSxdObQDLlNlbLQOv8hf9CQylnLeWimQnHp4HVrCtXVliWjWmRhZk-SpcAV9tAWXmCty5-p5ioLDivGhCAp9m_HgyH-aqiA-hHyoPCyJ5BKlaKhfjAAF6LQjiSUPLy65ZoxHgN9ppAEJ4FpoyF9eQut17UOnDiUyKKmWAKKdCx12k4ay9oGczKnigkDK9yHDy-l4GhpHyeEoxq7paXBVF8Rwgoy68ycxC5oaO7U9E-UKUWmayQGxSuaQfxmUkxa6XxaE-mGG26Utxl1ecw8bw_K5Umxu8wNDyE5O3i4U5611xyq0qO0LUug0Glddehd4w1v-8g0zga2oxgjG3i6Q1j1k5hkC0fYw2u963S1nGdw4-Hwk87eaw2LU0H2E4W0NU4S0Qro2Fwfy0hu4UkQ0AKmi011Jw0s7UGgw0oVzUHa0Ao0jMIw1xoy6p5iw9aO0iogBg0jIw2Y2yQ022yC1ogW02c602wm09ag5G05hyw5MwlU1tu02bKu0iJ0sk0czwp6dBo32wo80RS0ht0&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019018670&__spin_b=trunk&__spin_t=1734668106&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsRequestAdAccountAccessMutation&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{uid}\",\"ad_account_id\":\"{IDACCOUNT}\",\"permitted_roles\":[\"864195700451909\",\"151821535410699\",\"610690166001223\",\"186595505260379\"],\"permitted_tasks\":[],\"requesting_business_id\":\"{IDBM_C_4}\"}}}}&server_timestamps=true&doc_id=7293074874139866";
                                            }
                                            responsePost = httpRequest.Post(url1, payload1, "application/x-www-form-urlencoded");

                                            var responseStr5 = responsePost.ToString();

                                            if (responseStr5.Contains("CRITICAL"))
                                            {
                                                row.Cells["cStatus"].Value = "Share FAIL: " + IDACCOUNT + " BM: " + IDBM_C_4;
                                                Thread.Sleep(TimeSpan.FromSeconds(delay_sh));

                                                if (lastRowIndex >= 0)  // Kiểm tra xem có hàng nào trong DataGridView không
                                                {
                                                    // Lấy giá trị từ cột STT (giả sử cột STT có chỉ số 0)
                                                    var lastStt = dgv1.Rows[lastRowIndex].Cells["cStt"].Value.ToString();

                                                    if (lastStt == "1")
                                                    {
                                                        sl_tk_share_fail_4++;
                                                        int live = (int)gioi_han_1.Value;
                                                        if (sl_tk_share_fail_4 >= live)
                                                        {
                                                            if (status == "ACTIVE")
                                                            {
                                                                if (rtb_BMDIE.InvokeRequired)
                                                                {
                                                                    rtb_BMDIE.Invoke(new Action(() =>
                                                                    {
                                                                        rtb_BMDIE.AppendText(IDBM_BACKUP_3 + "|BMBACKUP3|" + sl_tk_bm_back_up_3 + "|" + DateTime.Now + Environment.NewLine);

                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    rtb_BMDIE.AppendText(IDBM_BACKUP_3 + "|BMBACKUP3|" + sl_tk_bm_back_up_3 + "|" + DateTime.Now + Environment.NewLine);
                                                                }

                                                                StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                                sw.WriteLine(IDBM_BACKUP_3 + "|BMBACKUP3|" + sl_tk_bm_back_up_3 + "|" + DateTime.Now);
                                                                sw.Close();


                                                                if (rtb_BM_BACKUP3_THAY_THE.InvokeRequired)
                                                                {
                                                                    rtb_BM_BACKUP3_THAY_THE.Invoke(new Action(() =>
                                                                    {
                                                                        BM_BACK_UP_3_THAY_THE = rtb_BM_BACKUP3_THAY_THE.Lines.ToList();
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    BM_BACK_UP_3_THAY_THE = rtb_BM_BACKUP3_THAY_THE.Lines.ToList();
                                                                }
                                                                sl_tk_bm_back_up_3 = 0;
                                                                sl_tk_share_fail_4 = 0;
                                                                for (int i = 0; i < BM_BACK_UP_3_THAY_THE.Count; i++)
                                                                {
                                                                    if (tb_BM_BACK_UP3.InvokeRequired)
                                                                    {
                                                                        tb_BM_BACK_UP3.Invoke(new Action(() =>
                                                                        {
                                                                            tb_BM_BACK_UP3.Clear();

                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        tb_BM_BACK_UP3.Clear();

                                                                    }
                                                                    var ID_CUOIBM = "";
                                                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                                                    if (i == BM_BACK_UP_3_THAY_THE.Count - 1)
                                                                    {
                                                                        ID_CUOIBM = BM_BACK_UP_3_THAY_THE[i].ToString();
                                                                    }
                                                                    if (IDBM_BACKUP_3 == ID_CUOIBM)
                                                                    {
                                                                        MessageBox.Show("HẾT ID BM BMBACKUP3");
                                                                        Thread.Sleep(10000);


                                                                        goto checkID;
                                                                    }
                                                                    if (!BM_BACK_UP_3_THAY_THE.Contains(IDBM_BACKUP_3))
                                                                    {

                                                                        IDBM_BACKUP_3 = BM_BACK_UP_3_THAY_THE[0].ToString();
                                                                        if (rtb_ID_BM_Share_BACK_UP3.InvokeRequired)
                                                                        {
                                                                            rtb_ID_BM_Share_BACK_UP3.Invoke(new Action(() =>
                                                                            {
                                                                                rtb_ID_BM_Share_BACK_UP3.Clear();
                                                                                rtb_ID_BM_Share_BACK_UP3.AppendText(IDBM_BACKUP_3);
                                                                            }));
                                                                        }
                                                                        else
                                                                        {
                                                                            rtb_ID_BM_Share_BACK_UP3.Clear();
                                                                            rtb_ID_BM_Share_BACK_UP3.AppendText(IDBM_BACKUP_3);
                                                                        }
                                                                        goto next6;
                                                                    }
                                                                    if (IDBM_BACKUP_3 == BM_BACK_UP_3_THAY_THE[i])
                                                                    {
                                                                        IDBM_BACKUP_3 = BM_BACK_UP_3_THAY_THE[i + 1].ToString();

                                                                        if (rtb_ID_BM_Share_BACK_UP3.InvokeRequired)
                                                                        {
                                                                            rtb_ID_BM_Share_BACK_UP3.Invoke(new Action(() =>
                                                                            {
                                                                                rtb_ID_BM_Share_BACK_UP3.Clear();
                                                                                rtb_ID_BM_Share_BACK_UP3.AppendText(IDBM_BACKUP_3);
                                                                            }));
                                                                        }
                                                                        else
                                                                        {
                                                                            rtb_ID_BM_Share_BACK_UP3.Clear();
                                                                            rtb_ID_BM_Share_BACK_UP3.AppendText(IDBM_BACKUP_3);
                                                                        }
                                                                        goto next6;
                                                                    }


                                                                }
                                                            next6:
                                                                Thread.Sleep(100);
                                                            }
                                                            if (status == "PENDING")
                                                            {
                                                                if (rtb_BMDIE.InvokeRequired)
                                                                {
                                                                    rtb_BMDIE.Invoke(new Action(() =>
                                                                    {
                                                                        rtb_BMDIE.AppendText(IDBM_CLOSE_4 + "|BMCLOSE4|" + sl_tk_bm_close4 + "|" + DateTime.Now + Environment.NewLine);

                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    rtb_BMDIE.AppendText(IDBM_CLOSE_4 + "|BMCLOSE4|" + sl_tk_bm_close4 + "|" + DateTime.Now + Environment.NewLine);
                                                                }
                                                                StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                                sw.WriteLine(IDBM_CLOSE_4 + "|BMCLOSE4|" + sl_tk_bm_close4 + "|" + DateTime.Now);
                                                                sw.Close();

                                                                if (rtb_BM_CLOSE_4_THAY_THE.InvokeRequired)
                                                                {
                                                                    rtb_BM_CLOSE_4_THAY_THE.Invoke(new Action(() =>
                                                                    {
                                                                        BM_CLOSE4_THAY_THE = rtb_BM_CLOSE_4_THAY_THE.Lines.ToList();
                                                                    }));
                                                                }
                                                                else
                                                                {
                                                                    BM_CLOSE4_THAY_THE = rtb_BM_CLOSE_4_THAY_THE.Lines.ToList();
                                                                }
                                                                sl_tk_share_fail_4 = 0;
                                                                sl_tk_bm_close4 = 0;
                                                                for (int i = 0; i < BM_CLOSE4_THAY_THE.Count; i++)
                                                                {
                                                                    if (tb_BM_Close_4.InvokeRequired)
                                                                    {
                                                                        tb_BM_Close_4.Invoke(new Action(() =>
                                                                        {
                                                                            tb_BM_Close_4.Clear();
                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        tb_BM_Close_4.Clear();
                                                                    }
                                                                    var ID_CUOIBM = "";
                                                                    // Chỉ lấy giá trị của phần tử cuối cùng
                                                                    if (i == BM_CLOSE4_THAY_THE.Count - 1)
                                                                    {
                                                                        ID_CUOIBM = BM_CLOSE4_THAY_THE[i].ToString();
                                                                    }
                                                                    if (IDBM_CLOSE_4 == ID_CUOIBM)
                                                                    {
                                                                        MessageBox.Show("HẾT ID BM CLOSE4");
                                                                        Thread.Sleep(10000);
                                                                        goto checkID;

                                                                    }
                                                                    if (!BM_CLOSE4_THAY_THE.Contains(IDBM_CLOSE_4))
                                                                    {
                                                                        IDBM_CLOSE_4 = BM_CLOSE4_THAY_THE[0].ToString();
                                                                        if (rtb_IDBM_CLOSE_4.InvokeRequired)
                                                                        {
                                                                            rtb_IDBM_CLOSE_4.Invoke(new Action(() =>
                                                                            {
                                                                                rtb_IDBM_CLOSE_4.Clear();
                                                                                rtb_IDBM_CLOSE_4.AppendText(IDBM_CLOSE_4);
                                                                            }));
                                                                        }
                                                                        else
                                                                        {
                                                                            rtb_IDBM_CLOSE_4.Clear();
                                                                            rtb_IDBM_CLOSE_4.AppendText(IDBM_CLOSE_4);
                                                                        }
                                                                        goto next7;
                                                                    }
                                                                    if (IDBM_CLOSE_4 == BM_CLOSE4_THAY_THE[i])
                                                                    {
                                                                        IDBM_CLOSE_4 = BM_CLOSE4_THAY_THE[i + 1].ToString();
                                                                        if (rtb_IDBM_CLOSE_4.InvokeRequired)
                                                                        {
                                                                            rtb_IDBM_CLOSE_4.Invoke(new Action(() =>
                                                                            {
                                                                                rtb_IDBM_CLOSE_4.Clear();
                                                                                rtb_IDBM_CLOSE_4.AppendText(IDBM_CLOSE_4);
                                                                            }));
                                                                        }
                                                                        else
                                                                        {
                                                                            rtb_IDBM_CLOSE_4.Clear();
                                                                            rtb_IDBM_CLOSE_4.AppendText(IDBM_CLOSE_4);
                                                                        }
                                                                        goto next7;
                                                                    }


                                                                }


                                                            }

                                                        next7:
                                                            Thread.Sleep(100);

                                                        }
                                                    }
                                                    else
                                                    {

                                                        var stt = "";
                                                        try
                                                        {
                                                            stt = row.Cells["cStt"].Value.ToString();
                                                        }
                                                        catch { }
                                                        if (status == "ACTIVE")
                                                        {

                                                            sl_tk_share_fail_live4++;

                                                            if (stt == lastStt)
                                                            {
                                                                int live = (int)gioi_han_live.Value;
                                                                if (sl_tk_share_fail_live4 >= live)
                                                                {


                                                                    if (rtb_BMDIE.InvokeRequired)
                                                                    {
                                                                        rtb_BMDIE.Invoke(new Action(() =>
                                                                        {
                                                                            rtb_BMDIE.AppendText(IDBM_BACKUP_3 + "|BMBACKUP3|" + sl_tk_bm_back_up_3 + "|" + DateTime.Now + Environment.NewLine);

                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        rtb_BMDIE.AppendText(IDBM_BACKUP_3 + "|BMBACKUP3|" + sl_tk_bm_back_up_3 + "|" + DateTime.Now + Environment.NewLine);
                                                                    }

                                                                    StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                                    sw.WriteLine(IDBM_BACKUP_3 + "|BMBACKUP3|" + sl_tk_bm_back_up_3 + "|" + DateTime.Now);
                                                                    sw.Close();


                                                                    if (rtb_BM_BACKUP3_THAY_THE.InvokeRequired)
                                                                    {
                                                                        rtb_BM_BACKUP3_THAY_THE.Invoke(new Action(() =>
                                                                        {
                                                                            BM_BACK_UP_3_THAY_THE = rtb_BM_BACKUP3_THAY_THE.Lines.ToList();
                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        BM_BACK_UP_3_THAY_THE = rtb_BM_BACKUP3_THAY_THE.Lines.ToList();
                                                                    }
                                                                    sl_tk_bm_back_up_3 = 0;
                                                                    sl_tk_share_fail_4 = 0;
                                                                    for (int i = 0; i < BM_BACK_UP_3_THAY_THE.Count; i++)
                                                                    {
                                                                        if (tb_BM_BACK_UP3.InvokeRequired)
                                                                        {
                                                                            tb_BM_BACK_UP3.Invoke(new Action(() =>
                                                                            {
                                                                                tb_BM_BACK_UP3.Clear();

                                                                            }));
                                                                        }
                                                                        else
                                                                        {
                                                                            tb_BM_BACK_UP3.Clear();

                                                                        }
                                                                        var ID_CUOIBM = "";
                                                                        // Chỉ lấy giá trị của phần tử cuối cùng
                                                                        if (i == BM_BACK_UP_3_THAY_THE.Count - 1)
                                                                        {
                                                                            ID_CUOIBM = BM_BACK_UP_3_THAY_THE[i].ToString();
                                                                        }
                                                                        if (IDBM_BACKUP_3 == ID_CUOIBM)
                                                                        {
                                                                            MessageBox.Show("HẾT ID BM BMBACKUP3");
                                                                            Thread.Sleep(10000);


                                                                            goto checkID;
                                                                        }
                                                                        if (!BM_BACK_UP_3_THAY_THE.Contains(IDBM_BACKUP_3))
                                                                        {

                                                                            IDBM_BACKUP_3 = BM_BACK_UP_3_THAY_THE[0].ToString();
                                                                            if (rtb_ID_BM_Share_BACK_UP3.InvokeRequired)
                                                                            {
                                                                                rtb_ID_BM_Share_BACK_UP3.Invoke(new Action(() =>
                                                                                {
                                                                                    rtb_ID_BM_Share_BACK_UP3.Clear();
                                                                                    rtb_ID_BM_Share_BACK_UP3.AppendText(IDBM_BACKUP_3);
                                                                                }));
                                                                            }
                                                                            else
                                                                            {
                                                                                rtb_ID_BM_Share_BACK_UP3.Clear();
                                                                                rtb_ID_BM_Share_BACK_UP3.AppendText(IDBM_BACKUP_3);
                                                                            }
                                                                            goto next6;
                                                                        }

                                                                        if (IDBM_BACKUP_3 == BM_BACK_UP_3_THAY_THE[i])
                                                                        {
                                                                            IDBM_BACKUP_3 = BM_BACK_UP_3_THAY_THE[i + 1].ToString();

                                                                            if (rtb_ID_BM_Share_BACK_UP3.InvokeRequired)
                                                                            {
                                                                                rtb_ID_BM_Share_BACK_UP3.Invoke(new Action(() =>
                                                                                {
                                                                                    rtb_ID_BM_Share_BACK_UP3.Clear();
                                                                                    rtb_ID_BM_Share_BACK_UP3.AppendText(IDBM_BACKUP_3);
                                                                                }));
                                                                            }
                                                                            else
                                                                            {
                                                                                rtb_ID_BM_Share_BACK_UP3.Clear();
                                                                                rtb_ID_BM_Share_BACK_UP3.AppendText(IDBM_BACKUP_3);
                                                                            }
                                                                            goto next6;
                                                                        }

                                                                    }
                                                                next6:
                                                                    Thread.Sleep(100);

                                                                }
                                                            }
                                                        }

                                                        if (status == "PENDING")
                                                        {
                                                            sl_tk_share_fail_c4++;

                                                            if (stt == lastStt)
                                                            {
                                                                int close = (int)gioi_han_close.Value;
                                                                if (sl_tk_share_fail_c4 >= close)
                                                                {


                                                                    if (rtb_BMDIE.InvokeRequired)
                                                                    {
                                                                        rtb_BMDIE.Invoke(new Action(() =>
                                                                        {
                                                                            rtb_BMDIE.AppendText(IDBM_CLOSE_4 + "|BMCLOSE4|" + sl_tk_bm_close4 + "|" + DateTime.Now + Environment.NewLine);

                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        rtb_BMDIE.AppendText(IDBM_CLOSE_4 + "|BMCLOSE4|" + sl_tk_bm_close4 + "|" + DateTime.Now + Environment.NewLine);
                                                                    }
                                                                    StreamWriter sw = new StreamWriter("BMDIE.txt", true);
                                                                    sw.WriteLine(IDBM_CLOSE_4 + "|BMCLOSE4|" + sl_tk_bm_close4 + "|" + DateTime.Now);
                                                                    sw.Close();

                                                                    if (rtb_BM_CLOSE_4_THAY_THE.InvokeRequired)
                                                                    {
                                                                        rtb_BM_CLOSE_4_THAY_THE.Invoke(new Action(() =>
                                                                        {
                                                                            BM_CLOSE4_THAY_THE = rtb_BM_CLOSE_4_THAY_THE.Lines.ToList();
                                                                        }));
                                                                    }
                                                                    else
                                                                    {
                                                                        BM_CLOSE4_THAY_THE = rtb_BM_CLOSE_4_THAY_THE.Lines.ToList();
                                                                    }
                                                                    sl_tk_share_fail_4 = 0;
                                                                    sl_tk_bm_close4 = 0;
                                                                    for (int i = 0; i < BM_CLOSE4_THAY_THE.Count; i++)
                                                                    {
                                                                        if (tb_BM_Close_4.InvokeRequired)
                                                                        {
                                                                            tb_BM_Close_4.Invoke(new Action(() =>
                                                                            {
                                                                                tb_BM_Close_4.Clear();
                                                                            }));
                                                                        }
                                                                        else
                                                                        {
                                                                            tb_BM_Close_4.Clear();
                                                                        }
                                                                        var ID_CUOIBM = "";
                                                                        // Chỉ lấy giá trị của phần tử cuối cùng
                                                                        if (i == BM_CLOSE4_THAY_THE.Count - 1)
                                                                        {
                                                                            ID_CUOIBM = BM_CLOSE4_THAY_THE[i].ToString();
                                                                        }
                                                                        if (IDBM_CLOSE_4 == ID_CUOIBM)
                                                                        {
                                                                            MessageBox.Show("HẾT ID BM CLOSE4");
                                                                            Thread.Sleep(10000);
                                                                            goto checkID;

                                                                        }
                                                                        if (!BM_CLOSE4_THAY_THE.Contains(IDBM_CLOSE_4))
                                                                        {
                                                                            IDBM_CLOSE_4 = BM_CLOSE4_THAY_THE[0].ToString();
                                                                            if (rtb_IDBM_CLOSE_4.InvokeRequired)
                                                                            {
                                                                                rtb_IDBM_CLOSE_4.Invoke(new Action(() =>
                                                                                {
                                                                                    rtb_IDBM_CLOSE_4.Clear();
                                                                                    rtb_IDBM_CLOSE_4.AppendText(IDBM_CLOSE_4);
                                                                                }));
                                                                            }
                                                                            else
                                                                            {
                                                                                rtb_IDBM_CLOSE_4.Clear();
                                                                                rtb_IDBM_CLOSE_4.AppendText(IDBM_CLOSE_4);
                                                                            }
                                                                            goto next7;
                                                                        }
                                                                        if (IDBM_CLOSE_4 == BM_CLOSE4_THAY_THE[i])
                                                                        {
                                                                            IDBM_CLOSE_4 = BM_CLOSE4_THAY_THE[i + 1].ToString();
                                                                            if (rtb_IDBM_CLOSE_4.InvokeRequired)
                                                                            {
                                                                                rtb_IDBM_CLOSE_4.Invoke(new Action(() =>
                                                                                {
                                                                                    rtb_IDBM_CLOSE_4.Clear();
                                                                                    rtb_IDBM_CLOSE_4.AppendText(IDBM_CLOSE_4);
                                                                                }));
                                                                            }
                                                                            else
                                                                            {
                                                                                rtb_IDBM_CLOSE_4.Clear();
                                                                                rtb_IDBM_CLOSE_4.AppendText(IDBM_CLOSE_4);
                                                                            }
                                                                            goto next7;
                                                                        }


                                                                    }

                                                                next7:
                                                                    Thread.Sleep(100);
                                                                }

                                                            }
                                                        }
                                                    }
                                                }

                                                if (rtbAC_FAIL.InvokeRequired)
                                                {
                                                    // Nếu đang ở ngoài luồng chính, sử dụng Invoke để chạy mã trên luồng chính
                                                    rtbAC_FAIL.Invoke(new Action(() =>
                                                    {
                                                        if (status == "ACTIVE")
                                                        {
                                                            rtbAC_FAIL.AppendText(IDACCOUNT + "|act" + Environment.NewLine);  // Thêm văn bản vào RichTextBox
                                                        }
                                                        if (status == "PENDING")
                                                        {
                                                            rtbAC_FAIL.AppendText(IDACCOUNT + "|pen" + Environment.NewLine);  // Thêm văn bản vào RichTextBox
                                                        }


                                                    }));
                                                }

                                            }
                                            if (responseStr5.Contains("\"access_status\":\"CONFIRMED\""))
                                            {

                                                row.Cells["cStatus"].Value = "Share Done: " + IDACCOUNT + " BM: " + IDBM_C_4;

                                                if (rtbdone.InvokeRequired)
                                                {
                                                    // Nếu đang ở ngoài luồng chính, sử dụng Invoke để chạy mã trên luồng chính
                                                    rtbdone.Invoke(new Action(() =>
                                                    {
                                                        if (status == "ACTIVE")
                                                        {
                                                            rtbdone.AppendText(IDACCOUNT + "|act" + Environment.NewLine);  // Thêm văn bản vào RichTextBox
                                                        }
                                                        if (status == "PENDING")
                                                        {
                                                            rtbdone.AppendText(IDACCOUNT + "|pen" + Environment.NewLine);  // Thêm văn bản vào RichTextBox
                                                        }
                                                    }));
                                                }
                                                if (status == "ACTIVE")
                                                {
                                                    if (IDBM_C_4 == IDBM_BACKUP_3)
                                                    {
                                                        sl_tk_bm_back_up_3++;
                                                        sl_tk_share_done++;
                                                        var sl_share_save_BM_BACKUP3 = IDBM_C_3 + "|SL:" + sl_tk_bm_back_up_3 + "|" + DateTime.Now;
                                                        StreamWriter sw_0 = new StreamWriter("SLBMBACKUP3NHAN.txt", true);
                                                        sw_0.WriteLine(sl_share_save_BM_BACKUP3);
                                                        sw_0.Close();
                                                        if (tb_BM_BACK_UP3.InvokeRequired)
                                                        {
                                                            tb_BM_BACK_UP3.Invoke(new Action(() =>
                                                            {
                                                                tb_BM_BACK_UP3.Text = sl_tk_bm_back_up_3.ToString();

                                                            }));
                                                        }
                                                        else
                                                        {
                                                            tb_BM_BACK_UP3.Text = sl_tk_bm_back_up_3.ToString();
                                                        }

                                                        if (tx_So_Luong_Share_vao_bm.InvokeRequired)
                                                        {
                                                            tx_So_Luong_Share_vao_bm.Invoke(new Action(() =>
                                                            {
                                                                tx_So_Luong_Share_vao_bm.Text = sl_tk_share_done.ToString();

                                                            }));
                                                        }
                                                        else
                                                        {
                                                            tx_So_Luong_Share_vao_bm.Text = sl_tk_share_done.ToString();
                                                        }

                                                    }
                                                }

                                                if (status == "PENDING")
                                                {
                                                    if (IDBM_C_4 == IDBM_CLOSE_4)
                                                    {
                                                        sl_tk_bm_close4++;
                                                        var sl_share_save_BM_CLOSE4 = IDBM_C_4 + "|SL:" + sl_tk_bm_close4 + "|" + DateTime.Now;
                                                        StreamWriter sw_0 = new StreamWriter("SLBMCLOSE4NHAN.txt", true);
                                                        sw_0.WriteLine(sl_share_save_BM_CLOSE4);
                                                        sw_0.Close();

                                                        if (tb_BM_Close_4.InvokeRequired)
                                                        {
                                                            tb_BM_Close_4.Invoke(new Action(() =>
                                                            {
                                                                tb_BM_Close_4.Text = sl_tk_bm_close4.ToString();

                                                            }));
                                                        }
                                                        else
                                                        {
                                                            tb_BM_Close_4.Text = sl_tk_bm_close4.ToString();
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                        if (responseStr4.Contains("\"access_status\":\"CONFIRMED\""))
                                        {

                                            row.Cells["cStatus"].Value = "Share Done: " + IDACCOUNT + " BM: " + IDBM_C_3;

                                            if (rtbdone.InvokeRequired)
                                            {
                                                // Nếu đang ở ngoài luồng chính, sử dụng Invoke để chạy mã trên luồng chính
                                                rtbdone.Invoke(new Action(() =>
                                                {
                                                    if (status == "ACTIVE")
                                                    {
                                                        rtbdone.AppendText(IDACCOUNT + "|act" + Environment.NewLine);  // Thêm văn bản vào RichTextBox
                                                    }
                                                    if (status == "PENDING")
                                                    {
                                                        rtbdone.AppendText(IDACCOUNT + "|pen" + Environment.NewLine);  // Thêm văn bản vào RichTextBox
                                                    }
                                                }));
                                            }
                                            if (status == "ACTIVE")
                                            {
                                                if (IDBM_C_3 == IDBM_BACKUP_2)
                                                {
                                                    sl_tk_bm_back_up_2++;
                                                    sl_tk_share_done++;
                                                    var sl_share_save_BM_BACKUP2 = IDBM_C_3 + "|SL:" + sl_tk_bm_back_up_2 + "|" + DateTime.Now;
                                                    StreamWriter sw_0 = new StreamWriter("SLBMBACKUP2NHAN.txt", true);
                                                    sw_0.WriteLine(sl_share_save_BM_BACKUP2);
                                                    sw_0.Close();
                                                    if (tb_BM_BACK_UP2.InvokeRequired)
                                                    {
                                                        tb_BM_BACK_UP2.Invoke(new Action(() =>
                                                        {
                                                            tb_BM_BACK_UP2.Text = sl_tk_bm_back_up_2.ToString();

                                                        }));
                                                    }
                                                    else
                                                    {
                                                        tb_BM_BACK_UP2.Text = sl_tk_bm_back_up_2.ToString();
                                                    }

                                                    if (tx_So_Luong_Share_vao_bm.InvokeRequired)
                                                    {
                                                        tx_So_Luong_Share_vao_bm.Invoke(new Action(() =>
                                                        {
                                                            tx_So_Luong_Share_vao_bm.Text = sl_tk_share_done.ToString();

                                                        }));
                                                    }
                                                    else
                                                    {
                                                        tx_So_Luong_Share_vao_bm.Text = sl_tk_share_done.ToString();
                                                    }

                                                }
                                            }

                                            if (status == "PENDING")
                                            {
                                                if (IDBM_C_3 == IDBM_CLOSE_3)
                                                {
                                                    sl_tk_bm_close3++;
                                                    var sl_share_save_BM_CLOSE3 = IDBM_C_3 + "|SL:" + sl_tk_bm_close3 + "|" + DateTime.Now;
                                                    StreamWriter sw_0 = new StreamWriter("SLBMCLOSE3NHAN.txt", true);
                                                    sw_0.WriteLine(sl_share_save_BM_CLOSE3);
                                                    sw_0.Close();

                                                    if (tb_BM_Close_3.InvokeRequired)
                                                    {
                                                        tb_BM_Close_3.Invoke(new Action(() =>
                                                        {
                                                            tb_BM_Close_3.Text = sl_tk_bm_close3.ToString();

                                                        }));
                                                    }
                                                    else
                                                    {
                                                        tb_BM_Close_3.Text = sl_tk_bm_close3.ToString();
                                                    }
                                                }
                                            }
                                        }

                                    }
                                    if (responseStr3.Contains("\"access_status\":\"CONFIRMED\""))
                                    {

                                        row.Cells["cStatus"].Value = "Share Done: " + IDACCOUNT + " BM: " + IDBM_C_2;

                                        if (rtbdone.InvokeRequired)
                                        {
                                            // Nếu đang ở ngoài luồng chính, sử dụng Invoke để chạy mã trên luồng chính
                                            rtbdone.Invoke(new Action(() =>
                                            {
                                                if (status == "ACTIVE")
                                                {
                                                    rtbdone.AppendText(IDACCOUNT + "|act" + Environment.NewLine);  // Thêm văn bản vào RichTextBox
                                                }
                                                if (status == "PENDING")
                                                {
                                                    rtbdone.AppendText(IDACCOUNT + "|pen" + Environment.NewLine);  // Thêm văn bản vào RichTextBox
                                                }
                                            }));
                                        }
                                        if (status == "ACTIVE")
                                        {
                                            if (IDBM_C_2 == IDBM_BACKUP)
                                            {
                                                sl_tk_bm_back_up++;
                                                sl_tk_share_done++;
                                                var sl_share_save_BM_BACKUP = IDBM_C_2 + "|SL:" + sl_tk_bm_back_up + "|" + DateTime.Now;
                                                StreamWriter sw_0 = new StreamWriter("SLBMBACKUP1NHAN.txt", true);
                                                sw_0.WriteLine(sl_share_save_BM_BACKUP);
                                                sw_0.Close();
                                                if (tb_BM_BACK_UP.InvokeRequired)
                                                {
                                                    tb_BM_BACK_UP.Invoke(new Action(() =>
                                                    {
                                                        tb_BM_BACK_UP.Text = sl_tk_bm_back_up.ToString();

                                                    }));
                                                }
                                                else
                                                {
                                                    tb_BM_BACK_UP.Text = sl_tk_bm_back_up.ToString();
                                                }

                                                if (tx_So_Luong_Share_vao_bm.InvokeRequired)
                                                {
                                                    tx_So_Luong_Share_vao_bm.Invoke(new Action(() =>
                                                    {
                                                        tx_So_Luong_Share_vao_bm.Text = sl_tk_share_done.ToString();

                                                    }));
                                                }
                                                else
                                                {
                                                    tx_So_Luong_Share_vao_bm.Text = sl_tk_share_done.ToString();
                                                }

                                            }
                                        }

                                        if (status == "PENDING")
                                        {
                                            if (IDBM_C_2 == IDBM_CLOSE_2)
                                            {
                                                sl_tk_bm_close2++;

                                                var sl_share_save_BM_CLOSE2 = IDBM_C_2 + "|SL:" + sl_tk_bm_close2 + "|" + DateTime.Now;
                                                StreamWriter sw_0 = new StreamWriter("SLBMCLOSE2NHAN.txt", true);
                                                sw_0.WriteLine(sl_share_save_BM_CLOSE2);
                                                sw_0.Close();

                                                if (tb_BM_Close_2.InvokeRequired)
                                                {
                                                    tb_BM_Close_2.Invoke(new Action(() =>
                                                    {
                                                        tb_BM_Close_2.Text = sl_tk_bm_close2.ToString();

                                                    }));
                                                }
                                                else
                                                {
                                                    tb_BM_Close_2.Text = sl_tk_bm_close2.ToString();
                                                }
                                            }
                                        }
                                    }

                                }
                                if (responseStr2.Contains("\"access_status\":\"CONFIRMED\""))
                                {
                                    row.Cells["cStatus"].Value = "Share Done: " + IDACCOUNT + " BM: " + IDBM_C;

                                    if (rtbdone.InvokeRequired)
                                    {
                                        // Nếu đang ở ngoài luồng chính, sử dụng Invoke để chạy mã trên luồng chính
                                        rtbdone.Invoke(new Action(() =>
                                        {
                                            if (status == "ACTIVE")
                                            {
                                                rtbdone.AppendText(IDACCOUNT + "|act" + Environment.NewLine);  // Thêm văn bản vào RichTextBox
                                            }
                                            if (status == "PENDING")
                                            {
                                                rtbdone.AppendText(IDACCOUNT + "|pen" + Environment.NewLine);  // Thêm văn bản vào RichTextBox
                                            }
                                        }));
                                    }

                                    if (status == "ACTIVE")
                                    {
                                        if (IDBM_C == IDBM)
                                        {
                                            sl_tk_bm++;
                                            sl_tk_share_done++;
                                            var sl_share_save_BM = IDBM_C + "|SL:" + sl_tk_bm + "|" + DateTime.Now;
                                            StreamWriter sw_0 = new StreamWriter("SLBMNHAN.txt", true);
                                            sw_0.WriteLine(sl_share_save_BM);
                                            sw_0.Close();

                                            if (tb_BM.InvokeRequired)
                                            {
                                                tb_BM.Invoke(new Action(() =>
                                                {
                                                    tb_BM.Text = sl_tk_bm.ToString();

                                                }));
                                            }
                                            else
                                            {
                                                tb_BM.Text = sl_tk_bm.ToString();
                                            }
                                            if (tx_So_Luong_Share_vao_bm.InvokeRequired)
                                            {
                                                tx_So_Luong_Share_vao_bm.Invoke(new Action(() =>
                                                {
                                                    tx_So_Luong_Share_vao_bm.Text = sl_tk_share_done.ToString();
                                                }));
                                            }
                                            else
                                            {
                                                tx_So_Luong_Share_vao_bm.Text = sl_tk_share_done.ToString();
                                            }

                                        }
                                    }

                                    if (status == "PENDING")
                                    {
                                        if (IDBM_C == IDBM_CLOSE)
                                        {
                                            sl_tk_bm_close1++;
                                            var sl_share_save_BM_CLOSE1 = IDBM_C + "|SL:" + sl_tk_bm_close1 + "|" + DateTime.Now;
                                            StreamWriter sw_0 = new StreamWriter("SLBMCLOSE1NHAN.txt", true);
                                            sw_0.WriteLine(sl_share_save_BM_CLOSE1);
                                            sw_0.Close();
                                            if (tb_BM_Close1.InvokeRequired)
                                            {
                                                tb_BM_Close1.Invoke(new Action(() =>
                                                {
                                                    tb_BM_Close1.Text = sl_tk_bm_close1.ToString();

                                                }));
                                            }
                                            else
                                            {
                                                tb_BM_Close1.Text = sl_tk_bm_close1.ToString();
                                            }
                                        }
                                    }
                                }
                            }
                        next_s:
                            Thread.Sleep(100);
                        }
                    }
                    catch
                    {
                        row.Cells["cStatus"].Value = "Share AC .....VĂNG => Login....";
                        if (login < 3)
                        {
                            login++;
                            goto login_;
                        }

                    }

                    List<string> IDBM_LIVE_DIE = new List<string>();
                    if (REG_BM == "ON")
                    {
                        row.Cells["cStatus"].Value = "Check BM .....";
                        // Check BM

                        var checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={token_EEAB}&limit=100&fields=%5B%22id%22,%22allow_page_management_in_www%22,%22business_users%7Brole%7D%22,%22sharing_eligibility_status%22,%22owned_ad_accounts.limit(1)%7Bcurrency,adtrust_dsl%7D%22,%22created_time%22,%22name%22,%20%22status%22%5D";
                        response = httpRequest.Get(checkBM);
                        if (response.IsOK)
                        {
                            var responseSTR6 = response.ToString();
                            HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                            doc.LoadHtml(responseSTR6);
                            JObject jobject = JObject.Parse(responseSTR6);
                            var dataValues = jobject["data"];
                            if (dataValues != null)
                            {
                                var dataValuesArr = dataValues.ToObject<JArray>();
                                foreach (var itemObject in dataValuesArr)
                                {
                                    var businessId = itemObject["id"].ToString();
                                    var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                    var createdtime = itemObject["created_time"].ToString();
                                    var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                    var nameBM = itemObject["name"].ToString();

                                    row.Cells["cCheckBM"].Value += $"{businessId}|{typeBm}|{statusBm}|";
                                    // Đổi màu chữ nếu là BM350
                                    if (typeBm == "BM350")
                                    {
                                        row.Cells["cCheckBM"].Style.ForeColor = Color.Red; // Đặt màu đỏ
                                    }
                                    else
                                    {
                                        row.Cells["cCheckBM"].Style.ForeColor = Color.Black; // Mặc định màu đen
                                    }
                                    StreamWriter sw2 = new StreamWriter("BMCLONE.txt", true);
                                    sw2.WriteLine($"{businessId}|{typeBm}|{statusBm}|" + DateTime.Now);
                                    sw2.Close();

                                    IDBM_LIVE_DIE.Add($"{businessId}|{statusBm}");
                                }
                            }

                        }
                    }


                    #region

                    int so_luong_bm = 0;
                    //List<string> LinkBM = new List<string>();
                    for (int l = 0; l < IDBM_LIVE_DIE.Count; l++)
                    {
                        var list = IDBM_LIVE_DIE[l];
                        var ID = list.Split('|')[0].ToString();
                        var LIVE_DIE = list.Split('|')[1].ToString();

                        if (LIVE_DIE == "BM Live")
                        {

                            var TAO_TK = "";
                            if (cmb_Tao_TK_BM.InvokeRequired)
                            {
                                cmb_Tao_TK_BM.Invoke(new Action(() =>
                                {
                                    TAO_TK = cmb_Tao_TK_BM.Text;

                                }));
                            }
                            else
                            {
                                TAO_TK = cmb_Tao_TK_BM.Text;
                            }
                            if (TAO_TK == "ON")
                            {
                                row.Cells["cStatus"].Value = "Tạo TK BM: " + ID + ".....";

                                httpRequest.AddHeader("authority", "z-p3-graph.facebook.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("sec-ch-ua", "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "none");

                                var currency = "";
                                if (cmb_Tien_Te_TK_BM.InvokeRequired)
                                {
                                    cmb_Tien_Te_TK_BM.Invoke(new Action(() =>
                                    {
                                        currency = cmb_Tien_Te_TK_BM.Text;

                                    }));
                                }
                                else
                                {
                                    currency = cmb_Tien_Te_TK_BM.Text;
                                }


                                var name = "";
                                if (cmb_TEN_TK_BM.InvokeRequired)
                                {
                                    cmb_TEN_TK_BM.Invoke(new Action(() =>
                                    {
                                        name = cmb_TEN_TK_BM.Text;

                                    }));
                                }
                                else
                                {
                                    name = cmb_TEN_TK_BM.Text;
                                }


                                var timezone_id = "";
                                if (cmb_Mui_Gio_TK_BM.InvokeRequired)
                                {
                                    cmb_Mui_Gio_TK_BM.Invoke(new Action(() =>
                                    {
                                        timezone_id = cmb_Mui_Gio_TK_BM.Text;

                                    }));
                                }
                                else
                                {
                                    timezone_id = cmb_Mui_Gio_TK_BM.Text;
                                }



                                var url_1 = $"https://z-p3-graph.facebook.com/v17.0/{ID}/adaccount?access_token={token_EEAB}&__cppo=1&__activeScenarioIDs=[]&__activeScenarios=[]&__interactionsMetadata=[]&_reqName=object:brand/adaccount&_reqSrc=AdAccountActions.brands&ad_account_created_from_bm_flag=true&currency={currency}&end_advertiser={ID}&invoicing_emails=[]&locale=vi_VN&media_agency=UNFOUND&method=post&name={name}&partner=UNFOUND&po_number=&pretty=0&suppress_http_code=1&timezone_id={timezone_id}&xref=f240a980fd9969";
                                response = httpRequest.Get(url_1);
                                if (response.IsOK)
                                {
                                    var responseStr_TK = response.ToString();
                                    if (responseStr_TK.Contains("{\"id\":\"act_"))
                                    {
                                        row.Cells["cStatus"].Value = "Tạo TK BM: " + ID + " DONE";
                                    }
                                    else
                                    {
                                        row.Cells["cStatus"].Value = "Tạo TK BM: " + ID + " FAIL!";
                                    }
                                }

                            }
                            var Share_BM_CLone = "";
                            if (cmb_Share_BM_CLone.InvokeRequired)
                            {
                                cmb_Share_BM_CLone.Invoke(new Action(() =>
                                {
                                    Share_BM_CLone = cmb_Share_BM_CLone.Text;
                                }));
                            }
                            else
                            {
                                Share_BM_CLone = cmb_Share_BM_CLone.Text;
                            }
                            if (Share_BM_CLone == "ON")
                            {

                                List<string> HOT_MAIL = new List<string>();

                                if (rtb_MAIL_SHARE_CLONE.InvokeRequired)
                                {
                                    rtb_MAIL_SHARE_CLONE.Invoke(new Action(() =>
                                    {
                                        HOT_MAIL = rtb_MAIL_SHARE_CLONE.Lines.ToList();
                                    }));
                                }
                                else
                                {
                                    HOT_MAIL = rtb_MAIL_SHARE_CLONE.Lines.ToList();
                                }


                                foreach (var mail_share in HOT_MAIL)
                                {

                                    // mail moakt
                                    //HttpRequest httprequest_Mail_MOAKT = new HttpRequest();
                                    //httprequest_Mail_MOAKT.Cookies = new CookieDictionary();
                                    //httprequest_Mail_MOAKT.KeepAlive = true;
                                    //httprequest_Mail_MOAKT.AllowAutoRedirect = true;
                                    //httprequest_Mail_MOAKT.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                                    //var mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                    //if (string.IsNullOrEmpty(mail_share))
                                    //{
                                    //    mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                    //}

                                    var mail_backup = mail_share.Split('|')[0].ToString();
                                    var usernamemail = mail_backup.Split('@')[0].ToString();
                                    var domain = mail_backup.Split('@')[1].ToString();

                                    var list_kt = File.ReadAllLines("kytuhotmail.txt").ToList();
                                    Random rd = new Random();
                                    var index = rd.Next(0, list_kt.Count);
                                    var kt = list_kt[index];
                                    var mail_share1 = usernamemail + "%2B" + kt + IDBM + "@" + domain;

                                    httpRequest.AddHeader("authority", "graph.facebook.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "none");

                                    response = httpRequest.Get($"https://graph.facebook.com/v8.0/{ID}/business_users?access_token={token_EEAB}&method=POST&role=ADMIN&email={mail_share1}");
                                    if (response.IsOK)
                                    {
                                        var responseStr11 = response.ToString();
                                        if (responseStr11.Contains("fb_trace_id_"))
                                        {
                                            row.Cells["cStatus"].Value = $"Share BM {ID} về {mail_share1} DONE";

                                            SL_BM++;
                                            if (tb_so_luong_BM.InvokeRequired)
                                            {
                                                tb_so_luong_BM.Invoke(new Action(() =>
                                                {
                                                    tb_so_luong_BM.Clear();
                                                    tb_so_luong_BM.AppendText(SL_BM.ToString());

                                                }));
                                            }
                                            else
                                            {
                                                tb_so_luong_BM.Clear();
                                                tb_so_luong_BM.AppendText(SL_BM.ToString());
                                            }
                                            // mail moakt
                                            //var linkBM = link_moakt(httprequest_Mail_MOAKT);
                                            //if (string.IsNullOrEmpty(linkBM))
                                            //{
                                            //    linkBM = link_moakt(httprequest_Mail_MOAKT);
                                            //}
                                            //LinkBM.Add(linkBM);
                                        }
                                        else
                                        {
                                            row.Cells["cStatus"].Value = $"Share {ID} về {mail_share1} FAIL";
                                        }
                                    }
                                    so_luong_bm++;
                                }


                            }


                            var PARTNER = "";


                            if (cmb_Share_DOI_TAC.InvokeRequired)
                            {
                                cmb_Share_DOI_TAC.Invoke(new Action(() =>
                                {
                                    PARTNER = cmb_Share_DOI_TAC.Text;
                                }));

                            }
                            else
                            {
                                PARTNER = cmb_Share_DOI_TAC.Text;
                            }


                            if (PARTNER == "ON")
                            {
                                httpRequest.AddHeader("authority", "business.facebook.com");
                                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("cache-control", "max-age=0");
                                httpRequest.AddHeader("dpr", "0.800000011920929");
                                httpRequest.AddHeader("priority", "u=0, i");
                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                httpRequest.AddHeader("sec-ch-ua", "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"");
                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Not A(Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"132.0.6834.160\", \"Google Chrome\";v=\"132.0.6834.160\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                httpRequest.AddHeader("sec-fetch-dest", "document");
                                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                httpRequest.AddHeader("sec-fetch-user", "?1");
                                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                httpRequest.AddHeader("viewport-width", "1379");
                                response = httpRequest.Get($"https://business.facebook.com/latest/settings/ad_accounts/?business_id={ID}");
                                if (response.IsOK)
                                {
                                    var responseStr1 = response.ToString();
                                    var assetID = Regex.Match(responseStr1, "assetID\":\"(.*?)\"").Groups[1].Value.ToString();
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("cache-control", "max-age=0");
                                    httpRequest.AddHeader("dpr", "0.800000011920929");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Not A(Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"132.0.6834.160\", \"Google Chrome\";v=\"132.0.6834.160\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "1566");
                                    response = httpRequest.Get($"https://business.facebook.com/latest/settings/partners?business_id={ID}");
                                    if (response.IsOK)
                                    {
                                        var responseStr = response.ToString();

                                        httpRequest.AddHeader("authority", "business.facebook.com");
                                        httpRequest.AddHeader("accept", "*/*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/partners?business_id={ID}");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Not A(Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"132.0.6834.160\", \"Google Chrome\";v=\"132.0.6834.160\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                        httpRequest.AddHeader("x-asbd-id", "129477");
                                        httpRequest.AddHeader("x-bh-flowsessionid", "upl_wizard_1739417864603_d32a9f3f-1ba8-4b63-81dc-8434768a9b2d");
                                        httpRequest.AddHeader("x-fb-friendly-name", "useBulkAssignAssetsToPartnersMutation");
                                        httpRequest.AddHeader("x-fb-upl-sessionid", "upl_1739417864603_2230cba2-fafd-4ca8-bb8f-6bb68b89d939");
                                        var fb_dtsg = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                        var lsd = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                        var jazoest = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();



                                        var payload = $"av={uid}&__aaid=0&__bid={ID}&__user={uid}&__a=1&__req=o&__hs=20132.HYP:bizweb_comet_pkg.2.1...0&dpr=1&__ccg=EXCELLENT&__rev=1020065976&__s=6otrg2:y1rmg6:xmdbe1&__hsi=7470742712311241326&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgE7R04zwIwuo9oeUa8462mcwuE2OwgECu1vw9m1YwBgao6C1uwiUmw9O48comwkE-UbE5-58jwGzEaE8o4-222SU5G4E5yexfwjES1xwjokG9wOwem323-qaUK2e0UE2ZwrUdUcpbwCwFg66362u1dxW1FwgU88158uwm85K0Mo88&__csr=g9D3ctf92QalcxZcIjq5pbPnESSyhdqh2Zrqj4Oazld8ySZVnLsjpicgydtSrHOZGmLBhd4qlqRiWmh9-Z2fjFiGhaROa-WprAW8HVeQGHj9ySG_8WDXlaXD-lHihaGHVABBlqKahahoyeVVuVoFHBUCt9uGJktjq-uqVpHiV96GQVUC-46ibGj9C8nGHh8KpoyuaAz9F9oOcGpolACACyHzGK4QaGumdAAz8rJ1mF8Gfz9Vo9EWiq5ogKql5G2C4o4C6eawEwFUqy8O5KbyECqcxmiqmeK4axS3G18xe6oG10wDK1TAwroyq0ju0kVlqZ46N5bgsRm4lFiPsDYCllFPsDEQIBh50t81AEuwBjjheQ0hd381wQ02MiO0axa9IE2bw7vwLV8vwgo0JK0BnDbzy08e08WwdqC1Wx60iC9w5Txm1jw8K2C0byw0nKU05sqv80fBo3t80a7xOdw5xw3CVZw2yA025Ta30EKfg3CwYwNg4S4U0G-02fkMC4E0bOS0oV013owlw21U1BU0jXDw7Eg3VUvEE1cA0bNU1b866CUGu0nZ0k40esw48wSw&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1020065976&__spin_b=trunk&__spin_t=1739417834&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useBulkAssignAssetsToPartnersMutation&variables={{\"businessID\":\"{ID}\",\"surfaceParams\":{{\"flow_source\":\"BIZ_WEB\",\"entry_point\":\"BIZWEB_SETTINGS_PARTNERS_TAB\",\"tab\":\"PARTNERS\"}},\"toBusinessID\":\"{ID_BM_PARTNERS}\",\"assetAssignments\":[{{\"asset_ids\":[\"{assetID}\"],\"asset_type\":\"AD_ACCOUNT\",\"permitted_task_ids\":[\"864195700451909\",\"151821535410699\",\"610690166001223\",\"186595505260379\"]}}]}}&server_timestamps=true&doc_id=8279807805447417";
                                        response = httpRequest.Post("https://business.facebook.com/api/graphql/?_callFlowletID=4934&_triggerFlowletID=4929", payload, "application/x-www-form-urlencoded");
                                        if (response.IsOK)
                                        {
                                            var responseStr_2 = response.ToString();

                                            if (responseStr_2.Contains("[{\"asset_type\":\"AD_ACCOUNT\",\"results\":[{\"result_type\":\"SUCCESS\"}]}]}},\"extensions\":{\"is_final\":true}}"))
                                            {
                                                row.Cells["cStatus"].Value = $"ADD BM {ID} => BM PARTNER {ID_BM_PARTNERS} DONE";
                                                SL_BM_PARTNER++;

                                                var sSL_PARTNERS = "SL_PARTNERS:" + SL_BM_PARTNER + "|" + DateTime.Now;
                                                StreamWriter sw_0 = new StreamWriter("SLPARTNERS.txt", true);
                                                sw_0.WriteLine(sSL_PARTNERS);
                                                sw_0.Close();
                                                if (tb_so_luong_BM_PARTNER.InvokeRequired)
                                                {
                                                    tb_so_luong_BM_PARTNER.Invoke(new Action(() =>
                                                    {
                                                        tb_so_luong_BM_PARTNER.Clear();
                                                        tb_so_luong_BM_PARTNER.AppendText(SL_BM_PARTNER.ToString());
                                                    }));
                                                }
                                                else
                                                {
                                                    tb_so_luong_BM_PARTNER.Clear();
                                                    tb_so_luong_BM_PARTNER.AppendText(SL_BM_PARTNER.ToString());
                                                }
                                            }
                                            else
                                            {
                                                row.Cells["cStatus"].Value = $"ADD BM {ID} => BM PARTNER {ID_BM_PARTNERS} FAIL";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            row.Cells["cStatus"].Value = $"BM DIE";
                        }

                        // nhận link BM 
                        //List<string> Via = new List<string>();
                        //if (rtb_VIA_NHAN.InvokeRequired)
                        //{
                        //    rtb_VIA_NHAN.Invoke(new Action(() =>
                        //    {
                        //        Via = rtb_VIA_NHAN.Lines.ToList();
                        //    }));
                        //}
                        //else
                        //{
                        //    Via = rtb_VIA_NHAN.Lines.ToList();
                        //}
                        //Login_API_Cookie(LinkBM, Via, row);
                    }

                    //return "DONE";
                    #endregion
                }
            out1:
                Thread.Sleep(1);
            }
            catch
            {
                row.Cells["cStatus"].Value = $"VĂNG => login.....";
                StreamWriter sw1 = new StreamWriter("URL.txt", true);
                sw1.WriteLine(url);
                sw1.Close();
                if (login < 3)
                {
                    login++;
                    goto login_;
                }
                else
                {
                    row.Cells["cStatus"].Value = $"VĂNG";
                    //return "FAIL";
                }
            }

        }

        private List<string> ListoriginalTab; // Khai báo danh sách tab toàn cục
        private List<string> originalTabchinh;

    
        private void REG_IG(DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {

            try
            {
            login:
                var proxy = ("135.148.96.125", 56541, "opkc5k1z", "oPKC5k1Z");

                string zipPath = CreateProxyExtension(proxy.Item1, proxy.Item2, proxy.Item3, proxy.Item4);
                var chromedriver = Createchromedrive_proxy(zipPath, proxy.Item1, proxy.Item2);

                chromedriver.Navigate().GoToUrl("https://whoer.net/");
                Thread.Sleep(2000);
                //var chromedriver = Createchromedrive();
                chromedriver.Navigate().GoToUrl("https://www.facebook.com/");
                row.Cells["cStatus"].Value = "Login.....";
                var cookieRaw = c2FAvsCookie.Split(';');
                foreach (var cookieItem in cookieRaw)
                {
                    try
                    {
                        var cookieJar = cookieItem.Split('=');

                        Cookie cookieChrome = new Cookie(cookieJar[0].Trim(), cookieJar[1].Trim(), "facebook.com", "/", DateTime.Now.AddDays(10));
                        chromedriver.Manage().Cookies.AddCookie(cookieChrome);
                    }
                    catch { }
                }
                chromedriver.Navigate().Refresh();
                chromedriver.Navigate().GoToUrl("https://www.facebook.com/");
                Thread.Sleep(1000);
                while (isStop)
                {
                    Thread.Sleep(1000);

                }
                var htmlfacebook = chromedriver.PageSource;
                var usermanex = Regex.Match(htmlfacebook, "user=(.*?)&").Groups[1].Value;
                if (usermanex == $"{uid}")
                {
                    row.Cells["cStatus"].Value = "LOGIN OK";
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                    var urlChrome = chromedriver.Url;
                    if (urlChrome.Contains("1501092823525282"))
                    {
                        row.Cells["cStatus"].Value = "282";
                        StreamWriter sw = new StreamWriter("282.txt", true);
                        sw.WriteLine(uid + "|" + password + "|" + mail + "|" + passmail + "|" + mailkhoiphuc);
                        sw.Close();
                        goto out1;

                    }
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                    if (urlChrome.Contains("https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice"))
                    {
                        var allow_all_cookie = chromedriver.FindElements(By.XPath("//div[@role='button']//div[@role='none']//div//div[@role='none']"));
                        if (allow_all_cookie.Count > 0)
                        {
                            allow_all_cookie[4].Click();
                            Thread.Sleep(1000);
                        }

                    }
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                    if (urlChrome.Contains("https://www.facebook.com/privacy/consent/pipa"))
                    {
                        var checkbox = chromedriver.FindElements(By.XPath("//input[@type='checkbox']"));
                        if (checkbox.Count > 0)
                        {
                            try
                            {
                                foreach (var element in checkbox)
                                {
                                    // Cuộn đến phần tử
                                    ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                                    // Đợi một chút để trang có thể cuộn xong
                                    Thread.Sleep(500);
                                    // Click vào phần tử
                                    element.Click();

                                }

                            }
                            catch { }
                        }
                        while (isStop)
                        {
                            Thread.Sleep(1000);

                        }
                        var allow_all_cookie = chromedriver.FindElements(By.XPath("//div[@role='button']//div[@role='none']//div//div[@role='none']"));
                        if (allow_all_cookie.Count > 0)
                        {
                            allow_all_cookie.FirstOrDefault().Click();
                            Thread.Sleep(1000);
                        }
                        while (isStop)
                        {
                            Thread.Sleep(1000);

                        }
                        var allow_all_cookie2 = chromedriver.FindElements(By.XPath("//div[@role='button']//div[@role='none']//div//div[@role='none']"));
                        if (allow_all_cookie2.Count > 0)
                        {
                            allow_all_cookie2.FirstOrDefault().Click();
                            Thread.Sleep(1000);
                        }

                    }
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                    var urldissmiss = chromedriver.Url;
                    if (urldissmiss.Contains("checkpoint/601051028565049/"))
                    {
                        var dissmiss = chromedriver.FindElements(By.XPath("//div[@role='button']"));
                        dissmiss[2].Click();

                    }
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                    row.Cells["cStatus"].Value = "Reg IG";
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                    for (int i = 0; i < 20; i++)
                    {
                    name_reset:
                        chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                        Thread.Sleep(5000);


                        var btndangnhapbangfacebook = chromedriver.FindElements(By.XPath("//button/div/span"));
                        try
                        {
                            btndangnhapbangfacebook.LastOrDefault().Click();
                            Thread.Sleep(100);
                            while (isStop)
                            {
                                Thread.Sleep(1000);

                            }
                        }
                        catch
                        {
                            while (isStop)
                            {
                                Thread.Sleep(1000);

                            }

                            chromedriver.Navigate().GoToUrl("https://www.instagram.com/accounts/emailsignup/?next=");
                            Thread.Sleep(3000);
                            var url = chromedriver.Url;
                            if (url.Contains("https://www.instagram.com/accounts/emailsignup/?next="))
                            {
                                chromedriver.Quit();
                                //chromedriver.Close();
                                goto login;



                            }


                        }
                        while (isStop)
                        {
                            Thread.Sleep(1000);

                        }

                        var btnConfirm = chromedriver.FindElements(By.XPath("//button[@name='__CONFIRM__']"));
                        try
                        {

                            btnConfirm.LastOrDefault().Click();
                            Thread.Sleep(3000);
                        }
                        catch { }

                        while (isStop)
                        {
                            Thread.Sleep(1000);

                        }

                        //if (!urlChrome.Contains("https://www.instagram.com/challenge/action"))
                        //{


                        //    row.Cells["cStatus"].Value = "IG xác minh sđt hoặc mail";
                        //    break;

                        //}
                        urlChrome = chromedriver.Url;
                        if (urlChrome.Contains("https://www.instagram.com/fxcal/disclosure/?next=%2F"))
                        {

                            var allowandcontinue = chromedriver.FindElements(By.XPath("//div/div[3]/button"));
                            if (allowandcontinue.Count > 0)
                            {
                                try
                                {
                                    // Cuộn đến phần tử
                                    var element = allowandcontinue.FirstOrDefault();
                                    ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                                    // Đợi một chút để trang có thể cuộn xong
                                    Thread.Sleep(500);
                                    // Click vào phần tử
                                    element.Click();
                                    Thread.Sleep(5000);
                                }
                                catch { }
                            }
                        }
                        while (isStop)
                        {
                            Thread.Sleep(1000);

                        }
                        Thread.Sleep(5000);
                        urlChrome = chromedriver.Url;
                        if (urlChrome.Contains("https://www.instagram.com/fxcal/disclosure/?next=%2F"))
                        {

                            var allowandcontinue = chromedriver.FindElements(By.XPath("//div/div[3]/button"));
                            if (allowandcontinue.Count > 0)
                            {
                                try
                                {
                                    // Cuộn đến phần tử
                                    var element = allowandcontinue.FirstOrDefault();
                                    ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                                    // Đợi một chút để trang có thể cuộn xong
                                    Thread.Sleep(500);
                                    // Click vào phần tử
                                    element.Click();
                                    Thread.Sleep(5000);
                                }
                                catch { }
                            }
                        }
                        while (isStop)
                        {
                            Thread.Sleep(1000);

                        }


                        urlChrome = chromedriver.Url;
                        if (urlChrome.Contains("https://www.facebook.com/checkpoint/1501092823525282"))
                        {
                            row.Cells["cStatus"].Value = "282";
                            goto out1;
                        }
                        while (isStop)
                        {
                            Thread.Sleep(1000);

                        }
                        if (!urlChrome.Contains("https://www.instagram.com/accounts/signup/"))
                        {
                            chromedriver.Navigate().GoToUrl("https://www.instagram.com/accounts/signup/");
                            Thread.Sleep(2000);


                        }
                        while (isStop)
                        {
                            Thread.Sleep(1000);

                        }
                        if (!urlChrome.Contains("https://www.instagram.com/fxcal/disclosur"))
                        {
                            var VN_US = "";
                            if (cmb_VN_US.InvokeRequired)
                            {
                                cmb_VN_US.Invoke(new Action(() =>
                                {
                                    VN_US = cmb_VN_US.Text;

                                }));

                            }
                            string username1 = "";
                            string passig1 = "";
                            var mailnew = "";
                            var passmailnew = "";
                            var firstname_mail = "";
                            var lastname_mail = "";
                            if (VN_US == "US")
                            {
                                var firstname = File.ReadAllLines("firstname.txt").ToList();
                                Random rnd = new Random();
                                int indexRandom = rnd.Next(0, firstname.Count);
                                var lastname = File.ReadAllLines("lastname.txt").ToList();
                                Random rnd_1 = new Random();
                                int indexRandom_1 = rnd_1.Next(0, lastname.Count);


                                var kytu = File.ReadAllLines("kytu.txt").ToList();
                                Random rnd1 = new Random();
                                int indexRandom1 = rnd1.Next(0, kytu.Count);
                                Random rd = new Random();
                                int randomNumber = rd.Next(1, 100);


                                Random nameV = new Random();
                                int NAME = nameV.Next(0, 2);
                                if (NAME == 1)
                                {
                                    try
                                    {
                                        string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];

                                        IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                                        FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                                        FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                                        enter_name_pass_IG(fullname, 20, FULLName);
                                   

                                    }
                                    catch { }

                                    username1 = firstname[indexRandom].ToLower() + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                                    IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                                    //btnUserName.SendKeys(username1);
                                    enter_name_pass_IG(username1, 20, btnUserName);

                                    Thread.Sleep(5000);
                                    passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                                    IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                                    //btnpassig.SendKeys(passig1);
                                    enter_name_pass_IG(passig1, 20, btnpassig);
                                    Thread.Sleep(5000);

                                }
                                else
                                {
                                    try
                                    {
                                        string fullname = firstname[indexRandom];

                                        IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                                        FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                                        FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                        //FULLName.SendKeys(fullname);
                                        enter_name_pass_IG(fullname, 20, FULLName);
                                    }
                                    catch { }
                                    username1 = firstname[indexRandom] + "." + lastname[indexRandom_1].ToLower() + randomNumber;
                                    IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                                    //btnUserName.SendKeys(username1);
                                    enter_name_pass_IG(username1, 20, btnUserName);
                                    Thread.Sleep(5000);
                                    passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                                    IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                                    //btnpassig.SendKeys(passig1);
                                    enter_name_pass_IG(passig1, 20, btnpassig);
                                    Thread.Sleep(5000);
                                }


                                while (isStop)
                                {
                                    Thread.Sleep(1000);

                                }







                                mailnew = firstname[indexRandom].ToLower() + lastname[indexRandom_1].ToLower() + randomNumber + "@hotmail.com";
                                passmailnew = firstname[indexRandom].ToLower() + "$" + randomNumber;

                                firstname_mail = firstname[indexRandom];
                                lastname_mail = lastname[indexRandom_1];

                            }
                            if (VN_US == "VN")
                            {
                                var firstname = File.ReadAllLines("Ten.txt").ToList();
                                Random rnd = new Random();
                                int indexRandom = rnd.Next(0, firstname.Count);
                                var lastname = File.ReadAllLines("Ho.txt").ToList();
                                Random rnd_1 = new Random();
                                int indexRandom_1 = rnd_1.Next(0, lastname.Count);


                                var kytu = File.ReadAllLines("kytu.txt").ToList();
                                Random rnd1 = new Random();
                                int indexRandom1 = rnd1.Next(0, kytu.Count);
                                Random rd = new Random();
                                int randomNumber = rd.Next(1, 100);

                                Random nameV = new Random();
                                int NAME = nameV.Next(0, 2);
                                if (NAME == 1)
                                {
                                    try
                                    {
                                        string fullname = lastname[indexRandom_1] + " " + firstname[indexRandom];

                                        IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                                        FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                                        FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                        //FULLName.SendKeys(fullname);
                                        enter_name_pass_IG(fullname, 20, FULLName);

                                    }
                                    catch { }
                                }
                                else
                                {
                                    string fullname = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower();

                                    IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                                    FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                                    FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                    //FULLName.SendKeys(fullname);
                                    enter_name_pass_IG(fullname, 20, FULLName);
                                }


                                username1 = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                                IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                                //btnUserName.SendKeys(username1);
                                enter_name_pass_IG(username1, 20, btnUserName);
                                Thread.Sleep(5000);

                                passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                                IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                                //btnpassig.SendKeys(passig1);
                                enter_name_pass_IG(passig1, 20, btnpassig);
                                Thread.Sleep(5000);
                                while (isStop)
                                {
                                    Thread.Sleep(1000);

                                }
                                mailnew = firstname[indexRandom].ToLower() + lastname[indexRandom_1].ToLower() + randomNumber + "@hotmail.com";
                                passmailnew = firstname[indexRandom].ToLower() + "$" + randomNumber;

                                firstname_mail = firstname[indexRandom];
                                lastname_mail = lastname[indexRandom_1];
                            }
                            while (isStop)
                            {
                                Thread.Sleep(1000);

                            }


                            Thread.Sleep(TimeSpan.FromSeconds(80));
                            try
                            {
                                var btnSingUp = chromedriver.FindElement(By.XPath("//button[text()='Sign up']"));
                                btnSingUp.Click();
                                Thread.Sleep(5000);
                            }
                            catch
                            {
                                var btnSingUp = chromedriver.FindElement(By.XPath("//button[text()='Sign Up']"));
                                btnSingUp.Click();
                                Thread.Sleep(5000);

                            }
                            while (isStop)
                            {
                                Thread.Sleep(1000);

                            }
                            var name = chromedriver.FindElements(By.XPath("//form/div[3]/div[2]"));
                            if (name.Count > 0)
                            {
                                var text = name.LastOrDefault().Text;
                                if (text == "This username isn't available. Please try another.")
                                {
                                    goto name_reset;
                                }

                            }




                            Thread.Sleep(TimeSpan.FromSeconds(30));

                            chromedriver.Navigate().GoToUrl("https://www.instagram.com/");

                            var uid_ig = Regex.Match(chromedriver.PageSource, "NON_FACEBOOK_USER_ID\":\"(.*?)\"").Groups[1].Value;

                            if (uid_ig == "0")
                            {
                                //btndangnhapbangfacebook = chromedriver.FindElements(By.XPath("//button/div/div[2]"));
                                btndangnhapbangfacebook = chromedriver.FindElements(By.XPath("//button/div/span"));
                                try
                                {
                                    btndangnhapbangfacebook.LastOrDefault().Click();
                                    Thread.Sleep(10000);
                                }
                                catch { }
                                while (isStop)
                                {
                                    Thread.Sleep(1000);

                                }

                                urlChrome = chromedriver.Url;
                                if (urlChrome.Contains("https://www.instagram.com/fxcal/disclosure/?next=%2F"))
                                {

                                    var allowandcontinue = chromedriver.FindElements(By.XPath("//div/div[3]/button"));
                                    if (allowandcontinue.Count > 0)
                                    {
                                        try
                                        {
                                            // Cuộn đến phần tử
                                            var element = allowandcontinue.FirstOrDefault();
                                            ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                                            // Đợi một chút để trang có thể cuộn xong
                                            Thread.Sleep(500);
                                            // Click vào phần tử
                                            element.Click();
                                            Thread.Sleep(5000);
                                        }
                                        catch { }
                                    }
                                }
                                while (isStop)
                                {
                                    Thread.Sleep(1000);

                                }
                                Thread.Sleep(10000);
                                uid_ig = Regex.Match(chromedriver.PageSource, "NON_FACEBOOK_USER_ID\":\"(.*?)\"").Groups[1].Value;

                                if (uid_ig == "0")
                                {
                                    chromedriver.Navigate().GoToUrl("https://www.instagram.com/");

                                    var enter_username = chromedriver.FindElements(By.XPath("//input[@name='username']"));
                                    if (enter_username.Count > 0)
                                    {
                                        enter_username.LastOrDefault().SendKeys(username1);
                                        Thread.Sleep(2000);
                                    }
                                    var enter_pass = chromedriver.FindElements(By.XPath("//input[@name='password']"));
                                    if (enter_pass.Count > 0)
                                    {
                                        enter_pass.LastOrDefault().SendKeys(passig1);
                                        Thread.Sleep(2000);
                                    }

                                    var login = chromedriver.FindElements(By.XPath("//button[@type='submit']"));
                                    if (login.Count > 0)
                                    {
                                        login.LastOrDefault().Click();
                                        Thread.Sleep(2000);
                                    }
                                    Thread.Sleep(10000);
                                    while (isStop)
                                    {
                                        Thread.Sleep(1000);

                                    }
                                    var url = chromedriver.Url;
                                    if (url.Contains("https://www.instagram.com/auth_platform/codeentry"))
                                    {
                                        row.Cells["cStatus"].Value = "Check point Mail Gốc";
                                        goto out1;
                                    }
                                    if (url.Contains("https://www.instagram.com/accounts/suspended") || url.Contains("https://www.instagram.com/challenge"))
                                    {
                                        row.Cells["cStatus"].Value = "Check point 282";
                                        goto out1;

                                    }
                                    var Sorry_your_password = chromedriver.FindElements(By.XPath("//form/span/div"));
                                    if (Sorry_your_password.Count > 0)
                                    {
                                        var text = Sorry_your_password.LastOrDefault().Text;
                                        if (text == "Sorry, your password was incorrect. Please double-check your password.")
                                        {
                                            goto name_reset;
                                        }


                                    }


                                }
                            }

                            try
                            {
                                chromedriver.Navigate().GoToUrl($"https://accountscenter.instagram.com/accounts/{uid}/remove/");
                                while (isStop)
                                {
                                    Thread.Sleep(1000);

                                }
                                var Remove_acc = chromedriver.FindElements(By.XPath("//div/div[@role='listitem']/div[@role='button']"));
                                if (Remove_acc.Count == 3)
                                {
                                    try
                                    {
                                        Remove_acc[0].Click();
                                        Thread.Sleep(3000);

                                        var Continue = chromedriver.FindElements(By.XPath("//div//div[2]/div[@role='button']"));
                                        if (Continue.Count > 0)
                                        {
                                            Continue.LastOrDefault().Click();
                                            Thread.Sleep(3000);

                                        }
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }

                                        var yes_finish = chromedriver.FindElements(By.XPath("//div[2]/div[2]/div[@role='button']"));
                                        if (yes_finish.Count > 0)
                                        {
                                            yes_finish.LastOrDefault().Click();
                                            Thread.Sleep(15000);
                                        }

                                    }
                                    catch { }
                                    while (isStop)
                                    {
                                        Thread.Sleep(1000);

                                    }
                                }
                                if (Remove_acc.Count == 4)
                                {
                                    try
                                    {
                                        Remove_acc[1].Click();
                                        Thread.Sleep(3000);

                                        var Continue = chromedriver.FindElements(By.XPath("//div//div[2]/div[@role='button']"));
                                        if (Continue.Count > 0)
                                        {
                                            Continue.LastOrDefault().Click();
                                            Thread.Sleep(3000);

                                        }
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }

                                        var yes_finish = chromedriver.FindElements(By.XPath("//div[2]/div[2]/div[@role='button']"));
                                        if (yes_finish.Count > 0)
                                        {
                                            yes_finish.LastOrDefault().Click();
                                            Thread.Sleep(15000);
                                        }

                                    }
                                    catch { }
                                    while (isStop)
                                    {
                                        Thread.Sleep(1000);

                                    }
                                }

                                var on_off_2FA = "";
                                if (cmb_ON_OFF_2FAIG.InvokeRequired)
                                {
                                    cmb_ON_OFF_2FAIG.Invoke(new Action(() =>
                                    {
                                        on_off_2FA = cmb_ON_OFF_2FAIG.Text;

                                    }));


                                }
                                var c2FA_IG = "";
                                if (on_off_2FA == "ON")
                                {
                                c2fa:
                                    chromedriver.Navigate().GoToUrl("https://accountscenter.instagram.com/password_and_security/two_factor/");
                                    Thread.Sleep(10000);
                                    while (isStop)
                                    {
                                        Thread.Sleep(1000);

                                    }
                              
                                    var select_nameIG = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                                    if (select_nameIG.Count > 0)
                                    {

                                        try
                                        {
                                            foreach (var element in select_nameIG)
                                            {
                                                var user = element.Text;
                                                if (user.Contains(username1.ToLower()))
                                                {
                                                    element.Click();
                                                    Thread.Sleep(5000);
                                                    while (isStop)
                                                    {
                                                        Thread.Sleep(1000);

                                                    }
                                                    var next2 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                                                    if (next2.Count > 0)
                                                    {
                                                        next2.LastOrDefault().Click();
                                                        Thread.Sleep(5000);
                                                    }
                                                    while (isStop)
                                                    {
                                                        Thread.Sleep(1000);

                                                    }
                                                    var text_2fa = chromedriver.FindElements(By.XPath("//div/div/div[1]/span"));
                                                    if (text_2fa.Count > 0)
                                                    {
                                                        c2FA_IG = text_2fa[11].Text;
                                                        Thread.Sleep(5000);
                                                        while (isStop)
                                                        {
                                                            Thread.Sleep(1000);

                                                        }
                                                        next2 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                                                        if (next2.Count > 0)
                                                        {
                                                            next2.LastOrDefault().Click();
                                                            Thread.Sleep(5000);
                                                            while (isStop)
                                                            {
                                                                Thread.Sleep(1000);

                                                            }
                                                            var code = GetCode(c2FA_IG);

                                                            var enter_code_2fa = chromedriver.FindElements(By.XPath("//div/div[1]/input"));
                                                            if (enter_code_2fa.Count > 0)
                                                            {
                                                                enter_code_2fa.LastOrDefault().SendKeys(code);
                                                                Thread.Sleep(2000);
                                                                while (isStop)
                                                                {
                                                                    Thread.Sleep(1000);

                                                                }
                                                                next2 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                                                                if (next2.Count > 0)
                                                                {
                                                                    next2.LastOrDefault().Click();
                                                                    Thread.Sleep(5000);

                                                                }
                                                            }
                                                        }

                                                    }
                                                }
                                            }
                                        }
                                        catch { }
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }

                                    }
                                    else
                                    {
                                        goto c2fa;
                                    }

                                }
                       


                            mail_reset:
                            checkedmail:
                                string codehotmail = "";
                                chromedriver.Navigate().GoToUrl("https://accountscenter.instagram.com/personal_info/contact_points/?contact_point_type=email&dialog_type=add_contact_point");
                                while (isStop)
                                {
                                    Thread.Sleep(1000);

                                }
                                var Reg_HotMail = "";

                                if (cmb_REGHOTMAIL.InvokeRequired)
                                {
                                    cmb_REGHOTMAIL.Invoke(new Action(() =>
                                    {
                                        Reg_HotMail = cmb_REGHOTMAIL.Text;
                                    }));

                                }
                                while (isStop)
                                {
                                    Thread.Sleep(1000);

                                }
                                var hotmail = "";
                                var passhotmail = "";
                                var accessToken = "";
                                if (Reg_HotMail == "OFF")
                                {
                                try
                                    {
                                        hotmail = dgv_mail.Rows[mail_0].Cells["cMail1"].Value.ToString();
                                        passhotmail = dgv_mail.Rows[mail_0].Cells["cPassMail1"].Value.ToString();
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }
                                        try
                                        {
                                            accessToken = dgv_mail.Rows[mail_0].Cells["cToken"].Value.ToString();
                                        }
                                        catch { }
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }
                                        try
                                        {
                                            var hotmail_select = dgv_mail.Rows[mail_0].Cells["cStatus1"].Value.ToString();
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);

                                            }
                                            while (hotmail_select == "Select")
                                            {
                                                try
                                                {
                                                    mail_0++;
                                                    hotmail_select = "";
                                                    hotmail = dgv_mail.Rows[mail_0].Cells["cMail1"].Value.ToString();
                                                    passhotmail = dgv_mail.Rows[mail_0].Cells["cPassMail1"].Value.ToString();
                                                    //dgv_mail.Rows[mail_0].Cells["cStatus1"].Value = "Select";
                                                    hotmail_select = dgv_mail.Rows[mail_0].Cells["cStatus1"].Value.ToString();
                                                    accessToken = dgv_mail.Rows[mail_0].Cells["cToken"].Value.ToString();
                                                    while (isStop)
                                                    {
                                                        Thread.Sleep(1000);

                                                    }
                                                }
                                                catch { }
                                            }
                                        }
                                        catch { }
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }
                                    }
                                    catch
                                    {
                                        MessageBox.Show("HẾT MAIL");
                                        mail_0 = 0;
                                        Thread.Sleep(TimeSpan.FromMinutes(2));
                                        goto checkedmail;


                                    }
                                    while (isStop)
                                    {
                                        Thread.Sleep(1000);

                                    }
                                    if (dgv_mail.InvokeRequired)
                                    {
                                        // Sử dụng Invoke để đảm bảo thao tác này diễn ra trên luồng chính
                                        dgv_mail.Invoke(new Action(() =>
                                        {
                                            dgv_mail.Rows[mail_0].Cells["cStatus1"].Value = "Select";
                                        }));
                                    }
                                    mail_0++;
                                }
                                if (Reg_HotMail == "ON")
                                {

                                    //// Lưu lại window handle của tab hiện tại để chuyển sang tab nhỏ
                                    //originalTabchinh = new List<string>();
                                    //// Lưu lại window handle của tab hiện tại để chuyển sang tab nhỏ
                                    //var originalTab = chromedriver.CurrentWindowHandle;



                                    //// Mở tab mới bằng cách sử dụng JavaScript
                                    //((IJavaScriptExecutor)chromedriver).ExecuteScript("window.open();");

                                    var chromedriver01 = Createchromedrivehotmail();
                                reset_hotmail:
                                    // Chuyển sang tab mới
                                    //chromedriver.SwitchTo().Window(chromedriver.WindowHandles.Last());
                                    chromedriver01.Navigate().GoToUrl("https://signup.live.com/signup");
                                    // Lưu lại window handle của tab hiện tại để chuyển sang tab nhỏ
                                    //var originalTab_HOTMAIL = chromedriver.CurrentWindowHandle;



                                    var enter_mewmail = chromedriver01.FindElements(By.XPath("//input[@name='New email']"));
                                    if (enter_mewmail.Count > 0)
                                    {
                                        enter_mewmail.LastOrDefault().SendKeys(mailnew);
                                        Thread.Sleep(2000);
                                    }
                                    var next = chromedriver01.FindElements(By.XPath("//div/div/button"));
                                    if (next.Count > 0)
                                    {
                                        next.LastOrDefault().Click();
                                        Thread.Sleep(3000);
                                    }


                                    var mailnew_username = chromedriver01.FindElements(By.XPath("//div/div/div[@id='usernameInputError']"));
                                    if (mailnew_username.Count > 0)
                                    {
                                        var text = mailnew_username.LastOrDefault().Text;
                                        if (text.Contains(mailnew))
                                        {
                                            Random rd = new Random();
                                            int randomNumber = rd.Next(1, 100);

                                            mailnew = mailnew.Split('@')[0] + randomNumber + "@hotmail.com";

                                            goto reset_hotmail;
                                        }
                                    }



                                    var enter_passmailnew = chromedriver01.FindElements(By.XPath("//input[@name='New email']"));
                                    if (enter_passmailnew.Count > 0)
                                    {
                                        enter_passmailnew.LastOrDefault().SendKeys(passmailnew);
                                        Thread.Sleep(2000);
                                    }
                                    next = chromedriver.FindElements(By.XPath("//div/div/button"));
                                    if (next.Count > 0)
                                    {
                                        next.LastOrDefault().Click();
                                        Thread.Sleep(3000);
                                    }


                                    var NAME_MAIL = chromedriver01.FindElements(By.XPath("//input[@name='firstNameInput']"));
                                    if (NAME_MAIL.Count > 0)
                                    {
                                        NAME_MAIL.LastOrDefault().SendKeys(firstname_mail);
                                        Thread.Sleep(2000);
                                    }


                                    var NAME_MAIL2 = chromedriver01.FindElements(By.XPath("//input[@name='lastNameInput']"));
                                    if (NAME_MAIL2.Count > 0)
                                    {
                                        NAME_MAIL2.LastOrDefault().SendKeys(lastname_mail);
                                        Thread.Sleep(2000);
                                    }
                                    next = chromedriver01.FindElements(By.XPath("//div/div/button"));
                                    if (next.Count > 0)
                                    {
                                        next.LastOrDefault().Click();
                                        Thread.Sleep(3000);
                                    }

                                    var Month = chromedriver01.FindElements(By.XPath("//select[@name='BirthMonth']"));

                                    //// Chuyển đổi sang tab đầu tiên
                                    //chromedriver.SwitchTo().Window(originalTab);



                                }


                                while (isStop)
                                {
                                    Thread.Sleep(1000);

                                }

                          
                                var username2 = hotmail;
                                var password1 = "";
                                var refreshToken = "";
                                //(username2, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(hotmail, passhotmail);
                                //if (string.IsNullOrEmpty(accessToken))
                                //{
                                //    (username2, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(hotmail, passhotmail);
                                //}
                                //if (string.IsNullOrEmpty(accessToken))
                                //{
                                //    (username2, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(hotmail, passhotmail);
                                //}
                                while (isStop)
                                {
                                    Thread.Sleep(1000);

                                }

                                var enterhotmail = chromedriver.FindElements(By.XPath("//div/div[1]/input"));
                                if (enterhotmail.Count > 0)
                                {
                                    enterhotmail[0].SendKeys(hotmail);
                                    Thread.Sleep(3000);
                                }
                                while (isStop)
                                {
                                    Thread.Sleep(1000);

                                }
                                var selectIG = chromedriver.FindElements(By.XPath("//div/div/input[@type='checkbox']"));
                                if (selectIG.Count > 0)
                                {
                                    try
                                    {
                                        // Cuộn đến phần tử
                                        var element = selectIG.LastOrDefault();
                                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                                        // Đợi một chút để trang có thể cuộn xong
                                        Thread.Sleep(500);
                                        // Click vào phần tử
                                        element.Click();
                                        Thread.Sleep(5000);
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }
                                        var next = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                                        if (next.Count > 0)
                                        {
                                            next.LastOrDefault().Click();
                                            Thread.Sleep(5000);
                                        }
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }
                                        Thread.Sleep(TimeSpan.FromSeconds(20));
                                        if (Reg_HotMail == "OFF")
                                        {
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);

                                            }
                                            codehotmail = ReadHotmail_IG(username2, accessToken);
                                            while (string.IsNullOrEmpty(codehotmail))
                                            {
                                                while (isStop)
                                                {
                                                    Thread.Sleep(1000);

                                                }
                                                codehotmail = ReadHotmail_IG(username2, accessToken);
                                                Thread.Sleep(5000);
                                            }
                                            if (codehotmail == "LOGIN HOTMAIL FAIL")
                                            {
                                                MessageBox.Show("MAIL KHÓA");
                                                Thread.Sleep(TimeSpan.FromSeconds(20));
                                                goto mail_reset;


                                            }
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);

                                            }
                                        }
                                        if (Reg_HotMail == "ON")
                                        {








                                        }
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }
                                        var enter_codeIG = chromedriver.FindElements(By.XPath("//div/div[1]/input"));
                                        if (enter_codeIG.Count > 0)
                                        {
                                            enter_codeIG.LastOrDefault().SendKeys(codehotmail);
                                            Thread.Sleep(3000);
                                        }
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }

                                        next = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                                        if (next.Count > 0)
                                        {
                                            next.LastOrDefault().Click();
                                            Thread.Sleep(15000);
                                        }
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }

                                        var worogcode = chromedriver.FindElements(By.XPath("//div[3]/div/div/span"));
                                        if (worogcode.Count > 0)
                                        {
                                            var text = worogcode.LastOrDefault().Text;
                                            if(text == "Wrong code: That code didn’t work. Please check the code and try again.")
                                            {

                                                goto mail_reset;
                                            }
                                            


                                        }

                                        row.Cells["cStatus"].Value = "REG IG DONE";
                                        chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }
                                        string cookiestring = "";
                                        foreach (var cookie in cookiess)
                                        {
                                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                        }
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }
                                        int add = 0;
                                        dgv2_IG.Invoke(new Action(() =>
                                        {
                                            add = dgv2_IG.Rows.Add((dgv2_IG.RowCount + 1), $" {username1} | {passig1}|{cookiestring}| {c2FA_IG}|{hotmail}|{passhotmail}|{uid}");
                                        }));

                                        StreamWriter sw = new StreamWriter("AccountIGREG.txt", true);
                                        sw.WriteLine($"{username1}|{passig1}|{cookiestring}|{c2FA_IG}|{hotmail}|{passhotmail}|{uid}");
                                        sw.Close();
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);

                                        }
                                        chromedriver.Manage().Cookies.DeleteAllCookies();
                                        Thread.Sleep(2000);
                                        isStop = true;
                                        Thread.Sleep(2000);
                                        changeHmaProxy();
                                        Thread.Sleep(TimeSpan.FromSeconds(30));
                                        isStop = false;
                                        chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                                        Thread.Sleep(2000);
                                        chromedriver.Navigate().Refresh();
                                    }
                                    catch { }
                                }



                            }
                            catch
                            {


                            }
                        }
                    }


                }

            out1:
                Thread.Sleep(1);
            }
            catch { }
















        }

        private void REG_IG_GMAIL(DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {

            var REG_BM = "";
            if (cmb_REG_BM_IG1.InvokeRequired)
            {
                cmb_REG_BM_IG1.Invoke(new Action(() =>
                {
                    REG_BM = cmb_REG_BM_IG1.Text;

                }));

            }
            var UP_WEB = "";
            if (cmb_UP_WEB.InvokeRequired)
            {
                cmb_UP_WEB.Invoke(new Action(() =>
                {
                    UP_WEB = cmb_UP_WEB.Text;
                }));
            }

            var tk = "";
            if (tb_TK_NAM.InvokeRequired)
            {
                tb_TK_NAM.Invoke(new Action(() =>
                {
                    tk = tb_TK_NAM.Text;
                }));

            }
            var mk = "";
            if (tb_MK_NAM.InvokeRequired)
            {
                tb_MK_NAM.Invoke(new Action(() =>
                {
                    mk = tb_MK_NAM.Text;
                }));

            }
            var ID_UP = "";
            if (tb_ID_UP.InvokeRequired)
            {
                tb_ID_UP.Invoke(new Action(() =>
                {
                    ID_UP = tb_ID_UP.Text;
                }));

            }
            var c2FA_IG = "";
            string profilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Profiles", uid);
            ChromeDriver chromedriver = null;
            try
            {
                chromedriver = Createchromedrive_REG_IG(profilePath);
            resetname:
                chromedriver.Navigate().GoToUrl("https://www.instagram.com/accounts/emailsignup/");
                Thread.Sleep(1000);


                var entermail = chromedriver.FindElements(By.XPath("//input[@name='emailOrPhone']"));
                if (entermail.Count > 0)
                {
                    entermail.LastOrDefault().SendKeys(uid);
                    Thread.Sleep(2000);

                }
                

                var VN_US = "";
                if (cmb_VN_US.InvokeRequired)
                {
                    cmb_VN_US.Invoke(new Action(() =>
                    {
                        VN_US = cmb_VN_US.Text;

                    }));

                }

                string username1 = "";
                string passig1 = "";
      
               if (VN_US == "US")
               {
                    var firstname = File.ReadAllLines("firstname.txt").ToList();
                    Random rnd = new Random();
                    int indexRandom = rnd.Next(0, firstname.Count);
                    var lastname = File.ReadAllLines("lastname.txt").ToList();
                    Random rnd_1 = new Random();
                    int indexRandom_1 = rnd_1.Next(0, lastname.Count);


                    var kytu = File.ReadAllLines("kytu.txt").ToList();
                    Random rnd1 = new Random();
                    int indexRandom1 = rnd1.Next(0, kytu.Count);
                    Random rd = new Random();
                    int randomNumber = rd.Next(1, 10000000);

                    var kytudb = File.ReadAllLines("kytudb.txt").ToList();
                    Random rndkt = new Random();
                    int indexRandom_kt = rndkt.Next(0, kytudb.Count);

                    var Kytupasss = File.ReadAllLines("kytupass.txt").ToList();
                    Random rndktpass = new Random();
                    int indexRandom_ktpasss = rndktpass.Next(0, Kytupasss.Count);

                    var Kytunamedb = File.ReadAllLines("kutuname.txt").ToList();
                    Random rndktnamedb = new Random();
                    int indexRandom_ktnamedb = rndktnamedb.Next(0, Kytunamedb.Count);

                    var kytuchuname = File.ReadAllLines("kytuchuname.txt").ToList();
                    Random rndktnamechu = new Random();
                    int indexRandom_ktnamechu = rndktnamechu.Next(0, kytuchuname.Count);

                    Random rdname = new Random();
                    int randomNumbername = rdname.Next(1, 100000);

                    Random nameV = new Random();
                    int NAME = nameV.Next(0, 4);
                    if (NAME == 1)
                    {
                        try
                        {
                   
                            string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];



                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                            enter_name_pass_IG(fullname, 20, FULLName);


                        }
                        catch { }



                        username1 = firstname[indexRandom].ToLower() + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);

                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
  
                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);





                    }
                    if (NAME == 2)
                    {
                        try
                        {
                            string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                            enter_name_pass_IG(fullname, 20, FULLName);


                        }
                        catch { }

                        Random namedb = new Random();
                        int NAMEDB = namedb.Next(0, 3);
                        if (NAMEDB == 1)
                        {
                            username1 = firstname[indexRandom].ToLower() + "." + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        if (NAMEDB == 2)
                        {
                            username1 = firstname[indexRandom] + "." + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        if (NAMEDB == 0)
                        {
                            username1 = firstname[indexRandom].ToLower() + "." + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
               


                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);

                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1];
                        }

                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);



                    }
                    if (NAME == 0)
                    {
                        try
                        {
                            string fullname = firstname[indexRandom];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                                                            //FULLName.SendKeys(fullname);
                            enter_name_pass_IG(fullname, 20, FULLName);
                        }
                        catch { }
                        username1 = firstname[indexRandom] + "." + lastname[indexRandom_1].ToLower() + randomNumber;
                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);
                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss]+ randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        }

                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);
                    }
                    if (NAME == 3)
                    {
                        try
                        {
                            string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                            enter_name_pass_IG(fullname, 20, FULLName);


                        }
                        catch { }

                        Random namedb = new Random();
                        int NAMEDB = namedb.Next(0, 3);
                        if (NAMEDB == 1)
                        {
                            username1 = firstname[indexRandom].ToLower() + "_" + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        if (NAMEDB == 2)
                        {
                            username1 = firstname[indexRandom] + "_" + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        if (NAMEDB == 0)
                        {
                            username1 = firstname[indexRandom].ToLower() + "_" + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }



                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);

                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1];
                        }

                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);



                    }

                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }

               }
               if (VN_US == "VN")
                {
                    var firstname = File.ReadAllLines("Ten.txt").ToList();
                    Random rnd = new Random();
                    int indexRandom = rnd.Next(0, firstname.Count);
                    var lastname = File.ReadAllLines("Ho.txt").ToList();
                    Random rnd_1 = new Random();
                    int indexRandom_1 = rnd_1.Next(0, lastname.Count);


                    var kytu = File.ReadAllLines("kytu.txt").ToList();
                    Random rnd1 = new Random();
                    int indexRandom1 = rnd1.Next(0, kytu.Count);
                    Random rd = new Random();
                    int randomNumber = rd.Next(1, 10000000);


                    var kytudb = File.ReadAllLines("kytudb.txt").ToList();
                    Random rndkt = new Random();
                    int indexRandom_kt = rndkt.Next(0, kytudb.Count);
                    var Kytupasss = File.ReadAllLines("kytupass.txt").ToList();
                    Random rndktpass = new Random();
                    int indexRandom_ktpasss = rndktpass.Next(0, Kytupasss.Count);

                    var Kytunamedb = File.ReadAllLines("kutuname.txt").ToList();
                    Random rndktnamedb = new Random();
                    int indexRandom_ktnamedb = rndktnamedb.Next(0, Kytunamedb.Count);

                    var kytuchuname = File.ReadAllLines("kytuchuname.txt").ToList();
                    Random rndktnamechu = new Random();
                    int indexRandom_ktnamechu = rndktnamechu.Next(0, kytuchuname.Count);

                    Random rdname = new Random();
                    int randomNumbername = rdname.Next(1, 1000);

                    Random nameV = new Random();
                    int NAME = nameV.Next(0, 4);
                    if (NAME == 1)
                    {
                        try
                        {
                            string fullname = lastname[indexRandom_1] + " " + firstname[indexRandom];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                                                            //FULLName.SendKeys(fullname);
                            enter_name_pass_IG(fullname, 20, FULLName);

                            username1 = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                            IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                            //btnUserName.SendKeys(username1);
                            enter_name_pass_IG(username1, 20, btnUserName);
                            Thread.Sleep(5000);

                            Random passs = new Random();
                            int PASSS = passs.Next(0, 2);
                            if (PASSS == 1)
                            {
                                passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                            }
                            else
                            {
                                passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                            }
                            IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                            //btnpassig.SendKeys(passig1);
                            enter_name_pass_IG(passig1, 20, btnpassig);
                        }
                        catch { }

                    }
                    if (NAME == 2)
                    {

                        try
                        {
                            string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                            enter_name_pass_IG(fullname, 20, FULLName);


                        }
                        catch { }

                        Random namedb = new Random();
                        int NAMEDB = namedb.Next(0, 3);
                        if (NAMEDB == 1)
                        {
                            username1 = firstname[indexRandom].ToLower() + "." + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        if (NAMEDB == 2)
                        {
                            username1 = firstname[indexRandom] + "." + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        if (NAMEDB == 0)
                        {
                            username1 = firstname[indexRandom].ToLower() + "." + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);

                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);

                    }
                    if (NAME == 0)
                    {
                        string fullname = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower();

                        IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                        FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                        FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                                                        //FULLName.SendKeys(fullname);
                        enter_name_pass_IG(fullname, 20, FULLName);

                        username1 = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);
                        Thread.Sleep(5000);

                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                    }
                    if (NAME == 3)
                    {
                        try
                        {
                            string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                            enter_name_pass_IG(fullname, 20, FULLName);


                        }
                        catch { }

                        Random namedb = new Random();
                        int NAMEDB = namedb.Next(0, 3);
                        if (NAMEDB == 1)
                        {
                            username1 = firstname[indexRandom].ToLower() + "_" + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        if (NAMEDB == 2)
                        {
                            username1 = firstname[indexRandom] + "_" + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        if (NAMEDB == 0)
                        {
                            username1 = firstname[indexRandom].ToLower() + "_" + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }



                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);

                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1];
                        }

                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);



                    }


                    Thread.Sleep(5000);
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                }
               if (VN_US == "INDIA")
                {
                    var firstname = File.ReadAllLines("TenAnDo.txt").ToList();
                    Random rnd = new Random();
                    int indexRandom = rnd.Next(0, firstname.Count);
                    var lastname = File.ReadAllLines("HoAnDo.txt").ToList();
                    Random rnd_1 = new Random();
                    int indexRandom_1 = rnd_1.Next(0, lastname.Count);


                    var kytu = File.ReadAllLines("kytu.txt").ToList();
                    Random rnd1 = new Random();
                    int indexRandom1 = rnd1.Next(0, kytu.Count);
                    Random rd = new Random();
                    int randomNumber = rd.Next(1, 10000000);


                    var kytudb = File.ReadAllLines("kytudb.txt").ToList();
                    Random rndkt = new Random();
                    int indexRandom_kt = rndkt.Next(0, kytudb.Count);
                    var Kytupasss = File.ReadAllLines("kytupass.txt").ToList();
                    Random rndktpass = new Random();
                    int indexRandom_ktpasss = rndktpass.Next(0, Kytupasss.Count);

                    var Kytunamedb = File.ReadAllLines("kutuname.txt").ToList();
                    Random rndktnamedb = new Random();
                    int indexRandom_ktnamedb = rndktnamedb.Next(0, Kytunamedb.Count);

                    var kytuchuname = File.ReadAllLines("kytuchuname.txt").ToList();
                    Random rndktnamechu = new Random();
                    int indexRandom_ktnamechu = rndktnamechu.Next(0, kytuchuname.Count);

                    Random rdname = new Random();
                    int randomNumbername = rdname.Next(1, 1000);

                    Random nameV = new Random();
                    int NAME = nameV.Next(0, 4);
                    if (NAME == 1)
                    {
                        try
                        {
                            string fullname = lastname[indexRandom_1] + " " + firstname[indexRandom];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                                                            //FULLName.SendKeys(fullname);
                            enter_name_pass_IG(fullname, 20, FULLName);

                            username1 = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                            IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                            //btnUserName.SendKeys(username1);
                            enter_name_pass_IG(username1, 20, btnUserName);
                            Thread.Sleep(5000);

                            Random passs = new Random();
                            int PASSS = passs.Next(0, 2);
                            if (PASSS == 1)
                            {
                                passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                            }
                            else
                            {
                                passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                            }
                            IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                            //btnpassig.SendKeys(passig1);
                            enter_name_pass_IG(passig1, 20, btnpassig);
                        }
                        catch { }

                    }
                    if (NAME == 2)
                    {

                        try
                        {
                            string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                            enter_name_pass_IG(fullname, 20, FULLName);


                        }
                        catch { }

                        Random namedb = new Random();
                        int NAMEDB = namedb.Next(0, 3);
                        if (NAMEDB == 1)
                        {
                            username1 = firstname[indexRandom].ToLower() + "." + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        if (NAMEDB == 2)
                        {
                            username1 = firstname[indexRandom] + "." + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        if (NAMEDB == 0)
                        {
                            username1 = firstname[indexRandom].ToLower() + "." + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);

                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);

                    }
                    if (NAME == 0)
                    {
                        string fullname = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower();

                        IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                        FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                        FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                                                        //FULLName.SendKeys(fullname);
                        enter_name_pass_IG(fullname, 20, FULLName);

                        username1 = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);
                        Thread.Sleep(5000);

                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                    }
                    if (NAME == 3)
                    {
                        try
                        {
                            string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                            enter_name_pass_IG(fullname, 20, FULLName);


                        }
                        catch { }

                        Random namedb = new Random();
                        int NAMEDB = namedb.Next(0, 3);
                        if (NAMEDB == 1)
                        {
                            username1 = firstname[indexRandom].ToLower() + "_" + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        if (NAMEDB == 2)
                        {
                            username1 = firstname[indexRandom] + "_" + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        if (NAMEDB == 0)
                        {
                            username1 = firstname[indexRandom].ToLower() + "_" + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }



                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);

                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1];
                        }

                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);



                    }


                    Thread.Sleep(5000);
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                }
               if (VN_US == "THAILAND")
                {
                    var firstname = File.ReadAllLines("TenThaiLan.txt").ToList();
                    Random rnd = new Random();
                    int indexRandom = rnd.Next(0, firstname.Count);
                    var lastname = File.ReadAllLines("HoThaiLan.txt").ToList();
                    Random rnd_1 = new Random();
                    int indexRandom_1 = rnd_1.Next(0, lastname.Count);


                    var kytu = File.ReadAllLines("kytu.txt").ToList();
                    Random rnd1 = new Random();
                    int indexRandom1 = rnd1.Next(0, kytu.Count);
                    Random rd = new Random();
                    int randomNumber = rd.Next(1, 10000000);


                    var kytudb = File.ReadAllLines("kytudb.txt").ToList();
                    Random rndkt = new Random();
                    int indexRandom_kt = rndkt.Next(0, kytudb.Count);
                    var Kytupasss = File.ReadAllLines("kytupass.txt").ToList();
                    Random rndktpass = new Random();
                    int indexRandom_ktpasss = rndktpass.Next(0, Kytupasss.Count);

                    var Kytunamedb = File.ReadAllLines("kutuname.txt").ToList();
                    Random rndktnamedb = new Random();
                    int indexRandom_ktnamedb = rndktnamedb.Next(0, Kytunamedb.Count);

                    var kytuchuname = File.ReadAllLines("kytuchuname.txt").ToList();
                    Random rndktnamechu = new Random();
                    int indexRandom_ktnamechu = rndktnamechu.Next(0, kytuchuname.Count);

                    Random rdname = new Random();
                    int randomNumbername = rdname.Next(1, 1000);

                    Random nameV = new Random();
                    int NAME = nameV.Next(0, 4);
                    if (NAME == 1)
                    {
                        try
                        {
                            string fullname = lastname[indexRandom_1] + " " + firstname[indexRandom];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                                                            //FULLName.SendKeys(fullname);
                            enter_name_pass_IG(fullname, 20, FULLName);

                            username1 = lastname[indexRandom_1].ToLower() + firstname[indexRandom].Replace(" ", "").ToLower() + kytu[indexRandom1] + randomNumber;
                            IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                            //btnUserName.SendKeys(username1);
                            enter_name_pass_IG(username1, 20, btnUserName);
                            Thread.Sleep(5000);

                            Random passs = new Random();
                            int PASSS = passs.Next(0, 2);
                            if (PASSS == 1)
                            {
                                passig1 = firstname[indexRandom].Replace(" ", "").ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                            }
                            else
                            {
                                passig1 = firstname[indexRandom].Replace(" ", "").ToLower() + kytu[indexRandom1] + randomNumber;
                            }
                            IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                            //btnpassig.SendKeys(passig1);
                            enter_name_pass_IG(passig1, 20, btnpassig);
                        }
                        catch { }

                    }
                    if (NAME == 2)
                    {

                        try
                        {
                            string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                            enter_name_pass_IG(fullname, 20, FULLName);


                        }
                        catch { }

                        Random namedb = new Random();
                        int NAMEDB = namedb.Next(0, 3);
                        if (NAMEDB == 1)
                        {
                            username1 = firstname[indexRandom].Replace(" ", "").ToLower() + "." + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        if (NAMEDB == 2)
                        {
                            username1 = firstname[indexRandom].Replace(" ", "") + "." + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        if (NAMEDB == 0)
                        {
                            username1 = firstname[indexRandom].Replace(" ", "").ToLower() + "." + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);

                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].Replace(" ", "").ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].Replace(" ", "").ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);

                    }
                    if (NAME == 0)
                    {
                        string fullname = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower();

                        IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                        FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                        FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                                                        //FULLName.SendKeys(fullname);
                        enter_name_pass_IG(fullname, 20, FULLName);

                        username1 = lastname[indexRandom_1].ToLower() + firstname[indexRandom].Replace(" ", "").ToLower() + kytu[indexRandom1] + randomNumber;
                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);
                        Thread.Sleep(5000);

                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].Replace(" ", "").ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].Replace(" ", "").ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                    }
                    if (NAME == 3)
                    {
                        try
                        {
                            string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                            enter_name_pass_IG(fullname, 20, FULLName);


                        }
                        catch { }

                        Random namedb = new Random();
                        int NAMEDB = namedb.Next(0, 3);
                        if (NAMEDB == 1)
                        {
                            username1 = firstname[indexRandom].ToLower() + "_" + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        if (NAMEDB == 2)
                        {
                            username1 = firstname[indexRandom] + "_" + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        if (NAMEDB == 0)
                        {
                            username1 = firstname[indexRandom].ToLower() + "_" + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }



                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);

                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1];
                        }

                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);



                    }


                    Thread.Sleep(5000);
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                }
               if (VN_US == "KOREA")
                {
                    var firstname = File.ReadAllLines("TenHanQuoc.txt").ToList();
                    Random rnd = new Random();
                    int indexRandom = rnd.Next(0, firstname.Count);
                    var lastname = File.ReadAllLines("HoHanQuoc.txt").ToList();
                    Random rnd_1 = new Random();
                    int indexRandom_1 = rnd_1.Next(0, lastname.Count);


                    var kytu = File.ReadAllLines("kytu.txt").ToList();
                    Random rnd1 = new Random();
                    int indexRandom1 = rnd1.Next(0, kytu.Count);
                    Random rd = new Random();
                    int randomNumber = rd.Next(1, 10000000);


                    var kytudb = File.ReadAllLines("kytudb.txt").ToList();
                    Random rndkt = new Random();
                    int indexRandom_kt = rndkt.Next(0, kytudb.Count);
                    var Kytupasss = File.ReadAllLines("kytupass.txt").ToList();
                    Random rndktpass = new Random();
                    int indexRandom_ktpasss = rndktpass.Next(0, Kytupasss.Count);

                    var Kytunamedb = File.ReadAllLines("kutuname.txt").ToList();
                    Random rndktnamedb = new Random();
                    int indexRandom_ktnamedb = rndktnamedb.Next(0, Kytunamedb.Count);

                    var kytuchuname = File.ReadAllLines("kytuchuname.txt").ToList();
                    Random rndktnamechu = new Random();
                    int indexRandom_ktnamechu = rndktnamechu.Next(0, kytuchuname.Count);

                    Random rdname = new Random();
                    int randomNumbername = rdname.Next(1, 1000);

                    Random nameV = new Random();
                    int NAME = nameV.Next(0, 4);
                    if (NAME == 1)
                    {
                        try
                        {
                            string fullname = lastname[indexRandom_1] + " " + firstname[indexRandom];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                                                            //FULLName.SendKeys(fullname);
                            enter_name_pass_IG(fullname, 20, FULLName);

                            username1 = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                            IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                            //btnUserName.SendKeys(username1);
                            enter_name_pass_IG(username1, 20, btnUserName);
                            Thread.Sleep(5000);

                            Random passs = new Random();
                            int PASSS = passs.Next(0, 2);
                            if (PASSS == 1)
                            {
                                passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                            }
                            else
                            {
                                passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                            }
                            IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                            //btnpassig.SendKeys(passig1);
                            enter_name_pass_IG(passig1, 20, btnpassig);
                        }
                        catch { }

                    }
                    if (NAME == 2)
                    {

                        try
                        {
                            string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                            enter_name_pass_IG(fullname, 20, FULLName);


                        }
                        catch { }

                        Random namedb = new Random();
                        int NAMEDB = namedb.Next(0, 3);
                        if (NAMEDB == 1)
                        {
                            username1 = firstname[indexRandom].ToLower() + "." + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        if (NAMEDB == 2)
                        {
                            username1 = firstname[indexRandom] + "." + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        if (NAMEDB == 0)
                        {
                            username1 = firstname[indexRandom].ToLower() + "." + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);

                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);

                    }
                    if (NAME == 0)
                    {
                        string fullname = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower();

                        IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                        FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                        FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                                                        //FULLName.SendKeys(fullname);
                        enter_name_pass_IG(fullname, 20, FULLName);

                        username1 = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);
                        Thread.Sleep(5000);

                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                    }
                    if (NAME == 3)
                    {
                        try
                        {
                            string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                            enter_name_pass_IG(fullname, 20, FULLName);


                        }
                        catch { }

                        Random namedb = new Random();
                        int NAMEDB = namedb.Next(0, 3);
                        if (NAMEDB == 1)
                        {
                            username1 = firstname[indexRandom].ToLower() + "_" + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        if (NAMEDB == 2)
                        {
                            username1 = firstname[indexRandom] + "_" + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        if (NAMEDB == 0)
                        {
                            username1 = firstname[indexRandom].ToLower() + "_" + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }



                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);

                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1];
                        }

                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);



                    }


                    Thread.Sleep(5000);
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                }
               if (VN_US == "CAMPUCHIA")
                {
                    var firstname = File.ReadAllLines("TenCampuchia.txt").ToList();
                    Random rnd = new Random();
                    int indexRandom = rnd.Next(0, firstname.Count);
                    var lastname = File.ReadAllLines("HoCampuchia.txt").ToList();
                    Random rnd_1 = new Random();
                    int indexRandom_1 = rnd_1.Next(0, lastname.Count);


                    var kytu = File.ReadAllLines("kytu.txt").ToList();
                    Random rnd1 = new Random();
                    int indexRandom1 = rnd1.Next(0, kytu.Count);
                    Random rd = new Random();
                    int randomNumber = rd.Next(1, 10000000);


                    var kytudb = File.ReadAllLines("kytudb.txt").ToList();
                    Random rndkt = new Random();
                    int indexRandom_kt = rndkt.Next(0, kytudb.Count);
                    var Kytupasss = File.ReadAllLines("kytupass.txt").ToList();
                    Random rndktpass = new Random();
                    int indexRandom_ktpasss = rndktpass.Next(0, Kytupasss.Count);

                    var Kytunamedb = File.ReadAllLines("kutuname.txt").ToList();
                    Random rndktnamedb = new Random();
                    int indexRandom_ktnamedb = rndktnamedb.Next(0, Kytunamedb.Count);

                    var kytuchuname = File.ReadAllLines("kytuchuname.txt").ToList();
                    Random rndktnamechu = new Random();
                    int indexRandom_ktnamechu = rndktnamechu.Next(0, kytuchuname.Count);

                    Random rdname = new Random();
                    int randomNumbername = rdname.Next(1, 1000);

                    Random nameV = new Random();
                    int NAME = nameV.Next(0, 3);
                    if (NAME == 1)
                    {
                        try
                        {
                            string fullname = lastname[indexRandom_1] + " " + firstname[indexRandom];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                                                            //FULLName.SendKeys(fullname);
                            enter_name_pass_IG(fullname, 20, FULLName);

                            username1 = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                            IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                            //btnUserName.SendKeys(username1);
                            enter_name_pass_IG(username1, 20, btnUserName);
                            Thread.Sleep(5000);

                            Random passs = new Random();
                            int PASSS = passs.Next(0, 2);
                            if (PASSS == 1)
                            {
                                passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                            }
                            else
                            {
                                passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                            }
                            IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                            //btnpassig.SendKeys(passig1);
                            enter_name_pass_IG(passig1, 20, btnpassig);
                        }
                        catch { }

                    }
                    if (NAME == 2)
                    {

                        try
                        {
                            string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                            enter_name_pass_IG(fullname, 20, FULLName);


                        }
                        catch { }

                        Random namedb = new Random();
                        int NAMEDB = namedb.Next(0, 3);
                        if (NAMEDB == 1)
                        {
                            username1 = firstname[indexRandom].ToLower() + "." + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        if (NAMEDB == 2)
                        {
                            username1 = firstname[indexRandom] + "." + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        if (NAMEDB == 0)
                        {
                            username1 = firstname[indexRandom].ToLower() + "." + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);

                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);

                    }
                    if (NAME == 0)
                    {
                        string fullname = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower();

                        IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                        FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                        FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn
                                                                        //FULLName.SendKeys(fullname);
                        enter_name_pass_IG(fullname, 20, FULLName);

                        username1 = lastname[indexRandom_1].ToLower() + firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);
                        Thread.Sleep(5000);

                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                    }
                    if (NAME == 4)
                    {
                        try
                        {
                            string fullname = firstname[indexRandom] + " " + lastname[indexRandom_1];

                            IWebElement FULLName = chromedriver.FindElement(By.Name("fullName"));
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Control + "a"); // Bôi đen tất cả nội dung
                            FULLName.SendKeys(OpenQA.Selenium.Keys.Delete); // Xóa nội dung đã chọn

                            enter_name_pass_IG(fullname, 20, FULLName);


                        }
                        catch { }

                        Random namedb = new Random();
                        int NAMEDB = namedb.Next(0, 3);
                        if (NAMEDB == 1)
                        {
                            username1 = firstname[indexRandom].ToLower() + "_" + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber;
                        }
                        if (NAMEDB == 2)
                        {
                            username1 = firstname[indexRandom] + "_" + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }
                        if (NAMEDB == 0)
                        {
                            username1 = firstname[indexRandom].ToLower() + "_" + lastname[indexRandom_1].ToLower() + Kytunamedb[indexRandom_ktnamedb] + randomNumbername + kytuchuname[indexRandom_ktnamechu];
                        }



                        IWebElement btnUserName = chromedriver.FindElement(By.Name("username"));
                        //btnUserName.SendKeys(username1);
                        enter_name_pass_IG(username1, 20, btnUserName);

                        Thread.Sleep(5000);
                        Random passs = new Random();
                        int PASSS = passs.Next(0, 2);
                        if (PASSS == 1)
                        {
                            passig1 = firstname[indexRandom].ToLower() + Kytupasss[indexRandom_ktpasss] + randomNumber;
                        }
                        else
                        {
                            passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1];
                        }

                        IWebElement btnpassig = chromedriver.FindElement(By.Name("password"));
                        //btnpassig.SendKeys(passig1);
                        enter_name_pass_IG(passig1, 20, btnpassig);
                        Thread.Sleep(5000);



                    }


                    Thread.Sleep(5000);
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                }

                Thread.Sleep(5000);
            singup:
                var Singup = chromedriver.FindElements(By.XPath("//button[@type='submit']"));
                if(Singup.Count > 0)
                {
                    
                    var element = Singup.LastOrDefault();
                    // Cuộn tới phần tử
                    ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                    // Nhấp vào phần tử
                    element.Click();
                    Thread.Sleep(5000);

                }

                var Please_try_another = chromedriver.FindElements(By.XPath("//form/div[7]/div[2]"));
                if (Please_try_another.Count > 0)
                {
                    var text = Please_try_another.LastOrDefault().Text;
                    if (text == "This username isn't available. Please try another."|| text == "Usernames can only use letters, numbers, underscores and periods."|| text.Contains("Usernames can only use letters, numbers, underscores and periods"))
                    {
                        goto resetname;
                    }

                }


                var slecteMoth = chromedriver.FindElements(By.XPath("//select[@title='Month:']"));
                if (slecteMoth.Count > 0)
                {
                    slecteMoth.LastOrDefault().Click();
                    Thread.Sleep(2000);

                    Random rn = new Random();
                    int numberMoth = rn.Next(1, 12);

                    var entermoth = chromedriver.FindElements(By.XPath($"//select[@title='Month:']/option[@value='{numberMoth}']"));
                    if (entermoth.Count > 0)
                    {
                        var element = entermoth.LastOrDefault();
                        // Cuộn tới phần tử
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Nhấp vào phần tử
                        element.Click();
                      
                        Thread.Sleep(2000);

                    }
                }
                else
                {
                    //MessageBox.Show("Spam IP");
                    CustomMessageBox.ShowMessage("SPAM IP", "Cảnh báo", "warning.png", "anhhinhnen.jpg");
                    Thread.Sleep(TimeSpan.FromSeconds(30));
                    goto singup;
                }

                var slecteDay = chromedriver.FindElements(By.XPath("//select[@title='Day:']"));
                if (slecteDay.Count > 0)
                {
                    slecteDay.LastOrDefault().Click();
                    Thread.Sleep(2000);

                    Random rn = new Random();
                    int numberday = rn.Next(1, 31);

                    var enterday = chromedriver.FindElements(By.XPath($"//select[@title='Day:']/option[@value='{numberday}']"));
                    if (enterday.Count > 0)
                    {
                        var element = enterday.LastOrDefault();
                        // Cuộn tới phần tử
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Nhấp vào phần tử
                        element.Click();

                        Thread.Sleep(2000);

                    }
                }

                var slecteyear = chromedriver.FindElements(By.XPath("//select[@title='Year:']"));
                if (slecteDay.Count > 0)
                {
                    slecteDay.LastOrDefault().Click();
                    Thread.Sleep(2000);

                    Random rn = new Random();
                    int numberyear = rn.Next(1975, 2006);

                    var enteryear = chromedriver.FindElements(By.XPath($"//select[@title='Year:']/option[@value='{numberyear}']"));
                    if (enteryear.Count > 0)
                    {
                        var element = enteryear.LastOrDefault();
                        // Cuộn tới phần tử
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Nhấp vào phần tử
                        element.Click();

                        Thread.Sleep(2000);

                    }
                }
                MessageBoxIPVIET.ShowMessage("ĐÔI VỀ IP VIỆT", "IP VIET", "warning.png", "anhcodosaovang.jpg");
                //MessageBox.Show("ĐÔI VỀ IP VIỆT");
                Thread.Sleep(TimeSpan.FromSeconds(5));

               


                var next = chromedriver.FindElements(By.XPath("//div/div/button[text()='Next']"));
                if (next.Count > 0)
                {
                    next.LastOrDefault().Click();
                    Thread.Sleep(2000);


                }
                // Lưu Tab IG
                var originalTabIG = chromedriver.CurrentWindowHandle;


                // Mở tab mới bằng cách sử dụng JavaScript
                ((IJavaScriptExecutor)chromedriver).ExecuteScript("window.open();");

                // Chuyển sang tab mới
                chromedriver.SwitchTo().Window(chromedriver.WindowHandles[1]);

                // Điều hướng đến trang mới (ví dụ: Instagram)
                chromedriver.Navigate().GoToUrl("https://accounts.google.com/");

       
                Thread.Sleep(5000);

                var entergmail = chromedriver.FindElements(By.XPath("//input[@type='email']"));
                if (entergmail.Count > 0)
                {
                    entergmail.LastOrDefault().SendKeys(uid);
                    Thread.Sleep(2000);
                }
                var Next = chromedriver.FindElements(By.XPath("//div/div/button/span[text()='Next']"));
                if (Next.Count > 0)
                {
                    Next.LastOrDefault().Click();
                    Thread.Sleep(2000);

                }

                var enterpassgmail = chromedriver.FindElements(By.XPath("//input[@type='password']"));
                if (enterpassgmail.Count > 0)
                {
                    enterpassgmail.LastOrDefault().SendKeys(password);
                    Thread.Sleep(2000);
                }
                Next = chromedriver.FindElements(By.XPath("//div/div/button/span[text()='Next']"));
                if (Next.Count > 0)
                {
                    Next.LastOrDefault().Click();
                    Thread.Sleep(2000);

                }

                var Comfrim = chromedriver.FindElements(By.XPath("//form/span/input[@name='confirm']"));
                if (Comfrim.Count > 0)
                {
                    Comfrim.LastOrDefault().Click();
                    Thread.Sleep(2000);
                }
                chromedriver.Navigate().GoToUrl("https://mail.google.com/");

                Thread.Sleep(5000);
                var html = chromedriver.PageSource;
                var codehotmail = Regex.Match(html, "data-legacy-last-non-draft-message-id=\".*?\">(.*?) is your Instagram code").Groups[1].Value.ToString();
                if(codehotmail.Contains("Security"))
                {

                    codehotmail = Regex.Match(html, "data-legacy-last-non-draft-message-id=.*?>(\\d+) is your Instagram code<").Groups[1].Value.ToString();
                }
                if (string.IsNullOrEmpty(codehotmail))
                {
                    codehotmail = Regex.Match(html, "data-legacy-last-non-draft-message-id=\".*?\">(.*?) is your Instagram code").Groups[1].Value.ToString();
                }
                if (string.IsNullOrEmpty(codehotmail))
                {
                    codehotmail = Regex.Match(html, "data-legacy-last-non-draft-message-id=\".*?>(.*?) là mã xác nhận của bạ").Groups[1].Value.ToString();
                }
            
                Thread.Sleep(2000);


                // Quay lại tab trước đó (tab gốc)
                chromedriver.SwitchTo().Window(originalTabIG);
                MessageBox.Show("ĐỔI IP USA");
                Thread.Sleep(TimeSpan.FromSeconds(1));
                var entercodemail = chromedriver.FindElements(By.XPath("//input[@name='email_confirmation_code']"));
                if (entercodemail.Count > 0)
                {
                    entercodemail.LastOrDefault().SendKeys(codehotmail);
                    Thread.Sleep(2000);
                }
            next01:
                var next1 = chromedriver.FindElements(By.XPath("//div/div[text()='Next']"));
                if (next1.Count > 0)
                {
                    next1.LastOrDefault().Click();
                    Thread.Sleep(2000);
                }

                Thread.Sleep(TimeSpan.FromSeconds(60));
                var sorry = chromedriver.FindElements(By.XPath("//form/div/div[4]/span"));
                if (sorry.Count > 0)
                {
                    var text = sorry.LastOrDefault().Text;
                    if(text== "Sorry, something went wrong creating your account. Please try again soon."
                        )
                    {
                        chromedriver.Navigate().GoToUrl("https://www.instagram.com/");

                        Thread.Sleep(2000);
                        var enteruser = chromedriver.FindElements(By.XPath("//input[@name='username']"));
                        if (enteruser.Count > 0)
                        {
                            enteruser.LastOrDefault().SendKeys(username1);
                            Thread.Sleep(1000);

                        }

                        var enterpass = chromedriver.FindElements(By.XPath("//input[@name='password']"));
                        if (enterpass.Count > 0)
                        {
                            enterpass.LastOrDefault().SendKeys(passig1);
                            Thread.Sleep(1000);

                        }

                        var login = chromedriver.FindElements(By.XPath("//button[@type='submit']"));
                        if (login.Count > 0)
                        {
                            login.LastOrDefault().Click();
                            Thread.Sleep(TimeSpan.FromSeconds(60));
                        }

                    }
                    if(text == "The IP address you are using has been flagged as an open proxy. If you believe this to be incorrect, please visit https://help.instagram.com/"
                        
                        || text == "Sorry! We're having trouble verifying your confirmation code right now. Please try again later.")
                    {

                        MessageBox.Show("ĐỔI IP USA");
                        Thread.Sleep(TimeSpan.FromSeconds(5));
                        goto next01;

                    }    
                }

       
                if (chromedriver.Url.Contains("https://www.instagram.com/accounts/suspended/")
                    || chromedriver.Url.Contains("https://www.instagram.com/challenge/"))
                {
                    row.Cells["cStatus"].Value = "IG 282";
                    chromedriver.Close();
                    chromedriver.Quit();
                    goto next;
                }
                chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                var uid_ig = Regex.Match(chromedriver.PageSource, "NON_FACEBOOK_USER_ID\":\"(.*?)\"").Groups[1].Value;

                if (uid_ig != "0")
                {
                    row.Cells["cStatus"].Value = "REG IG DONE";
                    var x2FA_IG = "";
                    if (cmb_2FA_IG.InvokeRequired)
                    {
                        cmb_2FA_IG.Invoke(new Action(() =>
                        {
                            x2FA_IG = cmb_2FA_IG.Text;
                        }));

                    }
                    var on_off_2FA = "";
                    if (cmb_ON_OFF_2FAIG.InvokeRequired)
                    {
                        cmb_ON_OFF_2FAIG.Invoke(new Action(() =>
                        {
                            on_off_2FA = cmb_ON_OFF_2FAIG.Text;

                        }));


                    }
        
                    if (on_off_2FA == "ON")
                    {
                        if (x2FA_IG == "Auto_selenium")
                        {

                            row.Cells["cStatus"].Value = "ON 2FA";
                        c2fa:
                            chromedriver.Navigate().GoToUrl("https://accountscenter.instagram.com/password_and_security/two_factor/");
                            Thread.Sleep(10000);
                            while (isStop)
                            {
                                Thread.Sleep(1000);

                            }

                            var select_nameIG = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                            if (select_nameIG.Count > 0)
                            {

                                try
                                {
                                    foreach (var element in select_nameIG)
                                    {
                                        var user = element.Text;
                                        if (user.Contains(username1.ToLower()))
                                        {
                                            element.Click();
                                            Thread.Sleep(5000);
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);

                                            }
                                            var next2 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                                            if (next2.Count > 0)
                                            {
                                                next2.LastOrDefault().Click();
                                                Thread.Sleep(5000);
                                            }
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);

                                            }
                                            var text_2fa = chromedriver.FindElements(By.XPath("//div/div/div[1]/span"));
                                            if (text_2fa.Count > 0)
                                            {
                                                c2FA_IG = text_2fa[12].Text;
                                                Thread.Sleep(5000);
                                                while (isStop)
                                                {
                                                    Thread.Sleep(1000);

                                                }
                                                next2 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                                                if (next2.Count > 0)
                                                {
                                                    next2.LastOrDefault().Click();
                                                    Thread.Sleep(5000);
                                                    while (isStop)
                                                    {
                                                        Thread.Sleep(1000);

                                                    }
                                                    var code = GetCode(c2FA_IG);

                                                    var enter_code_2fa = chromedriver.FindElements(By.XPath("//div/div[1]/input"));
                                                    if (enter_code_2fa.Count > 0)
                                                    {
                                                        enter_code_2fa.LastOrDefault().SendKeys(code);
                                                        Thread.Sleep(2000);
                                                        while (isStop)
                                                        {
                                                            Thread.Sleep(1000);

                                                        }
                                                        next2 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                                                        if (next2.Count > 0)
                                                        {
                                                            next2.LastOrDefault().Click();
                                                            Thread.Sleep(5000);

                                                        }
                                                    }
                                                }

                                            }
                                        }
                                    }
                                }
                                catch { }
                                while (isStop)
                                {
                                    Thread.Sleep(1000);

                                }

                            }
                            else
                            {
                                goto c2fa;
                            }

                        }
                        if (x2FA_IG == "API")
                        {

                            row.Cells["cStatus"].Value = "ON 2FA";
                            var cookiess_ig = chromedriver.Manage().Cookies.AllCookies;
                            var cookiestring_ig = "";
                            foreach (var cookie in cookiess_ig)
                            {
                                cookiestring_ig += cookie.Name + "=" + cookie.Value + ";";
                            }
                            cookiestring_ig = cookiestring_ig.Trim(';');
                            HttpRequest httpRequest = new HttpRequest();
                            httpRequest.AllowAutoRedirect = true;
                            httpRequest.Cookies = new CookieDictionary();
                            httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                            httpRequest.KeepAlive = true;
                            var cookieRaws = cookiestring_ig.Split(';');
                            foreach (var cookieraw in cookieRaws)
                            {
                                var cookieJAr = cookieraw.Split('=');
                                try
                                {
                                    httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);

                                }
                                catch { }
                            }


                            httpRequest.AddHeader("authority", "accountscenter.instagram.com");
                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httpRequest.AddHeader("dpr", "0.800000011920929");
                            httpRequest.AddHeader("priority", "u=0, i");
                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"");
                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"137.0.7151.69\", \"Chromium\";v=\"137.0.7151.69\", \"Not/A)Brand\";v=\"24.0.0.0\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                            httpRequest.AddHeader("sec-fetch-dest", "document");
                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                            httpRequest.AddHeader("sec-fetch-site", "none");
                            httpRequest.AddHeader("sec-fetch-user", "?1");
                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                            httpRequest.AddHeader("viewport-width", "1849");

                            var response = httpRequest.Get("https://accountscenter.instagram.com/password_and_security/");
                            if (response.IsOK)
                            {
                                var response_Str1 = response.ToString();

                                var fb_dtsg = Regex.Match(response_Str1, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                var lsd = Regex.Match(response_Str1, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                var jazoest = Regex.Match(response_Str1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                httpRequest.AddHeader("authority", "accountscenter.instagram.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("referer", "https://accountscenter.instagram.com/password_and_security/");
                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"");
                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"137.0.7151.69\", \"Chromium\";v=\"137.0.7151.69\", \"Not/A)Brand\";v=\"24.0.0.0\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                httpRequest.AddHeader("x-asbd-id", "359341");
                                httpRequest.AddHeader("x-fb-friendly-name", "FXAccountsCenterTwoFactorStartRootQuery");
                                httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                var payload = $"av={uid_ig}&__user=0&__a=1&__req=g&__hs=20246.HYP:accounts_center_pkg.2.1...0&dpr=1&__ccg=GOOD&__rev=1023602993&__s=uor67z:soshtm:h0liak&__hsi=7513111116539934669&__dyn=7xeUmwlEnwn8K2Wmh0no6u5U4e0yoW3q32360CEbo19oe8hw2nVE4W099w8G1Dz81s8hwnU2lwv89k2C1Fwc60D82IzXwae4UaEW0Loco5G0zK1swa-0raazo7u0zEiwaG1LwTwNw4mwr86C1nw4xxW1owLwHwea&__csr=gN2cG2dNaIBikyqp2TbuGYBF4SizXAKTEZh4xfmqJm89LdtsXZAbltGahH89nin8IxfiHAyAGWFpQKWGyBTm9BV3iplLy-oNAiaGAJrzRwAqkF5F6yXgCVp7kB4Z7BKWAAQWiUJalpoHVE_CBWKalaFoyVV-dWyeayEzihmEkmHxuqaUpQ8w05aPAAKZ6BQAVprUB6yXzqAAF3aG1hKU3lwhaU7ueAGdAKXKuXLwnp8xeii6o-ihqy4VWmWG8hqU1aUhw5Qwo80Ta0Q835oOifxCXw21oaEF6y8521pgCFkZ02NE32z4iVolwIKFbw7Pw995ghwzDhU5S1ODDgGp0ya0t50fepaESi3m1jCyEy5945Egx27BOwm1Fo5m1DBsWx928Lobp8hx10am1CAJoGvxSU2wiU0ZalyU58sR2g&__hsdp=g9SkESHjNUeFlADmaACoAAWyJwUe96Vy0zx6EYEg4pVml38jJ3FocOiyHxLZzpV1x-7oGXVF8yh5BUtAyUy9yV8-ECuFWjGu9GEyicOlKuVV9v-ewqob8mwkU7e3GdzE9awPhWx2Eap8boZ28y2-2e48Z3EiG0ujwgUO1pw9m1jwloW0W8G10Dxa0Abwqoc9VFAicw8q5Ufo6meDxG2y1Exi2zwau4fzpEhBx23i6E460RE6K4o&__hblp=0b-cxq2nwoU_x278yexvAgycxGiAawqVohwFzE9US4oc8K7Uvx-dg460oy1UwhUjw8y0xEG0fig2zwkUG0BU5G581ce3m1uwyUGawOxi2-2i3y10wBws6dy8kg3QwAg989UW2216w&__comet_req=24&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1023602993&__spin_b=trunk&__spin_t=1749282497&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=FXAccountsCenterTwoFactorStartRootQuery&variables={{\"interface\":\"IG_WEB\"}}&server_timestamps=true&doc_id=9886639138040137";

                                response = httpRequest.Post("https://accountscenter.instagram.com/api/graphql/", payload, "application/x-www-form-urlencoded");
                                if (response.IsOK)
                                {
                                    var response_Str2 = response.ToString();


                                    httpRequest.AddHeader("authority", "accountscenter.instagram.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("referer", "https://accountscenter.instagram.com/password_and_security/two_factor/");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"137.0.7151.69\", \"Chromium\";v=\"137.0.7151.69\", \"Not/A)Brand\";v=\"24.0.0.0\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("x-asbd-id", "359341");
                                    httpRequest.AddHeader("x-fb-friendly-name", "FXAccountsCenterTwoFactorStartRootQuery");
                                    httpRequest.AddHeader("x-ig-app-id", "936619743392459");

                                    var payload1 = $"av={uid_ig}&__user=0&__a=1&__req=v&__hs=20246.HYP:accounts_center_pkg.2.1...0&dpr=1&__ccg=GOOD&__rev=1023602993&__s=pkx7kx:soshtm:h0liak&__hsi=7513111116539934669&__dyn=7xeUmwlEnwn8K2Wmh0no6u5U4e0yoW3q32360CEbo19oe8hw2nVE4W099w8G1Dz81s8hwnU2lwv89k2C1Fwc60D82IzXwae4UaEW0Loco5G0zK1swa-0raazo7u0zEiwaG1LwTwNw4mwr86C1nw4xxW1owLwHwea&__csr=gN2cG2dNaIBjECCgJOTGL99hdJ8-VbJWfkh8jRCHly2rPnne_p2R9qyAqO2lQBOb8jQGV8FaKGmtbKGEFtRypugQClrULCcp4yGFbmUZo96BahqhEKQ9KmhR9hfhVrKF9deAKbiBmma-qfVFuHyBiGm8KuvzuEzyEG8QAlG55GUnCyK6t2801iIV9bLhFt9emm-9hEKUSF9agOGwkrK0Ro4iK1TzFazpbKXDKXU5Si8jAAxCfAAmExeuBKGy4mK0iK4o1t8620dOwd20NmcAzUpKU0wm2GahEy1gwmk9Glfg0Iq0MEN4Km5obbGiU1YU2ihk4o8VQu1twsFVQaCg8yw7hg3PCiGdAwRwkVEG8xih1q48gxVsE5wqm1lwpVneEigybS2Si4ogg2BwpFbmaDUtK0E4K0fiBoK1i7dgA&__hsdp=g9SkESHjNUeFlADmaACoAAWyJwUe96Vy0zx6EYEg4kqlBgO4XgWh0P9aaK6_SdDA67UtyHLCAy94mnxSiby8CbAzWypWDFeFUCGy98P9mVXDAB_UW1FwIxq1jwsUeESewAG3d7G4awFAwJzQ8y8bU8UgzQexaE1Ve13z85C0Bo5e1lzE3EyE42u4E2gK1FwMDCCh9V826xu3SdwlUWu6Ea86y58ae0FUg-dCx6m48d8qwgo3mwqUhw&__hblp=0b-cxq2nwoU_x278y8BxvAgycxGiAawqVohwFzk2udx632bx-7Uvzk11w68wu84u4U28w8qaw3QA0EU5eaw9u1qxi0j3wRwnE8KayEcEkwLwAwUwg89o71zoy540Z8942i2uewwwhE&__comet_req=24&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1023602993&__spin_b=trunk&__spin_t=1749282497&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=FXAccountsCenterTwoFactorSelectMethodDialogQuery&variables={{\"account_id\":\"{uid_ig}\",\"account_type\":\"INSTAGRAM\",\"interface\":\"IG_WEB\"}}&server_timestamps=true&doc_id=23945068071743323";

                                    response = httpRequest.Post("https://accountscenter.instagram.com/api/graphql/", payload1, "application/x-www-form-urlencoded");
                                    if (response.IsOK)
                                    {
                                        var response_Str3 = response.ToString();


                                        httpRequest.AddHeader("authority", "accountscenter.instagram.com");
                                        httpRequest.AddHeader("accept", "*/*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        httpRequest.AddHeader("referer", "https://accountscenter.instagram.com/password_and_security/two_factor/");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"137.0.7151.69\", \"Chromium\";v=\"137.0.7151.69\", \"Not/A)Brand\";v=\"24.0.0.0\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                        httpRequest.AddHeader("x-asbd-id", "359341");
                                        httpRequest.AddHeader("x-fb-friendly-name", "FXAccountsCenterTwoFactorStartRootQuery");
                                        httpRequest.AddHeader("x-ig-app-id", "936619743392459");

                                        var payload2 = $"av={uid_ig}&__user=0&__a=1&__req=10&__hs=20246.HYP:accounts_center_pkg.2.1...0&dpr=1&__ccg=GOOD&__rev=1023602993&__s=wv20it:soshtm:h0liak&__hsi=7513111116539934669&__dyn=7xeUmwlEnwn8K2Wmh0no6u5U4e0yoW3q32360CEbo19oe8hw2nVE4W099w8G1Dz81s8hwnU2lwv89k2C1Fwc60D82IzXwae4UaEW0Loco5G0zK1swa-0raazo7u0zEiwaG1LwTwNw4mwr86C1nw4xxW1owLwHwea&__csr=gN2cG2dNaIBjED8gJOTGL99hcyifKiXuzR4i4sxGRqlirPjsXZAbkBGahH89nin8IzninAGtaKGmtbKGEFtRypugQClrULCcjh8GGiRKfm2hFiAnpEKQ9KmhR9hfhVrKF9deAKbiBmma-qfVFuHyBiGm8KuvzuEzyEG8QAgyxhqK5VEHxDgy00kHeiiXQqnijBBLykqbKdGiiAcGE56Xwdm14HwtUWiESiXKVXK-1iyF8xeii6o-ihqy4VWmWG8hqU3uBwhEhw5QwkUO0dOwd20NmcAzUpKU0wm2GahEy1gwmk9Glfg0Iq1wwJmUb8N4Km5obbGiU1YU2ihk4o8VQu1twsFVQaCg8yw7hg3PCiGdAwRwkVEG8xih1q48gxVsE5wqm1lwpVneEigybS2Si4ogg2BwpFbmaDUtK0E4K0fiBoK1i7dgA&__hsdp=g9SkESHjNUeFlADmaACoAAWyJwUe96Vy0zx6EUMg4kqlBgOaybgWh0P9aNwrvoSugovxSaK-qi8Ahpu7p8K8yoKifG9DGuAWDyqG8AzcBrDKuin_zE6C2O5E5e1PwWzoW2iEcQuEgG2Ci2Sfgy8wLwzx2fgW4Gw7AU4ecwmo2lwkU5meweyawg9Uiw92U6C32uqp4DAw8q5UfoS1nzFUqwEwq8kwEU2Dx3USq4pogwQxG11wdq1Hx6&__hblp=0b-cxq2nwoU_x278y8BxvAgycxGiAawqVohwFzk2udx632bx-7UOcBzk2S4U1y87y17xe0y86S68G0fig521iwkUG0BU5G58lxq0z87rwRy85mEvUGawOxi2-2i3y10wBws6dy8kg2fwjElwAg989UW2216w&__comet_req=24&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1023602993&__spin_b=trunk&__spin_t=1749282497&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=FXAccountsCenterTwoFactorTOTPQRCodeDialogQuery&variables={{\"account_type\":\"INSTAGRAM\",\"interface\":\"IG_WEB\",\"user_id\":\"{uid_ig}\"}}&server_timestamps=true&doc_id=9428862290574711";

                                        response = httpRequest.Post("https://accountscenter.instagram.com/api/graphql/", payload2, "application/x-www-form-urlencoded");
                                        if (response.IsOK)
                                        {
                                            var response_Str4 = response.ToString();

                                         
                                            httpRequest.AddHeader("authority", "accountscenter.instagram.com");
                                            httpRequest.AddHeader("accept", "*/*");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("priority", "u=1, i");
                                            httpRequest.AddHeader("referer", "https://accountscenter.instagram.com/password_and_security/two_factor/");
                                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"");
                                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"137.0.7151.69\", \"Chromium\";v=\"137.0.7151.69\", \"Not/A)Brand\";v=\"24.0.0.0\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                            httpRequest.AddHeader("x-asbd-id", "359341");
                                            httpRequest.AddHeader("x-fb-friendly-name", "FXAccountsCenterTwoFactorStartRootQuery");
                                            httpRequest.AddHeader("x-ig-app-id", "936619743392459");

                                            var payload3 = $"av={uid_ig}&__user=0&__a=1&__req=12&__hs=20246.HYP:accounts_center_pkg.2.1...0&dpr=1&__ccg=GOOD&__rev=1023602993&__s=wv20it:soshtm:h0liak&__hsi=7513111116539934669&__dyn=7xeUmwlEnwn8K2Wmh0no6u5U4e0yoW3q32360CEbo19oe8hw2nVE4W099w8G1Dz81s8hwnU2lwv89k2C1Fwc60D82IzXwae4UaEW0Loco5G0zK1swa-0raazo7u0zEiwaG1LwTwNw4mwr86C1nw4xxW1owLwHwea&__csr=gN2cG2dNaIBjED8gJOTGL99hcyifFbKTEZh4z98ptilkCYQTe_p2R9qymrO2lQBOb8R8BVd7iRGBDiXGGantoCnAd9Bm-bVz4QiaGAJrzRzUkqkF5SqbJ2rBAtikjQumXGijjFbyQFlByLCz-qnGUFkGBybDDUTG8UGayd948EkmHxuqaUpQ8w05aPAAKZ6BQAVprUB6yXzqAAF3aG1hKU3lwhaU7ueAGdAKXKuXLwkEGi8jAAxCfAAmExeuBKGy4mK0TFo4q4o1t85ecw3sE3gwclz98-6rK085wGyAq8wk85B2qBjQ0b6wo8blK2OchbBxm2OWAK0ve0AAl162et7wno7aut2FA28E1Qk0YVAGzp8do5eqay8kAgmx248una1o6Bwlo6ulPG4A8yZwJAx6440Fo6qiRyF-7rwa1bw3QFmbwkxPk90&__hsdp=g9SkESHjNUeFlADmaACoAAWyJwUe96Vy0zx6EUMg4kqlBgOaybgWh0P9aNwrvoSugovxSaK-qi8Ahpu7p8K8yoKifG9DGuAZ7yqGrAzcBrDKuin_zE6C2O5E5e1PwWzoW2iEcQuEgG2Ci2Sfgy8wLwzx2fgW4Gw7AU4ecwmo2lwkU5mewe2uawg9Uiw92UaUfoc9VFAiui0xEnwZyrwlUWu6Ea86y58ae0FUg-dCx6m48d8qwgo3mwqUhw&__hblp=0b-cxq2nwoV8Hx278y8BxvAgycxGiAawgU9VohwFzk2udx632bx-7UOcBzk2S4U1y87y17xfw8q1Jxyaw3QA1gwkE5eaw9u1qxi5omBw8aU7rwRy85mEvUGawOxi2-2i3y10wBws6dy8kge8fk5U4W5o942i2uewwwhE&__comet_req=24&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1023602993&__spin_b=trunk&__spin_t=1749282497&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useFXSettingsTwoFactorGenerateTOTPKeyMutation&variables={{\"input\":{{\"client_mutation_id\":\"2fc9b66d-a340-4c4b-b785-982206f956c9\",\"actor_id\":\"{uid_ig}\",\"account_id\":\"{uid_ig}\",\"account_type\":\"INSTAGRAM\",\"device_id\":\"device_id_fetch_ig_did\",\"fdid\":\"device_id_fetch_ig_did\"}}}}&server_timestamps=true&doc_id=9837172312995248";

                                            response = httpRequest.Post("https://accountscenter.instagram.com/api/graphql/", payload3, "application/x-www-form-urlencoded");
                                            if (response.IsOK)
                                            {
                                                var response_Str5 = response.ToString();
                                                c2FA_IG = Regex.Match(response_Str5, $"{username1.ToLower()}%3Fsecret%3D(.*?)%26issuer%3DInstagram").Groups[1].Value.ToString();
                                                var code = GetCode(c2FA_IG);
                                                httpRequest.AddHeader("authority", "accountscenter.instagram.com");
                                                httpRequest.AddHeader("accept", "*/*");
                                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                httpRequest.AddHeader("priority", "u=1, i");
                                                httpRequest.AddHeader("referer", "https://accountscenter.instagram.com/password_and_security/two_factor/");
                                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"");
                                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"137.0.7151.69\", \"Chromium\";v=\"137.0.7151.69\", \"Not/A)Brand\";v=\"24.0.0.0\"");
                                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                                httpRequest.AddHeader("x-asbd-id", "359341");
                                                httpRequest.AddHeader("x-fb-friendly-name", "FXAccountsCenterTwoFactorStartRootQuery");
                                                httpRequest.AddHeader("x-ig-app-id", "936619743392459");



                                                var payload4 = $"av={uid_ig}&__user=0&__a=1&__req=18&__hs=20246.HYP:accounts_center_pkg.2.1...0&dpr=1&__ccg=GOOD&__rev=1023602993&__s=p73iez:jtc1om:3i5ias&__hsi=7513123534854321769&__dyn=7xeUmwlEnwn8K2Wmh0no6u5U4e0yoW3q32360CEbo19oe8hw2nVE4W099w8G1Dz81s8hwnU2lwv89k2C1Fwc60D82IzXwae4UaEW0Loco5G0zK1swa-0raazo7u0zEiwaG1LwTwNw4mwr86C1nw4xxW1owLwHwea&__csr=gN2cI9n4GOleysx2TbuGYABFi98-AKXuzR4isAxBR9lirPjsXZAbkBG9pL89nin8IzkynAQtbmGmtbKGEFtRypugQClrULCcjh8GGiRKfmfxhFiAnpEKQ9KmhR9hfhVrKF9deAKbiBmma-qfVFuHyBiGm8KuvzuEzyEG8QAgyxhqK5VEHxDgy00kHeiiXQqnijBBLykqbKdGiiAcGE56Xwdm14HwtUWiESiXKVXK-1iyF8xeii6o-ihqy4VWmWG8hqU3uBwhEhw5QwkUO0dOwd20NmcAzUpKU0wm2GahEy1gwmk9Glfg0Iq1wwJmUb8N4Km5obbGiU1HE4i0AAl162et7wno7aut2FA28E1Qk0YVAGzp8do5eqay8kAgmx248una1o6Bwlo6ulPG4A8yZwJAx6440Fo6qiRyF-7rw9Khbw3QFmbwkxPk90&__hsdp=g9QF4dmQYu3Glp9RyF9C99eEHoe3yhKow8UhGec4156BpkcyEyQeAgcOj8o6TSdDA6ajxSaK-qi8Ahpu7p8K8yoKifG9DGuAZ7yqGrAzcBrDKuin_zE6C2O5E5e1PwWzoW2iEcQuEgG2Ci2Sfgy8wLwzx2fgW4Gw7AU4ecwmo2lwkU5mewe2uawg9Uiw92UaUdAm32uqp4DAw8q5UfoBU5uh29UqwEwq9oW2zwau4fzpEhBx23i6E461CU6S1Hx6&__hblp=0b-cxq2nwoV8Hx278y8BxvAgycxGiAawgU9VohwFyGg9US4oc8K7Uvz8Omdgbojw68wu84u4-0xE6S68G0fig521iwkUG0BU5G58lxqm0wHwtK3m8wlqx_CKawOxi2-2i3y10wBws6dy8kge8fk5U4W5oix50AwDzE884q&__comet_req=24&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1023602993&__spin_b=trunk&__spin_t=1749285388&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useFXSettingsTwoFactorEnableTOTPMutation&variables={{\"input\":{{\"client_mutation_id\":\"45e0ec64-3224-4fda-8984-66fba881e4c2\",\"actor_id\":\"{uid_ig}\",\"account_id\":\"{uid_ig}\",\"account_type\":\"INSTAGRAM\",\"verification_code\":\"{code}\",\"device_id\":\"device_id_fetch_ig_did\",\"fdid\":\"device_id_fetch_ig_did\"}}}}&server_timestamps=true&doc_id=29164158613231327";

                                                response = httpRequest.Post("https://accountscenter.instagram.com/api/graphql/", payload4, "application/x-www-form-urlencoded");
                                                if (response.IsOK)
                                                {
                                                    var response_Str6 = response.ToString();
                                                    if (response_Str6.Contains("xfb_two_factor_enable_totp"))
                                                    {

                                                        row.Cells["cStatus"].Value = "2FA DONE";

                                                    }
                                                }


                                            }
                                        }
                                    }
                                }

                            }



               
                        }
                    



                    }

                    row.Cells["cStatus"].Value = "REG IG DONE";
                    chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                    var cookiess = chromedriver.Manage().Cookies.AllCookies;
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                    string cookiestring = "";
                    foreach (var cookie in cookiess)
                    {
                        cookiestring += cookie.Name + "=" + cookie.Value + ";";
                    }
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                    int add = 0;
                    dgv2_IG.Invoke(new Action(() =>
                    {
                        add = dgv2_IG.Rows.Add((dgv2_IG.RowCount + 1), $"{username1}|{passig1}|{cookiestring}|{c2FA_IG}|{uid}|{password}");
                    }));

                    if(UP_WEB == "ON")
                    {
                        HttpRequest httpRequest = new HttpRequest();
                        httpRequest.Cookies = new CookieDictionary();
                        httpRequest.KeepAlive = true;
                        httpRequest.AllowAutoRedirect = true;
                        httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";


                        // Lấy Thông tin web
                        string domain = "https://nguyenlieuadsfb.com/"; // Thay {domain} với domain của bạn

                        var urlupweb = $"{domain}api/importAccount.php?username={tk}&password={mk}&product={ID_UP}&account={username1}|{passig1}|{cookiestring}|{c2FA_IG}|{uid}|{password}";

                        var response = httpRequest.Get(urlupweb);
                        if (response.IsOK)
                        {
              
                            var responseStr = response.ToString();
                            if (responseStr.Contains("Thêm tài khoản thành công!"))
                            {
                                row.Cells["cStatus"].Value = "UP WEB DONE";
                            }
                            else
                            {
                                row.Cells["cStatus"].Value = "UP WEB FAIL!";
                            }

                        }
                        else
                        {
                            row.Cells["cStatus"].Value = "UP WEB FAIL!";
                        }

                    }

                    if(REG_BM == "ON")
                    {
                        row.Cells["cUID"].Value = username1;
                        row.Cells["cPass"].Value = passig1;
                        row.Cells["c2FAvsCookie"].Value = cookiestring;

                    }

                    StreamWriter sw = new StreamWriter("AccountIGREG.txt", true);
                    sw.WriteLine($"{username1}|{passig1}|{cookiestring}|{c2FA_IG}|{uid}|{password}");
                    sw.Close();
                    while (isStop)
                    {
                        Thread.Sleep(1000);

                    }
                    chromedriver.Manage().Cookies.DeleteAllCookies();
                    chromedriver.Close();
                    chromedriver.Quit();
                    





                }
                else
                {
                    row.Cells["cStatus"].Value = "REG IG FAIL";
                }
            next:
                Thread.Sleep(200);
            }
            catch { }
            finally
            {
                if (chromedriver != null)
                {
                    try
                    {
                        chromedriver.Quit();
                    }
                    catch { }
                    WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                    if (Directory.Exists(profilePath))
                    {
                        try
                        {
                            Directory.Delete(profilePath, true);
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Failed to delete profile {uid}: {ex.Message}");
                        }
                    }
                }
            }
            if (REG_BM == "ON")
            {
                try
                {
                    var username = row.Cells["cUID"].Value.ToString();
                        password = row.Cells["cPass"].Value.ToString();
                    c2FAvsCookie = row.Cells["c2FAvsCookie"].Value.ToString();
                    if (!string.IsNullOrEmpty(c2FAvsCookie))
                    {
                        mail = "";
                        passmail = "";
                        mailkhoiphuc = "";
                        try
                        {
                            mail = row.Cells["cMail"].Value.ToString();
                            passmail = row.Cells["cPassMail"].Value.ToString();
                            mailkhoiphuc = row.Cells["cMailKP"].Value.ToString();
                        }
                        catch { }

                        REG_BM_2025_NEW(row, username, password, c2FAvsCookie, mail, passmail, mailkhoiphuc, c2FA_IG);

                    }

                }
                catch { }

            }


        }

        // TAO TK BM VIA
        private async void bt_Tao_TK_BM_Click_1(object sender, EventArgs e)
        {
            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                TAOTK_BM_VIA(chromeDriver, accountData.Row);
                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);
            }
            catch { }
        }
      

        private void TAOTK_BM_VIA(ChromeDriver chromedriver , DataGridViewRow row)
        {
            try
            {
             
                List<string> IDBM_BACK_UP = new List<string>();

                if (rtb_IDBM_Can_Tao_TK.InvokeRequired)
                {
                    rtb_IDBM_Can_Tao_TK.Invoke(new Action(() =>
                    {
                        IDBM_BACK_UP = rtb_IDBM_Can_Tao_TK.Lines.ToList();
                    }));
                }
                else
                {
                    IDBM_BACK_UP = rtb_IDBM_Can_Tao_TK.Lines.ToList();
                }
                var UID_VIA = row.Cells["cUID"].Value.ToString();
                row.Cells["cStatus"].Value = "TẠO TKQC .....";
                var token_EEAB = "";
                foreach (var IDVIA_IDBM in IDBM_BACK_UP)
                {
                    if (!string.IsNullOrEmpty(IDVIA_IDBM))
                    {
                        try
                        {
                            var IDVIA1 = IDVIA_IDBM.Split('|')[0];

                            var IDBM = IDVIA_IDBM.Split('|')[1];
                            if (UID_VIA == IDVIA1)
                            {
                                var Url = chromedriver.Url;
                                if (!Url.Contains("https://business.facebook.com/billing_hub/accounts?business_id="))
                                {
                                    chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM}&placement=standalone&global_scope_id={IDBM}");

                                }
                                var html = chromedriver.PageSource;
                                token_EEAB = Regex.Match(html, "init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                                if (string.IsNullOrEmpty(token_EEAB))
                                {
                                    MessageBox.Show("Token_EEAG Null ");
                                    if (tb_Token.InvokeRequired)
                                    {
                                        tb_Token.Invoke(new Action(() =>
                                        {
                                            token_EEAB = tb_Token.Text;
                                        }));

                                    }
                                    else
                                    {
                                        token_EEAB = tb_Token.Text;
                                    }
                                }
                                if (string.IsNullOrEmpty(token_EEAB))
                                {
                                    MessageBox.Show("Token_EEAG Null ");
                                    goto uot;
                                }

                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                var cookiestring = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                }
                                cookiestring = cookiestring.Trim(';');
                                HttpRequest httpRequest = new HttpRequest();
                                httpRequest.AllowAutoRedirect = true;
                                httpRequest.Cookies = new CookieDictionary();
                                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                httpRequest.KeepAlive = true;
                                var cookieRaws = cookiestring.Split(';');
                                foreach (var cookieraw in cookieRaws)
                                {
                                    var cookieJAr = cookieraw.Split('=');
                                    try
                                    {
                                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);

                                    }
                                    catch { }
                                }

                                row.Cells["cStatus"].Value = "Tạo TK BM: " + IDBM + ".....";
                                int TTQC = (int)numericUpDown7.Value;
                                for (int k = 0; k < TTQC; k++)
                                {
                                    try
                                    {
                                        httpRequest.AddHeader("authority", "z-p3-graph.facebook.com");
                                        httpRequest.AddHeader("accept", "*/*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                        httpRequest.AddHeader("sec-fetch-site", "none");

                                        var currency = "";
                                        if (cmb_Tien_Te_TK_BM.InvokeRequired)
                                        {
                                            cmb_Tien_Te_TK_BM.Invoke(new Action(() =>
                                            {
                                                currency = cmb_Tien_Te_TK_BM.Text;

                                            }));
                                        }
                                        else
                                        {
                                            currency = cmb_Tien_Te_TK_BM.Text;
                                        }


                                        var name = "";
                                        if (cmb_TEN_TK_BM.InvokeRequired)
                                        {
                                            cmb_TEN_TK_BM.Invoke(new Action(() =>
                                            {
                                                name = cmb_TEN_TK_BM.Text;

                                            }));
                                        }
                                        else
                                        {
                                            name = cmb_TEN_TK_BM.Text;
                                        }


                                        var timezone_id = "";
                                        if (cmb_Mui_Gio_TK_BM.InvokeRequired)
                                        {
                                            cmb_Mui_Gio_TK_BM.Invoke(new Action(() =>
                                            {
                                                timezone_id = cmb_Mui_Gio_TK_BM.Text;

                                            }));
                                        }
                                        else
                                        {
                                            timezone_id = cmb_Mui_Gio_TK_BM.Text;
                                        }



                                        var url_1 = $"https://z-p3-graph.facebook.com/v17.0/{IDBM}/adaccount?access_token={token_EEAB}&__cppo=1&__activeScenarioIDs=[]&__activeScenarios=[]&__interactionsMetadata=[]&_reqName=object:brand/adaccount&_reqSrc=AdAccountActions.brands&ad_account_created_from_bm_flag=true&currency={currency}&end_advertiser={IDBM}&invoicing_emails=[]&locale=vi_VN&media_agency=UNFOUND&method=post&name={name}&partner=UNFOUND&po_number=&pretty=0&suppress_http_code=1&timezone_id={timezone_id}&xref=f240a980fd9969";
                                        var response = httpRequest.Get(url_1);
                                        if (response.IsOK)
                                        {
                                            var responseStr_TK = response.ToString();
                                            if (responseStr_TK.Contains("{\"id\":\"act_"))
                                            {
                                                row.Cells["cStatus"].Value = "Tạo TK BM: " + IDBM + " DONE";
                                            }
                                            else
                                            {
                                                row.Cells["cStatus"].Value = "Tạo TK BM: " + IDBM + " FAIL!";
                                            }
                                        }

                                        int delayttk = (int)n_Delay_TTK.Value;
                                        Thread.Sleep(TimeSpan.FromSeconds(delayttk));
                                    }
                                    catch { }
                                }


                                try
                                {
                                    httpRequest.AddHeader("authority", "graph.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");


                                    var response = httpRequest.Get($"https://graph.facebook.com/v15.0/{IDBM}?access_token={token_EEAB}&fields=id,name,created_time,sharing_eligibility_status,allow_page_management_in_www,business_users{{role,id,name}},owned_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}}");
                                    if (response.IsOK)
                                    {
                                        List<string> ADMin = new List<string>();
                                        var responseSTR6 = response.ToString();
                                        HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                                        doc.LoadHtml(responseSTR6);
                                        JObject jobject = JObject.Parse(responseSTR6);
                                        var businessId = jobject["id"].ToString();
                                        var typeBm = jobject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                        var createdtime = jobject["created_time"].ToString();

                                        var statusBm = jobject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                        var owned_ad_accounts = jobject["owned_ad_accounts"]?["data"];
                                        var currency = "";
                                        var adtrust_dsl = "";
                                        if (owned_ad_accounts != null)
                                        {
                                            var owned_Ad_Accounts = owned_ad_accounts.ToObject<JArray>();
                                            foreach (var userObject in owned_Ad_Accounts)
                                            {
                                                var id = userObject["id"]?.ToString().Replace("act_", "");
                                                var name = userObject["name"]?.ToString();
                                                currency = userObject["currency"]?.ToString();
                                                adtrust_dsl = userObject["adtrust_dsl"]?.ToString();
                                               
                                            }
                                        }



                                        if (rtb_ADMIN_BM_CHECK.InvokeRequired)
                                        {
                                            rtb_ADMIN_BM_CHECK.Invoke(new Action(() =>
                                            {
                                                rtb_ADMIN_BM_CHECK.AppendText(IDBM + $"|{typeBm}|{statusBm}|{adtrust_dsl}|{currency}" + Environment.NewLine);

                                            }));
                                        }


                                    }
                                }
                                catch { }

                            }
                        }
                        catch { }
                    
                    }
                }




            uot:
                Thread.Sleep(1);


            }
            catch { }

        }
        // TAO TK BM IG

        private string TAOTK_BM_IG(string IDBM,ChromeDriver chromedriver, DataGridViewRow row , string username , string password , string c2FAvsCookie , string mail , string passmail, string mailkhoiphuc)
        {
            try
            {
         
                row.Cells["cStatus"].Value = "TẠO TKQC .....";

                chromedriver.Navigate().GoToUrl("https://business.facebook.com/latest/home");
                var ig_asset_id = Regex.Match(chromedriver.PageSource.ToString(), "ig_asset_id\":\"(.*?)\"").Groups[1].Value.ToString();
                var user = Regex.Match(chromedriver.PageSource.ToString(), "user=(.*?)&").Groups[1].Value.ToString();
                var fb_dtsg = Regex.Match(chromedriver.PageSource.ToString(), "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                var lsd = Regex.Match(chromedriver.PageSource.ToString(), "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                var jazoest = Regex.Match(chromedriver.PageSource.ToString(), "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                var cookiestring = "";
                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }
                cookiestring = cookiestring.Trim(';');
                HttpRequest httpRequest = new HttpRequest();
                httpRequest.AllowAutoRedirect = true;
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                httpRequest.KeepAlive = true;
                var cookieRaws = cookiestring.Split(';');
                foreach (var cookieraw in cookieRaws)
                {
                    var cookieJAr = cookieraw.Split('=');
                    try
                    {
                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);

                    }
                    catch { }
                }
                var slt = (int)numericUpDown4.Value;
                for (x=0; x < slt; x++)
                {
                    try
                    {
                        httpRequest.AddHeader("authority", "business.facebook.com");
                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9,vi;q=0.8");
                        httpRequest.AddHeader("dpr", "1");
                        httpRequest.AddHeader("priority", "u=0, i");
                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"");
                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"137.0.7151.120\", \"Chromium\";v=\"137.0.7151.120\", \"Not/A)Brand\";v=\"24.0.0.0\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                        httpRequest.AddHeader("sec-fetch-dest", "document");
                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                        httpRequest.AddHeader("sec-fetch-user", "?1");
                        httpRequest.AddHeader("upgrade-insecure-requests", "1");
                        httpRequest.AddHeader("viewport-width", "785");

                        var response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_assets/?business_id={IDBM}&selected_asset_id={ig_asset_id}&selected_asset_type=instagram-account-v2&ref=CREATE_AD_ACCOUNT");

                        if (response.IsOK)
                        {
                            var responseStr1 = response.ToString();
                            cookiess = chromedriver.Manage().Cookies.AllCookies;
                            cookiestring = "";
                            foreach (var cookie in cookiess)
                            {
                                cookiestring += cookie.Name + "=" + cookie.Value + ";";
                            }
                            cookiestring = cookiestring.Trim(';');

                            httpRequest = new HttpRequest();
                            httpRequest.AllowAutoRedirect = true;
                            httpRequest.Cookies = new CookieDictionary();
                            httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                            EnsurePostWWWLoginHDFull(httpRequest);
                            httpRequest.KeepAlive = true;
                            cookieRaws = cookiestring.Split(';');
                            foreach (var cookieraw in cookieRaws)
                            {
                                var cookieJAr = cookieraw.Split('=');
                                try
                                {
                                    httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                }
                                catch { }
                            }
                            httpRequest.AddHeader("authority", "business.facebook.com");
                            httpRequest.AddHeader("accept", "*/*");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9,vi;q=0.8");
                            httpRequest.AddHeader("origin", "https://business.facebook.com");
                            httpRequest.AddHeader("priority", "u=1, i");
                            httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/business_assets/?business_id={IDBM}&selected_asset_id={ig_asset_id}&selected_asset_type=instagram-account-v2&ref=CREATE_AD_ACCOUNT");
                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"");
                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"137.0.7151.120\", \"Chromium\";v=\"137.0.7151.120\", \"Not/A)Brand\";v=\"24.0.0.0\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                            httpRequest.AddHeader("x-asbd-id", "359341");
                            httpRequest.AddHeader("x-bh-flowsessionid", "upl_wizard_1750671559106_6e27dc21-9328-4967-bdce-8722c7635b55");
                            httpRequest.AddHeader("x-fb-friendly-name", "BizKitSettingsCreateAdAccountMutation");
                            httpRequest.AddHeader("x-fb-upl-sessionid", "upl_1750671559106_3d558941-84d5-4ea8-9ba8-d3a3157fffc5");
                            string filePath = Path.Combine(Application.StartupPath, "NAMEACCOUNTBM.txt");

                            string adAccountName = "";

                            if (File.Exists(filePath))
                            {
                                var lines = File.ReadAllLines(filePath);
                                if (lines.Length > 0)
                                {
                                    Random rnd = new Random();
                                    int index = rnd.Next(lines.Length);
                                    adAccountName = lines[index];
                                }
                                else
                                {
                                    MessageBox.Show("File NAMEACCOUNTBM.txt rỗng.", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                }
                            }
                            else
                            {
                                MessageBox.Show("Không tìm thấy file NAMEACCOUNTBM.txt.", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            }

                            var payload = $"av={user}&__aaid=0&__bid={IDBM}&__user={user}&__a=1&__req=15&__hs=20262.HYP:bizweb_comet_pkg.2.1...0&dpr=1&__ccg=EXCELLENT&__rev=1024078923&__s=taxmoi:yxk1zj:txlso7&__hsi=7519077067466674124&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgE7Ro4C0RUb87C2m3K2y11wBz81bo4a9DwnU8E7a1YwBgao6C1uwiUmw9O48W2a4p8aHwzzXwKwt8jwGzEaE8o4-222SU5G4E5yexfwjES1xwjokG9wOwem323-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1Fg4a4UO0hi7E5y1rwa222220CE2Mw&__csr=g5h2Qp5MP9di9GJYnbjnP9q4haklugylWsPrTIDtt8Dv4R9THAiHJldOZiWnlSJFsBQjZrFrHFWVbin99QACO2itFflLFpV-l7qimGBaKgBejFEylqLLmOjF9ZiULiWip48GmExqtJapdliyGhAEJv9Wh-jCmcAVF7CGFKiWyAHBBBpLFfgxHJ4UxBmRZG-V4EzVQup5yGWBhLWDKDCt6Diuh4BKiagWm8CGdyFbKXzAmVQ4oCuAqeBzp9az9Jku9JGKGKdyaK68nzZ5B9Cyo4uaykQ8wNp9rGAUtggVEGm5HxK2KuuUhK49ogy8qxaazEiDyQ2O268xy5poSm4Erxq1GxSfDyEWUeof8pg4Pz84DWG2l1eqeyEpDwGxy5Hw2yq5Nw2owMxYyoljG0he3Wi8zo0IO0a4gsye5U0S2Ujhkl08-gIiEkk5ywmA7iwX1s5gM5o4SQlw4Kwjrw2kzwFoowll0lE1oE0l-g0NK4o0za222W0HA0C2122BgaEnxEGy4bIEfo9U0xau2Kq2-gw1KUaE08IA03XoPy4Vxgck8wUw-Co26w8N1O1xw8-0C63W0arw1lrwp80lcxe04K87y3CaKFUVk0jK5HFw1HKpU7m9A80U40Ok2q04uo0vexq6j0mE2yc44Hw0I2w5wAbg0cQoK0dUwgXK8gKu0fyxm0cpwtVU0cGm0YC0Mm4Uf818U27w7Owae&__hsdp=geXaja_zlh2qzpekxx0VmigkDk84A98yQx4N1s6oydNxF88E_iJoki4d4KU5Vo4SjhpTwzwnoF2UbU9896oGADxeuibO4J5h9EqxK1pgp85U8Q5Z5G58sDK39emUrBVAGEgbxe1nG15e0bDwkU2lgcU4J0tA2x08C0iu5EpwLw0z7w5Ew5_w1eW0xE1W8&__hblp=0tuui0HEf8gwLwhbGaxiii1Jworxi0T8d86y0xQ1Qxi7FrwTBgS8x3DK2y7o21wlE21xq781bU6V0AxSbK2m78b8884q6orwnoC8wm8K263y33xi3u361dwSwDzpU2Fwq841wqof43u9x-3K2B1G78eEO18wcu3K7U31wo8cUhy8ao1i82qwl8a8766U6qaw8C1gwj8989E761zx24VUK3G1qwLU9VaUS2W2i3qdmh38ozo422K0h23K782Ow-x6dwmoG263-1Bwl9U7e8wpqwXxCi0ja3m0EUaE4V1u0Lo4GE8rw8q3O2a787i2WawrE8U6V1216DwLxa2mVK6VUW2Cbyk1MxK&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1024078923&__spin_b=trunk&__spin_t=1750671553&__jssesw=1&__crn=comet.bizweb.BusinessCometBizSuiteSettingsBusinessAssetsRoute&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsCreateAdAccountMutation&variables={{\"businessID\":\"{IDBM}\",\"adAccountName\":\"A\",\"timezoneID\":\"1\",\"currency\":\"USD\",\"endAdvertiserID\":\"{IDBM}\"}}&server_timestamps=true&doc_id=9236789956426634";
                            response = httpRequest.Post("https://business.facebook.com/api/graphql/?_callFlowletID=3527&_triggerFlowletID=3522&qpl_active_e2e_trace_ids=", payload, "application/x-www-form-urlencoded");

                            if (response.IsOK)
                            {
                                var responseStr = response.ToString();
                                if (responseStr.Contains("business_settings_create_ad_account"))
                                {
                                    row.Cells["cStatus"].Value = "TẠO TK DONE";

                                }
                                else
                                {
                                    row.Cells["cStatus"].Value = "TẠO TK FAIL";
                                }



                            }
                            
                        }

                    }
                    catch { }
                    var delay = (int)numericUpDown3.Value;
                    Thread.Sleep(TimeSpan.FromSeconds(delay));
                }
              
              

                var accessToken_EAAG = "";
                try
                {
                    Thread.Sleep(5000);
                    chromedriver.Navigate().GoToUrl("https://business.facebook.com/billing_hub");
                    var html = chromedriver.PageSource;
                    accessToken_EAAG = Regex.Match(html, "init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                    Thread.Sleep(2000);
                    row.Cells["cStatus"].Value = "Check BM LẠI....";
                    cookiess = chromedriver.Manage().Cookies.AllCookies;
                    cookiestring = "";
                    foreach (var cookie in cookiess)
                    {
                        cookiestring += cookie.Name + "=" + cookie.Value + ";";
                    }
                    cookiestring = cookiestring.Trim(';');

                    httpRequest = new HttpRequest();
                    httpRequest.AllowAutoRedirect = true;
                    httpRequest.Cookies = new CookieDictionary();
                    httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                    EnsurePostWWWLoginHDFull(httpRequest);
                    httpRequest.KeepAlive = true;
                    cookieRaws = cookiestring.Split(';');
                    foreach (var cookieraw in cookieRaws)
                    {
                        var cookieJAr = cookieraw.Split('=');
                        try
                        {
                            httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                        }
                        catch { }
                    }

                    var checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={accessToken_EAAG}&limit=3&fields=%5B%22id%22,%22allow_page_management_in_www%22,%22business_users%7Brole%7D%22,%22sharing_eligibility_status%22,%22owned_ad_accounts.limit(1)%7Bcurrency,adtrust_dsl%7D%22,%22created_time%22,%22name%22,%20%22status%22%5D";
                    var response = httpRequest.Get(checkBM);
                    if (response.IsOK)
                    {
                        var responseSTR6 = response.ToString();
                        HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                        doc.LoadHtml(responseSTR6);
                        JObject jobject = JObject.Parse(responseSTR6);
                        var dataValues = jobject["data"];
                        if (dataValues != null)
                        {
                            var dataValuesArr = dataValues.ToObject<JArray>();
                            foreach (var itemObject in dataValuesArr)
                            {
                                var businessId = itemObject["id"].ToString();
                                var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                var createdtime = itemObject["created_time"].ToString();
                                var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                var nameBM = itemObject["name"].ToString();

                                var currency = "";
                                var adtrustDsl = "";
                                var ownedAcc = itemObject["owned_ad_accounts"]["data"].FirstOrDefault();
                                if (ownedAcc != null)
                                {
                                    currency =ownedAcc["currency"].ToString();
                                    adtrustDsl = ownedAcc["adtrust_dsl"].ToString();
                                }

                                row.Cells["cCheckBM"].Value += $"{businessId}|{typeBm}|{statusBm}|{adtrustDsl} {currency}|";
                                // Đổi màu chữ nếu là BM350
                                if (typeBm == "BM350")
                                {
                                    row.Cells["cCheckBM"].Style.ForeColor = Color.Red; // Đặt màu đỏ
                                }
                                else
                                {
                                    row.Cells["cCheckBM"].Style.ForeColor = Color.Black; // Mặc định màu đen
                                }
                                if(statusBm == "BM Die")
                                {

                                    return "BM Die";

                                }
                         


                            }
                        }
                    }
                    else
                    {
                        row.Cells["cStatus"].Value = $"Check BM FAIL ......";
                    

                    }
                }
                catch
                {
                    row.Cells["cStatus"].Value = $"Check BM FAIL ......";
               
                }

            }
            catch { }
            return "";
        }

        private string TAOTK_BM_IG5bm(List<string> BMLIVE, ChromeDriver chromedriver, DataGridViewRow row, string username, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {
                var TTKBM50 = "";
                if (cmb_TTK_BM50.InvokeRequired)
                {
                    cmb_TTK_BM50.Invoke(new Action(() =>
                    {
                        TTKBM50 = cmb_TTK_BM50.Text;
                    }));


                }
                var TTKBM350 = "";
                if (cmb_TTK_BM350.InvokeRequired)
                {
                    cmb_TTK_BM350.Invoke(new Action(() =>
                    {
                        TTKBM350 = cmb_TTK_BM350.Text;
                    }));


                }

                List<string> TTKDONE = new List<string>();
                if (BMLIVE.Count > 0)
                {
                    row.Cells["cStatus"].Value = "TẠO TKQC .....";

                    chromedriver.Navigate().GoToUrl("https://business.facebook.com/latest/home");
                    var ig_asset_id = Regex.Match(chromedriver.PageSource.ToString(), "ig_asset_id\":\"(.*?)\"").Groups[1].Value.ToString();
                    var user = Regex.Match(chromedriver.PageSource.ToString(), "user=(.*?)&").Groups[1].Value.ToString();
                    var fb_dtsg = Regex.Match(chromedriver.PageSource.ToString(), "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                    var lsd = Regex.Match(chromedriver.PageSource.ToString(), "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                    var jazoest = Regex.Match(chromedriver.PageSource.ToString(), "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                    var cookiess = chromedriver.Manage().Cookies.AllCookies;
                    var cookiestring = "";
                    foreach (var cookie in cookiess)
                    {
                        cookiestring += cookie.Name + "=" + cookie.Value + ";";
                    }
                    cookiestring = cookiestring.Trim(';');
                    HttpRequest httpRequest = new HttpRequest();
                    httpRequest.AllowAutoRedirect = true;
                    httpRequest.Cookies = new CookieDictionary();
                    httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                    httpRequest.KeepAlive = true;
                    var cookieRaws = cookiestring.Split(';');
                    foreach (var cookieraw in cookieRaws)
                    {
                        var cookieJAr = cookieraw.Split('=');
                        try
                        {
                            httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);

                        }
                        catch { }
                    }


                    foreach (var IDBM_LOAI_BM in BMLIVE)
                    {
                        try
                        {

                            var IDBM = IDBM_LOAI_BM.Split('|')[0];
                            var LOAIBM = IDBM_LOAI_BM.Split('|')[1];
                            if(LOAIBM == "BM50")
                            {
                                if(TTKBM50 == "OFF")
                                {
                                    goto taotk;
                                }

                            }
                            else
                            {
                                if (TTKBM350 == "OFF")
                                {
                                    goto taotk;
                                }
                            }

                            var slt = (int)numericUpDown4.Value;
                            for (x = 0; x < slt; x++)
                            {
                                try
                                {

                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9,vi;q=0.8");
                                    httpRequest.AddHeader("dpr", "1");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"137.0.7151.120\", \"Chromium\";v=\"137.0.7151.120\", \"Not/A)Brand\";v=\"24.0.0.0\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "785");

                                    var response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_assets/?business_id={IDBM}&selected_asset_id={ig_asset_id}&selected_asset_type=instagram-account-v2&ref=CREATE_AD_ACCOUNT");

                                    if (response.IsOK)
                                    {
                                        var responseStr1 = response.ToString();
                                        cookiess = chromedriver.Manage().Cookies.AllCookies;
                                        cookiestring = "";
                                        foreach (var cookie in cookiess)
                                        {
                                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                        }
                                        cookiestring = cookiestring.Trim(';');

                                        httpRequest = new HttpRequest();
                                        httpRequest.AllowAutoRedirect = true;
                                        httpRequest.Cookies = new CookieDictionary();
                                        httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                        EnsurePostWWWLoginHDFull(httpRequest);
                                        httpRequest.KeepAlive = true;
                                        cookieRaws = cookiestring.Split(';');
                                        foreach (var cookieraw in cookieRaws)
                                        {
                                            var cookieJAr = cookieraw.Split('=');
                                            try
                                            {
                                                httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                            }
                                            catch { }
                                        }
                                        httpRequest.AddHeader("authority", "business.facebook.com");
                                        httpRequest.AddHeader("accept", "*/*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9,vi;q=0.8");
                                        httpRequest.AddHeader("origin", "https://business.facebook.com");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/business_assets/?business_id={IDBM}&selected_asset_id={ig_asset_id}&selected_asset_type=instagram-account-v2&ref=CREATE_AD_ACCOUNT");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"137.0.7151.120\", \"Chromium\";v=\"137.0.7151.120\", \"Not/A)Brand\";v=\"24.0.0.0\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                        httpRequest.AddHeader("x-asbd-id", "359341");
                                        httpRequest.AddHeader("x-bh-flowsessionid", "upl_wizard_1750671559106_6e27dc21-9328-4967-bdce-8722c7635b55");
                                        httpRequest.AddHeader("x-fb-friendly-name", "BizKitSettingsCreateAdAccountMutation");
                                        httpRequest.AddHeader("x-fb-upl-sessionid", "upl_1750671559106_3d558941-84d5-4ea8-9ba8-d3a3157fffc5");
                                        string filePath = Path.Combine(Application.StartupPath, "NAMEACCOUNTBM.txt");

                                        string adAccountName = "";

                                        if (File.Exists(filePath))
                                        {
                                            var lines = File.ReadAllLines(filePath);
                                            if (lines.Length > 0)
                                            {
                                                Random rnd = new Random();
                                                int index = rnd.Next(lines.Length);
                                                adAccountName = lines[index];
                                            }
                                            else
                                            {
                                                MessageBox.Show("File NAMEACCOUNTBM.txt rỗng.", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                            }
                                        }
                                        else
                                        {
                                            MessageBox.Show("Không tìm thấy file NAMEACCOUNTBM.txt.", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        }

                                        var payload = $"av={user}&__aaid=0&__bid={IDBM}&__user={user}&__a=1&__req=15&__hs=20262.HYP:bizweb_comet_pkg.2.1...0&dpr=1&__ccg=EXCELLENT&__rev=1024078923&__s=taxmoi:yxk1zj:txlso7&__hsi=7519077067466674124&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgE7Ro4C0RUb87C2m3K2y11wBz81bo4a9DwnU8E7a1YwBgao6C1uwiUmw9O48W2a4p8aHwzzXwKwt8jwGzEaE8o4-222SU5G4E5yexfwjES1xwjokG9wOwem323-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1Fg4a4UO0hi7E5y1rwa222220CE2Mw&__csr=g5h2Qp5MP9di9GJYnbjnP9q4haklugylWsPrTIDtt8Dv4R9THAiHJldOZiWnlSJFsBQjZrFrHFWVbin99QACO2itFflLFpV-l7qimGBaKgBejFEylqLLmOjF9ZiULiWip48GmExqtJapdliyGhAEJv9Wh-jCmcAVF7CGFKiWyAHBBBpLFfgxHJ4UxBmRZG-V4EzVQup5yGWBhLWDKDCt6Diuh4BKiagWm8CGdyFbKXzAmVQ4oCuAqeBzp9az9Jku9JGKGKdyaK68nzZ5B9Cyo4uaykQ8wNp9rGAUtggVEGm5HxK2KuuUhK49ogy8qxaazEiDyQ2O268xy5poSm4Erxq1GxSfDyEWUeof8pg4Pz84DWG2l1eqeyEpDwGxy5Hw2yq5Nw2owMxYyoljG0he3Wi8zo0IO0a4gsye5U0S2Ujhkl08-gIiEkk5ywmA7iwX1s5gM5o4SQlw4Kwjrw2kzwFoowll0lE1oE0l-g0NK4o0za222W0HA0C2122BgaEnxEGy4bIEfo9U0xau2Kq2-gw1KUaE08IA03XoPy4Vxgck8wUw-Co26w8N1O1xw8-0C63W0arw1lrwp80lcxe04K87y3CaKFUVk0jK5HFw1HKpU7m9A80U40Ok2q04uo0vexq6j0mE2yc44Hw0I2w5wAbg0cQoK0dUwgXK8gKu0fyxm0cpwtVU0cGm0YC0Mm4Uf818U27w7Owae&__hsdp=geXaja_zlh2qzpekxx0VmigkDk84A98yQx4N1s6oydNxF88E_iJoki4d4KU5Vo4SjhpTwzwnoF2UbU9896oGADxeuibO4J5h9EqxK1pgp85U8Q5Z5G58sDK39emUrBVAGEgbxe1nG15e0bDwkU2lgcU4J0tA2x08C0iu5EpwLw0z7w5Ew5_w1eW0xE1W8&__hblp=0tuui0HEf8gwLwhbGaxiii1Jworxi0T8d86y0xQ1Qxi7FrwTBgS8x3DK2y7o21wlE21xq781bU6V0AxSbK2m78b8884q6orwnoC8wm8K263y33xi3u361dwSwDzpU2Fwq841wqof43u9x-3K2B1G78eEO18wcu3K7U31wo8cUhy8ao1i82qwl8a8766U6qaw8C1gwj8989E761zx24VUK3G1qwLU9VaUS2W2i3qdmh38ozo422K0h23K782Ow-x6dwmoG263-1Bwl9U7e8wpqwXxCi0ja3m0EUaE4V1u0Lo4GE8rw8q3O2a787i2WawrE8U6V1216DwLxa2mVK6VUW2Cbyk1MxK&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1024078923&__spin_b=trunk&__spin_t=1750671553&__jssesw=1&__crn=comet.bizweb.BusinessCometBizSuiteSettingsBusinessAssetsRoute&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsCreateAdAccountMutation&variables={{\"businessID\":\"{IDBM}\",\"adAccountName\":\"A\",\"timezoneID\":\"1\",\"currency\":\"USD\",\"endAdvertiserID\":\"{IDBM}\"}}&server_timestamps=true&doc_id=9236789956426634";
                                        response = httpRequest.Post("https://business.facebook.com/api/graphql/?_callFlowletID=3527&_triggerFlowletID=3522&qpl_active_e2e_trace_ids=", payload, "application/x-www-form-urlencoded");

                                        if (response.IsOK)
                                        {
                                            var responseStr = response.ToString();
                                            if (responseStr.Contains("business_settings_create_ad_account"))
                                            {
                                                row.Cells["cStatus"].Value = $"TẠO TK BM {IDBM} DONE";
                                                TTKDONE.Add(IDBM);
                                            }
                                            else
                                            {
                                                row.Cells["cStatus"].Value = $"TẠO TK BM {IDBM} FAIL";
                                            }



                                        }

                                    }

                                }
                                catch { }
                                var delay = (int)numericUpDown3.Value;
                                Thread.Sleep(TimeSpan.FromSeconds(delay));
                            }
                        taotk:
                            Thread.Sleep(1);
                        }
                        catch { }
                     
                    }


                    int checklaibm = 0;
                checklai:
                    var accessToken_EAAG = "";
                    try
                    {
                        Thread.Sleep(5000);
                        chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={BMLIVE[0]}&placement=standalone&global_scope_id={BMLIVE[1]}");
                        var html = chromedriver.PageSource;
                        accessToken_EAAG = Regex.Match(html, "init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                        Thread.Sleep(2000);
                        row.Cells["cStatus"].Value = "Check BM LẠI....";
                        cookiess = chromedriver.Manage().Cookies.AllCookies;
                        cookiestring = "";
                        foreach (var cookie in cookiess)
                        {
                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                        }
                        cookiestring = cookiestring.Trim(';');

                        httpRequest = new HttpRequest();
                        httpRequest.AllowAutoRedirect = true;
                        httpRequest.Cookies = new CookieDictionary();
                        httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                        EnsurePostWWWLoginHDFull(httpRequest);
                        httpRequest.KeepAlive = true;
                        cookieRaws = cookiestring.Split(';');
                        foreach (var cookieraw in cookieRaws)
                        {
                            var cookieJAr = cookieraw.Split('=');
                            try
                            {
                                httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                            }
                            catch { }
                        }

                        row.Cells["cCheckBM"].Value = ""; // Xóa toàn bộ dữ liệu cũ
                        List<string> BM350 = new List<string>();
                        var checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={accessToken_EAAG}&limit=10&fields=%5B%22id%22,%22allow_page_management_in_www%22,%22business_users%7Brole%7D%22,%22sharing_eligibility_status%22,%22owned_ad_accounts.limit(1)%7Bcurrency,adtrust_dsl%7D%22,%22created_time%22,%22name%22,%20%22status%22%5D";
                        var response = httpRequest.Get(checkBM);
                        if (response.IsOK)
                        {
                            var responseSTR6 = response.ToString();
                            HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                            doc.LoadHtml(responseSTR6);
                            JObject jobject = JObject.Parse(responseSTR6);
                            var dataValues = jobject["data"];
                            if (dataValues != null)
                            {
                                var dataValuesArr = dataValues.ToObject<JArray>();
                                foreach (var itemObject in dataValuesArr)
                                {
                                    var businessId = itemObject["id"].ToString();
                                    var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                    var createdtime = itemObject["created_time"].ToString();
                                    var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                    var nameBM = itemObject["name"].ToString();

                                    var currency = "";
                                    var adtrustDsl = "";
                                    try
                                    {
                                        var ownedAcc = itemObject["owned_ad_accounts"]["data"].FirstOrDefault();
                                        if (ownedAcc != null)
                                        {
                                            currency = ownedAcc["currency"].ToString();
                                            adtrustDsl = ownedAcc["adtrust_dsl"].ToString();
                                        }
                                    }
                                    catch { }

                                    row.Cells["cCheckBM"].Value += $"{businessId}|{typeBm}|{statusBm}|{adtrustDsl}|{currency}|";
                                    // Đổi màu chữ nếu là BM350
                                    if (typeBm == "BM350")
                                    {
                                        BM350.Add(businessId);
                                        row.Cells["cCheckBM"].Style.ForeColor = Color.Red; // Đặt màu đỏ
                                    }
                                    else
                                    {
                                        row.Cells["cCheckBM"].Style.ForeColor = Color.Black; // Mặc định màu đen
                                    }
                                    if (statusBm == "BM Die")
                                    {

                                        return "BM Die";

                                    }
                                    if (BM350.Count > 0)
                                    {
                                        var color350 = "";
                                        if (cmb_color350.InvokeRequired)
                                        {
                                            cmb_color350.Invoke(new Action(() =>
                                            {
                                                color350 = cmb_color350.Text;
                                            }));
                                        }
                                        row.Cells["cCheckBM"].Style.ForeColor = Color.FromName(color350);
                                    }


                                }
                            }
                        }
                        else
                        {
                            checklaibm++;
                            row.Cells["cStatus"].Value = $"Check BM FAIL ......";
                            if (checklaibm > 5)
                            {
                                row.Cells["cStatus"].Value = $"TẠO TK {TTKDONE.Count}/{BMLIVE.Count} DONE";
                                return "";
                            }
                            goto checklai;
                           
                        }
                    }
                    catch
                    {
                        checklaibm++;
                        row.Cells["cStatus"].Value = $"Check BM FAIL ......";
                        if (checklaibm > 5)
                        {
                            return "";
                        }
                        goto checklai;
                    }


                }

                row.Cells["cStatus"].Value = $"TẠO TK {TTKDONE.Count}/{BMLIVE.Count} DONE";
            }
            catch { }
            return "";
        }

        private void enter_name_pass_IG(string text ,int x,IWebElement element)
        {

            try
            {
                foreach(var z in text)
                {

                    element.SendKeys(z.ToString());
                    Thread.Sleep(x);
                }
            }
            catch { }



        }

      


        //LOAD BM
        private void bt_filter_Click(object sender, EventArgs e)
        {

            foreach (DataGridViewRow row_BM in dgv_BM.Rows)
            {
                try
                {
                    var IDBM = "";
                    try
                    {
                        IDBM = row_BM.Cells[2].Value?.ToString().Trim();
                    }
                    catch { }

                    if (!string.IsNullOrEmpty(IDBM))
                    {
                        row_BM.Cells["cSelectBM"].Value = false;
                    }
                }
                catch { }
            }
            // Lấy nội dung từ TextBox (giả sử là RichTextBox)
            string inputText = rtb_IDBM_FILTER.Text?.Trim() ?? "";

            // Tách theo từng dòng, loại bỏ dòng rỗng và trim từng dòng
            var searchIDs = inputText
                .Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                .Select(id => id.Trim())
                .Where(id => !string.IsNullOrEmpty(id))
                .ToList();

            foreach (DataGridViewRow row_BM in dgv_BM.Rows)
            {
                try
                {
                    var IDBM = "";
                    try
                    {
                        IDBM = row_BM.Cells[2].Value?.ToString().Trim();
                    }
                    catch { }

                    if (!string.IsNullOrEmpty(IDBM) && searchIDs.Contains(IDBM))
                    {
                        row_BM.Cells["cSelectBM"].Value = true;
                    }
                }
                catch { }
            }
        }

        private async void lOADALLBMVIAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                LOAD_BM(chromeDriver, accountData.Row);

                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);
            }
            catch { }
        }

        private int check_BM = 0;
        private void LOAD_BM(ChromeDriver chromedriver, DataGridViewRow row)
        {
            try
            {
                check_BM = 0;
                int Y = 1;
                List<string> ID_ALL_BM = new List<string>();
                List<string> IDBM_LIVE = new List<string>();
                List<string> IDBM_DIE = new List<string>();
                var UID_VIA = row.Cells["cUID"].Value.ToString();
                var LOAD_API = "";
                if (cmb_LOAD_API_CHROME.InvokeRequired)
                {
                    cmb_LOAD_API_CHROME.Invoke(new Action(() =>
                    {
                        LOAD_API = cmb_LOAD_API_CHROME.Text;
                    }));
                }
                var token_EEAB = "";
                if (LOAD_API == "CHROME")
                {
                    chromedriver.Navigate().GoToUrl("https://adsmanager.facebook.com/adsmanager/manage/campaigns");
                    var html = chromedriver.PageSource;
                    token_EEAB = Regex.Match(html, "window\\.__accessToken=\"(.*?)\"").Groups[1].Value.ToString();
                    if (string.IsNullOrEmpty(token_EEAB))
                    {
                        chromedriver.Navigate().GoToUrl("https://business.facebook.com/latest/settings/business_users");
                        var html1 = chromedriver.PageSource;
                        token_EEAB = Regex.Match(html1, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                    }
                    if (string.IsNullOrEmpty(token_EEAB))
                    {
                        while (string.IsNullOrEmpty(token_EEAB))
                        {
                            try
                            {
                                MessageBox.Show("TOKEN EEAG NULL");

                                if (tb_EEAG_LOAD_BM.InvokeRequired)
                                {
                                    tb_EEAG_LOAD_BM.Invoke(new Action(() =>
                                    {
                                        token_EEAB = tb_EEAG_LOAD_BM.Text;
                                    }));

                                }
                                else
                                {
                                    token_EEAB = tb_EEAG_LOAD_BM.Text;
                                }
                            }
                            catch { }


                        }
                    }
                }

                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                var cookiestring = "";
                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }
                cookiestring = cookiestring.Trim(';');
                HttpRequest httpRequest = new HttpRequest();
                httpRequest.AllowAutoRedirect = true;
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                httpRequest.KeepAlive = true;
                var cookieRaws = cookiestring.Split(';');
                foreach (var cookieraw in cookieRaws)
                {
                    var cookieJAr = cookieraw.Split('=');
                    try
                    {
                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                    }
                    catch { }
                }

                if (LOAD_API == "API")
                {
                    try
                    {
                        var html = chromedriver.PageSource;
                        var ad_account_id = Regex.Match(html, "ad_account_id\":\"(.*?)\"").Groups[1].Value.ToString();
                        httpRequest.AddHeader("authority", "adsmanager.facebook.com");
                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httpRequest.AddHeader("dpr", "1");
                        httpRequest.AddHeader("priority", "u=0, i");
                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.108\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.108\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                        httpRequest.AddHeader("sec-fetch-dest", "document");
                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                        httpRequest.AddHeader("sec-fetch-site", "none");
                        httpRequest.AddHeader("sec-fetch-user", "?1");
                        httpRequest.AddHeader("upgrade-insecure-requests", "1");
                        httpRequest.AddHeader("viewport-width", "1177");

                        var response1 = httpRequest.Get($"https://adsmanager.facebook.com/adsmanager/manage/campaigns?act={ad_account_id}&nav_entry_point=lep_233&nav_source=unknown#");
                        if (response1.IsOK)
                        {
                            var response1STR = response1.ToString();
                            token_EEAB = Regex.Match(response1STR, "window.__accessToken=\"(.*?)\"").Groups[1].Value.ToString();

                        }
                        if (string.IsNullOrEmpty(token_EEAB))
                        {
                            while (string.IsNullOrEmpty(token_EEAB))
                            {
                                try
                                {
                                    MessageBox.Show("TOKEN EEAG NULL");

                                    if (tb_EEAG_LOAD_BM.InvokeRequired)
                                    {
                                        tb_EEAG_LOAD_BM.Invoke(new Action(() =>
                                        {
                                            token_EEAB = tb_EEAG_LOAD_BM.Text;
                                        }));

                                    }
                                    else
                                    {
                                        token_EEAB = tb_EEAG_LOAD_BM.Text;
                                    }
                                }
                                catch { }


                            }
                        }
                    }
                    catch { }
  

                }

          
                var afterValue = "";


            checkBMGo:
                int sl_BM_LOAD = (int)SL_BM_LOAD.Value;
                httpRequest.AddHeader("authority", "adsmanager.facebook.com");
                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httpRequest.AddHeader("cache-control", "max-age=0");
                httpRequest.AddHeader("dpr", "0.800000011920929");
                httpRequest.AddHeader("priority", "u=0, i");
                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                httpRequest.AddHeader("sec-fetch-dest", "document");
                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                httpRequest.AddHeader("sec-fetch-user", "?1");
                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                httpRequest.AddHeader("viewport-width", "1411");

           
                row.Cells["cStatus"].Value = "Check BM .....";

                // Check BM


                var checkBM = "";
                if (string.IsNullOrEmpty(afterValue))
                {

                    checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={token_EEAB}&limit={sl_BM_LOAD}&fields=id,name,created_time,status,business_users{{role,id,name}},owned_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}},shared_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}},sharing_eligibility_status,allow_page_management_in_www";
                }
                else
                {
                    checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={token_EEAB}&limit={sl_BM_LOAD}&fields=id,name,created_time,status,business_users{{role,id,name}},owned_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}},shared_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}},sharing_eligibility_status,allow_page_management_in_www&pretty=1&after={afterValue}";
                }

                    List<string> ADMIN = new List<string>();
                var response = httpRequest.Get(checkBM);
                if (response.IsOK)
                {
                    var responseSTR6 = response.ToString();
                    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                    doc.LoadHtml(responseSTR6);
                    JObject jobject = JObject.Parse(responseSTR6);
                    var dataValues = jobject["data"];
                    if (dataValues != null)
                    {
                        var dataValuesArr = dataValues.ToObject<JArray>();
                        foreach (var itemObject in dataValuesArr)
                        {
                            try
                            {
                                ADMIN = new List<string>();
                                var businessId = itemObject["id"].ToString();
                                foreach (var checkidbm in ID_ALL_BM)
                                {
                                    if (checkidbm == businessId)
                                    {
                                        goto next;
                                    }
                                }
                                ID_ALL_BM.Add(businessId);
                                var ad_account_creation_limit = "";
                                try
                                {
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.54\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.54\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "863");

                             
                                    var link_get4 = $"https://business.facebook.com/latest/settings/business_info?business_id={businessId}";

                                    response = httpRequest.Get(link_get4);
                                    if (response.IsOK)
                                    {
                                        try
                                        {
                                            var responseStr = response.ToString();
                                            ad_account_creation_limit = Regex.Match(responseStr, "\"ad_account_creation_limit\":(.*?)},").Groups[1].Value.ToString();
                                            ad_account_creation_limit = $"BM {ad_account_creation_limit}";
                                        }
                                        catch { }

                                    }
                                }
                                catch { }
                           

                                var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                var createdtime = itemObject["created_time"].ToString();
                                var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                var business_users = itemObject["business_users"]?["data"];


                                if (business_users != null)
                                {
                                    var businessUsersArr = business_users.ToObject<JArray>();
                                    foreach (var userObject in businessUsersArr)
                                    {
                                        var role = userObject["role"]?.ToString();
                                        var userId = userObject["id"]?.ToString();
                                        var userName = userObject["name"]?.ToString();
                                        ADMIN.Add(userName);
                                    }
                                }
                                List<string> TK = new List<string>();
                                List<string> STK_BM = new List<string>();
                                var TK_BM = "";
                                // CHECK TK
                                try
                                {
                                    var owned_ad_accounts = itemObject["owned_ad_accounts"]?["data"];

                                    if (owned_ad_accounts != null)
                                    {
                                        var owned_Ad_Accounts = owned_ad_accounts.ToObject<JArray>();
                                        foreach (var userObject in owned_Ad_Accounts)
                                        {
                                            var id = userObject["id"]?.ToString().Replace("act_", "");
                                            var name = userObject["name"]?.ToString();
                                            var currency = userObject["currency"]?.ToString();
                                            var adtrust_dsl = userObject["adtrust_dsl"]?.ToString();
                                            TK_BM = $"{id}|{adtrust_dsl}|{currency}";
                                            TK.Add($"{id}|{adtrust_dsl}|{currency}");
                                            STK_BM.Add(id);
                                        }
                                    }

                                }
                                catch { }





                                if (statusBm == "BM Live")
                                {
                                    IDBM_LIVE.Add(businessId);
                                }
                                else
                                {
                                    IDBM_DIE.Add(businessId);
                                }
                                var nameBM = itemObject["name"].ToString();



                                int add_1 = 0;
                                dgv_BM.Invoke(new Action(() =>
                                {
                                    add_1 = dgv_BM.Rows.Add((dgv_BM.RowCount + 1), UID_VIA, businessId, nameBM, statusBm, typeBm, ad_account_creation_limit, createdtime, ADMIN.Count, $"{STK_BM.Count}|{TK_BM}");
                                }));


                            }
                            catch { }
                      




                        }
                    }

                    int delay = (int)delay_LOAD_BM.Value;
                    Thread.Sleep(TimeSpan.FromSeconds(delay));
                    int checkAC = Y * sl_BM_LOAD;
                    if (ID_ALL_BM.Count == checkAC)
                    {
                        Y++;
                        var pagingValues = jobject["paging"];
                        if (pagingValues != null)
                        {
                            afterValue = pagingValues["cursors"]?["after"]?.ToString();
                            goto checkBMGo;
                        }
                    }

                }
                else
                {
                    check_BM++;
                    if (check_BM < 3)
                    {
                        goto checkBMGo;
                    }
                }
            next:
                int add_2 = 0;
                dgv_BM.Invoke(new Action(() =>
                {
                    add_2 = dgv_BM.Rows.Add((dgv_BM.RowCount + 1), $"VIA:{UID_VIA}|Tổng:LIVE|{IDBM_LIVE.Count}|DIE|{IDBM_DIE.Count}");
                }));

            }
            catch { }
        }


        // LOAD ACC
        private async void lOADTKDONGToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                LOAD_ACCOUNT_BM(chromeDriver, accountData.Row);
                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);
            }
            catch { }
        }
   
        private int checktk = 0;

        private void LOAD_ACCOUNT_BM(ChromeDriver chromedriver, DataGridViewRow row)
        {
            try
            {
                checktk = 0;
                foreach (DataGridViewRow row_BM in dgv_BM.Rows)
                {

                    var IDBM = "";
                    try
                    {
                        IDBM = row_BM.Cells[2].Value.ToString();
                    }
                    catch { }


                    // Kiểm tra xem ô trong cột "cSelectBM" có giá trị true (kiểu bool) không
                    if (row_BM.Cells["cSelectBM"].Value is bool && (bool)row_BM.Cells["cSelectBM"].Value)
                    {
                        List<string> ACCUONT = new List<string>();
                        List<string> AC_LIVE = new List<string>();
                        List<string> AC_DIE = new List<string>();
                        List<string> AC_CLOSED = new List<string>();
                        int Y = 1;
                        // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                        chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM}");
                        var html = chromedriver.PageSource;
                        var token_EEAG = "";
                        token_EEAG = Regex.Match(html, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                        if (string.IsNullOrEmpty(token_EEAG))
                        {
                            chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM}&placement=standalone&global_scope_id={IDBM}");
                            var html1 = chromedriver.PageSource;
                            token_EEAG = Regex.Match(html1, "\"init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                        }
                        if (string.IsNullOrEmpty(token_EEAG))
                        {
                            //MessageBox.Show("Lấy Token EAAG FAIL!");
                            goto uot1;

                        }

                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                        var cookiestring = "";
                        foreach (var cookie in cookiess)
                        {
                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                        }
                        cookiestring = cookiestring.Trim(';');
                        HttpRequest httpRequest = new HttpRequest();
                        httpRequest.AllowAutoRedirect = true;
                        httpRequest.Cookies = new CookieDictionary();
                        httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                        httpRequest.KeepAlive = true;
                        var cookieRaws = cookiestring.Split(';');
                        foreach (var cookieraw in cookieRaws)
                        {
                            var cookieJAr = cookieraw.Split('=');
                            try
                            {
                                httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);

                            }
                            catch { }
                        }
                        #region
                        //httpRequest.AddHeader("authority", "graph.facebook.com");
                        //httpRequest.AddHeader("accept", "*/*");
                        //httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        //httpRequest.AddHeader("priority", "u=1, i");
                        //httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                        //httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        //httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        //httpRequest.AddHeader("sec-fetch-dest", "empty");
                        //httpRequest.AddHeader("sec-fetch-mode", "cors");
                        //httpRequest.AddHeader("sec-fetch-site", "none");

                        //var URL = $"https://graph.facebook.com/v14.0/me/businesses?limit=99999&access_token={token_EEAG}";
                        //var response = httpRequest.Get(URL);
                        //if (response.IsOK)
                        //{
                        //    var responseStr1 = response.ToString();

                        //    httpRequest.AddHeader("authority", "graph.facebook.com");
                        //    httpRequest.AddHeader("accept", "*/*");
                        //    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        //    httpRequest.AddHeader("priority", "u=1, i");
                        //    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                        //    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        //    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        //    httpRequest.AddHeader("sec-fetch-dest", "empty");
                        //    httpRequest.AddHeader("sec-fetch-mode", "cors");
                        //    httpRequest.AddHeader("sec-fetch-site", "none");
                        //    var URL1= $"https://graph.facebook.com/v14.0/{IDBM}/owned_ad_accounts?access_token={token_EEAG}&pretty=1&fields=name%2Cprofile_picture%2Caccount_id%2Caccount_status%2Cis_prepay_account%2Cowner_business%2Ccreated_time%2Cnext_bill_date%2Ccurrency%2Cadtrust_dsl%2Ctimezone_name%2Ctimezone_offset_hours_utc%2Cdisable_reason%2Cadspaymentcycle%7Bthreshold_amount%7D%2Cbalance%2Cowner%2Cusers%7Bid%2Cis_active%2Cname%2Cpermissions%2Crole%2Croles%7D%2Cinsights.date_preset%28maximum%29%7Bspend%7D%2Cuserpermissions.user%28{uid}%29%7Brole%7D&limit=5000";
                        //    response = httpRequest.Get(URL1);
                        //    if (response.IsOK)
                        //    {
                        //var responseStr2 = response.ToString();

                        //} }
                        //"name": "914042909684011",
                        //"account_id": "914042909684011",
                        //"account_status": 2,
                        //"is_prepay_account": false,
                        //"created_time": "2023-06-13T13:46:23+0700",
                        //"next_bill_date": "2025-01-08T17:00:00+0000",
                        //"currency": "IDR",
                        //"adtrust_dsl": 813802,
                        //"timezone_name": "Asia/Ho_Chi_Minh",
                        //"timezone_offset_hours_utc": 7,
                        //"disable_reason": 1,
                        //"balance": "0",
                        //"owner": "100092316713298",
                        //"id": "act_914042909684011"
                        #endregion
                        int stkload = (int)sl_LOAD_TK_D2.Value;
                        var afterValue = "";
                    checkTK:
                        var uid = row.Cells["cUID"].Value.ToString();
                        httpRequest.AddHeader("authority", "graph.facebook.com");
                        httpRequest.AddHeader("accept", "*/*");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httpRequest.AddHeader("priority", "u=1, i");
                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                        httpRequest.AddHeader("sec-fetch-site", "none");
                        var URL2 = "";
                        if (string.IsNullOrEmpty(afterValue))
                        {
                            URL2 = $"https://graph.facebook.com/v14.0/{IDBM}/client_ad_accounts?access_token={token_EEAG}&pretty=1&fields=name%2Cprofile_picture%2Caccount_id%2Caccount_status%2Cis_prepay_account%2Cowner_business%2Ccreated_time%2Cnext_bill_date%2Ccurrency%2Cadtrust_dsl%2Ctimezone_name%2Ctimezone_offset_hours_utc%2Cdisable_reason%2Cadspaymentcycle%7Bthreshold_amount%7D%2Cbalance%2Cowner%2Cusers%7Bid%2Cis_active%2Cname%2Cpermissions%2Crole%2Croles%7D%2Cinsights.date_preset%28maximum%29%7Bspend%7D%2Cuserpermissions.user%28{uid}%29%7Brole%7D&limit={stkload}";
                        }
                        else
                        {
                            URL2 = $"https://graph.facebook.com/v14.0/{IDBM}/client_ad_accounts?access_token={token_EEAG}&pretty=1&fields=name%2Cprofile_picture%2Caccount_id%2Caccount_status%2Cis_prepay_account%2Cowner_business%2Ccreated_time%2Cnext_bill_date%2Ccurrency%2Cadtrust_dsl%2Ctimezone_name%2Ctimezone_offset_hours_utc%2Cdisable_reason%2Cadspaymentcycle%7Bthreshold_amount%7D%2Cbalance%2Cowner%2Cusers%7Bid%2Cis_active%2Cname%2Cpermissions%2Crole%2Croles%7D%2Cinsights.date_preset%28maximum%29%7Bspend%7D%2Cuserpermissions.user%28{uid}%29%7Brole%7D&limit={stkload}&after={afterValue}";
                        }
                        var response = httpRequest.Get(URL2);
                        if (response.IsOK)
                        {
                            var responseStr3 = response.ToString();
                            HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                            doc.LoadHtml(responseStr3);
                            JObject jobject = JObject.Parse(responseStr3);
                            var dataValues = jobject["data"];
                            if (dataValues != null)
                            {
                                var dataValuesArr = dataValues.ToObject<JArray>();
                                foreach (var itemObject in dataValuesArr)
                                {
                                    var name = itemObject["name"].ToString();
                                    var account_id = itemObject["account_id"].ToString();
                                    foreach (var checkidac in ACCUONT)
                                    {
                                        if (checkidac == account_id)
                                        {
                                            goto next;
                                        }
                                    }
                                    var Status1 = "";
                                    var account_status = itemObject["account_status"].ToString();
                                    ACCUONT.Add(account_id);
                                    if (account_status == "1")
                                    {
                                        Status1 = "ACTIVE";

                                        AC_LIVE.Add(account_id);
                                    }
                                    if (account_status == "2")
                                    {
                                        Status1 = "DISABLED";
                                        AC_DIE.Add(account_id);
                                    }
                                    if (account_status == "101" || account_status == "100")
                                    {
                                        Status1 = "CLOSED";
                                        AC_CLOSED.Add(account_id);
                                    }
                                    var created_time = itemObject["created_time"].ToString();
                                    var currency = itemObject["currency"].ToString();
                                    var adtrust_dsl = itemObject["adtrust_dsl"].ToString();

                                    int add_1 = 0;
                                    dgv_AC.Invoke(new Action(() =>
                                    {
                                        add_1 = dgv_AC.Rows.Add((dgv_AC.RowCount + 1), account_id, name, Status1, adtrust_dsl, currency, created_time);
                                    }));
                                }
                            }
                            int delay = (int)numericUpDown2.Value;
                            Thread.Sleep(TimeSpan.FromSeconds(delay));
                            int checkAC = Y * stkload;
                            if (ACCUONT.Count == checkAC)
                            {
                                Y++;
                                var pagingValues = jobject["paging"];
                                if (pagingValues != null)
                                {
                                    afterValue = pagingValues["cursors"]?["after"]?.ToString();
                                    goto checkTK;
                                }
                            }


                        }
                        else
                        {
                            checktk++;
                            if (checktk < 3)
                            {
                                goto checkTK;
                            }
                        }
                    next:
                        int add_3 = 0;
                        dgv_AC.Invoke(new Action(() =>
                        {
                            add_3 = dgv_AC.Rows.Add((dgv_AC.RowCount + 1), $"Tổng:LIVE|{AC_LIVE.Count}|DIE:{AC_DIE.Count}|CLOSED:{AC_CLOSED.Count}");

                        }));


                        row_BM.Cells["cSTKDIELIVE"].Value = $"LIVE|{AC_LIVE.Count}|DIE:{AC_DIE.Count}|CLOSED:{AC_CLOSED.Count}";


                    uot1:
                        Thread.Sleep(1000);








                    }

                }

            }
            catch { }

        }

        private int login_1 = 0;
        private void REG_IG_API(DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
        login_:
            var url = "";
            try
            {
                login_1 = 0;

                HttpRequest httpRequest = new HttpRequest();
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.KeepAlive = true;
                httpRequest.AllowAutoRedirect = true;
                httpRequest.UserAgent = "";
                if (cmb_User_Agent.InvokeRequired)
                {
                    cmb_User_Agent.Invoke(new Action(() =>
                    {
                        httpRequest.UserAgent = cmb_User_Agent.Text;
                    }));
                }
                else
                {
                    httpRequest.UserAgent = cmb_User_Agent.Text;
                }
                var cookieRaw = c2FAvsCookie.Split(';');
                foreach (var cookie in cookieRaw)
                {
                    try
                    {
                        var key = cookie.Split('=')[0].ToString().Trim();
                        var value = cookie.Split('=')[1].ToString().Trim();
                        httpRequest.Cookies.Add(key, value);

                    }
                    catch { }
                }
                httpRequest["authority"] = "www.facebook.com";
                httpRequest["accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                httpRequest["sec-fetch-dest"] = "document";
                httpRequest["sec-fetch-mode"] = "navigate";
                httpRequest["sec-fetch-site"] = "same-origin";
                httpRequest["sec-fetch-user"] = "?1";
                httpRequest["priority"] = "u=0, i";
                httpRequest["sec-ch-ua"] = "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"";
                httpRequest["sec-fetch-site"] = "none";
                httpRequest["sec-ch-ua-mobile"] = "?0";
                httpRequest["sec-ch-ua-platform"] = "1";
                httpRequest["upgrade-insecure-requests"] = "\"Windows\"";
                httpRequest["cache-control"] = "max-age=0";
                httpRequest["upgrade-insecure-requests"] = "1";
                httpRequest["Accept-Language"] = "en-US,en;q=0.9";

                var response = httpRequest.Get("https://www.facebook.com/");
                if (response.IsOK)
                {

                    var responseStr = response.ToString();
                    url = httpRequest.Address.ToString();
                    var responseStr9_1 = "";
                    var responseStr9_2 = "";
                    if (url.Contains("https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice"))
                    {
                        row.Cells["cStatus"].Value = "Cho phép sử dụng cookie.....";
                        httpRequest.AddHeader("authority", "www.facebook.com");
                        httpRequest.AddHeader("accept", "*/*");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httpRequest.AddHeader("priority", "u=1, i");
                        httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                        httpRequest.AddHeader("x-asbd-id", "129477");
                        httpRequest.AddHeader("x-fb-friendly-name", "useSaharaCometConsentPostPromptOutcomeServerMutation");
                        var fb_dtsg1 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                        var jazoest1 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                        var lsd1 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                        var experience_id = Regex.Match(responseStr, "experience_id\":\"(.*?)\"").Groups[1].Value.ToString();
                        var id = experience_id;
                        var payload_1 = $"av={uid}&__user={uid}&__a=1&__req=6&__hs=20092.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019149319&__s=::07m5uu&__hsi=7456086034100500556&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0lW4o0B-q1ew2io2awt81s8hwnU6a3a1YwBgao6C0Mo2swlo5q4U2zxe2GewbS361qw8Xwn82Lw5XwSyES1Tw8W0Lo6-1CG0hq1Iwqo5p0qZ6goK1sAwHwtU5K2G0F8iw&__csr=hXOcxd92rFx6iFFWAGbryoC8gzyQWzFpbBgDDGui9y-EcoG48K2W6Qii3mdwdm3i0b5K0qK0bJw02H-E0lQw&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019149319&__spin_b=trunk&__spin_t=1736005310&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useSaharaCometConsentPostPromptOutcomeServerMutation&variables={{\"input\":{{\"client_mutation_id\":\"2\",\"actor_id\":\"{uid}\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"__aectx__\\\":\\\"{{\\\\\\\"id\\\\\\\":\\\\\\\"{id}\\\\\\\",\\\\\\\"flows\\\\\\\":[{{\\\\\\\"id\\\\\\\":\\\\\\\"user_cookie_choice_v2\\\\\\\",\\\\\\\"prompts\\\\\\\":[{{\\\\\\\"id\\\\\\\":\\\\\\\"user_cookie_choice_granular_control\\\\\\\"}}]}}]}}\\\"}}\",\"flow\":\"USER_COOKIE_CHOICE_V2\",\"inputs_json\":\"{{\\\"other_company_trackers_on_foa\\\":\\\"\\\",\\\"fb_trackers_on_other_companies\\\":\\\"\\\",\\\"advertising\\\":\\\"\\\",\\\"analytics\\\":\\\"\\\",\\\"content_and_media\\\":\\\"\\\",\\\"productivity\\\":\\\"\\\",\\\"ADOBE_MARKETO\\\":\\\"\\\",\\\"GOOGLE_ADS\\\":\\\"\\\",\\\"KOCHAVA\\\":\\\"\\\",\\\"LINKEDIN_MARKETING\\\":\\\"\\\",\\\"X_ADS\\\":\\\"\\\",\\\"GOOGLE_ANALYTICS\\\":\\\"\\\",\\\"MEDALLIA\\\":\\\"\\\",\\\"AMAZON_AWS_CONTENT\\\":\\\"\\\",\\\"BLINGS_IO\\\":\\\"\\\",\\\"CLOUDFRONT\\\":\\\"\\\",\\\"GIPHY\\\":\\\"\\\",\\\"GOOGLE_MEDIA\\\":\\\"\\\",\\\"NEW_YORK_TIMES\\\":\\\"\\\",\\\"SOUNDCLOUD\\\":\\\"\\\",\\\"SPOTIFY\\\":\\\"\\\",\\\"SPREAKER\\\":\\\"\\\",\\\"TED\\\":\\\"\\\",\\\"TENOR\\\":\\\"\\\",\\\"TIKTOK\\\":\\\"\\\",\\\"VIMEO\\\":\\\"\\\",\\\"X\\\":\\\"\\\",\\\"YOUTUBE\\\":\\\"\\\",\\\"CHILI_PIPER\\\":\\\"\\\",\\\"GOOGLE\\\":\\\"\\\",\\\"JIO\\\":\\\"\\\",\\\"MAPBOX\\\":\\\"\\\",\\\"MICROSOFT\\\":\\\"\\\",\\\"card_index_0_learnt_more\\\":\\\"\\\",\\\"card_index_1_learnt_more\\\":\\\"\\\",\\\"card_index_2_learnt_more\\\":\\\"\\\",\\\"card_index_3_learnt_more\\\":\\\"\\\"}}\",\"outcome\":\"APPROVED\",\"outcome_data_json\":\"{{}}\",\"prompt\":\"USER_COOKIE_CHOICE_GRANULAR_CONTROL\",\"runtime\":\"SAHARA\",\"source\":\"pft_user_cookie_choice\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=8906652576046836";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_1, "application/x-www-form-urlencoded");
                        if (response.IsOK)
                        {

                            var responseStr8 = response.ToString();
                            url = httpRequest.Address.ToString();

                            httpRequest.AddHeader("authority", "www.facebook.com");
                            httpRequest.AddHeader("accept", "*/*");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httpRequest.AddHeader("priority", "u=4, i");
                            httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                            httpRequest.AddHeader("sec-fetch-mode", "no-cors");
                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                            fb_dtsg1 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                            jazoest1 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                            lsd1 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                            var payload1 = $"__a=1&__ccg=MODERATE&__comet_req=1&__hs=20093.HYP%3Acomet_plat_default_pkg.2.1.0.2.1&__hsi=7456292581936758885&__req=7&__rev=1019152068&__s=%3A%3A55p7kf&__spin_b=trunk&__spin_r=1019152068&__spin_t=1736053401&__user={uid}&dpr=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&ph=C3";
                            var url_post = $"https://www.facebook.com/ajax/bnzai?__a=1&__ccg=MODERATE&__comet_req=1&__hs=20093.HYP%3Acomet_plat_default_pkg.2.1.0.2.1&__hsi=7456292581936758885&__req=7&__rev=1019152068&__s=%3A%3A55p7kf&__spin_b=trunk&__spin_r=1019152068&__spin_t=1736053401&__user={uid}&dpr=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&ph=C3";
                            response = httpRequest.Post(url_post, payload1, "multipart/form-data; boundary=----WebKitFormBoundaryzyTDgA13uKCw1uhv");
                            responseStr8 = response.ToString();
                            url = httpRequest.Address.ToString();



                            var cookie = httpRequest.Cookies.ToString();
                            httpRequest.AddHeader("authority", "www.facebook.com");
                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httpRequest.AddHeader("dpr", "0.800000011920929");
                            httpRequest.AddHeader("priority", "u=0, i");
                            httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                            httpRequest.AddHeader("sec-fetch-dest", "document");
                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                            httpRequest.AddHeader("sec-fetch-user", "?1");
                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                            httpRequest.AddHeader("viewport-width", "1305");
                            response = httpRequest.Get("https://www.facebook.com/");
                            if (response.IsOK)
                            {
                                responseStr9_1 = response.ToString();
                                url = httpRequest.Address.ToString();
                                if (url == "https://www.facebook.com/")
                                {
                                    row.Cells["cStatus"].Value = "Cho phép sử dụng cookie DONE";
                                }
                            }
                        }
                    }
                    if (url.Contains("https://www.facebook.com/privacy/consent/pipa/?params%5Bpft_surface%5D=facebook_comet&params%5Bis_new_user_blocking_flow%5D=true&params%5Bgcl_experience_id%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&params%5Bpft_session_key%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&source=pipa_blocking_flow"))
                    {
                        row.Cells["cStatus"].Value = "Cho phép sử dụng cookie 2.....";

                        httpRequest.AddHeader("authority", "www.facebook.com");
                        httpRequest.AddHeader("accept", "*/*");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httpRequest.AddHeader("priority", "u=1, i");
                        httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/pipa/?params%5Bpft_surface%5D=facebook_comet&params%5Bis_new_user_blocking_flow%5D=true&params%5Bgcl_experience_id%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&params%5Bpft_session_key%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&source=pipa_blocking_flow");
                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                        httpRequest.AddHeader("x-asbd-id", "129477");
                        httpRequest.AddHeader("x-fb-friendly-name", "useConsentLoggingPlatformGQLEndpointMutation");
                        var fb_dtsg1 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                        var jazoest1 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                        var lsd1 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                        var experience_id = Regex.Match(responseStr, "experience_id\":\"(.*?)\"").Groups[1].Value.ToString();
                        var id = experience_id;
                        var gcl_experience_id = Regex.Match(responseStr, "gcl_experience_id\\\\\":\\\\\"(.*?)\\\\\"").Groups[1].Value.ToString();
                        var pft_session_key = Regex.Match(responseStr, "pft_session_key\\\\\":\\\\\"(.*?)\\\\\"").Groups[1].Value.ToString();
                        var payload_c1 = $"av={uid}&__user={uid}&__a=1&__req=9&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{uid}\",\"event\":\"consent_interactions_toggle_on\",\"event_data\":\"{{\\\"name\\\":\\\"personal_data_toggle\\\",\\\"value\\\":\\\"true\\\"}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_main\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c1, "application/x-www-form-urlencoded");
                        var payload_c2 = $"av={uid}&__user={uid}&__a=1&__req=a&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"4\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_data_json\":\"{{\\\"name\\\":\\\"personal_data_toggle\\\",\\\"type\\\":\\\"toggle\\\"}}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"ON\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INPUT\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c2, "application/x-www-form-urlencoded");
                        var payload_c3 = $"av={uid}&__user={uid}&__a=1&__req=b&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"{uid}\",\"event\":\"consent_interactions_toggle_on\",\"event_data\":\"{{\\\"name\\\":\\\"data_shared_3pd_toggle\\\",\\\"value\\\":\\\"true\\\"}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_main\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c3, "application/x-www-form-urlencoded");
                        var payload_c4 = $"av={uid}&__user={uid}&__a=1&__req=c&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"6\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_data_json\":\"{{\\\"name\\\":\\\"data_shared_3pd_toggle\\\",\\\"type\\\":\\\"toggle\\\"}}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"ON\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INPUT\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c4, "application/x-www-form-urlencoded");
                        var payload_c5 = $"av={uid}&__user={uid}&__a=1&__req=d&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"7\",\"actor_id\":\"{uid}\",\"event\":\"consent_interactions_toggle_on\",\"event_data\":\"{{\\\"name\\\":\\\"cross_border_data_transfer_toggle\\\",\\\"value\\\":\\\"true\\\"}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_main\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c5, "application/x-www-form-urlencoded");
                        var payload_c6 = $"av={uid}&__user={uid}&__a=1&__req=e&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"8\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_data_json\":\"{{\\\"name\\\":\\\"cross_border_data_transfer_toggle\\\",\\\"type\\\":\\\"toggle\\\"}}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"ON\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INPUT\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c6, "application/x-www-form-urlencoded");
                        var payload_c7 = $"av={uid}&__user={uid}&__a=1&__req=f&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"9\",\"actor_id\":\"{uid}\",\"event\":\"consent_interactions_toggle_on\",\"event_data\":\"{{\\\"name\\\":\\\"location_info_toggle\\\",\\\"value\\\":\\\"true\\\"}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_main\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c7, "application/x-www-form-urlencoded");
                        var payload_c8 = $"av={uid}&__user={uid}&__a=1&__req=g&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"10\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_data_json\":\"{{\\\"name\\\":\\\"location_info_toggle\\\",\\\"type\\\":\\\"toggle\\\"}}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"ON\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INPUT\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c8, "application/x-www-form-urlencoded");
                        var payload_c9 = $"av={uid}&__user={uid}&__a=1&__req=h&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptFormValidationMutation&variables={{\"input\":{{\"client_mutation_id\":\"11\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INTRODUCTION\",\"outcome\":\"APPROVED\",\"server_on_complete_params_darray_json\":\"{{\\\"personal_data_toggle\\\":\\\"true\\\",\\\"data_shared_3pd_toggle\\\":\\\"true\\\",\\\"cross_border_data_transfer_toggle\\\":\\\"true\\\",\\\"location_info_toggle\\\":\\\"true\\\"}}\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=9407571762647749";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c9, "application/x-www-form-urlencoded");
                        var payload_c10 = $"av={uid}&__user={uid}&__a=1&__req=i&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptOutcomeBatchedMutation&variables={{\"input\":{{\"client_mutation_id\":\"12\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_MAIN\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"INTRODUCTION\",\"outcome\":\"APPROVED\",\"server_on_complete_params_darray_json\":\"{{\\\"personal_data_toggle\\\":\\\"true\\\",\\\"data_shared_3pd_toggle\\\":\\\"true\\\",\\\"cross_border_data_transfer_toggle\\\":\\\"true\\\",\\\"location_info_toggle\\\":\\\"true\\\"}}\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6100374023362838";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c10, "application/x-www-form-urlencoded");
                        var payload_c11 = $"av={uid}&__user={uid}&__a=1&__req=j&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}7&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useConsentLoggingPlatformGQLEndpointMutation&variables={{\"input\":{{\"client_mutation_id\":\"13\",\"actor_id\":\"{uid}\",\"event\":\"consent_interactions_prompt_impression\",\"event_data\":\"{{\\\"device_permission\\\":null,\\\"device_permissions_result\\\":null,\\\"privacy_control_id\\\":null,\\\"prompt_type\\\":8}}\",\"table\":\"consent_interactions\",\"top_level_columns\":\"{{\\\"config_enum\\\":\\\"pipa_outro\\\",\\\"device_id\\\":null,\\\"experience_id\\\":\\\"{experience_id}\\\",\\\"extra_params\\\":\\\"{{\\\\\\\"pft_surface\\\\\\\":\\\\\\\"facebook_comet\\\\\\\",\\\\\\\"is_new_user_blocking_flow\\\\\\\":\\\\\\\"true\\\\\\\",\\\\\\\"gcl_experience_id\\\\\\\":\\\\\\\"{gcl_experience_id}\\\\\\\",\\\\\\\"pft_session_key\\\\\\\":\\\\\\\"{pft_session_key}\\\\\\\"}}\\\",\\\"flow_name\\\":\\\"pipa\\\",\\\"source\\\":\\\"pipa_blocking_flow\\\",\\\"surface\\\":\\\"facebook_comet\\\",\\\"runtime\\\":\\\"comet\\\"}}\"}}}}&server_timestamps=true&doc_id=7733733796695507";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c11, "application/x-www-form-urlencoded");
                        var payload_c12 = $"av={uid}&__user={uid}&__a=1&__req=k&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptInteractionsMutation&variables={{\"input\":{{\"client_mutation_id\":\"14\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_OUTRO\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_event_type\":\"IMPRESSION\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"CONCLUSION\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6286367948088093";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c12, "application/x-www-form-urlencoded");
                        var payload_c13 = $"av={uid}&__user={uid}&__a=1&__req=l&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptOutcomeBatchedMutation&variables={{\"input\":{{\"client_mutation_id\":\"15\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_OUTRO\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"CONCLUSION\",\"outcome\":\"APPROVED\",\"server_on_complete_params_darray_json\":\"{{}}\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6100374023362838";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c13, "application/x-www-form-urlencoded");
                        var payload_c14 = $"av={uid}&__user={uid}&__a=1&__req=m&__hs=20094.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019157703&__s=bd0tap:0leblj:kra4w0&__hsi=7456708420170375158&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0im3y4o0B-q1ew2io2awt81s8hwnU2lwv89k2C1Fwc60D85m1mxe0EUjwGzE2ZwNwmE2eU5O0HU1uUdEGdw46wbS1Lwqo15E6O1Fwcm0IU7u2-2K2G0JU&__csr=hin6iyoyrAypHz9ogzpdUO2R4ypUhw8i1uwzU1lo1SE8U7S7U1UE0SS00aGPw1qW&__comet_req=1&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019157703&__spin_b=trunk&__spin_t=1736150221&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useCometConsentPromptEndOfFlowBatchedMutation&variables={{\"input\":{{\"client_mutation_id\":\"16\",\"actor_id\":\"{uid}\",\"config_enum\":\"PIPA_OUTRO\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"pft_surface\\\":\\\"facebook_comet\\\",\\\"is_new_user_blocking_flow\\\":\\\"true\\\",\\\"gcl_experience_id\\\":\\\"{gcl_experience_id}\\\",\\\"pft_session_key\\\":\\\"{pft_session_key}\\\"}}\",\"flow_name\":\"PIPA\",\"flow_step_type\":\"CONCLUSION\",\"outcome\":\"APPROVED\",\"source\":\"pipa_blocking_flow\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=6494107973937368";
                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_c14, "application/x-www-form-urlencoded");

                        httpRequest.AddHeader("authority", "www.facebook.com");
                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httpRequest.AddHeader("dpr", "0.800000011920929");
                        httpRequest.AddHeader("priority", "u=0, i");
                        httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/pipa/?params%5Bpft_surface%5D=facebook_comet&params%5Bis_new_user_blocking_flow%5D=true&params%5Bgcl_experience_id%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&params%5Bpft_session_key%5D=53b6a7ba-404d-41ac-beea-5afdd34a969f&source=pipa_blocking_flow");
                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                        httpRequest.AddHeader("sec-fetch-dest", "document");
                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                        httpRequest.AddHeader("sec-fetch-user", "?1");
                        httpRequest.AddHeader("upgrade-insecure-requests", "1");
                        httpRequest.AddHeader("viewport-width", "1420");
                        response = httpRequest.Get("https://www.facebook.com/");
                        responseStr9_2 = response.ToString();
                        url = httpRequest.Address.ToString();
                    }

                    if (responseStr.Contains("ACCOUNT_ID") || responseStr9_1.Contains("ACCOUNT_ID") || responseStr9_2.Contains("ACCOUNT_ID"))
                    {
                        var responseStr9 = "";
                        var responseStr1 = "";
                        var responseStr_F = "";
                        var ACCOUNT_ID = Regex.Match(responseStr, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                        var ACCOUNT_ID3 = Regex.Match(responseStr9_1, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                        var ACCOUNT_ID_2 = Regex.Match(responseStr9_2, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                        var ACCOUNT_ID1 = Regex.Match(responseStr1, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                        if (ACCOUNT_ID == "0" || ACCOUNT_ID3 == "0" || ACCOUNT_ID_2 == "0")
                        {
                            row.Cells["cStatus"].Value = "Login Cookie FAIL....";
                            //login fail
                            httpRequest.Cookies = new CookieDictionary();


                            EnsurePostWWWLoginHDFull(httpRequest);
                            var response1 = httpRequest.Get("https://www.facebook.com/login");

                            if (response1.IsOK)
                            {
                                row.Cells["cStatus"].Value = "Login Cookie UID|PASS....";
                                responseStr1 = response1.ToString();


                                var document = new HtmlDocument();
                                document.LoadHtml(responseStr1);
                                var jazoestNode = document.DocumentNode.SelectNodes("//input[@name='jazoest']").FirstOrDefault();
                                var jazoest = jazoestNode.Attributes["Value"].Value;
                                var lsdNode = document.DocumentNode.SelectNodes("//input[@name='lsd']").FirstOrDefault();
                                var lsd = lsdNode.Attributes["Value"].Value;
                                var acttionlogin = document.DocumentNode.SelectNodes("//form[@id='login_form']").FirstOrDefault();
                                var token = acttionlogin.Attributes["action"].Value.Replace("amp;", "");
                                httpRequest.AddHeader("origin", "https://www.facebook.com");
                                httpRequest.AddHeader("referer", "https://www.facebook.com/login");
                                EnsurePostWWWLoginHDFull(httpRequest);
                                var playload = $"jazoest={jazoest}&lsd={lsd}&display=&isprivate=&return_session=&skip_api_login=&signed_next=&trynum=1&timezone=-420&lgndim=eyJ3IjoxOTIwLCJoIjoxMDgwLCJhdyI6MTkyMCwiYWgiOjEwNDAsImMiOjI0fQ==&lgnrnd=002449_hss0&lgnjs=1733300694&email={uid}&prefill_contact_point={uid}&prefill_source=browser_dropdown&prefill_type=password&first_prefill_source=browser_dropdown&first_prefill_type=contact_point&had_cp_prefilled=true&had_password_prefilled=true&ab_test_data=AAAA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/A/AAAA/BAAA&encpass={password}";
                                response = httpRequest.Post($"https://www.facebook.com{token}", playload, "application/x-www-form-urlencoded");
                                responseStr1 = response.ToString();
                                var cookieStr = httpRequest.Cookies.ToString();

                                if (cookieStr.Contains("xs="))
                                {

                                    url = httpRequest.Address.ToString();
                                    if (url.Contains("https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice"))
                                    {
                                        row.Cells["cStatus"].Value = "Cho phép sử dụng cookie.....";
                                        httpRequest.AddHeader("authority", "www.facebook.com");
                                        httpRequest.AddHeader("accept", "*/*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                        httpRequest.AddHeader("x-asbd-id", "129477");
                                        httpRequest.AddHeader("x-fb-friendly-name", "useSaharaCometConsentPostPromptOutcomeServerMutation");
                                        var fb_dtsg = Regex.Match(responseStr1, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                        jazoest = Regex.Match(responseStr1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                        lsd = Regex.Match(responseStr1, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                        var experience_id = Regex.Match(responseStr1, "experience_id\":\"(.*?)\"").Groups[1].Value.ToString();
                                        var id = experience_id;
                                        var payload = $"av={uid}&__user={uid}&__a=1&__req=6&__hs=20092.HYP:comet_plat_default_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019149319&__s=::07m5uu&__hsi=7456086034100500556&__dyn=7xeUmwlE7ibwKBAg5S1Dxu13w8CewSwMwNw9G2S0lW4o0B-q1ew2io2awt81s8hwnU6a3a1YwBgao6C0Mo2swlo5q4U2zxe2GewbS361qw8Xwn82Lw5XwSyES1Tw8W0Lo6-1CG0hq1Iwqo5p0qZ6goK1sAwHwtU5K2G0F8iw&__csr=hXOcxd92rFx6iFFWAGbryoC8gzyQWzFpbBgDDGui9y-EcoG48K2W6Qii3mdwdm3i0b5K0qK0bJw02H-E0lQw&__comet_req=1&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019149319&__spin_b=trunk&__spin_t=1736005310&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useSaharaCometConsentPostPromptOutcomeServerMutation&variables={{\"input\":{{\"client_mutation_id\":\"2\",\"actor_id\":\"{uid}\",\"device_id\":null,\"experience_id\":\"{experience_id}\",\"extra_params_json\":\"{{\\\"__aectx__\\\":\\\"{{\\\\\\\"id\\\\\\\":\\\\\\\"{id}\\\\\\\",\\\\\\\"flows\\\\\\\":[{{\\\\\\\"id\\\\\\\":\\\\\\\"user_cookie_choice_v2\\\\\\\",\\\\\\\"prompts\\\\\\\":[{{\\\\\\\"id\\\\\\\":\\\\\\\"user_cookie_choice_granular_control\\\\\\\"}}]}}]}}\\\"}}\",\"flow\":\"USER_COOKIE_CHOICE_V2\",\"inputs_json\":\"{{\\\"other_company_trackers_on_foa\\\":\\\"\\\",\\\"fb_trackers_on_other_companies\\\":\\\"\\\",\\\"advertising\\\":\\\"\\\",\\\"analytics\\\":\\\"\\\",\\\"content_and_media\\\":\\\"\\\",\\\"productivity\\\":\\\"\\\",\\\"ADOBE_MARKETO\\\":\\\"\\\",\\\"GOOGLE_ADS\\\":\\\"\\\",\\\"KOCHAVA\\\":\\\"\\\",\\\"LINKEDIN_MARKETING\\\":\\\"\\\",\\\"X_ADS\\\":\\\"\\\",\\\"GOOGLE_ANALYTICS\\\":\\\"\\\",\\\"MEDALLIA\\\":\\\"\\\",\\\"AMAZON_AWS_CONTENT\\\":\\\"\\\",\\\"BLINGS_IO\\\":\\\"\\\",\\\"CLOUDFRONT\\\":\\\"\\\",\\\"GIPHY\\\":\\\"\\\",\\\"GOOGLE_MEDIA\\\":\\\"\\\",\\\"NEW_YORK_TIMES\\\":\\\"\\\",\\\"SOUNDCLOUD\\\":\\\"\\\",\\\"SPOTIFY\\\":\\\"\\\",\\\"SPREAKER\\\":\\\"\\\",\\\"TED\\\":\\\"\\\",\\\"TENOR\\\":\\\"\\\",\\\"TIKTOK\\\":\\\"\\\",\\\"VIMEO\\\":\\\"\\\",\\\"X\\\":\\\"\\\",\\\"YOUTUBE\\\":\\\"\\\",\\\"CHILI_PIPER\\\":\\\"\\\",\\\"GOOGLE\\\":\\\"\\\",\\\"JIO\\\":\\\"\\\",\\\"MAPBOX\\\":\\\"\\\",\\\"MICROSOFT\\\":\\\"\\\",\\\"card_index_0_learnt_more\\\":\\\"\\\",\\\"card_index_1_learnt_more\\\":\\\"\\\",\\\"card_index_2_learnt_more\\\":\\\"\\\",\\\"card_index_3_learnt_more\\\":\\\"\\\"}}\",\"outcome\":\"APPROVED\",\"outcome_data_json\":\"{{}}\",\"prompt\":\"USER_COOKIE_CHOICE_GRANULAR_CONTROL\",\"runtime\":\"SAHARA\",\"source\":\"pft_user_cookie_choice\",\"surface\":\"FACEBOOK_COMET\"}}}}&server_timestamps=true&doc_id=8906652576046836";
                                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", playload, "application/x-www-form-urlencoded");
                                        if (response.IsOK)
                                        {

                                            var responseStr8 = response.ToString();
                                            url = httpRequest.Address.ToString();

                                            httpRequest.AddHeader("authority", "www.facebook.com");
                                            httpRequest.AddHeader("accept", "*/*");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("priority", "u=4, i");
                                            httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                                            httpRequest.AddHeader("sec-fetch-mode", "no-cors");
                                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                            fb_dtsg = Regex.Match(responseStr1, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                            jazoest = Regex.Match(responseStr1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                            lsd = Regex.Match(responseStr1, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                            var payload1 = $"__a=1&__ccg=MODERATE&__comet_req=1&__hs=20093.HYP%3Acomet_plat_default_pkg.2.1.0.2.1&__hsi=7456292581936758885&__req=7&__rev=1019152068&__s=%3A%3A55p7kf&__spin_b=trunk&__spin_r=1019152068&__spin_t=1736053401&__user={uid}&dpr=1&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&ph=C3";
                                            var url_post = $"https://www.facebook.com/ajax/bnzai?__a=1&__ccg=MODERATE&__comet_req=1&__hs=20093.HYP%3Acomet_plat_default_pkg.2.1.0.2.1&__hsi=7456292581936758885&__req=7&__rev=1019152068&__s=%3A%3A55p7kf&__spin_b=trunk&__spin_r=1019152068&__spin_t=1736053401&__user={uid}&dpr=1&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&ph=C3";
                                            response = httpRequest.Post(url_post, payload1, "multipart/form-data; boundary=----WebKitFormBoundaryzyTDgA13uKCw1uhv");
                                            responseStr8 = response.ToString();
                                            url = httpRequest.Address.ToString();



                                            var cookie = httpRequest.Cookies.ToString();
                                            httpRequest.AddHeader("authority", "www.facebook.com");
                                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("dpr", "0.800000011920929");
                                            httpRequest.AddHeader("priority", "u=0, i");
                                            httpRequest.AddHeader("referer", "https://www.facebook.com/privacy/consent/?flow=user_cookie_choice_v2&source=pft_user_cookie_choice");
                                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "document");
                                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                            httpRequest.AddHeader("sec-fetch-user", "?1");
                                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                            httpRequest.AddHeader("viewport-width", "1305");
                                            response = httpRequest.Get("https://www.facebook.com/");
                                            if (response.IsOK)
                                            {
                                                responseStr9 = response.ToString();
                                                url = httpRequest.Address.ToString();
                                                if (url == "https://www.facebook.com/")
                                                {
                                                    row.Cells["cStatus"].Value = "Cho phép sử dụng cookie DONE";
                                                }
                                            }
                                        }

                                    }
                                    if (url.Contains("https://www.facebook.com/checkpoint/601051028565049/"))
                                    {

                                        row.Cells["cStatus"].Value = "DISS MISS";

                                        httpRequest.AddHeader("authority", "www.facebook.com");
                                        httpRequest.AddHeader("accept", "*/*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("origin", "https://www.facebook.com");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        httpRequest.AddHeader("referer", "https://www.facebook.com/checkpoint/601051028565049/?next=https%3A%2F%2Fwww.facebook.com%2F%3Flsrc%3Dlb");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                        httpRequest.AddHeader("x-asbd-id", "129477");
                                        httpRequest.AddHeader("x-fb-friendly-name", "FBScrapingWarningMutation");
                                        var fb_dtsg = Regex.Match(responseStr1, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                        jazoest = Regex.Match(responseStr1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                        lsd = Regex.Match(responseStr1, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                        var payload_d = $"av={uid}&__user={uid}&__a=1&__req=8&__hs=20095.HYP:comet_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019175737&__s=dqxj5a:senuu9:e67otl&__hsi=7457002493664995955&__dyn=7xeUmwlEnwn8K2Wmh0no6u5U4e0yoW3q32360CEbo19oe8hw2nVE4W099w8G1Dz81s8hwnU2lwv89k2C1Fwc60D8vwRwlE-U2zxe2GewbS361qw8Xwn82Lw5XwSyES1Mw9m0Lo6-1Fw4mwr86C0No7S3m1TwLwHwGwbu&__csr=gxiS_GQqVqDzFAfGUzz9aByJAF12iK6Ey4Xh4maxqbwAwMwBwJwJwTxm5E1jo1cEmwee1Bxe0wU2MwPw20E3wwb60O87G0agw06abw2x802kUw&__comet_req=15&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019175737&__spin_b=trunk&__spin_t=1736218690&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=FBScrapingWarningMutation&variables={{}}&server_timestamps=true&doc_id=6339492849481770";
                                        response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_d, "application/x-www-form-urlencoded");
                                        var responseStr_d = response.ToString();
                                        url = httpRequest.Address.ToString();

                                        response = httpRequest.Get("https://www.facebook.com/?lsrc=lb");
                                        responseStr_F = response.ToString();
                                        url = httpRequest.Address.ToString();
                                        ACCOUNT_ID1 = Regex.Match(responseStr_F, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();

                                    }
                                    if (url.Contains("https://www.facebook.com/login/?next=https%3A%2F%2Fwww.facebook.com%2F"))
                                    {
                                        row.Cells["cStatus"].Value = "SPAM";
                                        //return "DONE";
                                    }
                                }
                                else
                                {
                                    url = httpRequest.Address.ToString();
                                    if (url.Contains("https://www.facebook.com/login/device-based/regular/login/?login_attempt=1&lwv=100"))
                                    {
                                        row.Cells["cStatus"].Value = "SPAM";
                                        //return "DONE";
                                    }
                                    row.Cells["cStatus"].Value = "Login FAIL!";
                                    //return "DONE";
                                }
                            }
                        }
                        var ACCOUNT_ID2 = Regex.Match(responseStr9, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                        ACCOUNT_ID1 = Regex.Match(responseStr1, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();

                        ACCOUNT_ID3 = Regex.Match(responseStr9_1, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                        ACCOUNT_ID_2 = Regex.Match(responseStr9_2, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();

                        if (ACCOUNT_ID == uid || ACCOUNT_ID1 == uid || ACCOUNT_ID3 == uid || ACCOUNT_ID_2 == uid)
                        {
                            url = httpRequest.Address.ToString();
                            if (url.Contains("282"))
                            {
                                sl_tk_282++;
                                if (tb_sl_282.InvokeRequired)
                                {
                                    tb_sl_282.Invoke(new Action(() =>
                                    {
                                        tb_sl_282.Clear();
                                        tb_sl_282.Text = sl_tk_282.ToString();
                                    }));
                                }
                                else
                                {
                                    tb_sl_282.Clear();
                                    tb_sl_282.Text = sl_tk_282.ToString();
                                }
                                row.Cells["cStatus"].Value = "282";
                                goto out1;
                                //return "DONE";
                            }
                            row.Cells["cStatus"].Value = "Login DONE";



                            httpRequest.AddHeader("authority", "www.instagram.com");
                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httpRequest.AddHeader("dpr", "0.800000011920929");
                            httpRequest.AddHeader("priority", "u=0, i");
                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.96\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.96\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                            httpRequest.AddHeader("sec-fetch-dest", "document");
                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                            httpRequest.AddHeader("sec-fetch-site", "none");
                            httpRequest.AddHeader("sec-fetch-user", "?1");
                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                            httpRequest.AddHeader("viewport-width", "1725");
                            response = httpRequest.Get("https://www.instagram.com/");
                            if (response.IsOK)
                            {
                                var responseSTr_1 = response.ToString();


                                row.Cells["cStatus"].Value = "=>INSTAGRAM.COM";

                                httpRequest.AddHeader("authority", "www.instagram.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("referer", "https://www.instagram.com/");
                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.96\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.96\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                httpRequest.AddHeader("x-asbd-id", "359341");
                                httpRequest.AddHeader("x-ig-d", "www");

                                var lsd = Regex.Match(responseSTr_1, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                var jazoest = Regex.Match(responseSTr_1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();

                                var payload = $"redirect_url=/fxcal/disclosure/?next=%2F&__d=www&__user=0&__a=1&__req=b&__hs=20199.HYP:instagram_web_pkg.2.1...0&dpr=1&__ccg=EXCELLENT&__rev=1022064041&__s=cx8nm2:tyi7z7:735mu4&__hsi=7495598275793416606&__dyn=7xeUjG1mxu1syUbFp41twpUnwgU29zEdEc8co2qwJw5ux609vCwjE1EE2Cw8G1Dz81s8hwGxu786a3a1YwBgao6C0Mo2swaOfK0EUjwGzEaE2iwNwmE2eUlwhE2Lw6OyES1TwVwDwHg2ZwrUdUbGweG269wr86C1mgcEed6goK10xKi2qi7E5y1rwcObBKu9w&__csr=gP3cgwVhnKBuOVF6JV4TFeJenHyBGDVabQqlGHykLQ7Q4pHJ1ybzExx52FAaQ6Fpk26i8L8lk5p4mQfxqmfnG4EOVEbEOaCy-8CxK9ybAzoix64F9oiwAxOibizEK9xiVorwm8hwCxKha00jYn804Fm0GElK1AziwYwExa0ekz80Oq09pw139wzwuA210aW580Wy2UM1lqa16x6O3K1dDUs4Qu2l0Ex21wgdd03dh4g3C3C1fw4740v806P-0bUw0Igw&__comet_req=7&lsd={lsd}&jazoest={jazoest}&__spin_r=1022064041&__spin_b=trunk&__spin_t=1745204971&__crn=comet.igweb.PolarisHomeRoute";
                                response = httpRequest.Post("https://www.instagram.com/oidc/state/", payload, "application/x-www-form-urlencoded");


                                if (response.IsOK)
                                {
                                    // TIẾP TỤC VỚI FB
                                    var responseSTr_2 = response.ToString();
                                
                                    var state = Regex.Match(responseSTr_2, "state\":\"(.*?)\"").Groups[1].Value.ToString();
                                    httpRequest = new HttpRequest();
                                    httpRequest.Cookies = new CookieDictionary();
                                    httpRequest.KeepAlive = true;
                                    httpRequest.AllowAutoRedirect = true;
                                    httpRequest.UserAgent = "";
                                    if (cmb_User_Agent.InvokeRequired)
                                    {
                                        cmb_User_Agent.Invoke(new Action(() =>
                                        {
                                            httpRequest.UserAgent = cmb_User_Agent.Text;
                                        }));
                                    }
                                    else
                                    {
                                        httpRequest.UserAgent = cmb_User_Agent.Text;
                                    }
                                    cookieRaw = c2FAvsCookie.Split(';');
                                    foreach (var cookie in cookieRaw)
                                    {
                                        try
                                        {
                                            var key = cookie.Split('=')[0].ToString().Trim();
                                            var value = cookie.Split('=')[1].ToString().Trim();
                                            httpRequest.Cookies.Add(key, value);

                                        }
                                        catch { }
                                    }
                                    httpRequest.AddHeader("authority", "www.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("dpr", "0.800000011920929");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("referer", "https://www.instagram.com/");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.96\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.96\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "cross-site");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "948");
                                    var url_oidc = $"https://www.facebook.com/oidc/?app_id=124024574287414&redirect_uri=https%3A%2F%2Fwww.instagram.com%2Faccounts%2Fsignupviafb%2F&response_type=code&scope=openid%20email%20profile%20linking&state={state}";
                                    response = httpRequest.Get(url_oidc);



                                    if (response.IsOK)
                                    {
                                        // TIẾP TỤC VỚI FB ẤN 
                                        var responseSTr_3 = response.ToString();
                         

                                        var code = Regex.Match(responseSTr_3, ";code=(.*?)&amp;state=").Groups[1].Value.ToString();
                                        if (!string.IsNullOrEmpty(code))
                                        {
                                            httpRequest.AddHeader("authority", "www.facebook.com");
                                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("cache-control", "max-age=0");

                                            httpRequest.AddHeader("dpr", "0.800000011920929");
                                            httpRequest.AddHeader("origin", "https://www.facebook.com");
                                            httpRequest.AddHeader("priority", "u=0, i");
                                            httpRequest.AddHeader("referer", $"{url_oidc}");
                                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.96\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.96\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "document");
                                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                            httpRequest.AddHeader("sec-fetch-user", "?1");
                                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                            httpRequest.AddHeader("viewport-width", "1178");
                                            var url_1 = $"https://www.facebook.com/oidc/complete/facebook/?redirect_uri=https%3A%2F%2Fwww.instagram.com%2Faccounts%2Fsignupviafb%2F&code={code}&state={state}&app_id=124024574287414";
                                            var fb_dtsg1 = Regex.Match(responseSTr_3, "\"DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                            var jazoest1 = Regex.Match(responseSTr_3, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                            var payload1 = $"jazoest={jazoest1}&fb_dtsg={fb_dtsg1}&__CONFIRM__=1";

                                            response = httpRequest.Post(url_1, payload1, "application/x-www-form-urlencoded");

                                            if (response.IsOK)
                                            {
                                                var responseSTr_4 = response.ToString();
                                                var url_2 = httpRequest.Address.ToString();
                                                if (url_2.Contains("https://www.instagram.com/accounts/signupviafb/?code="))
                                                {
                                                    // ALLOW AND CONTINUE


                                                    httpRequest.AddHeader("authority", "www.instagram.com");
                                                    httpRequest.AddHeader("accept", "*/*");
                                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                    httpRequest.AddHeader("priority", "u=1, i");
                                                    httpRequest.AddHeader("referer", "https://www.instagram.com/fxcal/disclosure/?next=%2F");
                                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.96\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.96\"");
                                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                                    httpRequest.AddHeader("x-asbd-id", "359341");
                                                    httpRequest.AddHeader("x-ig-d", "www");
                                                    lsd = Regex.Match(responseSTr_4, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                    jazoest = Regex.Match(responseSTr_4, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                                    var payload3 = $"client_previous_actor_id&route_url=%2Faccounts%2Ffbsignup%2F%3Fnext%3D%2F&routing_namespace=igx_www%24%2487a091182d5bd65bcb043a2888004e09&trace_policy=polaris.FXCalDisclosurePage&__d=www&__user=0&__a=1&__req=z&__hs=20199.HYP%3Ainstagram_web_pkg.2.1...0&dpr=1&__ccg=EXCELLENT&__rev=1022064614&__s=vqbis3%3Anac2ki%3Aoy3gs2&__hsi=7495607082008604314&__dyn=7xeUjG1mxu1syUbFp41twpUnwgU29zEdEc8co2qwJw5ux609vCwjE1EE2Cw8G1Dz81s8hwGxu786a3a1YwBgao6C0Mo2swaOfK0EUjwGzEaE2iwNwmE2eUlwhE2Lw6OyES1TwVwDwHg2ZwrUdUbGweG269wr86C1mgcEed6goK10xKi2qi7E5y1rwcObBKu9w&__csr=gP3cj3B5uWlXbCAqTAi9FeJenHyBGDVabQqnGHykLQ7Q4pHJ1ybDCy64kaCgN1auml0xAybO5l6zF4mQfxqmfnG4EOVEaWybyFELy9EryoyV8S4Ehxaim4E98sAyQEWbyokKm6U5y4o9ErAiw04_5O01alwaG5rwp8QEf8a8iw3B8O0cCw2mo0gOo8U7F0wg2Kxi0eEwKc0lmywhEhIwXwjp-71d7wBga8gwo43jg0Pkh40VwVwjU11N07O01I_w2-80b48&__comet_req=7&lsd={lsd}&jazoest={jazoest}&__spin_r=1022064614&__spin_b=trunk&__spin_t=1745207021&__crn=comet.igweb.PolarisFXCALDisclosureRoute";
                                                    response = httpRequest.Post("https://www.instagram.com/ajax/route-definition/", payload3, "application/x-www-form-urlencoded");

                                                    if (response.IsOK)
                                                    {
                                                        var responseSTr_5 = response.ToString();
                                                        var url_3 = httpRequest.Address.ToString();



                                                        httpRequest.AddHeader("authority", "www.instagram.com");
                                                        httpRequest.AddHeader("accept", "*/*");
                                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                        httpRequest.AddHeader("priority", "u=1, i");
                                                        httpRequest.AddHeader("referer", "https://www.instagram.com/accounts/signup/");
                                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.96\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.96\"");
                                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                                        httpRequest.AddHeader("x-asbd-id", "359341");
                                                        httpRequest.AddHeader("x-csrftoken", "61RvaYpF6gyYVj7fDXD3zR");
                                                        httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                                        httpRequest.AddHeader("x-ig-www-claim", "0");
                                                        httpRequest.AddHeader("x-instagram-ajax", "1022064614");
                                                        httpRequest.AddHeader("x-requested-with", "XMLHttpRequest");
                                                        httpRequest.AddHeader("x-web-session-id", "vqbis3:nac2ki:oy3gs2");

                                                        jazoest = Regex.Match(responseSTr_4, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                                        var payload4 = $"email=darbyproffittwil87576v%40pe2.us&name=Jasmine+Darling&jazoest={jazoest}";
                                                        response = httpRequest.Post("https://www.instagram.com/api/v1/web/accounts/username_suggestions/", payload4, "application/x-www-form-urlencoded");
                                                        if (response.IsOK)
                                                        {
                                                            var responseSTr_6 = response.ToString();


                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                            httpRequest.AddHeader("", "");
                                                        }




                                                    }

                                                }





                                            }
                                        }
                                        else
                                        {
                                            var url_2 = httpRequest.Address.ToString();
                                            if (url_2.Contains("https://www.instagram.com/accounts/signupviafb/?code="))
                                            {
                                                // ALLOW AND CONTINUE


                                                httpRequest.AddHeader("authority", "www.instagram.com");
                                                httpRequest.AddHeader("accept", "*/*");
                                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                httpRequest.AddHeader("priority", "u=1, i");
                                                httpRequest.AddHeader("referer", "https://www.instagram.com/fxcal/disclosure/?next=%2F");
                                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.96\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.96\"");
                                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                                httpRequest.AddHeader("x-asbd-id", "359341");
                                                httpRequest.AddHeader("x-ig-d", "www");
                                                lsd = Regex.Match(responseSTr_3, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                jazoest = Regex.Match(responseSTr_3, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                                var payload3 = $"client_previous_actor_id&route_url=%2Faccounts%2Ffbsignup%2F%3Fnext%3D%2F&routing_namespace=igx_www%24%2487a091182d5bd65bcb043a2888004e09&trace_policy=polaris.FXCalDisclosurePage&__d=www&__user=0&__a=1&__req=z&__hs=20199.HYP%3Ainstagram_web_pkg.2.1...0&dpr=1&__ccg=EXCELLENT&__rev=1022064614&__s=vqbis3%3Anac2ki%3Aoy3gs2&__hsi=7495607082008604314&__dyn=7xeUjG1mxu1syUbFp41twpUnwgU29zEdEc8co2qwJw5ux609vCwjE1EE2Cw8G1Dz81s8hwGxu786a3a1YwBgao6C0Mo2swaOfK0EUjwGzEaE2iwNwmE2eUlwhE2Lw6OyES1TwVwDwHg2ZwrUdUbGweG269wr86C1mgcEed6goK10xKi2qi7E5y1rwcObBKu9w&__csr=gP3cj3B5uWlXbCAqTAi9FeJenHyBGDVabQqnGHykLQ7Q4pHJ1ybDCy64kaCgN1auml0xAybO5l6zF4mQfxqmfnG4EOVEaWybyFELy9EryoyV8S4Ehxaim4E98sAyQEWbyokKm6U5y4o9ErAiw04_5O01alwaG5rwp8QEf8a8iw3B8O0cCw2mo0gOo8U7F0wg2Kxi0eEwKc0lmywhEhIwXwjp-71d7wBga8gwo43jg0Pkh40VwVwjU11N07O01I_w2-80b48&__comet_req=7&lsd={lsd}&jazoest={jazoest}&__spin_r=1022064614&__spin_b=trunk&__spin_t=1745207021&__crn=comet.igweb.PolarisFXCALDisclosureRoute";
                                                response = httpRequest.Post("https://www.instagram.com/ajax/route-definition/", payload3, "application/x-www-form-urlencoded");

                                                if (response.IsOK)
                                                {
                                                    var responseSTr_5 = response.ToString();
                                                    var url_3 = httpRequest.Address.ToString();



                                                    httpRequest.AddHeader("authority", "www.instagram.com");
                                                    httpRequest.AddHeader("accept", "*/*");
                                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                    httpRequest.AddHeader("priority", "u=1, i");
                                                    httpRequest.AddHeader("referer", "https://www.instagram.com/accounts/signup/");
                                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.96\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.96\"");
                                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                                    httpRequest.AddHeader("x-asbd-id", "359341");
                                                    httpRequest.AddHeader("x-csrftoken", "61RvaYpF6gyYVj7fDXD3zR");
                                                    httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                                    httpRequest.AddHeader("x-ig-www-claim", "0");
                                                    httpRequest.AddHeader("x-instagram-ajax", "1022064614");
                                                    httpRequest.AddHeader("x-requested-with", "XMLHttpRequest");
                                                    httpRequest.AddHeader("x-web-session-id", "vqbis3:nac2ki:oy3gs2");

                                                    jazoest = Regex.Match(responseSTr_3, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                                    var payload4 = $"email=carmellewallzdy23860x@pe2.us&name=Phoenix+Atkinson&jazoest={jazoest}";
                                                    response = httpRequest.Post("https://www.instagram.com/api/v1/web/accounts/username_suggestions/", payload4, "application/x-www-form-urlencoded");
                                                    if (response.IsOK)
                                                    {
                                                        var responseSTr_6 = response.ToString();


                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                        httpRequest.AddHeader("", "");
                                                    }




                                                }

                                            }
                                        }
                                
                               

                                    }



                                

                                }



                         






                            }










                            httpRequest.AddHeader("", "");
                            httpRequest.AddHeader("", "");
                            httpRequest.AddHeader("", "");
                            httpRequest.AddHeader("", "");
                            httpRequest.AddHeader("", "");

                            httpRequest.AddHeader("", "");
                            httpRequest.AddHeader("", "");
                            httpRequest.AddHeader("", "");
                            httpRequest.AddHeader("", "");














                        }
                    }
                }


            out1:
                Thread.Sleep(1);



            }
            catch
            {
                row.Cells["cStatus"].Value = $"VĂNG => login.....";
                StreamWriter sw1 = new StreamWriter("URL.txt", true);
                sw1.WriteLine(url);
                sw1.Close();
                if (login_1 < 3)
                {
                    login_1++;
                    goto login_;
                }
                else
                {
                    row.Cells["cStatus"].Value = $"VĂNG";
                    //return "FAIL";
                }


            }



        }

        //BACK UP BM 
        private async void bACKUPBMToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                BACK_UP_TU_CHON_1VIA(chromeDriver, accountData.Row);
                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);
            }
            catch { }


        }
        private void BACK_UP_TU_CHON_1VIA(ChromeDriver chromedriver, DataGridViewRow row)
        {
            try
            {
              
                var UID_VIA = row.Cells["cUID"].Value.ToString();
            

                chromedriver.Navigate().GoToUrl("https://adsmanager.facebook.com/adsmanager/manage/campaigns");
                var html = chromedriver.PageSource;
                var token_EEAB = Regex.Match(html, "window\\.__accessToken=\"(.*?)\"").Groups[1].Value.ToString();
                if (string.IsNullOrEmpty(token_EEAB))
                {
                    chromedriver.Navigate().GoToUrl("https://business.facebook.com/latest/settings/business_users");
                    var html1 = chromedriver.PageSource;
                    token_EEAB = Regex.Match(html1, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                }


                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                var cookiestring = "";
                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }
                cookiestring = cookiestring.Trim(';');
                HttpRequest httpRequest = new HttpRequest();
                httpRequest.AllowAutoRedirect = true;
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                httpRequest.KeepAlive = true;
                var cookieRaws = cookiestring.Split(';');
                foreach (var cookieraw in cookieRaws)
                {
                    var cookieJAr = cookieraw.Split('=');
                    try
                    {
                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                    }
                    catch { }
                }

                foreach (DataGridViewRow row_BM in dgv_BM.Rows)
                {
                    var IDBM = "";

                    try
                    {
                        IDBM = row_BM.Cells[2].Value.ToString();
                    }
                    catch { }
                    // Kiểm tra xem ô trong cột "cSelectBM" có giá trị true (kiểu bool) không
                    if (row_BM.Cells["cSelectBM"].Value is bool && (bool)row_BM.Cells["cSelectBM"].Value)
                    {
                        // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                        chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM}");
                        var html_1 = chromedriver.PageSource;
                        var token_EEAG = "";
                        token_EEAG = Regex.Match(html_1, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                        if (string.IsNullOrEmpty(token_EEAG))
                        {
                            chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM}&placement=standalone&global_scope_id={IDBM}");
                            var html1 = chromedriver.PageSource;
                            token_EEAG = Regex.Match(html1, "\"init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                        }
                        if (string.IsNullOrEmpty(token_EEAG))
                        {
                            //MessageBox.Show("Lấy Token EAAG FAIL!");
                            goto uot1;

                        }
                        var loai_mail = "";
                        if (cmb_loai_mail.InvokeRequired)
                        {
                            cmb_loai_mail.Invoke(new Action(() =>
                            {
                                loai_mail = cmb_loai_mail.Text;
                            }));
                        }
                        else
                        {
                            loai_mail = cmb_loai_mail.Text;
                        }

                        int so_link_back_up = (int)so_link_backup.Value;

                        for (int sl = 0; sl < so_link_back_up; sl++)
                        {
                            httpRequest = new HttpRequest();
                            httpRequest.Cookies = new CookieDictionary();
                            httpRequest.KeepAlive = true;
                            httpRequest.AllowAutoRedirect = true;
                            var cookiess_1 = chromedriver.Manage().Cookies.AllCookies;
                            var cookiestring_1 = "";
                            foreach (var cookie in cookiess)
                            {
                                cookiestring_1 += cookie.Name + "=" + cookie.Value + ";";
                            }
                            cookiestring_1 = cookiestring_1.Trim(';');

                            httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                            httpRequest.KeepAlive = true;
                            var cookieRaws1 = cookiestring_1.Split(';');
                            foreach (var cookieraw in cookieRaws1)
                            {
                                var cookieJAr = cookieraw.Split('=');
                                try
                                {
                                    httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);

                                }
                                catch { }
                            }



                            if (loai_mail == "Hotmail.com")
                            {
                                httpRequest.AddHeader(":authority", "graph.facebook.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "none");
                                var mail_pass = "";
                                if (tb_hotmail_Share_bm.InvokeRequired)
                                {
                                    tb_hotmail_Share_bm.Invoke(new Action(() =>
                                    {
                                        mail_pass = tb_hotmail_Share_bm.Text;
                                    }));
                                }
                                else
                                {
                                    mail_pass = tb_hotmail_Share_bm.Text;
                                }
                                var mail = mail_pass.Split('|')[0].ToString();
                                var usernamemail = mail.Split('@')[0].ToString();
                                var domain = mail.Split('@')[1].ToString();

                                var list_kt = File.ReadAllLines("kytuhotmail.txt").ToList();
                                Random rd = new Random();
                                var index = rd.Next(0, list_kt.Count);
                                var kt = list_kt[index];
                                var STT = "";

                                if (cmb_Admin_BM1.InvokeRequired)
                                {
                                    cmb_Admin_BM1.Invoke(new Action(() =>
                                    {
                                        STT = cmb_Admin_BM1.Text;
                                    }));
                                }
                                else
                                {
                                    STT = cmb_Admin_BM1.Text;
                                }
                                var ADMIN = "";
                                if (STT == "Quyền Admin")
                                {
                                    ADMIN = "ADMIN";
                                }
                                if (STT == "Quyền Nhân Viên")
                                {
                                    ADMIN = "EMPLOYEE";
                                }
                                var mail_share = usernamemail + "%2B" + kt + IDBM + "@" + domain;
                                var url_hotmail = $"https://graph.facebook.com/v8.0/{IDBM}/business_users?access_token={token_EEAG}&method=POST&role={ADMIN}&email={mail_share}";
                                try
                                {
                                  var  response = httpRequest.Get(url_hotmail);
                                    var responseStr = response.ToString();

                                }
                                catch
                                {
                                  var  response = httpRequest.Get(url_hotmail);
                                    var responseStr = response.ToString();

                                }


                            }
                            if (loai_mail == "MoaKt.com")
                            {
                                httpRequest.AddHeader(":authority", "graph.facebook.com");
                                httpRequest.AddHeader("accept", "*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "none");
                                var STT = "";
                                if (cmb_Admin_BM1.InvokeRequired)
                                {
                                    cmb_Admin_BM1.Invoke(new Action(() =>
                                    {
                                        STT = cmb_Admin_BM1.Text;
                                    }));
                                }
                                else
                                {
                                    STT = cmb_Admin_BM1.Text;
                                }
                                var ADMIN = "";
                                if (STT == "Quyền Admin")
                                {
                                    ADMIN = "ADMIN";
                                }
                                if (STT == "Quyền Nhân Viên")
                                {
                                    ADMIN = "EMPLOYEE";
                                }
                                HttpRequest httprequest_Mail_MOAKT = new HttpRequest();
                                httprequest_Mail_MOAKT.Cookies = new CookieDictionary();
                                httprequest_Mail_MOAKT.KeepAlive = true;
                                httprequest_Mail_MOAKT.AllowAutoRedirect = true;
                                httprequest_Mail_MOAKT.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                                var mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                if (string.IsNullOrEmpty(mail_share))
                                {
                                    mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                }

                                var url_hotmail = $"https://graph.facebook.com/v8.0/{IDBM}/business_users?access_token={token_EEAG}&method=POST&role={ADMIN}&email={mail_share}";
                                try
                                {
                                   var response = httpRequest.Get(url_hotmail);
                                    var responseStr = response.ToString();

                                }
                                catch
                                {
                                   var response = httpRequest.Get(url_hotmail);
                                    var responseStr = response.ToString();

                                }


                                var link = link_moakt(httprequest_Mail_MOAKT);
                                if (string.IsNullOrEmpty(link))
                                {
                                    link = link_moakt(httprequest_Mail_MOAKT);

                                }
                                if (string.IsNullOrEmpty(link))
                                {

                                    if (rtb_Link_BM.InvokeRequired)
                                    {
                                        rtb_Link_BM.Invoke(new Action(() =>
                                        {
                                            rtb_Link_BM.AppendText(UID_VIA + "|" + IDBM + "|" + link + Environment.NewLine);

                                        }));
                                    }

                                    dgv_BM.Invoke(new Action(() =>
                                    {
                                        // Duyệt qua tất cả các dòng trong DataGridView
                                        foreach (DataGridViewRow row_1 in dgv_BM.Rows)
                                        {
                                            // Kiểm tra xem dòng có giá trị hợp lệ không (dòng không phải là dòng trống)
                                            if (!row_1.IsNewRow)
                                            {
                                                // Giả sử cột tài khoản có tên là "AccountID"
                                                string accountId = "";

                                                try
                                                {
                                                    accountId = row_1.Cells["cIDBM"].Value.ToString();
                                                }
                                                catch { }
                                                // Kiểm tra nếu tài khoản có trong danh sách cần cập nhật
                                                if (IDBM == accountId)
                                                {
                                                    // Cập nhật giá trị của cột status (giả sử cột status có tên là "cStatus2")
                                                    row_1.Cells["cSTKDIELIVE"].Value = "BACK UP FAIL!";
                                                }
                                            }
                                        }
                                    }));





                                }
                                else
                                {
                                    if (rtb_Link_BM.InvokeRequired)
                                    {
                                        rtb_Link_BM.Invoke(new Action(() =>
                                        {
                                            rtb_Link_BM.AppendText(UID_VIA + "|" + IDBM + "|" + link + Environment.NewLine);

                                        }));
                                    }
                                    dgv_BM.Invoke(new Action(() =>
                                    {
                                        // Duyệt qua tất cả các dòng trong DataGridView
                                        foreach (DataGridViewRow row_1 in dgv_BM.Rows)
                                        {
                                            // Kiểm tra xem dòng có giá trị hợp lệ không (dòng không phải là dòng trống)
                                            if (!row_1.IsNewRow)
                                            {
                                                string accountId = "";

                                                try
                                                {
                                                    accountId = row_1.Cells["cIDBM"].Value.ToString();
                                                }
                                                catch { }

                                                // Kiểm tra nếu tài khoản có trong danh sách cần cập nhật
                                                if (IDBM == accountId)
                                                {
                                                    // Cập nhật giá trị của cột status (giả sử cột status có tên là "cStatus2")
                                                    row_1.Cells["cTKLIVEDIE"].Value = $"BACK UP DONE";
                                                }
                                            }
                                        }
                                    }));
                                }


                            }
                        }

                        if (loai_mail == "Hotmail.com")
                        {
                            var mail_pass = "";
                            if (tb_hotmail_Share_bm.InvokeRequired)
                            {
                                tb_hotmail_Share_bm.Invoke(new Action(() =>
                                {
                                    mail_pass = tb_hotmail_Share_bm.Text;
                                }));
                            }
                            else
                            {
                                mail_pass = tb_hotmail_Share_bm.Text;
                            }

                            var mail = mail_pass.Split('|')[0].ToString();
                            var passmail = mail_pass.Split('|')[1].ToString();

                            var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail, passmail);
                            if (string.IsNullOrEmpty(accessToken))
                            {
                                for (int j = 0; j < 5; j++)
                                {
                                    Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                                    (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail, passmail);
                                    if (!string.IsNullOrEmpty(accessToken))
                                    {
                                        break;
                                    }
                                }

                            }


                            List<string> Link = new List<string>();
                            int delay_doc_link_1 = (int)delay_doc_link.Value;
                            Thread.Sleep(TimeSpan.FromSeconds(delay_doc_link_1));
                            Link = ReadHotmail_LINK(mail, passmail, accessToken, refreshToken);
                            if (Link.Count > 0)
                            {

                                dgv_BM.Invoke(new Action(() =>
                                {
                                    // Duyệt qua tất cả các dòng trong DataGridView
                                    foreach (DataGridViewRow row_1 in dgv_BM.Rows)
                                    {
                                        // Kiểm tra xem dòng có giá trị hợp lệ không (dòng không phải là dòng trống)
                                        if (!row_1.IsNewRow)
                                        {
                                            // Giả sử cột tài khoản có tên là "AccountID"
                                            string accountId = row_1.Cells["cIDBM"].Value.ToString();

                                            // Kiểm tra nếu tài khoản có trong danh sách cần cập nhật
                                            if (IDBM == accountId)
                                            {
                                                // Cập nhật giá trị của cột status (giả sử cột status có tên là "cStatus2")
                                                row_1.Cells["cTKLIVEDIE"].Value = $"BACK UP DONE";
                                            }
                                        }
                                    }
                                }));

                            }
                            else
                            {
                                dgv_BM.Invoke(new Action(() =>
                                {
                                    // Duyệt qua tất cả các dòng trong DataGridView
                                    foreach (DataGridViewRow row_1 in dgv_BM.Rows)
                                    {
                                        // Kiểm tra xem dòng có giá trị hợp lệ không (dòng không phải là dòng trống)
                                        if (!row_1.IsNewRow)
                                        {
                                            // Giả sử cột tài khoản có tên là "AccountID"
                                            string accountId = row_1.Cells["cIDBM"].Value.ToString();

                                            // Kiểm tra nếu tài khoản có trong danh sách cần cập nhật
                                            if (IDBM == accountId)
                                            {
                                                // Cập nhật giá trị của cột status (giả sử cột status có tên là "cStatus2")
                                                row_1.Cells["cTKLIVEDIE"].Value = $"BACK UP FAIL!";
                                            }
                                        }
                                    }
                                }));
                            }
                            foreach (var link in Link)
                            {
                                if (rtb_Link_BM.InvokeRequired)
                                {
                                    rtb_Link_BM.Invoke(new Action(() =>
                                    {
                                        rtb_Link_BM.AppendText(UID_VIA + "|" + IDBM + "|" + link + Environment.NewLine);

                                    }));
                                }
                            }
                        }


                    }
                }
            uot1:
                Thread.Sleep(100);
            }
            catch { }

        }


        //BACK UP BM  nhieu via

        private async void bACKUPBMNHIEUVIAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                BACK_UP_TU_CHONNEW(chromeDriver, accountData.Row, accountData.User);
                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);
            }
            catch { }
        }
        private int check_BM1 = 0;
        private void BACK_UP_TU_CHON(ChromeDriver chromedriver, DataGridViewRow row)
        {
            try
            {
                check_BM1 = 0;
                int Y = 1;
                var UID_VIA = row.Cells["cUID"].Value.ToString();
                List<string> ID_ALL_BM = new List<string>();

                chromedriver.Navigate().GoToUrl("https://adsmanager.facebook.com/adsmanager/manage/campaigns");
                var html = chromedriver.PageSource;
                var token_EEAB = Regex.Match(html, "window\\.__accessToken=\"(.*?)\"").Groups[1].Value.ToString();
                if (string.IsNullOrEmpty(token_EEAB))
                {
                    chromedriver.Navigate().GoToUrl("https://business.facebook.com/latest/settings/business_users");
                    var html1 = chromedriver.PageSource;
                    token_EEAB = Regex.Match(html1, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                }


                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                var cookiestring = "";
                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }
                cookiestring = cookiestring.Trim(';');
                HttpRequest httpRequest = new HttpRequest();
                httpRequest.AllowAutoRedirect = true;
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                httpRequest.KeepAlive = true;
                var cookieRaws = cookiestring.Split(';');
                foreach (var cookieraw in cookieRaws)
                {
                    var cookieJAr = cookieraw.Split('=');
                    try
                    {
                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                    }
                    catch { }
                }
  
                var afterValue = "";


            checkBMGo:
                int sl_BM_LOAD = (int)SL_BM_LOAD.Value;
                httpRequest.AddHeader("authority", "adsmanager.facebook.com");
                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httpRequest.AddHeader("cache-control", "max-age=0");
                httpRequest.AddHeader("dpr", "0.800000011920929");
                httpRequest.AddHeader("priority", "u=0, i");
                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                httpRequest.AddHeader("sec-fetch-dest", "document");
                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                httpRequest.AddHeader("sec-fetch-user", "?1");
                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                httpRequest.AddHeader("viewport-width", "1411");

               


                var checkBM = "";
                if (string.IsNullOrEmpty(afterValue))
                {

                    checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={token_EEAB}&limit={sl_BM_LOAD}&fields=id,name,created_time,status,business_users{{role,id,name}},owned_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}},shared_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}},sharing_eligibility_status,allow_page_management_in_www";
                }
                else
                {
                    checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={token_EEAB}&limit={sl_BM_LOAD}&fields=id,name,created_time,status,business_users{{role,id,name}},owned_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}},shared_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}},sharing_eligibility_status,allow_page_management_in_www&pretty=1&after={afterValue}";
                }
                var response = httpRequest.Get(checkBM);
                if (response.IsOK)
                {
                    var responseSTR6 = response.ToString();
                    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                    doc.LoadHtml(responseSTR6);
                    JObject jobject = JObject.Parse(responseSTR6);
                    var dataValues = jobject["data"];
                    if (dataValues != null)
                    {
                        var dataValuesArr = dataValues.ToObject<JArray>();
                        foreach (var itemObject in dataValuesArr)
                        {
              
                            var businessId = itemObject["id"].ToString();
                            foreach (var checkidbm in ID_ALL_BM)
                            {
                                if (checkidbm == businessId)
                                {
                                    goto next;
                                }
                            }
                            ID_ALL_BM.Add(businessId);
                            var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                            var createdtime = itemObject["created_time"].ToString();
                            var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";

                        }
                    }

                    int delay = (int)delay_LOAD_BM.Value;
                    Thread.Sleep(TimeSpan.FromSeconds(delay));
                    int checkAC = Y * sl_BM_LOAD;
                    if (ID_ALL_BM.Count == checkAC)
                    {
                        Y++;
                        var pagingValues = jobject["paging"];
                        if (pagingValues != null)
                        {
                            afterValue = pagingValues["cursors"]?["after"]?.ToString();
                            goto checkBMGo;
                        }
                    }

                }
                else
                {
                    check_BM++;
                    if (check_BM < 3)
                    {
                        goto checkBMGo;
                    }
                }
            next:


                foreach (DataGridViewRow row_BM in dgv_BM.Rows)
                {

                    var IDBM = "";

                    try
                    {
                        IDBM = row_BM.Cells[2].Value.ToString();
                    }
                    catch { }
                    // Kiểm tra xem ô trong cột "cSelectBM" có giá trị true (kiểu bool) không
                    if (row_BM.Cells["cSelectBM"].Value is bool && (bool)row_BM.Cells["cSelectBM"].Value)
                    {
                        if (ID_ALL_BM.Contains(IDBM))
                        {    // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                            chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM}");
                            var html_1 = chromedriver.PageSource;
                            var token_EEAG = "";
                            token_EEAG = Regex.Match(html_1, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM}&placement=standalone&global_scope_id={IDBM}");
                                var html1 = chromedriver.PageSource;
                                token_EEAG = Regex.Match(html1, "\"init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                            }
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                //MessageBox.Show("Lấy Token EAAG FAIL!");
                                goto uot1;

                            }
                            var loai_mail = "";
                            if (cmb_loai_mail.InvokeRequired)
                            {
                                cmb_loai_mail.Invoke(new Action(() =>
                                {
                                    loai_mail = cmb_loai_mail.Text;
                                }));
                            }
                            else
                            {
                                loai_mail = cmb_loai_mail.Text;
                            }

                            int so_link_back_up = (int)so_link_backup.Value;

                            for (int sl = 0; sl < so_link_back_up; sl++)
                            {
                                httpRequest = new HttpRequest();
                                httpRequest.Cookies = new CookieDictionary();
                                httpRequest.KeepAlive = true;
                                httpRequest.AllowAutoRedirect = true;
                                var cookiess_1 = chromedriver.Manage().Cookies.AllCookies;
                                var cookiestring_1 = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring_1 += cookie.Name + "=" + cookie.Value + ";";
                                }
                                cookiestring_1 = cookiestring_1.Trim(';');

                                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                httpRequest.KeepAlive = true;
                                var cookieRaws1 = cookiestring_1.Split(';');
                                foreach (var cookieraw in cookieRaws1)
                                {
                                    var cookieJAr = cookieraw.Split('=');
                                    try
                                    {
                                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);

                                    }
                                    catch { }
                                }



                                if (loai_mail == "Hotmail.com")
                                {
                                    httpRequest.AddHeader(":authority", "graph.facebook.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    var mail_pass = "";
                                    if (tb_hotmail_Share_bm.InvokeRequired)
                                    {
                                        tb_hotmail_Share_bm.Invoke(new Action(() =>
                                        {
                                            mail_pass = tb_hotmail_Share_bm.Text;
                                        }));
                                    }
                                    else
                                    {
                                        mail_pass = tb_hotmail_Share_bm.Text;
                                    }
                                    var mail = mail_pass.Split('|')[0].ToString();
                                    var usernamemail = mail.Split('@')[0].ToString();
                                    var domain = mail.Split('@')[1].ToString();

                                    var list_kt = File.ReadAllLines("kytuhotmail.txt").ToList();
                                    Random rd = new Random();
                                    var index = rd.Next(0, list_kt.Count);
                                    var kt = list_kt[index];
                                    var STT = "";

                                    if (cmb_Admin_BM1.InvokeRequired)
                                    {
                                        cmb_Admin_BM1.Invoke(new Action(() =>
                                        {
                                            STT = cmb_Admin_BM1.Text;
                                        }));
                                    }
                                    else
                                    {
                                        STT = cmb_Admin_BM1.Text;
                                    }
                                    var ADMIN = "";
                                    if (STT == "Quyền Admin")
                                    {
                                        ADMIN = "ADMIN";
                                    }
                                    if (STT == "Quyền Nhân Viên")
                                    {
                                        ADMIN = "EMPLOYEE";
                                    }
                                    var mail_share = usernamemail + "%2B" + kt + IDBM + "@" + domain;
                                    var url_hotmail = $"https://graph.facebook.com/v8.0/{IDBM}/business_users?access_token={token_EEAG}&method=POST&role={ADMIN}&email={mail_share}";
                                    try
                                    {
                                        response = httpRequest.Get(url_hotmail);
                                        var responseStr = response.ToString();

                                    }
                                    catch
                                    {
                                        response = httpRequest.Get(url_hotmail);
                                        var responseStr = response.ToString();

                                    }


                                }
                                if (loai_mail == "MoaKt.com")
                                {
                                    httpRequest.AddHeader(":authority", "graph.facebook.com");
                                    httpRequest.AddHeader("accept", "*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    var STT = "";
                                    if (cmb_Admin_BM1.InvokeRequired)
                                    {
                                        cmb_Admin_BM1.Invoke(new Action(() =>
                                        {
                                            STT = cmb_Admin_BM1.Text;
                                        }));
                                    }
                                    else
                                    {
                                        STT = cmb_Admin_BM1.Text;
                                    }
                                    var ADMIN = "";
                                    if (STT == "Quyền Admin")
                                    {
                                        ADMIN = "ADMIN";
                                    }
                                    if (STT == "Quyền Nhân Viên")
                                    {
                                        ADMIN = "EMPLOYEE";
                                    }
                                    HttpRequest httprequest_Mail_MOAKT = new HttpRequest();
                                    httprequest_Mail_MOAKT.Cookies = new CookieDictionary();
                                    httprequest_Mail_MOAKT.KeepAlive = true;
                                    httprequest_Mail_MOAKT.AllowAutoRedirect = true;
                                    httprequest_Mail_MOAKT.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                                    var mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                    if (string.IsNullOrEmpty(mail_share))
                                    {
                                        mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                    }

                                    var url_hotmail = $"https://graph.facebook.com/v8.0/{IDBM}/business_users?access_token={token_EEAG}&method=POST&role={ADMIN}&email={mail_share}";
                                    try
                                    {
                                        response = httpRequest.Get(url_hotmail);
                                        var responseStr = response.ToString();

                                    }
                                    catch
                                    {
                                        response = httpRequest.Get(url_hotmail);
                                        var responseStr = response.ToString();

                                    }


                                    var link = link_moakt(httprequest_Mail_MOAKT);
                                    if (string.IsNullOrEmpty(link))
                                    {
                                        link = link_moakt(httprequest_Mail_MOAKT);

                                    }
                                    if (string.IsNullOrEmpty(link))
                                    {

                                        if (rtb_Link_BM.InvokeRequired)
                                        {
                                            rtb_Link_BM.Invoke(new Action(() =>
                                            {
                                                rtb_Link_BM.AppendText(UID_VIA + "|" + IDBM + "|" + link + Environment.NewLine);

                                            }));
                                        }

                                        dgv_BM.Invoke(new Action(() =>
                                        {
                                            // Duyệt qua tất cả các dòng trong DataGridView
                                            foreach (DataGridViewRow row_1 in dgv_BM.Rows)
                                            {
                                                // Kiểm tra xem dòng có giá trị hợp lệ không (dòng không phải là dòng trống)
                                                if (!row_1.IsNewRow)
                                                {
                                                    // Giả sử cột tài khoản có tên là "AccountID"
                                                    string accountId = "";

                                                    try
                                                    {
                                                        accountId = row_1.Cells["cIDBM"].Value.ToString();
                                                    }
                                                    catch { }
                                                    // Kiểm tra nếu tài khoản có trong danh sách cần cập nhật
                                                    if (IDBM == accountId)
                                                    {
                                                        // Cập nhật giá trị của cột status (giả sử cột status có tên là "cStatus2")
                                                        row_1.Cells["cSTKDIELIVE"].Value = "BACK UP FAIL!";
                                                    }
                                                }
                                            }
                                        }));





                                    }
                                    else
                                    {
                                        if (rtb_Link_BM.InvokeRequired)
                                        {
                                            rtb_Link_BM.Invoke(new Action(() =>
                                            {
                                                rtb_Link_BM.AppendText(UID_VIA + "|" + IDBM + "|" + link + Environment.NewLine);

                                            }));
                                        }
                                        dgv_BM.Invoke(new Action(() =>
                                        {
                                            // Duyệt qua tất cả các dòng trong DataGridView
                                            foreach (DataGridViewRow row_1 in dgv_BM.Rows)
                                            {
                                                // Kiểm tra xem dòng có giá trị hợp lệ không (dòng không phải là dòng trống)
                                                if (!row_1.IsNewRow)
                                                {
                                                    string accountId = "";

                                                    try
                                                    {
                                                        accountId = row_1.Cells["cIDBM"].Value.ToString();
                                                    }
                                                    catch { }

                                                    // Kiểm tra nếu tài khoản có trong danh sách cần cập nhật
                                                    if (IDBM == accountId)
                                                    {
                                                        // Cập nhật giá trị của cột status (giả sử cột status có tên là "cStatus2")
                                                        row_1.Cells["cTKLIVEDIE"].Value = $"BACK UP DONE";
                                                    }
                                                }
                                            }
                                        }));
                                    }


                                }
                            }

                            if (loai_mail == "Hotmail.com")
                            {
                                var mail_pass = "";
                                if (tb_hotmail_Share_bm.InvokeRequired)
                                {
                                    tb_hotmail_Share_bm.Invoke(new Action(() =>
                                    {
                                        mail_pass = tb_hotmail_Share_bm.Text;
                                    }));
                                }
                                else
                                {
                                    mail_pass = tb_hotmail_Share_bm.Text;
                                }

                                var mail = mail_pass.Split('|')[0].ToString();
                                var passmail = mail_pass.Split('|')[1].ToString();

                                var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail, passmail);
                                if (string.IsNullOrEmpty(accessToken))
                                {
                                    for (int j = 0; j < 5; j++)
                                    {
                                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                                        (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail, passmail);
                                        if (!string.IsNullOrEmpty(accessToken))
                                        {
                                            break;
                                        }
                                    }

                                }


                                List<string> Link = new List<string>();
                                int delay_doc_link_1 = (int)delay_doc_link.Value;
                                Thread.Sleep(TimeSpan.FromSeconds(delay_doc_link_1));
                                Link = ReadHotmail_LINK(mail, passmail, accessToken, refreshToken);
                                if (Link.Count > 0)
                                {

                                    dgv_BM.Invoke(new Action(() =>
                                    {
                                        // Duyệt qua tất cả các dòng trong DataGridView
                                        foreach (DataGridViewRow row_1 in dgv_BM.Rows)
                                        {
                                            // Kiểm tra xem dòng có giá trị hợp lệ không (dòng không phải là dòng trống)
                                            if (!row_1.IsNewRow)
                                            {
                                                // Giả sử cột tài khoản có tên là "AccountID"
                                                string accountId = row_1.Cells["cIDBM"].Value.ToString();

                                                // Kiểm tra nếu tài khoản có trong danh sách cần cập nhật
                                                if (IDBM == accountId)
                                                {
                                                    // Cập nhật giá trị của cột status (giả sử cột status có tên là "cStatus2")
                                                    row_1.Cells["cTKLIVEDIE"].Value = $"BACK UP DONE";
                                                }
                                            }
                                        }
                                    }));

                                }
                                else
                                {
                                    dgv_BM.Invoke(new Action(() =>
                                    {
                                        // Duyệt qua tất cả các dòng trong DataGridView
                                        foreach (DataGridViewRow row_1 in dgv_BM.Rows)
                                        {
                                            // Kiểm tra xem dòng có giá trị hợp lệ không (dòng không phải là dòng trống)
                                            if (!row_1.IsNewRow)
                                            {
                                                // Giả sử cột tài khoản có tên là "AccountID"
                                                string accountId = row_1.Cells["cIDBM"].Value.ToString();

                                                // Kiểm tra nếu tài khoản có trong danh sách cần cập nhật
                                                if (IDBM == accountId)
                                                {
                                                    // Cập nhật giá trị của cột status (giả sử cột status có tên là "cStatus2")
                                                    row_1.Cells["cTKLIVEDIE"].Value = $"BACK UP FAIL!";
                                                }
                                            }
                                        }
                                    }));
                                }
                                foreach (var link in Link)
                                {
                                    if (rtb_Link_BM.InvokeRequired)
                                    {
                                        rtb_Link_BM.Invoke(new Action(() =>
                                        {
                                            rtb_Link_BM.AppendText(UID_VIA + "|" + IDBM + "|" + link + Environment.NewLine);

                                        }));
                                    }
                                }
                            }

                        }


                    }
                }
            uot1:
                Thread.Sleep(100);
            }
            catch { }

        }

        private void BACK_UP_TU_CHONNEW(ChromeDriver chromedriver, DataGridViewRow row,string USER)
        {
            try
            {
               
               
              


                foreach (DataGridViewRow row_BM in dgv_BM.Rows)
                {
                    try
                    {
                        var UID_VIA = "";
                        try
                        {
                            UID_VIA = row_BM.Cells[1].Value.ToString();
                        }
                        catch { }
                        var IDBM = "";

                        try
                        {
                            IDBM = row_BM.Cells[2].Value.ToString();
                        }
                        catch { }
                        // Kiểm tra xem ô trong cột "cSelectBM" có giá trị true (kiểu bool) không
                        if (row_BM.Cells["cSelectBM"].Value is bool && (bool)row_BM.Cells["cSelectBM"].Value)
                        {
                            if (UID_VIA == USER)
                            {     // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                                chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM}");
                                var html_1 = chromedriver.PageSource;
                                var token_EEAG = "";
                                token_EEAG = Regex.Match(html_1, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                                if (string.IsNullOrEmpty(token_EEAG))
                                {
                                    chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM}&placement=standalone&global_scope_id={IDBM}");
                                    var html1 = chromedriver.PageSource;
                                    token_EEAG = Regex.Match(html1, "\"init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                                }
                                if (string.IsNullOrEmpty(token_EEAG))
                                {
                                    //MessageBox.Show("Lấy Token EAAG FAIL!");
                                    goto uot1;

                                }
                                var loai_mail = "";
                                if (cmb_loai_mail.InvokeRequired)
                                {
                                    cmb_loai_mail.Invoke(new Action(() =>
                                    {
                                        loai_mail = cmb_loai_mail.Text;
                                    }));
                                }
                                else
                                {
                                    loai_mail = cmb_loai_mail.Text;
                                }

                                int so_link_back_up = (int)so_link_backup.Value;

                                for (int sl = 0; sl < so_link_back_up; sl++)
                                {
                                    var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                    var cookiestring = "";
                                    foreach (var cookie in cookiess)
                                    {
                                        cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                    }
                                    cookiestring = cookiestring.Trim(';');
                                    var httpRequest = new HttpRequest();
                                    httpRequest.Cookies = new CookieDictionary();
                                    httpRequest.KeepAlive = true;
                                    httpRequest.AllowAutoRedirect = true;
                                    var cookiess_1 = chromedriver.Manage().Cookies.AllCookies;
                                    var cookiestring_1 = "";
                                    foreach (var cookie in cookiess)
                                    {
                                        cookiestring_1 += cookie.Name + "=" + cookie.Value + ";";
                                    }
                                    cookiestring_1 = cookiestring_1.Trim(';');

                                    httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                    httpRequest.KeepAlive = true;
                                    var cookieRaws1 = cookiestring_1.Split(';');
                                    foreach (var cookieraw in cookieRaws1)
                                    {
                                        var cookieJAr = cookieraw.Split('=');
                                        try
                                        {
                                            httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);

                                        }
                                        catch { }
                                    }



                                    if (loai_mail == "Hotmail.com")
                                    {
                                        httpRequest.AddHeader(":authority", "graph.facebook.com");
                                        httpRequest.AddHeader("accept", "*/*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                        httpRequest.AddHeader("sec-fetch-site", "none");
                                        var mail_pass = "";
                                        if (tb_hotmail_Share_bm.InvokeRequired)
                                        {
                                            tb_hotmail_Share_bm.Invoke(new Action(() =>
                                            {
                                                mail_pass = tb_hotmail_Share_bm.Text;
                                            }));
                                        }
                                        else
                                        {
                                            mail_pass = tb_hotmail_Share_bm.Text;
                                        }
                                        var mail = mail_pass.Split('|')[0].ToString();
                                        var usernamemail = mail.Split('@')[0].ToString();
                                        var domain = mail.Split('@')[1].ToString();

                                        var list_kt = File.ReadAllLines("kytuhotmail.txt").ToList();
                                        Random rd = new Random();
                                        var index = rd.Next(0, list_kt.Count);
                                        var kt = list_kt[index];
                                        var STT = "";

                                        if (cmb_Admin_BM1.InvokeRequired)
                                        {
                                            cmb_Admin_BM1.Invoke(new Action(() =>
                                            {
                                                STT = cmb_Admin_BM1.Text;
                                            }));
                                        }
                                        else
                                        {
                                            STT = cmb_Admin_BM1.Text;
                                        }
                                        var ADMIN = "";
                                        if (STT == "Quyền Admin")
                                        {
                                            ADMIN = "ADMIN";
                                        }
                                        if (STT == "Quyền Nhân Viên")
                                        {
                                            ADMIN = "EMPLOYEE";
                                        }
                                        var mail_share = usernamemail + "%2B" + kt + IDBM + "@" + domain;
                                        var url_hotmail = $"https://graph.facebook.com/v8.0/{IDBM}/business_users?access_token={token_EEAG}&method=POST&role={ADMIN}&email={mail_share}";
                                        try
                                        {
                                            var response = httpRequest.Get(url_hotmail);
                                            var responseStr = response.ToString();

                                        }
                                        catch
                                        {
                                            var response = httpRequest.Get(url_hotmail);
                                            var responseStr = response.ToString();

                                        }


                                    }
                                    if (loai_mail == "MoaKt.com")
                                    {
                                        httpRequest.AddHeader(":authority", "graph.facebook.com");
                                        httpRequest.AddHeader("accept", "*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                        httpRequest.AddHeader("sec-fetch-site", "none");
                                        var STT = "";
                                        if (cmb_Admin_BM1.InvokeRequired)
                                        {
                                            cmb_Admin_BM1.Invoke(new Action(() =>
                                            {
                                                STT = cmb_Admin_BM1.Text;
                                            }));
                                        }
                                        else
                                        {
                                            STT = cmb_Admin_BM1.Text;
                                        }
                                        var ADMIN = "";
                                        if (STT == "Quyền Admin")
                                        {
                                            ADMIN = "ADMIN";
                                        }
                                        if (STT == "Quyền Nhân Viên")
                                        {
                                            ADMIN = "EMPLOYEE";
                                        }
                                        HttpRequest httprequest_Mail_MOAKT = new HttpRequest();
                                        httprequest_Mail_MOAKT.Cookies = new CookieDictionary();
                                        httprequest_Mail_MOAKT.KeepAlive = true;
                                        httprequest_Mail_MOAKT.AllowAutoRedirect = true;
                                        httprequest_Mail_MOAKT.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                                        var mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                        if (string.IsNullOrEmpty(mail_share))
                                        {
                                            mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                        }

                                        var url_hotmail = $"https://graph.facebook.com/v8.0/{IDBM}/business_users?access_token={token_EEAG}&method=POST&role={ADMIN}&email={mail_share}";
                                        try
                                        {
                                            var response = httpRequest.Get(url_hotmail);
                                            var responseStr = response.ToString();

                                        }
                                        catch
                                        {
                                            var response = httpRequest.Get(url_hotmail);
                                            var responseStr = response.ToString();

                                        }


                                        var link = link_moakt(httprequest_Mail_MOAKT);
                                        if (string.IsNullOrEmpty(link))
                                        {
                                            link = link_moakt(httprequest_Mail_MOAKT);

                                        }
                                        if (string.IsNullOrEmpty(link))
                                        {

                                            if (rtb_Link_BM.InvokeRequired)
                                            {
                                                rtb_Link_BM.Invoke(new Action(() =>
                                                {
                                                    rtb_Link_BM.AppendText(UID_VIA + "|" + IDBM + "|" + link + Environment.NewLine);

                                                }));
                                            }

                                            dgv_BM.Invoke(new Action(() =>
                                            {
                                                // Duyệt qua tất cả các dòng trong DataGridView
                                                foreach (DataGridViewRow row_1 in dgv_BM.Rows)
                                                {
                                                    // Kiểm tra xem dòng có giá trị hợp lệ không (dòng không phải là dòng trống)
                                                    if (!row_1.IsNewRow)
                                                    {
                                                        // Giả sử cột tài khoản có tên là "AccountID"
                                                        string accountId = "";

                                                        try
                                                        {
                                                            accountId = row_1.Cells["cIDBM"].Value.ToString();
                                                        }
                                                        catch { }
                                                        // Kiểm tra nếu tài khoản có trong danh sách cần cập nhật
                                                        if (IDBM == accountId)
                                                        {
                                                            // Cập nhật giá trị của cột status (giả sử cột status có tên là "cStatus2")
                                                            row_1.Cells["cSTKDIELIVE"].Value = "BACK UP FAIL!";
                                                        }
                                                    }
                                                }
                                            }));





                                        }
                                        else
                                        {
                                            if (rtb_Link_BM.InvokeRequired)
                                            {
                                                rtb_Link_BM.Invoke(new Action(() =>
                                                {
                                                    rtb_Link_BM.AppendText(UID_VIA + "|" + IDBM + "|" + link + Environment.NewLine);

                                                }));
                                            }
                                            dgv_BM.Invoke(new Action(() =>
                                            {
                                                // Duyệt qua tất cả các dòng trong DataGridView
                                                foreach (DataGridViewRow row_1 in dgv_BM.Rows)
                                                {
                                                    // Kiểm tra xem dòng có giá trị hợp lệ không (dòng không phải là dòng trống)
                                                    if (!row_1.IsNewRow)
                                                    {
                                                        string accountId = "";

                                                        try
                                                        {
                                                            accountId = row_1.Cells["cIDBM"].Value.ToString();
                                                        }
                                                        catch { }

                                                        // Kiểm tra nếu tài khoản có trong danh sách cần cập nhật
                                                        if (IDBM == accountId)
                                                        {
                                                            // Cập nhật giá trị của cột status (giả sử cột status có tên là "cStatus2")
                                                            row_1.Cells["cTKLIVEDIE"].Value = $"BACK UP DONE";
                                                        }
                                                    }
                                                }
                                            }));
                                        }


                                    }
                                    int delay = (int)delay_doc_link.Value;
                                    Thread.Sleep(TimeSpan.FromSeconds(delay));
                                }

                                if (loai_mail == "Hotmail.com")
                                {
                                    var mail_pass = "";
                                    if (tb_hotmail_Share_bm.InvokeRequired)
                                    {
                                        tb_hotmail_Share_bm.Invoke(new Action(() =>
                                        {
                                            mail_pass = tb_hotmail_Share_bm.Text;
                                        }));
                                    }
                                    else
                                    {
                                        mail_pass = tb_hotmail_Share_bm.Text;
                                    }

                                    var mail = mail_pass.Split('|')[0].ToString();
                                    var passmail = mail_pass.Split('|')[1].ToString();

                                    var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail, passmail);
                                    if (string.IsNullOrEmpty(accessToken))
                                    {
                                        for (int j = 0; j < 5; j++)
                                        {
                                            Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                                            (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail, passmail);
                                            if (!string.IsNullOrEmpty(accessToken))
                                            {
                                                break;
                                            }
                                        }

                                    }


                                    List<string> Link = new List<string>();
                                    int delay_doc_link_1 = (int)delay_doc_link.Value;
                                    Thread.Sleep(TimeSpan.FromSeconds(delay_doc_link_1));
                                    Link = ReadHotmail_LINK(mail, passmail, accessToken, refreshToken);
                                    if (Link.Count > 0)
                                    {

                                        dgv_BM.Invoke(new Action(() =>
                                        {
                                            // Duyệt qua tất cả các dòng trong DataGridView
                                            foreach (DataGridViewRow row_1 in dgv_BM.Rows)
                                            {
                                                // Kiểm tra xem dòng có giá trị hợp lệ không (dòng không phải là dòng trống)
                                                if (!row_1.IsNewRow)
                                                {
                                                    // Giả sử cột tài khoản có tên là "AccountID"
                                                    string accountId = row_1.Cells["cIDBM"].Value.ToString();

                                                    // Kiểm tra nếu tài khoản có trong danh sách cần cập nhật
                                                    if (IDBM == accountId)
                                                    {
                                                        // Cập nhật giá trị của cột status (giả sử cột status có tên là "cStatus2")
                                                        row_1.Cells["cTKLIVEDIE"].Value = $"BACK UP DONE";
                                                    }
                                                }
                                            }
                                        }));

                                    }
                                    else
                                    {
                                        dgv_BM.Invoke(new Action(() =>
                                        {
                                            // Duyệt qua tất cả các dòng trong DataGridView
                                            foreach (DataGridViewRow row_1 in dgv_BM.Rows)
                                            {
                                                // Kiểm tra xem dòng có giá trị hợp lệ không (dòng không phải là dòng trống)
                                                if (!row_1.IsNewRow)
                                                {
                                                    // Giả sử cột tài khoản có tên là "AccountID"
                                                    string accountId = row_1.Cells["cIDBM"].Value.ToString();

                                                    // Kiểm tra nếu tài khoản có trong danh sách cần cập nhật
                                                    if (IDBM == accountId)
                                                    {
                                                        // Cập nhật giá trị của cột status (giả sử cột status có tên là "cStatus2")
                                                        row_1.Cells["cTKLIVEDIE"].Value = $"BACK UP FAIL!";
                                                    }
                                                }
                                            }
                                        }));
                                    }
                                    foreach (var link in Link)
                                    {
                                        if (rtb_Link_BM.InvokeRequired)
                                        {
                                            rtb_Link_BM.Invoke(new Action(() =>
                                            {
                                                rtb_Link_BM.AppendText(UID_VIA + "|" + IDBM + "|" + link + Environment.NewLine);

                                            }));
                                        }
                                    }
                                }

                            }






                        }
                    }
                    catch { }
              
                }
            uot1:
                Thread.Sleep(100);
            }
            catch { }

        }

        //BACK UP BM THEO ID
        private async void bACKUPBMTHEOIDToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                BACK_UP_BM_ID(chromeDriver, accountData.Row, accountData.User);
                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);
            }
            catch { }



        }

        private void BACK_UP_BM_ID(ChromeDriver chromedriver, DataGridViewRow row, string USER)
        {
            try
            {
                var UID_VIA = row.Cells["cUID"].Value.ToString();
                List<string> IDBM_BACK_UP = new List<string>();
                List<string> IDBM_BACK_UP_DONE = new List<string>();

                if (rtb_IDBM_CAN_BACK_Up.InvokeRequired)
                {
                    rtb_IDBM_CAN_BACK_Up.Invoke(new Action(() =>
                    {
                        IDBM_BACK_UP = rtb_IDBM_CAN_BACK_Up.Lines.ToList();
                    }));
                }
                else
                {
                    IDBM_BACK_UP = rtb_IDBM_CAN_BACK_Up.Lines.ToList();
                }

                var token_EEAG = "";
                foreach ( var IDVIA_IDBM in IDBM_BACK_UP)
                {
                    try
                    {
                        if (!string.IsNullOrEmpty(IDVIA_IDBM))
                        {
                            var IDVIA1 = IDVIA_IDBM.Split('|')[0];
                        
                            var IDBM = IDVIA_IDBM.Split('|')[1];
                         
                            if (UID_VIA == IDVIA1)
                            {
                                try
                                {
                                    if (string.IsNullOrEmpty(token_EEAG))
                                    {
                                        var API = "";
                                        if (cmb_API_CHROME_BACK_UP_BM_THEO_ID.InvokeRequired)
                                        {
                                            cmb_API_CHROME_BACK_UP_BM_THEO_ID.Invoke(new Action(() =>
                                            {
                                                API = cmb_API_CHROME_BACK_UP_BM_THEO_ID.Text;

                                            }));

                                        }
                                        if(API == "API")
                                        {
                                            try
                                            {
                                                // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                                var cookiestring = "";
                                                foreach (var cookie in cookiess)
                                                {
                                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                                }
                                                cookiestring = cookiestring.Trim(';');
                                                var httpRequest = new HttpRequest();
                                                httpRequest.Cookies = new CookieDictionary();
                                                httpRequest.KeepAlive = true;
                                                httpRequest.AllowAutoRedirect = true;
                                                var cookiess_1 = chromedriver.Manage().Cookies.AllCookies;
                                                var cookiestring_1 = "";
                                                foreach (var cookie in cookiess)
                                                {
                                                    cookiestring_1 += cookie.Name + "=" + cookie.Value + ";";
                                                }
                                                cookiestring_1 = cookiestring_1.Trim(';');

                                                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                                httpRequest.KeepAlive = true;
                                                var cookieRaws1 = cookiestring_1.Split(';');
                                                foreach (var cookieraw in cookieRaws1)
                                                {
                                                    var cookieJAr = cookieraw.Split('=');
                                                    try
                                                    {
                                                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);

                                                    }
                                                    catch { }
                                                }
                                                try
                                                {
                                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                    httpRequest.AddHeader("dpr", "1");
                                                    httpRequest.AddHeader("priority", "u=0, i");
                                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.108\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.108\"");
                                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                                    httpRequest.AddHeader("viewport-width", "1177");
                                                    var response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM}");

                                                    if (response.IsOK)
                                                    {
                                                        var responseStr = response.ToString();
                                                        token_EEAG = Regex.Match(responseStr, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();

                                                    }

                                                }
                                                catch { }
                                             
                                                if (string.IsNullOrEmpty(token_EEAG))
                                                {
                                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                    httpRequest.AddHeader("dpr", "1");
                                                    httpRequest.AddHeader("priority", "u=0, i");
                                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.108\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.108\"");
                                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                                    httpRequest.AddHeader("viewport-width", "851");

                                                    var response = httpRequest.Get($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM}&placement=ads_manager");
                                                    if (response.IsOK)
                                                    {
                                                        var responseStr = response.ToString();
                                                        token_EEAG = Regex.Match(responseStr, "\"init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();

                                                    }
                                                }

                                            }
                                            catch { }

                                            if (string.IsNullOrEmpty(token_EEAG))
                                            {
                                                MessageBox.Show("Lấy Token EAAG FAIL!");
                                                if (tb_Token.InvokeRequired)
                                                {
                                                    tb_Token.Invoke(new Action(() =>
                                                    {
                                                        token_EEAG = tb_Token.Text;
                                                    }));

                                                }
                                                else
                                                {
                                                    token_EEAG = tb_Token.Text;
                                                }
                                            }
                                            if (string.IsNullOrEmpty(token_EEAG))
                                            {
                                                //MessageBox.Show("Lấy Token EAAG FAIL!");
                                                goto uot1;

                                            }

                                        }
                                        else
                                        {
                                            // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                                            chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM}");
                                            var html_1 = chromedriver.PageSource;
                                            token_EEAG = Regex.Match(html_1, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                                            if (string.IsNullOrEmpty(token_EEAG))
                                            {
                                                chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM}&placement=standalone&global_scope_id={IDBM}");
                                                var html1 = chromedriver.PageSource;
                                                token_EEAG = Regex.Match(html1, "\"init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                                            }
                                            if (string.IsNullOrEmpty(token_EEAG))
                                            {
                                                MessageBox.Show("Lấy Token EAAG FAIL!");
                                                if (tb_Token.InvokeRequired)
                                                {
                                                    tb_Token.Invoke(new Action(() =>
                                                    {
                                                        token_EEAG = tb_Token.Text;
                                                    }));

                                                }
                                                else
                                                {
                                                    token_EEAG = tb_Token.Text;
                                                }
                                            }
                                            if (string.IsNullOrEmpty(token_EEAG))
                                            {
                                                //MessageBox.Show("Lấy Token EAAG FAIL!");
                                                goto uot1;

                                            }

                                        }


                              


                                    }

                                    var loai_mail = "";
                                    if (cmb_loai_mail.InvokeRequired)
                                    {
                                        cmb_loai_mail.Invoke(new Action(() =>
                                        {
                                            loai_mail = cmb_loai_mail.Text;
                                        }));
                                    }
                                    else
                                    {
                                        loai_mail = cmb_loai_mail.Text;
                                    }
                                    var share_ban = "";
                                    if (cmb_share_ban.InvokeRequired)
                                    {
                                        cmb_share_ban.Invoke(new Action(() =>
                                        {
                                            share_ban = cmb_share_ban.Text;

                                        }));
                                    }

                                    int so_link_back_up = (int)so_link_backup.Value;

                                    for (int sl = 0; sl < so_link_back_up; sl++)
                                    {
                                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                        var cookiestring = "";
                                        foreach (var cookie in cookiess)
                                        {
                                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                        }
                                        cookiestring = cookiestring.Trim(';');
                                        var httpRequest = new HttpRequest();
                                        httpRequest.Cookies = new CookieDictionary();
                                        httpRequest.KeepAlive = true;
                                        httpRequest.AllowAutoRedirect = true;
                                        var cookiess_1 = chromedriver.Manage().Cookies.AllCookies;
                                        var cookiestring_1 = "";
                                        foreach (var cookie in cookiess)
                                        {
                                            cookiestring_1 += cookie.Name + "=" + cookie.Value + ";";
                                        }
                                        cookiestring_1 = cookiestring_1.Trim(';');

                                        httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                        httpRequest.KeepAlive = true;
                                        var cookieRaws1 = cookiestring_1.Split(';');
                                        foreach (var cookieraw in cookieRaws1)
                                        {
                                            var cookieJAr = cookieraw.Split('=');
                                            try
                                            {
                                                httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);

                                            }
                                            catch { }
                                        }



                                        if (loai_mail == "Hotmail.com")
                                        {
                                            httpRequest.AddHeader(":authority", "graph.facebook.com");
                                            httpRequest.AddHeader("accept", "*/*");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("priority", "u=1, i");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                                            httpRequest.AddHeader("sec-fetch-site", "none");
                                            var mail_pass = "";
                                            if (tb_hotmail_Share_bm.InvokeRequired)
                                            {
                                                tb_hotmail_Share_bm.Invoke(new Action(() =>
                                                {
                                                    mail_pass = tb_hotmail_Share_bm.Text;
                                                }));
                                            }
                                            else
                                            {
                                                mail_pass = tb_hotmail_Share_bm.Text;
                                            }
                                            var mail = mail_pass.Split('|')[0].ToString();
                                            var usernamemail = mail.Split('@')[0].ToString();
                                            var domain = mail.Split('@')[1].ToString();

                                            var list_kt = File.ReadAllLines("kytuhotmail.txt").ToList();
                                            Random rd = new Random();
                                            var index = rd.Next(0, list_kt.Count);
                                            var kt = list_kt[index];
                                            var STT = "";

                                            if (cmb_Admin_BM1.InvokeRequired)
                                            {
                                                cmb_Admin_BM1.Invoke(new Action(() =>
                                                {
                                                    STT = cmb_Admin_BM1.Text;
                                                }));
                                            }
                                            else
                                            {
                                                STT = cmb_Admin_BM1.Text;
                                            }
                                            var ADMIN = "";
                                            if (STT == "Quyền Admin")
                                            {
                                                ADMIN = "ADMIN";
                                            }
                                            if (STT == "Quyền Nhân Viên")
                                            {
                                                ADMIN = "EMPLOYEE";
                                            }
                                            var mail_share = usernamemail + "%2B" + kt + IDBM + "@" + domain;
                                            var url_hotmail = $"https://graph.facebook.com/v8.0/{IDBM}/business_users?access_token={token_EEAG}&method=POST&role={ADMIN}&email={mail_share}";
                                            try
                                            {
                                                var response = httpRequest.Get(url_hotmail);
                                                var responseStr = response.ToString();
                                                if (share_ban == "ON")
                                                {
                                                    if (rtb_Link_BM.InvokeRequired)
                                                    {
                                                        rtb_Link_BM.Invoke(new Action(() =>
                                                        {
                                                            rtb_Link_BM.AppendText(IDBM + "|=> BACKUP DONE" + Environment.NewLine);

                                                        }));
                                                    }

                                                }
                                            }
                                            catch
                                            {
                                                var response = httpRequest.Get(url_hotmail);
                                                var responseStr = response.ToString();

                                                if (share_ban == "ON")
                                                {
                                                    if (rtb_Link_BM.InvokeRequired)
                                                    {
                                                        rtb_Link_BM.Invoke(new Action(() =>
                                                        {
                                                            rtb_Link_BM.AppendText(IDBM + "|=> BACKUP DONE" + Environment.NewLine);

                                                        }));
                                                    }
                                                }
                                            }


                                        }
                                        if (loai_mail == "MoaKt.com")
                                        {
                                            httpRequest.AddHeader(":authority", "graph.facebook.com");
                                            httpRequest.AddHeader("accept", "*");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("priority", "u=1, i");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                                            httpRequest.AddHeader("sec-fetch-site", "none");
                                            var STT = "";
                                            if (cmb_Admin_BM1.InvokeRequired)
                                            {
                                                cmb_Admin_BM1.Invoke(new Action(() =>
                                                {
                                                    STT = cmb_Admin_BM1.Text;
                                                }));
                                            }
                                            else
                                            {
                                                STT = cmb_Admin_BM1.Text;
                                            }
                                            var ADMIN = "";
                                            if (STT == "Quyền Admin")
                                            {
                                                ADMIN = "ADMIN";
                                            }
                                            if (STT == "Quyền Nhân Viên")
                                            {
                                                ADMIN = "EMPLOYEE";
                                            }
                                            HttpRequest httprequest_Mail_MOAKT = new HttpRequest();
                                            httprequest_Mail_MOAKT.Cookies = new CookieDictionary();
                                            httprequest_Mail_MOAKT.KeepAlive = true;
                                            httprequest_Mail_MOAKT.AllowAutoRedirect = true;
                                            httprequest_Mail_MOAKT.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                                            var mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                            if (string.IsNullOrEmpty(mail_share))
                                            {
                                                mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                            }

                                            var url_hotmail = $"https://graph.facebook.com/v8.0/{IDBM}/business_users?access_token={token_EEAG}&method=POST&role={ADMIN}&email={mail_share}";
                                            try
                                            {
                                                var response = httpRequest.Get(url_hotmail);
                                                var responseStr = response.ToString();

                                            }
                                            catch
                                            {
                                                var response = httpRequest.Get(url_hotmail);
                                                var responseStr = response.ToString();

                                            }


                                            var link = link_moakt(httprequest_Mail_MOAKT);
                                            if (string.IsNullOrEmpty(link))
                                            {
                                                link = link_moakt(httprequest_Mail_MOAKT);

                                            }
                                            if (string.IsNullOrEmpty(link))
                                            {

                                                if (rtb_backup_fail.InvokeRequired)
                                                {
                                                    rtb_backup_fail.Invoke(new Action(() =>
                                                    {
                                                        rtb_backup_fail.AppendText(UID_VIA + "|" + IDBM  + Environment.NewLine);

                                                    }));
                                                }



                                            }
                                            else
                                            {
                                                IDBM_BACK_UP_DONE.Add(IDBM);
                                                if (rtb_Link_BM.InvokeRequired)
                                                {
                                                    rtb_Link_BM.Invoke(new Action(() =>
                                                    {
                                                        rtb_Link_BM.AppendText(UID_VIA + "|" + IDBM + "|" + link + Environment.NewLine);

                                                    }));
                                                }
                                               // row.Cells["cTKLIVEDIE"].Value = $"BACK UP DONE";
                                            }


                                        }
                                    }
                              
                                    if (share_ban == "OFF")
                                    {
                                        if (loai_mail == "Hotmail.com")
                                        {
                                            var mail_pass = "";
                                            if (tb_hotmail_Share_bm.InvokeRequired)
                                            {
                                                tb_hotmail_Share_bm.Invoke(new Action(() =>
                                                {
                                                    mail_pass = tb_hotmail_Share_bm.Text;
                                                }));
                                            }
                                            else
                                            {
                                                mail_pass = tb_hotmail_Share_bm.Text;
                                            }

                                            var mail = mail_pass.Split('|')[0].ToString();
                                            var passmail = mail_pass.Split('|')[1].ToString();

                                            var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail, passmail);
                                            if (string.IsNullOrEmpty(accessToken))
                                            {
                                                for (int j = 0; j < 5; j++)
                                                {
                                                    Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                                                    (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail, passmail);
                                                    if (!string.IsNullOrEmpty(accessToken))
                                                    {
                                                        break;
                                                    }
                                                }

                                            }


                                            List<string> Link = new List<string>();
                                            int delay_doc_link_1 = (int)delay_doc_link.Value;
                                            Thread.Sleep(TimeSpan.FromSeconds(delay_doc_link_1));
                                            Link = ReadHotmail_LINK(mail, passmail, accessToken, refreshToken);
                                            if (Link.Count > 0)
                                            {

                                                row.Cells["cTKLIVEDIE"].Value = $"BACK UP DONE";

                                            }
                                            else
                                            {
                                                row.Cells["cTKLIVEDIE"].Value = $"BACK UP FAIL!";
                                            }
                                            foreach (var link in Link)
                                            {
                                                if (rtb_Link_BM.InvokeRequired)
                                                {
                                                    rtb_Link_BM.Invoke(new Action(() =>
                                                    {
                                                        rtb_Link_BM.AppendText(UID_VIA + "|" + IDBM + "|" + link + Environment.NewLine);

                                                    }));
                                                }
                                            }
                                        }
                                    }
                                 

                                    int delay = (int)delay_doc_link.Value;
                                    Thread.Sleep(TimeSpan.FromSeconds(delay));

                                }
                                catch { }

                            }

                        }

                    }
                    catch 
                    {

                        if (rtb_backup_fail.InvokeRequired)
                        {
                            rtb_backup_fail.Invoke(new Action(() =>
                            {
                                rtb_backup_fail.AppendText(IDVIA_IDBM + "|=> BACKUP FAIL!"+Environment.NewLine);

                            }));
                        }


                    }
            
                }

            uot1:
                Thread.Sleep(1);

                row.Cells["cStatus"].Value = $"DONE {IDBM_BACK_UP_DONE.Count}/{IDBM_BACK_UP.Count}";
            }
            catch { }

        }


        // TEST SHARE ACCOUNT IG
        private async void tESTSHAREACIGToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var tasks = new List<Task>();
            foreach (var entry in lstDataChromeIG)
            {
                ChromeDriver chromeDriver = entry.Key;
                AccountData1 accountData = entry.Value;

                // Kiểm tra xem cột "cSelect" có tồn tại không
                if (accountData.Row1.Cells[9] != null)
                {
                    var cSelectValue = accountData.Row1.Cells[9].Value;

                    // Kiểm tra xem cột "cSelect" có được chọn hay không
                    if (cSelectValue != null && (bool)cSelectValue)
                    {
                        // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                        tasks.Add(Task.Run(() =>
                        {
                            SHARE_AC_IG(chromeDriver, accountData.Row1, accountData.User1);


                        }));
                    }
                }
                else
                {
                    // Cột "cSelect" không tồn tại
                    MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                }
            }
            await Task.WhenAll(tasks);

        }
        private void SHARE_AC_IG(ChromeDriver chromedriver, DataGridViewRow row, string username)
        {
            try
            {
                var uid = Regex.Match(chromedriver.PageSource, "NON_FACEBOOK_USER_ID\":\"(.*?)\"").Groups[1].Value;
                var IDBM_C = "817815454040467";
                var IDACCOUNT = "1358005739184752";
                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                var cookiestring = "";
                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }
                cookiestring = cookiestring.Trim(';');
                HttpRequest httpRequest = new HttpRequest();
                httpRequest.AllowAutoRedirect = true;
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                httpRequest.KeepAlive = true;
                var cookieRaws = cookiestring.Split(';');
                foreach (var cookieraw in cookieRaws)
                {
                    var cookieJAr = cookieraw.Split('=');
                    try
                    {
                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                    }
                    catch { }
                }
                var responesStroverview = chromedriver.PageSource;



                httpRequest.AddHeader("authority", "business.facebook.com");
                httpRequest.AddHeader("accept", "*");
                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httpRequest.AddHeader("priority", "u=1, i");
                httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/ad_accounts?business_id={IDBM_C}");
                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.140\", \"Chromium\";v=\"131.0.6778.140\", \"Not_A Brand\";v=\"24.0.0.0\"");
                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                httpRequest.AddHeader("sec-fetch-dest", "empty");
                httpRequest.AddHeader("sec-fetch-mode", "cors");
                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                httpRequest.AddHeader("x-asbd-id", "129477");
                httpRequest.AddHeader("x-bh-flowsessionid", "upl_wizard_1734668114085_491553ea-0cc7-4567-83a0-cf44d8da996d");
                httpRequest.AddHeader("x-fb-friendly-name", "BizKitSettingsRequestAdAccountAccessMutation");
                httpRequest.AddHeader("x-fb-upl-sessionid", "upl_1734668114085_273bf307-35aa-4d07-8c4c-8138ea1829e9");
                var fb_dtsg = Regex.Match(responesStroverview, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"}").Groups[1].Value;
                var lsd = Regex.Match(responesStroverview, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                var jazoest = Regex.Match(responesStroverview, "&jazoest=(.*?)\",").Groups[1].Value;
                var url1 = "";
                var payload1 = "";
                url1 = "https://business.facebook.com/api/graphql/?_callFlowletID=9422&_triggerFlowletID=9417";
                payload1 = $"av={uid}&__usid=6-Tsow8xd59fixy:Psowd5g1gmnk7z:0-Asowd5sn01u2v-RV=6:F=&__aaid=0&__bid={IDBM_C}&__user={uid}&__a=1&__req=13&__hs=20079.HYP:bizweb_comet_pkg.2.1.0.0.0&dpr=1&__ccg=GOOD&__rev=1019055684&__s=q5syll:s1c085:h2jnyd&__hsi=7451226006509486975&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgE7R04zwIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48comwkE-UbE7i4UaEW2G261fwwwJK1qxa1ozEjU4Wdwoo4S5ayocE3BwMzUbVEHyU8U3ywbS1LwTwNAK2q0z8co9U4S7E6C13www4kxW1owmUaEeE5K22&__csr=g44hsh3a5lfsnklHb5h2OQzdGyfcyiv9jkzdJ5IHSO8IigybnOuz94l6ncBdnZfqmGZaqhpuAahQKWmJaFHkzJurYGnlEGuh9DGiWHRBRh_FkOmQ9miKHA-QF5GmGGZqVe9yanh9eidu9h9VbzKLqKrJrGCLxaP39p8Kt5KGyFqDppBnBqxuWBpAifyZajGBJrCxei5v-muECiV99--exauuvBCBAAJ6yWAiAGu4oGGGqbAghjyFV_K443m7HxmmezEhyUnwl8y6WVGG2m4kayoux69XgOex7AG2C8wgppVAufU4TBwRDwIxS1QwDxu1awBAwg83tzXXmQ3K1bg0bmE1eEiDAy8O581oy8nkh518laBf2svNv7w5mw7dw5szyG4A0QEk809oG0tGA0Vo2-weybw6mwpo1co4e6m1qw58a0wEW5Eqw0tWE04JGv805ho1Op206jg2OBu17Cw1gu07RozCVmUdo710TClwJw1bu0fIabg-03Ju0q62q0c0a04BEow4PDw0yNg1jQ0f4S32vwhK0WES0uiq0qq&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019055684&__spin_b=trunk&__spin_t=1734873747&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsRequestAdAccountAccessMutation&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{uid}\",\"ad_account_id\":\"{IDACCOUNT}\",\"permitted_roles\":[\"864195700451909\",\"151821535410699\",\"610690166001223\",\"186595505260379\"],\"permitted_tasks\":[],\"requesting_business_id\":\"{IDBM_C}\"}}}}&server_timestamps=true&doc_id=7293074874139866";

                url1 = "https://business.facebook.com/api/graphql/?_callFlowletID=7586&_triggerFlowletID=7581";
                payload1 = $"av={uid}&__usid=6-Tsorxnw1cqywsa:Psoryh6saf6vd:0-Asorxmrr70q24-RV=6:F=&__aaid=0&__bid={IDBM_C}&__user={uid}&__a=1&__req=15&__hs=20077.HYP:bizweb_comet_pkg.2.1.0.0.0&dpr=1&__ccg=EXCELLENT&__rev=1019018670&__s=7zkooo:lgz5dd:nka6jh&__hsi=7450342785382626345&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgE7R04zwIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48comwkE-UbE7i4UaEW2G261fwwwJK1qxa1ozEjU4Wdwoo4S5ayocE3BwMzUbVEHyU8U3ywbS1LwTwNAK2q0z8co9U4S7E6C13www4kxW1owmUaEeE5K22&__csr=g4X8DayPq4kwwBYO4n5nmRdeReB9kOIh4niSxdObQDLlNlbLQOv8hf9CQylnLeWimQnHp4HVrCtXVliWjWmRhZk-SpcAV9tAWXmCty5-p5ioLDivGhCAp9m_HgyH-aqiA-hHyoPCyJ5BKlaKhfjAAF6LQjiSUPLy65ZoxHgN9ppAEJ4FpoyF9eQut17UOnDiUyKKmWAKKdCx12k4ay9oGczKnigkDK9yHDy-l4GhpHyeEoxq7paXBVF8Rwgoy68ycxC5oaO7U9E-UKUWmayQGxSuaQfxmUkxa6XxaE-mGG26Utxl1ecw8bw_K5Umxu8wNDyE5O3i4U5611xyq0qO0LUug0Glddehd4w1v-8g0zga2oxgjG3i6Q1j1k5hkC0fYw2u963S1nGdw4-Hwk87eaw2LU0H2E4W0NU4S0Qro2Fwfy0hu4UkQ0AKmi011Jw0s7UGgw0oVzUHa0Ao0jMIw1xoy6p5iw9aO0iogBg0jIw2Y2yQ022yC1ogW02c602wm09ag5G05hyw5MwlU1tu02bKu0iJ0sk0czwp6dBo32wo80RS0ht0&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1019018670&__spin_b=trunk&__spin_t=1734668106&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsRequestAdAccountAccessMutation&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{uid}\",\"ad_account_id\":\"{IDACCOUNT}\",\"permitted_roles\":[\"864195700451909\",\"151821535410699\",\"610690166001223\",\"186595505260379\"],\"permitted_tasks\":[],\"requesting_business_id\":\"{IDBM_C}\"}}}}&server_timestamps=true&doc_id=7293074874139866";
                var responsePost = httpRequest.Post(url1, payload1, "application/x-www-form-urlencoded");
                if (responsePost.IsOK)
                {
                    var responsePostStr = responsePost.ToString();




                }


            }
            catch { }




        }



        // OUT BM THEO ID
        private async void oUTBMTHEOIDToolStripMenuItem_Click(object sender, EventArgs e)
        {

            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                UOT_BM_ID(chromeDriver, accountData.Row, accountData.User);
                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);
            }
            catch { }

        }


        private void UOT_BM_ID(ChromeDriver chromedriver, DataGridViewRow row, string USER)
        {

            try
            {
                var UID_VIA = row.Cells["cUID"].Value.ToString();
                List<string> IDBM_BACK_UOT = new List<string>();
                List<string> IDBM_BACK_UOT_DONE = new List<string>();

                if (rtb_IDBM_CAN_BACK_Up.InvokeRequired)
                {
                    rtb_IDBM_CAN_BACK_Up.Invoke(new Action(() =>
                    {
                        IDBM_BACK_UOT = rtb_IDBM_CAN_BACK_Up.Lines.ToList();
                    }));
                }
                else
                {
                    IDBM_BACK_UOT = rtb_IDBM_CAN_BACK_Up.Lines.ToList();
                }
                var IDVIA2 = IDBM_BACK_UOT[0].Split('|')[0];
                var token_EEAG = "";
                if (UID_VIA == IDVIA2)
                {
                    if (string.IsNullOrEmpty(token_EEAG))
                    {
                        var API = "";
                        if (cmb_API_CHROME_BACK_UP_BM_THEO_ID.InvokeRequired)
                        {
                            cmb_API_CHROME_BACK_UP_BM_THEO_ID.Invoke(new Action(() =>
                            {
                                API = cmb_API_CHROME_BACK_UP_BM_THEO_ID.Text;

                            }));

                        }
                        if (API == "API")
                        {
                            try
                            {
                                // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                var cookiestring = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                }
                                cookiestring = cookiestring.Trim(';');
                                var httpRequest = new HttpRequest();
                                httpRequest.Cookies = new CookieDictionary();
                                httpRequest.KeepAlive = true;
                                httpRequest.AllowAutoRedirect = true;
                                var cookiess_1 = chromedriver.Manage().Cookies.AllCookies;
                                var cookiestring_1 = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring_1 += cookie.Name + "=" + cookie.Value + ";";
                                }
                                cookiestring_1 = cookiestring_1.Trim(';');

                                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                httpRequest.KeepAlive = true;
                                var cookieRaws1 = cookiestring_1.Split(';');
                                foreach (var cookieraw in cookieRaws1)
                                {
                                    var cookieJAr = cookieraw.Split('=');
                                    try
                                    {
                                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);

                                    }
                                    catch { }
                                }
                                try
                                {
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("dpr", "1");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.108\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.108\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "1177");
                                    var response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM_BACK_UOT[0].Split('|')[1]}");

                                    if (response.IsOK)
                                    {
                                        var responseStr = response.ToString();
                                        token_EEAG = Regex.Match(responseStr, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();

                                    }

                                }
                                catch { }

                                if (string.IsNullOrEmpty(token_EEAG))
                                {
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("dpr", "1");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.108\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.108\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "851");

                                    var response = httpRequest.Get($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM_BACK_UOT[0].Split('|')[1]}&placement=ads_manager");
                                    if (response.IsOK)
                                    {
                                        var responseStr = response.ToString();
                                        token_EEAG = Regex.Match(responseStr, "\"init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();

                                    }
                                }

                            }
                            catch { }

                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                MessageBox.Show("Lấy Token EAAG FAIL!");
                                if (tb_Token.InvokeRequired)
                                {
                                    tb_Token.Invoke(new Action(() =>
                                    {
                                        token_EEAG = tb_Token.Text;
                                    }));

                                }
                                else
                                {
                                    token_EEAG = tb_Token.Text;
                                }
                            }
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                //MessageBox.Show("Lấy Token EAAG FAIL!");
                                goto uot1;

                            }

                        }
                        else
                        {
                            // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                            chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM_BACK_UOT[0].Split('|')[1]}");
                            var html_1 = chromedriver.PageSource;
                            token_EEAG = Regex.Match(html_1, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM_BACK_UOT[0].Split('|')[1]}&placement=standalone&global_scope_id={IDBM_BACK_UOT[0].Split('|')[1]}");
                                var html1 = chromedriver.PageSource;
                                token_EEAG = Regex.Match(html1, "\"init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                            }
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                MessageBox.Show("Lấy Token EAAG FAIL!");
                                if (tb_Token.InvokeRequired)
                                {
                                    tb_Token.Invoke(new Action(() =>
                                    {
                                        token_EEAG = tb_Token.Text;
                                    }));

                                }
                                else
                                {
                                    token_EEAG = tb_Token.Text;
                                }
                            }
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                //MessageBox.Show("Lấy Token EAAG FAIL!");
                                goto uot1;

                            }

                        }





                    }
                }
                foreach (var IDVIA_IDBM in IDBM_BACK_UOT)
                {
                    try
                    {
                        if (!string.IsNullOrEmpty(IDVIA_IDBM))
                        {
                            var IDVIA1 = IDVIA_IDBM.Split('|')[0];

                            var IDBM = IDVIA_IDBM.Split('|')[1];

                            if (UID_VIA == IDVIA1)
                            {
                                try
                                {
                                    int delay = (int)delay_doc_link.Value;
                                    Thread.Sleep(TimeSpan.FromSeconds(delay));
                                    var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                    var cookiestring = "";
                                    foreach (var cookie in cookiess)
                                    {
                                        cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                    }
                                    cookiestring = cookiestring.Trim(';');
                                    HttpRequest httpRequest = new HttpRequest();
                                    httpRequest.AllowAutoRedirect = true;
                                    httpRequest.Cookies = new CookieDictionary();
                                    httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                    httpRequest.KeepAlive = true;
                                    var cookieRaws = cookiestring.Split(';');
                                    foreach (var cookieraw in cookieRaws)
                                    {
                                        var cookieJAr = cookieraw.Split('=');
                                        try
                                        {
                                            httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                        }
                                        catch { }
                                    }

                                    httpRequest.AddHeader("authority", "graph.facebook.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "none");

                                    var url_out = $"https://graph.facebook.com/v17.0/{UID_VIA}/businesses?access_token={token_EEAG}&__cppo=1";

                                    var payload = $"__activeScenarioIDs=[]&__activeScenarios=[]&__interactionsMetadata=[]&_reqName=path:/{UID_VIA}/businesses&_reqSrc=adsDaoGraphDataMutator&business={IDBM}&endpoint=/{UID_VIA}/businesses&locale=vi_VN&method=delete&pretty=0&suppress_http_code=1&userID={UID_VIA}&version=17.0&xref=f2e80f8533bb1f4";


                                    var response = httpRequest.Post(url_out, payload, "application/x-www-form-urlencoded");

                                    if (response.IsOK)
                                    {
                                        var responseStr_1 = response.ToString();
                                        if (responseStr_1.Contains("{\"success\":true}"))
                                        {
                                            IDBM_BACK_UOT_DONE.Add(IDBM);
                                            if (rtb_BM_OUT.InvokeRequired)
                                            {
                                                rtb_BM_OUT.Invoke(new Action(() =>
                                                {
                                                    rtb_BM_OUT.AppendText(UID_VIA + $"|=> OUT {IDBM} DONE" + Environment.NewLine);
                                                }));
                                            }

                                        }
                                        else
                                        {
                                            if (rtb_backup_fail.InvokeRequired)
                                            {
                                                rtb_backup_fail.Invoke(new Action(() =>
                                                {
                                                    rtb_backup_fail.AppendText(UID_VIA + $"|{IDBM}" + Environment.NewLine);
                                                }));
                                            }

                                            if (rtb_BM_OUT.InvokeRequired)
                                            {
                                                rtb_BM_OUT.Invoke(new Action(() =>
                                                {
                                                    rtb_BM_OUT.AppendText(UID_VIA + $"|=> OUT {IDBM} FAIL!" + Environment.NewLine);
                                                }));
                                            }

                                        }
                                    }
                                }
                                catch { }
                            }

                        }
                    }
                    catch 
                    {
                        if (rtb_backup_fail.InvokeRequired)
                        {
                            rtb_backup_fail.Invoke(new Action(() =>
                            {
                                rtb_backup_fail.AppendText(IDVIA_IDBM + "|=> OUT FAIL!" + Environment.NewLine);

                            }));
                        }
                    }

                
                }
            uot1:
                Thread.Sleep(100);

                row.Cells["cStatus"].Value = $"OUT DONE {IDBM_BACK_UOT_DONE.Count}/{IDBM_BACK_UOT.Count}";
            }
            catch { }



        }


        // OUT IG THEO ID
        private async void uOTIGBMFBToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                UOT_IG_THEO_ID(chromeDriver, accountData.Row, accountData.User);
                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);
            }
            catch { }
        }

        private void UOT_IG_THEO_ID(ChromeDriver chromedriver, DataGridViewRow row, string USER)
        {

            try
            {
                var UID_VIA = row.Cells["cUID"].Value.ToString();
                List<string> IDBM_BACK_UOT = new List<string>();
                List<string> IDBM_BACK_UOT_DONE = new List<string>();

                if (rtb_IDBM_CAN_BACK_Up.InvokeRequired)
                {
                    rtb_IDBM_CAN_BACK_Up.Invoke(new Action(() =>
                    {
                        IDBM_BACK_UOT = rtb_IDBM_CAN_BACK_Up.Lines.ToList();
                    }));
                }
                else
                {
                    IDBM_BACK_UOT = rtb_IDBM_CAN_BACK_Up.Lines.ToList();
                }
                var IDVIA2 = IDBM_BACK_UOT[0].Split('|')[0];
                var token_EEAG = "";
                var fb_dtsg = "";
                var jazoest = "";
                var lsd = "";
                if (UID_VIA == IDVIA2)
                {
                    // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                    chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM_BACK_UOT[0].Split('|')[1]}");
                    var html_1 = chromedriver.PageSource;
                    fb_dtsg = Regex.Match(html_1, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                    lsd = Regex.Match(html_1, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                    jazoest = Regex.Match(html_1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();


                }
                foreach (var IDVIA_IDBM in IDBM_BACK_UOT)
                {
                    try
                    {
                        if (!string.IsNullOrEmpty(IDVIA_IDBM))
                        {
                            var IDVIA1 = IDVIA_IDBM.Split('|')[0];
                            var IDBM = IDVIA_IDBM.Split('|')[1];
                            var ID_IG = IDVIA_IDBM.Split('|')[2];
                            if (UID_VIA == IDVIA1)
                            {
                                try
                                {
                                    int delay = (int)delay_doc_link.Value;
                                    Thread.Sleep(TimeSpan.FromSeconds(delay));
                                    var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                    var cookiestring = "";
                                    foreach (var cookie in cookiess)
                                    {
                                        cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                    }
                                    cookiestring = cookiestring.Trim(';');
                                    HttpRequest httpRequest = new HttpRequest();
                                    httpRequest.AllowAutoRedirect = true;
                                    httpRequest.Cookies = new CookieDictionary();
                                    httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                    httpRequest.KeepAlive = true;
                                    var cookieRaws = cookiestring.Split(';');
                                    foreach (var cookieraw in cookieRaws)
                                    {
                                        var cookieJAr = cookieraw.Split('=');
                                        try
                                        {
                                            httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                        }
                                        catch { }
                                    }

                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/business_users?business_id={IDBM}");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("x-asbd-id", "359341");
                                    httpRequest.AddHeader("x-fb-friendly-name", "GetBusinessSensitiveActionEnumQuery");
                              

                                    var url_out = $"https://business.facebook.com/api/graphql/?_callFlowletID=0&_triggerFlowletID=3974&qpl_active_e2e_trace_ids=";

                                    var payload = $"av={IDVIA1}&__aaid=0&__bid={IDBM}&__user={IDVIA1}&__a=1&__req=u&__hs=20376.HYP:bizweb_comet_pkg.2.1...0&dpr=1&__ccg=EXCELLENT&__rev=1028431064&__s=at5lce:90lpc1:oc540v&__hsi=7561245860144455411&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw5hz8hw9-0r-qbwgE7Ro4C0RUb87C2m3K2y11wBz8188O12ypU5-2a1Owv89k2C1FwnE4K5E2sx2ewyx6i2GU8U-UbE7i4UaEW2G261fwwwJK1qxa1ozEjU4Wdwoo4S5ayocE3BwMw_CyKbwzwea0Lo6-3u36i2G0z8co9U4S7E6B0gEjz8158uwm85K2G1Rwwwww9G0I837wNwAwyw&__csr=g4Exq4Oi9GxkGnHex4DG_lPvGx4_R5JichVOuG4OmA-yaJ5laXAF_9LkLZnBFS8pRChfFF49n9BAgykSmQi8i_q9hCihqneAi8XhGyAAuhyabcGp4OcyOGZ6AX988l4QB8AFy4O29u9Qt4GCHGEnFpHbYNqBy5gPDmESeF2qQiV8GbKHzRyqWx6yeWHBqh9WUgy9XjUNeLhEx4likquHmldalaWGmjgC8XAyVongy8zp9pGh4UDyEyHAHzomx55zGwKiVvx3xK8Ay9oKi9KHBhVU8UjxzCVpqDyFUZ7Kqm6F4FqD-fy-iESi2y2RaWKpecwCyEVosxG2e9yoPzFovU-1awOz9E-Ujwh9820CwFXG78szEaoO4okwAxiu5UC1lzqK0x8W1nwDwiU28wWwbK48co-5QfyXzovz88XhAi2acybxyEuGu3q5aU082U0Xu1iF0g8JCU1m-58axltl7a4Kkm4Wx60rq063Fk8J2pONST4SeAx9p2j1phxl2l2Er0F05craqbwi118c82xE3es6E5b8itgA0-Fk08enatpNgow4hG1ww68AU0gIxy0uC0EU0hjg5S2eq5ht2836zE4d00W7w9l1G0iS058CU7-08wwu-1nw3-o1mE3-w2GEC13wjU4K0me02h0E1cA1qCwPz804-x03x9601zzy83ICmdwvA1Hw0yQwrktBz81AUy9woE0uhU7adgeEowxwhFA6S3V0&__hsdp=g8cswYiMgNB2fm9yEgcOaxCyr1113b5RhaKexmiKU8aXS18ILzoxCV89uqQeK1iAF92622dwywgi7why1N0jz1e2m2afz898cF8WpG4aBhUB4Kp24lGAAuawFwbKi07So0Te02UG03gW0f4w_w9W3m0n61fwcu0FU7K020u&__hblp=0g8S8wba2S1wGm2C1yxO0QE5q1pzE2dwBg8o-cwAwOAzKhe4azEB4K44paAA4Eao2PDAwaC0NU4acx-4U1bUgw8y3G0E83_UWh0wxm1RLwVwxwmV9rzu487e5US2qi1hxmu1eCwZwSwh8fE2czo4C18wtod87ui0LU5a2S3-3G6UG1jwrk1qzU9kUeofEBoW1wwBz9pU7e1Fwro7G0QoownU3bwiE4S4U8U5y0NUswiF8vwWw8S0y89oow8W2W0qO3ii0FobU-p28fU5K1yU3Jw4rwwwuo3Bwko2Xzo2LxC261Iwc21dwe60wUco9Q1LwtE7-1ew_wmo4i3m0n63y2G4U8onG68bVojxS2jDwmEqwwyo2_wsojw922y1iwfy0uK2i0n-1Ly414wvo8UOfwSwr81so30Aw&__sjsp=g8cswYiMgNB2fm9yEgcOaxCy52knMgONtkiHzElAHK22KZwibbUS8pKi2nCJ3HwkFaigxwwzo8E44xU4owsg4UMjwBwyzUO2i3aieCqx2Fku9hbCgx5qF97yEao2XAw1ZC0dPw0vdo1WU&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1028431064&__spin_b=trunk&__spin_t=1760489740&__jssesw=1&__crn=comet.bizweb.BusinessCometBizSuiteSettingsBusinessUsersRoute&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=GetBusinessSensitiveActionEnumQuery&server_timestamps=true&variables={{\"reviewParams\":{{\"action_type\":\"BUSINESS_REMOVE_USER\",\"business_id\":\"{IDBM}\",\"remove_user_params\":{{\"target_user_id\":\"{ID_IG}\"}}}},\"roleRequestId\":\"\",\"isNotAddAdmin\":true}}&doc_id=9664231750291365";


                                    var response = httpRequest.Post(url_out, payload, "application/x-www-form-urlencoded");

                                    if (response.IsOK)
                                    {
                                        var responseStr_1 = response.ToString();
                                        if (responseStr_1.Contains("review_process\":\"NONE"))
                                        {
                                            httpRequest.AddHeader("authority", "business.facebook.com");
                                            httpRequest.AddHeader("accept", "*/*");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("priority", "u=1, i");
                                            httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/business_users?business_id={IDBM}");
                                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                            httpRequest.AddHeader("x-asbd-id", "359341");
                                            httpRequest.AddHeader("x-fb-friendly-name", "GetBusinessSensitiveActionEnumQuery");


                                            var url_out2 = $"https://business.facebook.com/api/graphql/?_callFlowletID=0&_triggerFlowletID=3974&qpl_active_e2e_trace_ids=";

                                            var payload2 = $"av={IDVIA1}&session_id=824718740544355&__aaid=0&__bid={IDBM}&__user={IDVIA1}&__a=1&__req=1p&__hs=20376.HYP:bizweb_comet_pkg.2.1...0&dpr=1&__ccg=EXCELLENT&__rev=1028431064&__s=axpytz:h9zhke:0sbp7j&__hsi=7561252822063597791&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw5hz8hw9-0r-qbwgE7Ro4C0RUb87C2m3K2y11wBz8188O12ypU5-2a3-3a1YwBgao6C1uwiUmw9O48W2a4p8aHwzzXwKwnUkxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiEC3a0Voc8mwECyKbwzwea0Lo6-3u36i2G2B0ooco9U4S7E6B0gEjz8158uwjUy2-2K2G1Rwwwww9G0I837wNwAwyw&__csr=g4Exq4Na9NsGcIh4itrZnd_i4jT7N74usBGxcgASyaJYRFaiDYDZi_PpqsxStmh4-Dp2lP5WhQBdBZ4y4LSylnuG9kAWh8zJaWydQuhyabcGp4OcyOGZ6AX988ajti9aoxcwy_GrhQiGqKGDzZVHbYRaFoxkmlpRmdzGgCJ-V8GbKHDDm9HF2Fq8XHmlFbDHx28DJfz4WZ6y4hl9heuGuldalaWGmjgDCXABBBxt28ymuimqCQUDyAuHAHzomx55zGG7oGAKnUgUry98ymbAyrGVkuu2e4UoVKmmFUGudQuVFoqAiBGvU-bVazp8a8bkHG-hecwCyeem78qwzyoCcUWm7-fwiEcEOqfK4U4ii3S12CwFXG78szEaoO4oCawAxiu5UC1lzqK0x8W1nwDwiU28wWwbK48co-5QfyXzovz88XhAi2acybxyEuGu3q5aU082U0Xu1iF0g8JCU1m-58axltl7a4Kkm4Wx60rq063Fk8J2pONST4SeAx9p2j1phxl2l2Er0F05craqbwi118c82xE3es6E5b8itgA0-Fk08enatpNgow4hG1jz81y9e04b8ow7Fwae04kQ1twzCxkngy0NEW13g0exU2lgqw4Jw1i9K1_w2887LwlU0_C0lG0_E0GG9wgU4-1bw5zw0y_wk2w4Og5Gq3ecw0jW40e4Ao06ee8weOpoS1-g6K02bi1JhSmcw6jy8C1yw1V7wsER0Wxy2616CgrofA&__hsdp=g8c6r136mFf72EgcOaxCyr1113b5RhaKexmiKU8aXS18ILzoxCV89uqQeK1iAF92622dwxhUC446r9Bwhy1N0OxIMjwBwyzUO2i3aieV6EgGl7ykiVA8jSGihUG2C0KV81so0AS0tK0pW0DE0Te02UG03gW0f4w_w9W3m0n61fwcu0FU7K1uw1Wy&__hblp=0g8S8wp88oaUbo62FqwCwoEswda1mwmoW0zo9k26fz898cF8XAjx2EW9hbx16iF91a2C0IVV82Fwcu12z8vxe0i-4828wWwa21lwaDzF4225o7m-5U8o8o5KimUTx21Pxudxe4F8565pU4Wq4EaEdE4i3W0z8S19wi8aE9k2e3i1TAwb-1iwJw_wEx66UG1jwrk2O2SfwBjwVw-ylzGwno9oOmu1Pwqo6S1Wwd6685-0OU4G1dxe2e1ow8e13xO4oe98vwWw8S0y89oowCwpUbE1dU7i3ii0FobU-p28fU5K1yU3Jw4rwwwuo3BwkofE7Odwa-6o8o6O0M84S0Uo23wNwDg6-1SwvU4W3-1pwh8do1soe8aEjwxxuEowLBxe7o9eu1qxG229wb-1Nxe5U7y2y1iwfy0uK2i0n-1Ly414wvo8UOfwSwr81hUao30Aw&__sjsp=g8c6r136mFf72EgcOaxCy52knMgONtkiHzElAHK22KZwibbUS8pKi2nCJ3HwkFaigxwwzo8ku9x11COpo4owsgcErc4U9o8E-cwAwOAzKhG4aBhUB4Kp24ZGAAuawFwbKi0n609dw7rw6uw9W0dPw0vdo1WU5W&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1028431064&__spin_b=trunk&__spin_t=1760491361&__jssesw=1&__crn=comet.bizweb.BusinessCometBizSuiteSettingsBusinessUsersRoute&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsRemoveBusinessUserMutation&server_timestamps=true&variables={{\"businessID\":\"{IDBM}\",\"businessUserID\":\"{ID_IG}\",\"surfaceParams\":{{\"entry_point\":\"BIZWEB_SETTINGS_PEOPLE_TAB\",\"flow_source\":\"BIZ_WEB\",\"tab\":\"BUSINESS_USERS\"}}}}&doc_id=23932916982960697";
                                            response = httpRequest.Post(url_out2, payload2, "application/x-www-form-urlencoded");

                                            if (response.IsOK)
                                            {
                                                var responseStr_2 = response.ToString();
                                                if (responseStr_2.Contains($"removed_business_user_id\":\"{ID_IG}"))
                                                {
                                                    IDBM_BACK_UOT_DONE.Add(IDBM);
                                                    if (rtb_BM_OUT.InvokeRequired)
                                                    {
                                                        rtb_BM_OUT.Invoke(new Action(() =>
                                                        {
                                                            rtb_BM_OUT.AppendText(ID_IG + $"|=> OUT {IDBM} DONE" + Environment.NewLine);
                                                        }));
                                                    }
                                                    else
                                                    {
                                                        if (rtb_backup_fail.InvokeRequired)
                                                        {
                                                            rtb_backup_fail.Invoke(new Action(() =>
                                                            {
                                                                rtb_backup_fail.AppendText(ID_IG + $"|{IDBM}" + Environment.NewLine);
                                                            }));
                                                        }

                                                        if (rtb_BM_OUT.InvokeRequired)
                                                        {
                                                            rtb_BM_OUT.Invoke(new Action(() =>
                                                            {
                                                                rtb_BM_OUT.AppendText(ID_IG + $"|=> OUT {IDBM} FAIL!" + Environment.NewLine);
                                                            }));
                                                        }

                                                    }
                                                }
                                            }
                                        }






                                   
                                     
                                    }
                                }
                                catch { }
                            }

                        }
                    }
                    catch
                    {
                        if (rtb_backup_fail.InvokeRequired)
                        {
                            rtb_backup_fail.Invoke(new Action(() =>
                            {
                                rtb_backup_fail.AppendText(IDVIA_IDBM + "|=> OUT FAIL!" + Environment.NewLine);

                            }));
                        }
                    }


                }
            uot1:
                Thread.Sleep(100);

                row.Cells["cStatus"].Value = $"OUT DONE {IDBM_BACK_UOT_DONE.Count}/{IDBM_BACK_UOT.Count}";
            }
            catch { }



        }

        //KICK WHATAPP
        private async void kICHWHATAPPToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                KICKWHATAPP(chromeDriver, accountData.Row, accountData.User);
                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);



            }
            catch { }
        }

        private void KICKWHATAPP(ChromeDriver chromedriver, DataGridViewRow row, string USER)
        {
            try
            {
                var UID_VIA = row.Cells["cUID"].Value.ToString();
                List<string> IDBM_BACK_UOT = new List<string>();
                List<string> BM_KICK = new List<string>();
                if (rtb_IDBM_KICK_BM3.InvokeRequired)
                {
                    rtb_IDBM_KICK_BM3.Invoke(new Action(() =>
                    {
                        IDBM_BACK_UOT = rtb_IDBM_KICK_BM3.Lines.ToList();
                    }));
                }
                else
                {
                    IDBM_BACK_UOT = rtb_IDBM_KICK_BM3.Lines.ToList();
                }
                var token_EEAG = "";
                var IDVIA2 = IDBM_BACK_UOT[0].Split('|')[0];
                if (UID_VIA == IDVIA2)
                {
                    if (string.IsNullOrEmpty(token_EEAG))
                    {
                        var API = "";
                        if (cmb_API_CHROME_BACK_UP_BM_THEO_ID.InvokeRequired)
                        {
                            cmb_API_CHROME_BACK_UP_BM_THEO_ID.Invoke(new Action(() =>
                            {
                                API = cmb_API_CHROME_BACK_UP_BM_THEO_ID.Text;

                            }));

                        }
                        if (API == "API")
                        {
                            try
                            {
                                // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                var cookiestring = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                }
                                cookiestring = cookiestring.Trim(';');
                                var httpRequest = new HttpRequest();
                                httpRequest.Cookies = new CookieDictionary();
                                httpRequest.KeepAlive = true;
                                httpRequest.AllowAutoRedirect = true;
                                var cookiess_1 = chromedriver.Manage().Cookies.AllCookies;
                                var cookiestring_1 = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring_1 += cookie.Name + "=" + cookie.Value + ";";
                                }
                                cookiestring_1 = cookiestring_1.Trim(';');

                                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                httpRequest.KeepAlive = true;
                                var cookieRaws1 = cookiestring_1.Split(';');
                                foreach (var cookieraw in cookieRaws1)
                                {
                                    var cookieJAr = cookieraw.Split('=');
                                    try
                                    {
                                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);

                                    }
                                    catch { }
                                }
                                try
                                {
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("dpr", "1");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.108\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.108\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "1177");
                                    var response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM_BACK_UOT[0].Split('|')[1]}");

                                    if (response.IsOK)
                                    {
                                        var responseStr = response.ToString();
                                        token_EEAG = Regex.Match(responseStr, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();

                                    }

                                }
                                catch { }

                                if (string.IsNullOrEmpty(token_EEAG))
                                {
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("dpr", "1");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.108\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.108\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "851");

                                    var response = httpRequest.Get($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM_BACK_UOT[0].Split('|')[1]}&placement=ads_manager");
                                    if (response.IsOK)
                                    {
                                        var responseStr = response.ToString();
                                        token_EEAG = Regex.Match(responseStr, "\"init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();

                                    }
                                }

                            }
                            catch { }

                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                MessageBox.Show("Lấy Token EAAG FAIL!");
                                if (tb_Token.InvokeRequired)
                                {
                                    tb_Token.Invoke(new Action(() =>
                                    {
                                        token_EEAG = tb_Token.Text;
                                    }));

                                }
                                else
                                {
                                    token_EEAG = tb_Token.Text;
                                }
                            }
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                //MessageBox.Show("Lấy Token EAAG FAIL!");
                                goto uot1;

                            }

                        }
                        else
                        {
                            // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                            chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM_BACK_UOT[0].Split('|')[1]}");
                            var html_1 = chromedriver.PageSource;
                            token_EEAG = Regex.Match(html_1, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM_BACK_UOT[0].Split('|')[1]}&placement=standalone&global_scope_id={IDBM_BACK_UOT[0].Split('|')[1]}");
                                var html1 = chromedriver.PageSource;
                                token_EEAG = Regex.Match(html1, "\"init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                            }
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                MessageBox.Show("Lấy Token EAAG FAIL!");
                                if (tb_Token.InvokeRequired)
                                {
                                    tb_Token.Invoke(new Action(() =>
                                    {
                                        token_EEAG = tb_Token.Text;
                                    }));

                                }
                                else
                                {
                                    token_EEAG = tb_Token.Text;
                                }
                            }
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                //MessageBox.Show("Lấy Token EAAG FAIL!");
                                goto uot1;

                            }

                        }





                    }
                }

                foreach (var IDVIA_IDBM in IDBM_BACK_UOT)
                {
                    try
                    {
                        if (!string.IsNullOrEmpty(IDVIA_IDBM))
                        {
                            var IDVIA1 = IDVIA_IDBM.Split('|')[0];

                            var IDBM = IDVIA_IDBM.Split('|')[1];

                            if (UID_VIA == IDVIA1)
                            {
                                try
                                {
                                   
                                    var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                    var cookiestring = "";
                                    foreach (var cookie in cookiess)
                                    {
                                        cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                    }
                                    cookiestring = cookiestring.Trim(';');
                                    HttpRequest httpRequest = new HttpRequest();
                                    httpRequest.AllowAutoRedirect = true;
                                    httpRequest.Cookies = new CookieDictionary();
                                    httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                    httpRequest.KeepAlive = true;
                                    var cookieRaws = cookiestring.Split(';');
                                    foreach (var cookieraw in cookieRaws)
                                    {
                                        var cookieJAr = cookieraw.Split('=');
                                        try
                                        {
                                            httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                        }
                                        catch { }
                                    }
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.54\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.54\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "863");


                                    var link_get4 = $"https://business.facebook.com/latest/settings/business_info?business_id={IDBM}";
                                    var ad_account_creation_limit = "";
                                   var response = httpRequest.Get(link_get4);
                                    if (response.IsOK)
                                    {
                                        var responseStr = response.ToString();
                                        ad_account_creation_limit = Regex.Match(responseStr, "\"ad_account_creation_limit\":(.*?)},").Groups[1].Value.ToString();
                                        if(ad_account_creation_limit == "3")
                                        {
                                            if (rtb_BM3.InvokeRequired)
                                            {
                                                rtb_BM3.Invoke(new Action(() =>
                                                {
                                                    rtb_BM3.AppendText(IDVIA_IDBM + Environment.NewLine);

                                                }));
                                            }
                                            if (rtb_status_kick.InvokeRequired)
                                            {
                                                rtb_status_kick.Invoke(new Action(() =>
                                                {
                                                    rtb_status_kick.AppendText(IDVIA_IDBM + $"|=> BM{ad_account_creation_limit}" + Environment.NewLine);

                                                }));
                                            }
                                            goto next;
                                        }


                                    }



                                    httpRequest.AddHeader("authority", "graph.facebook.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("origin", "https://business.facebook.com");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("referer", "https://business.facebook.com/");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "same-site");

                                    var link_get = $"https://graph.facebook.com/v20.0/{IDBM}?fields=owned_whatsapp_business_accounts.limit(50){{id,name}}&access_token={token_EEAG}&_callFlowletID=0&_triggerFlowletID=4174&qpl_active_e2e_trace_ids=";

                                    response = httpRequest.Get(link_get);


                                    if (response.IsOK)
                                    {
                                        var responseStr = response.ToString();


                                        httpRequest.AddHeader("authority", "graph.facebook.com");
                                        httpRequest.AddHeader("accept", "*/*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("origin", "https://business.facebook.com");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        httpRequest.AddHeader("referer", "https://business.facebook.com/");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                        httpRequest.AddHeader("sec-fetch-site", "same-site");

                                        var link_get2 = $"https://graph.facebook.com/graphql?access_token={token_EEAG}&method=post&doc_id=9763356653753255&variables={{\"input\":{{\"client_mutation_id\":\"2\",\"actor_id\":\"0\",\"business_id\":\"{IDBM}\",\"app_id\":\"225181538219344\",\"log_session_id\":\"WBxP-3605351016-4208684065\",\"acceptance_source\":\"DEVELOPERS_FACEBOOK_COM\"}}}}&_callFlowletID=0&_triggerFlowletID=4174&qpl_active_e2e_trace_ids=";

                                        response = httpRequest.Get(link_get2);
                                        if (response.IsOK)
                                        {
                                            var responseStr1 = response.ToString();
                                            int k = (int)numericUpDown5.Value;
                                            var NAME = File.ReadAllLines("NAMEWHATAPP.txt").ToList();
                                            Random rnd = new Random();
                                            int indexRandom = rnd.Next(0, NAME.Count);
                                            string name_WhatApp1 = NAME[indexRandom];
                                            if (string.IsNullOrEmpty(name_WhatApp1))
                                            {
                                                if (tb_NAME_WHATAPP.InvokeRequired)
                                                {
                                                    tb_NAME_WHATAPP.Invoke(new Action(() =>
                                                    {
                                                        name_WhatApp1 = tb_NAME_WHATAPP.Text;
                                                    }));

                                                }
                                            }
                                            for (int K =0; K < k; K++)
                                            {
                                                try
                                                {
                                                    var name_WhatApp = name_WhatApp1 + $"{K + 1}";
                                                    httpRequest.AddHeader("authority", "graph.facebook.com");
                                                    httpRequest.AddHeader("accept", "*/*");
                                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                    httpRequest.AddHeader("origin", "https://business.facebook.com");
                                                    httpRequest.AddHeader("priority", "u=1, i");
                                                    httpRequest.AddHeader("referer", "https://business.facebook.com/");
                                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                                    httpRequest.AddHeader("sec-fetch-site", "same-site");


                                                    var link_get3 = $"https://graph.facebook.com/graphql?method=post&doc_id=29701466519469036&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{UID_VIA}\",\"app_id\":\"1275424410903228\",\"log_session_id\":\"WBxP--1759509524586-637775013\",\"business_id\":\"{IDBM}\",\"api_account_type\":\"SELF\",\"creation_source\":\"BUSINESS_MANAGER\",\"friendly_name\":\"{name_WhatApp}\",\"timezone_id\":132,\"partner_business_id\":\"{IDBM}\",\"product\":\"SELF\"}}}}&access_token={token_EEAG}&_callFlowletID=0&_triggerFlowletID=4251&qpl_active_e2e_trace_ids=";

                                                    response = httpRequest.Get(link_get3);
                                                    if (response.IsOK)
                                                    {
                                                        var responseStr2 = response.ToString();
                                                        if (responseStr2.Contains("message\":\"Rate limit exceeded"))
                                                        {
                                                            if (rtb_status_kick.InvokeRequired)
                                                            {
                                                                rtb_status_kick.Invoke(new Action(() =>
                                                                {
                                                                    rtb_status_kick.AppendText(IDVIA_IDBM + "|message\":\"Rate limit exceeded|=> KICK FAIL!" + Environment.NewLine);

                                                                }));
                                                            }

                                                            goto next;
                                                        }
                                                        if (responseStr2.Contains("data\":{\"xfb_create_whatsapp_business_api_account\":null}"))
                                                        {
                                                            if (rtb_status_kick.InvokeRequired)
                                                            {
                                                                rtb_status_kick.Invoke(new Action(() =>
                                                                {
                                                                    rtb_status_kick.AppendText(IDVIA_IDBM + "|=> SỐ LƯỢNG TẠO VƯỢT QUÁ CHO PHÉP" + Environment.NewLine);

                                                                }));
                                                            }
                                                            goto next;
                                                        }
                                                        else
                                                        {
                                                            if (rtb_status_kick.InvokeRequired)
                                                            {
                                                                rtb_status_kick.Invoke(new Action(() =>
                                                                {
                                                                    rtb_status_kick.AppendText(IDVIA_IDBM + $"|=> TẠO DONE {name_WhatApp}" + Environment.NewLine);

                                                                }));
                                                            }
                                                        }                            




                                                    }
                                                
                                                }
                                                catch { }
                                                int delay = (int)delay_kick_bm3.Value;
                                                Thread.Sleep(TimeSpan.FromSeconds(delay));
                                            }
                                          
                                        }






                                    }
                                    Thread.Sleep(15000);

                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.54\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.54\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "863");


                                    link_get4 = $"https://business.facebook.com/latest/settings/business_info?business_id={IDBM}";
                                   
                                    response = httpRequest.Get(link_get4);
                                    if (response.IsOK)
                                    {
                                        var responseStr = response.ToString();
                                        ad_account_creation_limit = Regex.Match(responseStr, "\"ad_account_creation_limit\":(.*?)},").Groups[1].Value.ToString();

                                        if (rtb_status_kick.InvokeRequired)
                                        {
                                            rtb_status_kick.Invoke(new Action(() =>
                                            {
                                                rtb_status_kick.AppendText(IDVIA_IDBM + $"|=> BM{ad_account_creation_limit}" + Environment.NewLine);

                                            }));
                                        }


                                    }

                                    if (ad_account_creation_limit == "3")
                                    {
                                        if (rtb_BM3.InvokeRequired)
                                        {
                                            rtb_BM3.Invoke(new Action(() =>
                                            {
                                                rtb_BM3.AppendText(IDVIA_IDBM + Environment.NewLine);

                                            }));
                                        }
                                        BM_KICK.Add(IDBM);
                                        var TTKQC = "";
                                        if (cmb_TTKQCBM3.InvokeRequired)
                                        {
                                            cmb_TTKQCBM3.Invoke(new Action(() =>
                                            {
                                                TTKQC = cmb_TTKQCBM3.Text;
                                            }));
                                        }
                                        else
                                        {
                                            TTKQC = cmb_TTKQCBM3.Text;
                                        }
                                        if (TTKQC == "ON")
                                        {
                                            int TTQC = (int)numericUpDown9.Value;
                                            for (int k = 0; k < TTQC; k++)
                                            {
                                                try
                                                {
                                                    httpRequest.AddHeader("authority", "z-p3-graph.facebook.com");
                                                    httpRequest.AddHeader("accept", "*/*");
                                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                    httpRequest.AddHeader("priority", "u=1, i");
                                                    httpRequest.AddHeader("sec-ch-ua", "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"");
                                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                                    httpRequest.AddHeader("sec-fetch-site", "none");

                                                    var currency = "";
                                                    if (cmb_Tien_Te_TK_BM.InvokeRequired)
                                                    {
                                                        cmb_Tien_Te_TK_BM.Invoke(new Action(() =>
                                                        {
                                                            currency = cmb_Tien_Te_TK_BM.Text;

                                                        }));
                                                    }
                                                    else
                                                    {
                                                        currency = cmb_Tien_Te_TK_BM.Text;
                                                    }


                                                    var name = "";
                                                    if (cmb_TEN_TK_BM.InvokeRequired)
                                                    {
                                                        cmb_TEN_TK_BM.Invoke(new Action(() =>
                                                        {
                                                            name = cmb_TEN_TK_BM.Text;

                                                        }));
                                                    }
                                                    else
                                                    {
                                                        name = cmb_TEN_TK_BM.Text;
                                                    }


                                                    var timezone_id = "";
                                                    if (cmb_Mui_Gio_TK_BM.InvokeRequired)
                                                    {
                                                        cmb_Mui_Gio_TK_BM.Invoke(new Action(() =>
                                                        {
                                                            timezone_id = cmb_Mui_Gio_TK_BM.Text;

                                                        }));
                                                    }
                                                    else
                                                    {
                                                        timezone_id = cmb_Mui_Gio_TK_BM.Text;
                                                    }



                                                    var url_1 = $"https://z-p3-graph.facebook.com/v17.0/{IDBM}/adaccount?access_token={token_EEAG}&__cppo=1&__activeScenarioIDs=[]&__activeScenarios=[]&__interactionsMetadata=[]&_reqName=object:brand/adaccount&_reqSrc=AdAccountActions.brands&ad_account_created_from_bm_flag=true&currency={currency}&end_advertiser={IDBM}&invoicing_emails=[]&locale=vi_VN&media_agency=UNFOUND&method=post&name={name}&partner=UNFOUND&po_number=&pretty=0&suppress_http_code=1&timezone_id={timezone_id}&xref=f240a980fd9969";
                                                    response = httpRequest.Get(url_1);
                                                    if (response.IsOK)
                                                    {
                                                        var responseStr_TK = response.ToString();
                                                        if (responseStr_TK.Contains("{\"id\":\"act_"))
                                                        {
                                                            row.Cells["cStatus"].Value = "Tạo TK BM: " + IDBM + " DONE";
                                                            if (rtb_status_kick.InvokeRequired)
                                                            {
                                                                rtb_status_kick.Invoke(new Action(() =>
                                                                {
                                                                    rtb_status_kick.AppendText(IDBM + $"|=> TẠO TTQC DONE {k + 1}" + Environment.NewLine);

                                                                }));
                                                            }

                                                        }
                                                        else
                                                        {
                                                            row.Cells["cStatus"].Value = "Tạo TK BM: " + IDBM + " FAIL!";
                                                            if (rtb_status_kick.InvokeRequired)
                                                            {
                                                                rtb_status_kick.Invoke(new Action(() =>
                                                                {
                                                                    rtb_status_kick.AppendText(IDBM + $"|=> TẠO TTQC FAIL {k + 1}" + Environment.NewLine);

                                                                }));
                                                            }
                                                        }
                                                    }

                                                    int delayttk = (int)m_delay_ttk.Value;
                                                    Thread.Sleep(TimeSpan.FromSeconds(delayttk));


                                                }
                                                catch { }
                                            }
                                     

                                        }
                                        try
                                        {
                                            httpRequest.AddHeader("authority", "graph.facebook.com");
                                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("priority", "u=0, i");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "document");
                                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                            httpRequest.AddHeader("sec-fetch-site", "none");
                                            httpRequest.AddHeader("sec-fetch-user", "?1");
                                            httpRequest.AddHeader("upgrade-insecure-requests", "1");


                                            response = httpRequest.Get($"https://graph.facebook.com/v15.0/{IDBM}?access_token={token_EEAG}&fields=id,name,created_time,sharing_eligibility_status,allow_page_management_in_www,business_users{{role,id,name}},owned_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}}");
                                            if (response.IsOK)
                                            {
                                                List<string> ADMin = new List<string>();
                                                var responseSTR6 = response.ToString();
                                                HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                                                doc.LoadHtml(responseSTR6);
                                                JObject jobject = JObject.Parse(responseSTR6);
                                                var businessId = jobject["id"].ToString();
                                                var typeBm = jobject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                                var createdtime = jobject["created_time"].ToString();

                                                var statusBm = jobject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                                var owned_ad_accounts = jobject["owned_ad_accounts"]?["data"];
                                                var currency = "";
                                                var adtrust_dsl = "";
                                                if (owned_ad_accounts != null)
                                                {
                                                    var owned_Ad_Accounts = owned_ad_accounts.ToObject<JArray>();
                                                    foreach (var userObject in owned_Ad_Accounts)
                                                    {
                                                        var id = userObject["id"]?.ToString().Replace("act_", "");
                                                        var name = userObject["name"]?.ToString();
                                                        currency = userObject["currency"]?.ToString();
                                                        adtrust_dsl = userObject["adtrust_dsl"]?.ToString();

                                                        if (rtb_status_kick.InvokeRequired)
                                                        {
                                                            rtb_status_kick.Invoke(new Action(() =>
                                                            {
                                                                rtb_status_kick.AppendText(IDBM + $"|{typeBm}|{statusBm}|{id}|{adtrust_dsl}|{currency}" + Environment.NewLine);

                                                            }));
                                                        }

                                                    }
                                                }



                                                if (rtb_status_kick.InvokeRequired)
                                                {
                                                    rtb_status_kick.Invoke(new Action(() =>
                                                    {
                                                        rtb_status_kick.AppendText(IDBM + $"|{typeBm}|{statusBm}|{adtrust_dsl}|{currency}" + Environment.NewLine);

                                                    }));
                                                }


                                            }
                                        }
                                        catch { }
                                    }
                                    else
                                    {
                                        if (rtb_BM1.InvokeRequired)
                                        {
                                            rtb_BM1.Invoke(new Action(() =>
                                            {
                                                rtb_BM1.AppendText(IDVIA_IDBM + Environment.NewLine);

                                            }));
                                        }
                                    }
                              
                                 





                                }
                                catch { }
                            }
                        }
                    }
                    catch
                    {
                        if (rtb_status_kick.InvokeRequired)
                        {
                            rtb_status_kick.Invoke(new Action(() =>
                            {
                                rtb_status_kick.AppendText(IDVIA_IDBM + "|=> KICK FAIL!" + Environment.NewLine);

                            }));
                        }

                    }




                next:
                    Thread.Sleep(100);
                }


            uot1:
                Thread.Sleep(100);
                row.Cells["cStatus"].Value = $"TẠO DONE BM3 {BM_KICK.Count}/{IDBM_BACK_UOT.Count}";
        
                if (rtb_status_kick.InvokeRequired)
                {
                    rtb_status_kick.Invoke(new Action(() =>
                    {
                        rtb_status_kick.AppendText($"BM3 {BM_KICK.Count}/{IDBM_BACK_UOT.Count}" + Environment.NewLine);

                    }));
                }
            }
            catch { }



        }

        //CHECK INFOR BM
        private async void cHECKINFORBMToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                CHECKINFOR_BM(chromeDriver, accountData.Row, accountData.User);
                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);



            }
            catch { }
        }

        private void CHECKINFOR_BM(ChromeDriver chromedriver, DataGridViewRow row, string USER)
        {
            try
            {
                var UID_VIA = row.Cells["cUID"].Value.ToString();
                List<string> IDBM_BACK_UOT = new List<string>();

                if (rtb_IDBM_KICK_BM3.InvokeRequired)
                {
                    rtb_IDBM_KICK_BM3.Invoke(new Action(() =>
                    {
                        IDBM_BACK_UOT = rtb_IDBM_KICK_BM3.Lines.ToList();
                    }));
                }
                else
                {
                    IDBM_BACK_UOT = rtb_IDBM_KICK_BM3.Lines.ToList();
                }
        

                var token_EEAG = "";
                var IDVIA2 = IDBM_BACK_UOT[0].Split('|')[0];
                if (UID_VIA == IDVIA2)
                {

                    // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                    chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM_BACK_UOT[0].Split('|')[1]}");
                    var html_1 = chromedriver.PageSource;

                    token_EEAG = Regex.Match(html_1, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                    if (string.IsNullOrEmpty(token_EEAG))
                    {
                        chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM_BACK_UOT[0].Split('|')[1]}&placement=standalone&global_scope_id={IDBM_BACK_UOT[0].Split('|')[1]}");
                        var html1 = chromedriver.PageSource;
                        token_EEAG = Regex.Match(html1, "\"init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                    }
                    if (string.IsNullOrEmpty(token_EEAG))
                    {
                        MessageBox.Show("Lấy Token EAAG FAIL!");
                        if (tb_TokenEEAG.InvokeRequired)
                        {
                            tb_TokenEEAG.Invoke(new Action(() =>
                            {
                                token_EEAG = tb_TokenEEAG.Text;
                            }));

                        }
                        else
                        {
                            token_EEAG = tb_TokenEEAG.Text;
                        }
                        if (string.IsNullOrEmpty(token_EEAG))
                        {
                            goto uot1;
                        }
                    }
                }

                foreach (var IDVIA_IDBM in IDBM_BACK_UOT)
                {
                    try
                    {
                        if (!string.IsNullOrEmpty(IDVIA_IDBM))
                        {
                            var IDVIA1 = IDVIA_IDBM.Split('|')[0];

                            var IDBM = IDVIA_IDBM.Split('|')[1];

                            if (UID_VIA == IDVIA1)
                            {
                                try
                                {

                                    var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                    var cookiestring = "";
                                    foreach (var cookie in cookiess)
                                    {
                                        cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                    }
                                    cookiestring = cookiestring.Trim(';');
                                    HttpRequest httpRequest = new HttpRequest();
                                    httpRequest.AllowAutoRedirect = true;
                                    httpRequest.Cookies = new CookieDictionary();
                                    httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                    httpRequest.KeepAlive = true;
                                    var cookieRaws = cookiestring.Split(';');
                                    foreach (var cookieraw in cookieRaws)
                                    {
                                        var cookieJAr = cookieraw.Split('=');
                                        try
                                        {
                                            httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                        }
                                        catch { }
                                    }

                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.54\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.54\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "863");
                             

                                    var link_get4 = $"https://business.facebook.com/latest/settings/business_info?business_id={IDBM}";

                                    var response = httpRequest.Get(link_get4);
                                    if (response.IsOK)
                                    {
                                        var responseStr = response.ToString();
                                        var ad_account_creation_limit = Regex.Match(responseStr, "\"ad_account_creation_limit\":(.*?)},").Groups[1].Value.ToString();

                                        if (rtb_status_kick.InvokeRequired)
                                        {
                                            rtb_status_kick.Invoke(new Action(() =>
                                            {
                                                rtb_status_kick.AppendText(IDVIA_IDBM + $"|=> BM{ad_account_creation_limit}" + Environment.NewLine);

                                            }));
                                        }


                                    }
                                    try
                                    {
                                        httpRequest.AddHeader("authority", "graph.facebook.com");
                                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("priority", "u=0, i");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "document");
                                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                        httpRequest.AddHeader("sec-fetch-site", "none");
                                        httpRequest.AddHeader("sec-fetch-user", "?1");
                                        httpRequest.AddHeader("upgrade-insecure-requests", "1");


                                        response = httpRequest.Get($"https://graph.facebook.com/v15.0/{IDBM}?access_token={token_EEAG}&fields=id,name,created_time,sharing_eligibility_status,allow_page_management_in_www,business_users{{role,id,name}},owned_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}}");
                                        if (response.IsOK)
                                        {
                                            List<string> ADMin = new List<string>();
                                            var responseSTR6 = response.ToString();
                                            HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                                            doc.LoadHtml(responseSTR6);
                                            JObject jobject = JObject.Parse(responseSTR6);
                                            var businessId = jobject["id"].ToString();
                                            var typeBm = jobject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                            var createdtime = jobject["created_time"].ToString();

                                            var statusBm = jobject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                            var owned_ad_accounts = jobject["owned_ad_accounts"]?["data"];
                                            var currency = "";
                                            var adtrust_dsl = "";
                                            if (owned_ad_accounts != null)
                                            {
                                                var owned_Ad_Accounts = owned_ad_accounts.ToObject<JArray>();
                                                foreach (var userObject in owned_Ad_Accounts)
                                                {
                                                    var id = userObject["id"]?.ToString().Replace("act_", "");
                                                    var name = userObject["name"]?.ToString();
                                                    currency = userObject["currency"]?.ToString();
                                                    adtrust_dsl = userObject["adtrust_dsl"]?.ToString();

                                                    if (rtb_status_kick.InvokeRequired)
                                                    {
                                                        rtb_status_kick.Invoke(new Action(() =>
                                                        {
                                                            rtb_status_kick.AppendText(IDBM + $"|{typeBm}|{statusBm}|{id}|{adtrust_dsl}|{currency}" + Environment.NewLine);

                                                        }));
                                                    }

                                                }
                                            }



                                            if (rtb_status_kick.InvokeRequired)
                                            {
                                                rtb_status_kick.Invoke(new Action(() =>
                                                {
                                                    rtb_status_kick.AppendText(IDBM + $"|{typeBm}|{statusBm}|{adtrust_dsl}|{currency}" + Environment.NewLine);

                                                }));
                                            }


                                        }
                                    }
                                    catch { }
                                }
                                catch { }



                            }
                          
                        }
                    }
                    catch
                    {
                        if (rtb_status_kick.InvokeRequired)
                        {
                            rtb_status_kick.Invoke(new Action(() =>
                            {
                                rtb_status_kick.AppendText(IDVIA_IDBM + "|=> CHECK FAIL!" + Environment.NewLine);

                            }));
                        }

                    }




                next:
                    Thread.Sleep(100);
                }


            uot1:
                Thread.Sleep(100);

            }
            catch { }



        }


        // CHECK ADMIN BM THEO ID
        private async void cHECKADMINBMTHEOIDToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                CHECK_ADMIN_BM_THEO_ID(chromeDriver, accountData.Row, accountData.User);
                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);
            }
            catch { }
        }

        private void CHECK_ADMIN_BM_THEO_ID(ChromeDriver chromedriver, DataGridViewRow row, string USER)
        {

            try
            {
                var UID_VIA = row.Cells["cUID"].Value.ToString();
                List<string> IDBM_BACK_UOT = new List<string>();

                if (rtb_IDBM_CAN_BACK_Up.InvokeRequired)
                {
                    rtb_IDBM_CAN_BACK_Up.Invoke(new Action(() =>
                    {
                        IDBM_BACK_UOT = rtb_IDBM_CAN_BACK_Up.Lines.ToList();
                    }));
                }
                else
                {
                    IDBM_BACK_UOT = rtb_IDBM_CAN_BACK_Up.Lines.ToList();
                }
                var token_EEAG = "";
                var IDVIA2 = IDBM_BACK_UOT[0].Split('|')[0];
                if (UID_VIA == IDVIA2)
                {

                    if (string.IsNullOrEmpty(token_EEAG))
                    {
                        var API = "";
                        if (cmb_API_CHROME_BACK_UP_BM_THEO_ID.InvokeRequired)
                        {
                            cmb_API_CHROME_BACK_UP_BM_THEO_ID.Invoke(new Action(() =>
                            {
                                API = cmb_API_CHROME_BACK_UP_BM_THEO_ID.Text;

                            }));

                        }
                        if (API == "API")
                        {
                            try
                            {
                                // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                var cookiestring = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                }
                                cookiestring = cookiestring.Trim(';');
                                var httpRequest = new HttpRequest();
                                httpRequest.Cookies = new CookieDictionary();
                                httpRequest.KeepAlive = true;
                                httpRequest.AllowAutoRedirect = true;
                                var cookiess_1 = chromedriver.Manage().Cookies.AllCookies;
                                var cookiestring_1 = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring_1 += cookie.Name + "=" + cookie.Value + ";";
                                }
                                cookiestring_1 = cookiestring_1.Trim(';');

                                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                httpRequest.KeepAlive = true;
                                var cookieRaws1 = cookiestring_1.Split(';');
                                foreach (var cookieraw in cookieRaws1)
                                {
                                    var cookieJAr = cookieraw.Split('=');
                                    try
                                    {
                                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);

                                    }
                                    catch { }
                                }
                                try
                                {
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("dpr", "1");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.108\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.108\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "1177");
                                    var response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM_BACK_UOT[0].Split('|')[1]}");

                                    if (response.IsOK)
                                    {
                                        var responseStr = response.ToString();
                                        token_EEAG = Regex.Match(responseStr, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();

                                    }

                                }
                                catch { }

                                if (string.IsNullOrEmpty(token_EEAG))
                                {
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("dpr", "1");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.108\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.108\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "851");

                                    var response = httpRequest.Get($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM_BACK_UOT[0].Split('|')[1]}&placement=ads_manager");
                                    if (response.IsOK)
                                    {
                                        var responseStr = response.ToString();
                                        token_EEAG = Regex.Match(responseStr, "\"init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();

                                    }
                                }

                            }
                            catch { }

                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                MessageBox.Show("Lấy Token EAAG FAIL!");
                                if (tb_Token.InvokeRequired)
                                {
                                    tb_Token.Invoke(new Action(() =>
                                    {
                                        token_EEAG = tb_Token.Text;
                                    }));

                                }
                                else
                                {
                                    token_EEAG = tb_Token.Text;
                                }
                            }
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                //MessageBox.Show("Lấy Token EAAG FAIL!");
                                goto uot1;

                            }

                        }
                        else
                        {
                            // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                            chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM_BACK_UOT[0].Split('|')[1]}");
                            var html_1 = chromedriver.PageSource;
                            token_EEAG = Regex.Match(html_1, "apiAccessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={IDBM_BACK_UOT[0].Split('|')[1]}&placement=standalone&global_scope_id={IDBM_BACK_UOT[0].Split('|')[1]}");
                                var html1 = chromedriver.PageSource;
                                token_EEAG = Regex.Match(html1, "\"init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                            }
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                MessageBox.Show("Lấy Token EAAG FAIL!");
                                if (tb_Token.InvokeRequired)
                                {
                                    tb_Token.Invoke(new Action(() =>
                                    {
                                        token_EEAG = tb_Token.Text;
                                    }));

                                }
                                else
                                {
                                    token_EEAG = tb_Token.Text;
                                }
                            }
                            if (string.IsNullOrEmpty(token_EEAG))
                            {
                                //MessageBox.Show("Lấy Token EAAG FAIL!");
                                goto uot1;

                            }

                        }





                    }
                }

                foreach (var IDVIA_IDBM in IDBM_BACK_UOT)
                {
                    try
                    {
                        if (!string.IsNullOrEmpty(IDVIA_IDBM))
                        {
                            var IDVIA1 = IDVIA_IDBM.Split('|')[0];

                            var IDBM = IDVIA_IDBM.Split('|')[1];

                            if (UID_VIA == IDVIA1)
                            {
                                try
                                {
                                    int delay = (int)delay_doc_link.Value;
                                    Thread.Sleep(TimeSpan.FromSeconds(delay));
                                    var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                    var cookiestring = "";
                                    foreach (var cookie in cookiess)
                                    {
                                        cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                    }
                                    cookiestring = cookiestring.Trim(';');
                                    HttpRequest httpRequest = new HttpRequest();
                                    httpRequest.AllowAutoRedirect = true;
                                    httpRequest.Cookies = new CookieDictionary();
                                    httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                    httpRequest.KeepAlive = true;
                                    var cookieRaws = cookiestring.Split(';');
                                    foreach (var cookieraw in cookieRaws)
                                    {
                                        var cookieJAr = cookieraw.Split('=');
                                        try
                                        {
                                            httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                        }
                                        catch { }
                                    }
                                    httpRequest.AddHeader("authority", "graph.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");


                                    var response = httpRequest.Get($"https://graph.facebook.com/v15.0/{IDBM}?access_token={token_EEAG}&fields=id,name,created_time,sharing_eligibility_status,allow_page_management_in_www,business_users{{role,id,name}},owned_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}}");
                                    if (response.IsOK)
                                    {
                                        List<string> ADMin = new List<string>();
                                        var responseSTR6 = response.ToString();
                                        HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                                        doc.LoadHtml(responseSTR6);
                                        JObject jobject = JObject.Parse(responseSTR6);
                                        var businessId = jobject["id"].ToString();
                                        var typeBm = jobject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                        var createdtime = jobject["created_time"].ToString();
                                        var statusBm = jobject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                        var business_users = jobject["business_users"]?["data"];
                                        var nameBM = jobject["name"].ToString();
                                        var userName = "";
                                        if (business_users != null)
                                        {
                                            var businessUsersArr = business_users.ToObject<JArray>();
                                            foreach (var userObject in businessUsersArr)
                                            {
                                                try
                                                {
                                                    var role = userObject["role"]?.ToString();
                                                    var userId = userObject["id"]?.ToString();
                                                    userName = userObject["name"]?.ToString();
                                                    ADMin.Add(userName);

                                                    if (rtb_ADMIN_BM_CHECK.InvokeRequired)
                                                    {
                                                        rtb_ADMIN_BM_CHECK.Invoke(new Action(() =>
                                                        {
                                                            rtb_ADMIN_BM_CHECK.AppendText(IDBM + $"|{userName}" + Environment.NewLine);
                                                        }));
                                                    }
                                                    else
                                                    {
                                                        rtb_ADMIN_BM_CHECK.AppendText(IDBM + $"|{userName}" + Environment.NewLine);
                                                    }


                                                }
                                                catch { }

                                            }

                                            if (rtb_ADMIN_BM_CHECK.InvokeRequired)
                                            {
                                                rtb_ADMIN_BM_CHECK.Invoke(new Action(() =>
                                                {
                                                    rtb_ADMIN_BM_CHECK.AppendText(IDBM + $"{typeBm}|{statusBm}|=>{ADMin.Count} ADMIN" + Environment.NewLine);
                                                }));
                                            }


                                        }









                                    }
                                

                                }
                                catch { }
                            }
                        }
                    }
                    catch 
                    {
                        if (rtb_backup_fail.InvokeRequired)
                        {
                            rtb_backup_fail.Invoke(new Action(() =>
                            {
                                rtb_backup_fail.AppendText(IDVIA_IDBM + "|=> CHECK ADMIN FAIL!" + Environment.NewLine);

                            }));
                        }

                    }


              
                 
                }



            uot1:
                Thread.Sleep(100);
            }
            catch { }



        }
        // CHECK ADMIN BM THEO ID
        private async void cHECKADMINIGToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                CHECK_ADMIN_IG(chromeDriver, accountData.Row, accountData.User);
                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);
            }
            catch { }
        }

        private void CHECK_ADMIN_IG(ChromeDriver chromedriver, DataGridViewRow row, string USER)
        {

            try
            {
                var UID_VIA = row.Cells["cUID"].Value.ToString();
                List<string> IDBM_BACK_UOT = new List<string>();

                if (rtb_IDBM_CAN_BACK_Up.InvokeRequired)
                {
                    rtb_IDBM_CAN_BACK_Up.Invoke(new Action(() =>
                    {
                        IDBM_BACK_UOT = rtb_IDBM_CAN_BACK_Up.Lines.ToList();
                    }));
                }
                else
                {
                    IDBM_BACK_UOT = rtb_IDBM_CAN_BACK_Up.Lines.ToList();
                }
                var token_EEAG = "";
                var IDVIA2 = IDBM_BACK_UOT[0].Split('|')[0];
                if (UID_VIA == IDVIA2)
                {

                    // Thực hiện các thao tác nếu giá trị của cSelectBM là true
                    chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM_BACK_UOT[0].Split('|')[1]}");
                    var html_1 = chromedriver.PageSource;

               
                }

                foreach (var IDVIA_IDBM in IDBM_BACK_UOT)
                {
                    try
                    {
                        if (!string.IsNullOrEmpty(IDVIA_IDBM))
                        {
                            var IDVIA1 = IDVIA_IDBM.Split('|')[0];

                            var IDBM = IDVIA_IDBM.Split('|')[1];

                            if (UID_VIA == IDVIA1)
                            {
                                try
                                {
                                    int delay = (int)delay_doc_link.Value;
                                    Thread.Sleep(TimeSpan.FromSeconds(delay));
                                    var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                    var cookiestring = "";
                                    foreach (var cookie in cookiess)
                                    {
                                        cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                    }
                                    cookiestring = cookiestring.Trim(';');
                                    HttpRequest httpRequest = new HttpRequest();
                                    httpRequest.AllowAutoRedirect = true;
                                    httpRequest.Cookies = new CookieDictionary();
                                    httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                    httpRequest.KeepAlive = true;
                                    var cookieRaws = cookiestring.Split(';');
                                    foreach (var cookieraw in cookieRaws)
                                    {
                                        var cookieJAr = cookieraw.Split('=');
                                        try
                                        {
                                            httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                        }
                                        catch { }
                                    }
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("dpr", "0.800000011920929");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "1663");

                                    var response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_users?business_id={IDBM}");
                                    if (response.IsOK)
                                    {
                                        var responseSTR = response.ToString();
                                
                                        List<string> tokens = new List<string>();


                                        var matches = Regex.Matches(responseSTR, "businessUserID\":\"(.*?)\",\"businessUserName\":\"(.*?)\"");

                                        foreach (Match match in matches)
                                        {
                                            try
                                            {
                                                if (match.Groups.Count > 1)
                                                {
                                                    var userId = match.Groups[1].Value;
                                                    var userName = match.Groups[2].Value;
                                                    tokens.Add($"{userId}|{userName}");
                                                }
                                            }
                                            catch
                                            { }

                                        }

                                        foreach(var ID_NAME in tokens)
                                        {
                                            try
                                            {
                                                var ID = ID_NAME.Split('|')[0].ToString();
                                                var NAME = ID_NAME.Split('|')[1].ToString();
                                                if (rtb_ADMIN_BM_CHECK.InvokeRequired)
                                                {
                                                    rtb_ADMIN_BM_CHECK.Invoke(new Action(() =>
                                                    {
                                                        rtb_ADMIN_BM_CHECK.AppendText($"{IDVIA1}|{IDBM}|{ID}|{NAME}" + Environment.NewLine);
                                                    }));
                                                }
                                                else
                                                {
                                                    rtb_ADMIN_BM_CHECK.AppendText($"{IDVIA1}|{IDBM}|{ID}|{NAME}" + Environment.NewLine);
                                                }



                                            }
                                            catch { }
                                        }

                                    }
                                }
                                catch { }
                            }
                        }
                    }
                    catch
                    {
                        if (rtb_backup_fail.InvokeRequired)
                        {
                            rtb_backup_fail.Invoke(new Action(() =>
                            {
                                rtb_backup_fail.AppendText(IDVIA_IDBM + "|=> CHECK ADMIN FAIL!" + Environment.NewLine);

                            }));
                        }

                    }




                }



            uot1:
                Thread.Sleep(100);
            }
            catch { }



        }
        // NHẬN BM IG AUTO
        private async void nHẬNBMAUTOToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                var login = "";
                if (cmbLogin.InvokeRequired)
                {
                    cmbLogin.Invoke(new Action(() =>
                    {
                        login = cmbLogin.Text;
                    }));

                }
                else
                {
                    login = cmbLogin.Text;
                }


                if (login == "Chrome")
                {
                    try
                    {

                        var tasks = new List<Task>();
                        foreach (var entry in lstDataChrome)
                        {
                            ChromeDriver chromeDriver = entry.Key;
                            AccountData accountData = entry.Value;

                            // Kiểm tra xem cột "cSelect" có tồn tại không
                            if (accountData.Row.Cells[9] != null)
                            {
                                var cSelectValue = accountData.Row.Cells[9].Value;

                                // Kiểm tra xem cột "cSelect" có được chọn hay không
                                if (cSelectValue != null && (bool)cSelectValue)
                                {
                                    // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                                    tasks.Add(Task.Run(() =>
                                    {
                                        NHAN_LINK_BM_IG_AUTO(chromeDriver, accountData.Row, accountData.User);



                                    }));
                                }
                            }
                            else
                            {
                                // Cột "cSelect" không tồn tại
                                MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                            }
                        }
                        await Task.WhenAll(tasks);

                    }
                    catch { }
                }
                else
                {
                    try
                    {
                        // Tạo danh sách các tác vụ
                        var tasks = new List<Task>();

                        // Duyệt qua từng phần tử trong danh sách httprequest_via
                        foreach (var entry in lstDatahttprequest_via)
                        {
                            HttpRequest httpRequest = entry.Key;
                            AccountDatahttp accountData = entry.Value;
                            // Kiểm tra xem cột "cSelect" có tồn tại trong DataGridView (giả sử bạn có DataGridView nào đó)
                            if (accountData.Row.Cells[9] != null)
                            {
                                var cSelectValue = accountData.Row.Cells[9].Value;

                                // Kiểm tra xem cột "cSelect" có được chọn hay không
                                if (cSelectValue != null && (bool)cSelectValue)
                                {
                                    // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                                    tasks.Add(Task.Run(() =>
                                    {
                                        try
                                        {

                                            NHAN_LINK_BM_IG_AUTO_API(httpRequest, accountData.Row, accountData.User);
                                        }
                                        catch (Exception ex)
                                        {
                                            // Ghi log lỗi nếu có

                                        }
                                    }));
                                }
                            }
                            else
                            {
                                // Cột "cSelect" không tồn tại
                                MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                            }
                        }

                        // Chờ tất cả các task hoàn tất
                        await Task.WhenAll(tasks);
                    }
                    catch (Exception ex)
                    {
                        // Log lỗi nếu có vấn đề trong phần xử lý tổng thể
                        MessageBox.Show($"Đã xảy ra lỗi: {ex.Message}");
                    }
                }
              





            }
            catch { }


          
        }

        private readonly object linkLock1 = new object();  // Lock object để đồng bộ hóa các thao tác trên Link
        private void DOC_LINK_DA_LUONG_BMIG()
        {
            try
            {

                List<string> Link = new List<string>();
                List<string> Mail = new List<string>();
                List<string> Mail_350 = new List<string>();
                List<string> Link1 = new List<string>();

                var lOAI_BM_NHAN = "";
                if (CMB_LOAI_BM_NHAN.InvokeRequired)
                {
                    CMB_LOAI_BM_NHAN.Invoke(new Action(() =>
                    {
                        lOAI_BM_NHAN = CMB_LOAI_BM_NHAN.Text;
                    }));


                }
                else
                {
                    lOAI_BM_NHAN = CMB_LOAI_BM_NHAN.Text;
                }
                if(lOAI_BM_NHAN == "BM50")
                {
                    // Lấy dữ liệu từ rich_MAIL_DOC_LINK
                    if (rtb_mail_bm50_auto.InvokeRequired)
                    {
                        rtb_mail_bm50_auto.Invoke(new Action(() =>
                        {
                            Mail = rtb_mail_bm50_auto.Lines.ToList();
                        }));
                    }
                    else
                    {
                        Mail = rtb_mail_bm50_auto.Lines.ToList();
                    }

                    // Khởi tạo danh sách các Task để xử lý bất đồng bộ
                    List<Task> tasks = new List<Task>();

                    foreach (var mail_n in Mail)
                    {
                        var mail_share1 = mail_n.Split('|')[0].ToString();
                        var pass_mail_1 = mail_n.Split('|')[1].ToString();

                        // Tạo task xử lý cho mỗi email
                        var task = new Task(() =>
                        {
                            try
                            {
                                var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail_share1, pass_mail_1);
                                if (string.IsNullOrEmpty(accessToken))
                                {
                                    Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                                    (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail_share1, pass_mail_1);
                                }

                                // Lấy Link từ tài khoản email
                                Link1 = GetLinkBm_IG(mail_share1, pass_mail_1, accessToken, refreshToken);
                                // Sử dụng lock để thêm liên kết vào danh sách Link một cách đồng bộ
                                lock (linkLock1)
                                {
                                    Link.AddRange(Link1);
                                }

                            }
                            catch (Exception ex)
                            {

                            }
                        });

                        tasks.Add(task);
                        task.Start();
                    }

                    // Đợi tất cả các Task hoàn thành
                    Task.WhenAll(tasks).Wait();
                }
                else
                {

                    if (rtb_mail_bm350_auto.InvokeRequired)
                    {
                        rtb_mail_bm350_auto.Invoke(new Action(() =>
                        {
                            Mail_350 = rtb_mail_bm350_auto.Lines.ToList();
                        }));
                    }
                    else
                    {
                        Mail_350 = rtb_mail_bm50_auto.Lines.ToList();
                    }

                    // Khởi tạo danh sách các Task để xử lý bất đồng bộ
                    List<Task> tasks = new List<Task>();

                    foreach (var mail_n in Mail_350)
                    {
                        var mail_share1 = mail_n.Split('|')[0].ToString();
                        var pass_mail_1 = mail_n.Split('|')[1].ToString();

                        // Tạo task xử lý cho mỗi email
                        var task = new Task(() =>
                        {
                            try
                            {
                                var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail_share1, pass_mail_1);
                                if (string.IsNullOrEmpty(accessToken))
                                {
                                    Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                                    (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail_share1, pass_mail_1);
                                }

                                // Lấy Link từ tài khoản email
                                Link1 = GetLinkBm_IG(mail_share1, pass_mail_1, accessToken, refreshToken);
                                // Sử dụng lock để thêm liên kết vào danh sách Link một cách đồng bộ
                                lock (linkLock1)
                                {
                                    Link.AddRange(Link1);
                                }

                            }
                            catch (Exception ex)
                            {

                            }
                        });

                        tasks.Add(task);
                        task.Start();
                    }

                    // Đợi tất cả các Task hoàn thành
                    Task.WhenAll(tasks).Wait();
                }

                // Cập nhật liên kết vào rtblink_doc
                foreach (var link in Link)
                {
                    try
                    {
                        var loaiBM = link.Split('|')[2];

                        var linkBM = link.Split('|')[0] + "|" + link.Split('|')[1];
                        var CHUC_NANG = "";
                        if (cmb_Chuc_Nang.InvokeRequired)
                        {
                            cmb_Chuc_Nang.Invoke(new Action(() =>
                            {
                                CHUC_NANG = cmb_Chuc_Nang.Text;
                            }));

                        }
                        if(CHUC_NANG== "DOC_LINK_BM")
                        {
                            if (loaiBM == "BM350III")
                            {

                                if (rtb_Link_BM350_IG_auto.InvokeRequired)
                                {
                                    rtb_Link_BM350_IG_auto.Invoke(new Action(() =>
                                    {
                                        rtb_Link_BM350_IG_auto.AppendText(linkBM + "| BM THỨ 3" + Environment.NewLine);
                                    }));
                                }
                                else
                                {
                                    rtb_Link_BM350_IG_auto.AppendText(linkBM + "| BM THỨ 3" + Environment.NewLine);
                                }

                                StreamWriter sw = new StreamWriter("LINKBM350THU3.txt", true);
                                sw.WriteLine($"{linkBM}|{DateTime.Now}");
                                sw.Close();
                            }
                        }
                        else
                        {
                            if (loaiBM == "BM350III")
                            {

                                if (rtb_BMIII_auto.InvokeRequired)
                                {
                                    rtb_BMIII_auto.Invoke(new Action(() =>
                                    {
                                        rtb_BMIII_auto.AppendText(linkBM + Environment.NewLine);
                                    }));
                                }
                                else
                                {
                                    rtb_BMIII_auto.AppendText(linkBM + Environment.NewLine);
                                }

                                StreamWriter sw = new StreamWriter("LINKBM350THU3.txt", true);
                                sw.WriteLine($"{linkBM}|{DateTime.Now}");
                                sw.Close();

                            }
                        }
                        if (loaiBM == "BM350V")
                        {
                            if (rtb_10_link_bm350.InvokeRequired)
                            {
                                rtb_10_link_bm350.Invoke(new Action(() =>
                                {
                                    rtb_10_link_bm350.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_10_link_bm350.AppendText(linkBM + Environment.NewLine);
                            }

                            StreamWriter sw = new StreamWriter("LINKBM35010LINK.txt", true);
                            sw.WriteLine($"{linkBM}|{DateTime.Now}");
                            sw.Close();
                        }
                        if (loaiBM == "BM50X")
                        {
                            if (rtb_10_link_bm50.InvokeRequired)
                            {
                                rtb_10_link_bm50.Invoke(new Action(() =>
                                {
                                    rtb_10_link_bm50.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_10_link_bm50.AppendText(linkBM + Environment.NewLine);
                            }

                            StreamWriter sw = new StreamWriter("LINKBM5010LINK.txt", true);
                            sw.WriteLine($"{linkBM}|{DateTime.Now}");
                            sw.Close();
                        }




                        if (loaiBM == "BMIII")
                        {
                            if (rtb_BMIII_auto.InvokeRequired)
                            {
                                rtb_BMIII_auto.Invoke(new Action(() =>
                                {
                                    rtb_BMIII_auto.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_BMIII_auto.AppendText(linkBM + Environment.NewLine);
                            }

                            StreamWriter sw = new StreamWriter("LINKBM50THU3.txt", true);
                            sw.WriteLine($"{linkBM}|{DateTime.Now}");
                            sw.Close();
                        }
                        if (loaiBM == "BM350")
                        {
                            if (rtb_Link_BM350_IG_auto.InvokeRequired)
                            {
                                rtb_Link_BM350_IG_auto.Invoke(new Action(() =>
                                {
                                    rtb_Link_BM350_IG_auto.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_Link_BM350_IG_auto.AppendText(linkBM + Environment.NewLine);
                            }
                        }
                        if (loaiBM == "BM50")
                        {

                            if (rtb_Link_BM50_IG_auto.InvokeRequired)
                            {
                                rtb_Link_BM50_IG_auto.Invoke(new Action(() =>
                                {
                                    rtb_Link_BM50_IG_auto.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_Link_BM50_IG_auto.AppendText(linkBM + Environment.NewLine);
                            }
                        }
                    }
                    catch { }

                }



            }
            catch (Exception e)
            {

            }
        }
        private void DOC_LINK_DA_LUONG_BMIG_MAIL_MOAKT(List<(HttpRequest Request, string Mail)> httprequest_Mail_MOAKT_BM50_BM350 , DataGridViewRow row )
        {
            try
            {

                List<string> links = new List<string>();
                List<string> link50 = new List<string>();
                List<string> link350 = new List<string>();
                List<string> Mail = new List<string>();
                List<string> Mail_350 = new List<string>();
           

                var lOAI_BM_NHAN = "";
                if (CMB_LOAI_BM_NHAN.InvokeRequired)
                {
                    CMB_LOAI_BM_NHAN.Invoke(new Action(() =>
                    {
                        lOAI_BM_NHAN = CMB_LOAI_BM_NHAN.Text;
                    }));


                }
                else
                {
                    lOAI_BM_NHAN = CMB_LOAI_BM_NHAN.Text;
                }
                if (lOAI_BM_NHAN == "BM50")
                {
                  
                    // Khởi tạo danh sách các Task để xử lý bất đồng bộ
                    List<Task> tasks = new List<Task>();

                    foreach (var Http_mail in httprequest_Mail_MOAKT_BM50_BM350)
                    {
                      
                        // Tạo task xử lý cho mỗi email
                        var task = new Task(() =>
                        {
                            try
                            {
                                // Lấy HttpRequest và Mail
                                HttpRequest httprequest = Http_mail.Request;
                                string mail = Http_mail.Mail;
                                if (!string.IsNullOrEmpty(mail))
                                {
                                    link50 = link_moakt_BM_IG(httprequest, row);

                                    // Sử dụng lock để thêm liên kết vào danh sách Link một cách đồng bộ
                                    lock (linkLock1)
                                    {
                                        links.AddRange(link50);
                                    }

                                }

                            }
                            catch
                            {

                            }
                        });
                        tasks.Add(task);
                        task.Start();
                    }
                    Task.WhenAll(tasks).Wait();
           
                }
                else
                {

                  
                    // Khởi tạo danh sách các Task để xử lý bất đồng bộ
                    List<Task> tasks = new List<Task>();

                    foreach (var Http_mail in httprequest_Mail_MOAKT_BM50_BM350)
                    {
                        // Tạo task xử lý cho mỗi email
                        var task = new Task(() =>
                        {
                            try
                            {
                                // Lấy HttpRequest và Mail
                                HttpRequest httprequest = Http_mail.Request;
                                string mail = Http_mail.Mail;
                                if (!string.IsNullOrEmpty(mail))
                                {
                                    link350 = link_moakt_BM_IG(httprequest, row);
                                    // Sử dụng lock để thêm liên kết vào danh sách Link một cách đồng bộ
                                    lock (linkLock1)
                                    {
                                        links.AddRange(link350);
                                    }
                                }
                            }
                            catch
                            {

                            }
                        });

                        tasks.Add(task);
                        task.Start();


                    }
                    // Đợi tất cả các Task hoàn thành
                    Task.WhenAll(tasks).Wait();
                }

                // Cập nhật liên kết vào rtblink_doc
                foreach (var link in links)
                {
                    try
                    {
                        var loaiBM = link.Split('|')[2].Trim();

                        var linkBM = link.Split('|')[0] + "|" + link.Split('|')[1];
                        var CHUC_NANG = "";
                        if (cmb_Chuc_Nang.InvokeRequired)
                        {
                            cmb_Chuc_Nang.Invoke(new Action(() =>
                            {
                                CHUC_NANG = cmb_Chuc_Nang.Text;
                            }));

                        }
                        if (CHUC_NANG == "DOC_LINK_BM")
                        {
                            if (loaiBM == "BM350III"|| loaiBM.Contains("BM350III"))
                            {

                                if (rtb_Link_BM350_IG_auto.InvokeRequired)
                                {
                                    rtb_Link_BM350_IG_auto.Invoke(new Action(() =>
                                    {
                                        rtb_Link_BM350_IG_auto.AppendText(linkBM + "| BM THỨ 3" + Environment.NewLine);
                                    }));
                                }
                                else
                                {
                                    rtb_Link_BM350_IG_auto.AppendText(linkBM + "| BM THỨ 3" + Environment.NewLine);
                                }

                                StreamWriter sw = new StreamWriter("LINKBM350THU3.txt", true);
                                sw.WriteLine($"{linkBM}|{DateTime.Now}");
                                sw.Close();
                            }
                        }
                        else
                        {
                            if (loaiBM == "BM350III" || loaiBM.Contains("BM350III"))
                            {

                                if (rtb_BMIII_auto.InvokeRequired)
                                {
                                    rtb_BMIII_auto.Invoke(new Action(() =>
                                    {
                                        rtb_BMIII_auto.AppendText(linkBM + Environment.NewLine);
                                    }));
                                }
                                else
                                {
                                    rtb_BMIII_auto.AppendText(linkBM + Environment.NewLine);
                                }

                                StreamWriter sw = new StreamWriter("LINKBM350THU3.txt", true);
                                sw.WriteLine($"{linkBM}|{DateTime.Now}");
                                sw.Close();

                            }
                        }
                        if (loaiBM == "BM350V" || loaiBM.Contains("BM350V"))
                        {
                            if (rtb_10_link_bm350.InvokeRequired)
                            {
                                rtb_10_link_bm350.Invoke(new Action(() =>
                                {
                                    rtb_10_link_bm350.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_10_link_bm350.AppendText(linkBM + Environment.NewLine);
                            }

                            StreamWriter sw = new StreamWriter("LINKBM35010LINK.txt", true);
                            sw.WriteLine($"{linkBM}|{DateTime.Now}");
                            sw.Close();
                        }
                        if (loaiBM == "BM50X" || loaiBM.Contains("BM50X"))
                        {
                            if (rtb_10_link_bm50.InvokeRequired)
                            {
                                rtb_10_link_bm50.Invoke(new Action(() =>
                                {
                                    rtb_10_link_bm50.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_10_link_bm50.AppendText(linkBM + Environment.NewLine);
                            }

                            StreamWriter sw = new StreamWriter("LINKBM5010LINK.txt", true);
                            sw.WriteLine($"{linkBM}|{DateTime.Now}");
                            sw.Close();
                        }

                        if (loaiBM == "BMIII" || loaiBM.Contains("BMIII"))
                        {
                            if (rtb_BMIII_auto.InvokeRequired)
                            {
                                rtb_BMIII_auto.Invoke(new Action(() =>
                                {
                                    rtb_BMIII_auto.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_BMIII_auto.AppendText(linkBM + Environment.NewLine);
                            }

                            StreamWriter sw = new StreamWriter("LINKBM50THU3.txt", true);
                            sw.WriteLine($"{linkBM}|{DateTime.Now}");
                            sw.Close();
                        }
                        if (loaiBM == "BM350" || loaiBM.Contains("BM350"))
                        {
                            if (rtb_Link_BM350_IG_auto.InvokeRequired)
                            {
                                rtb_Link_BM350_IG_auto.Invoke(new Action(() =>
                                {
                                    rtb_Link_BM350_IG_auto.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_Link_BM350_IG_auto.AppendText(linkBM + Environment.NewLine);
                            }
                        }
                        if (loaiBM == "BM50" || loaiBM.Contains("BM50"))
                        {

                            if (rtb_Link_BM50_IG_auto.InvokeRequired)
                            {
                                rtb_Link_BM50_IG_auto.Invoke(new Action(() =>
                                {
                                    rtb_Link_BM50_IG_auto.AppendText(linkBM + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_Link_BM50_IG_auto.AppendText(linkBM + Environment.NewLine);
                            }
                        }
                    }
                    catch { }

                }



            }
            catch (Exception e)
            {

            }
        }
        private async Task NHAN_LINK_BM_IG_AUTO(ChromeDriver chromedriver, DataGridViewRow row, string username)
        {
            try
            {
                var mail_nhan = "";
                if (cmb_loai_mail_nhan_bm_ig.InvokeRequired)
                {
                    cmb_loai_mail_nhan_bm_ig.Invoke(new Action(() =>
                    {
                        mail_nhan = cmb_loai_mail_nhan_bm_ig.Text;
                    }));
                }
                List<(HttpRequest Request, string Mail)> httprequest_Mail_MOAKT_BM50_BM350 = new List<(HttpRequest, string)>();
                var stt1 = row.Cells["cStt"].Value.ToString();
                if (mail_nhan == "Moakt")
                {
                 
                    if (stt1 == "1")
                    {
                        List<string> Link = new List<string>();
                        List<string> Mail = new List<string>();
                        List<string> Mail_350 = new List<string>();
                        List<string> Link1 = new List<string>();

                        var lOAI_BM_NHAN = "";
                        if (CMB_LOAI_BM_NHAN.InvokeRequired)
                        {
                            CMB_LOAI_BM_NHAN.Invoke(new Action(() =>
                            {
                                lOAI_BM_NHAN = CMB_LOAI_BM_NHAN.Text;
                            }));


                        }
                        else
                        {
                            lOAI_BM_NHAN = CMB_LOAI_BM_NHAN.Text;
                        }
                        if (lOAI_BM_NHAN == "BM50")
                        {
                            // Lấy dữ liệu từ rich_MAIL_DOC_LINK
                            if (rtb_mail_bm50_auto.InvokeRequired)
                            {
                                rtb_mail_bm50_auto.Invoke(new Action(() =>
                                {
                                    Mail = rtb_mail_bm50_auto.Lines.ToList();
                                }));
                            }
                            else
                            {
                                Mail = rtb_mail_bm50_auto.Lines.ToList();
                            }

                            // Khởi tạo danh sách các Task để xử lý bất đồng bộ
                            List<Task> tasks = new List<Task>();

                            foreach (var mail_n in Mail)
                            {

                                // Tạo task xử lý cho mỗi email
                                var task = new Task(() =>
                                {
                                    try
                                    {
                                        HttpRequest httprequest_Mail_MOAKT = new HttpRequest();
                                        httprequest_Mail_MOAKT.Cookies = new CookieDictionary();
                                        httprequest_Mail_MOAKT.KeepAlive = true;
                                        httprequest_Mail_MOAKT.AllowAutoRedirect = true;
                                        httprequest_Mail_MOAKT.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                                        var mail_share = mailmoakt_com_BM_IG(httprequest_Mail_MOAKT, mail_n, row);
                                        httprequest_Mail_MOAKT_BM50_BM350.Add((httprequest_Mail_MOAKT, mail_share));

                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                });

                                tasks.Add(task);
                                task.Start();
                            }

                            // Đợi tất cả các Task hoàn thành
                            Task.WhenAll(tasks).Wait();
                        }
                        else
                        {

                            if (rtb_mail_bm350_auto.InvokeRequired)
                            {
                                rtb_mail_bm350_auto.Invoke(new Action(() =>
                                {
                                    Mail_350 = rtb_mail_bm350_auto.Lines.ToList();
                                }));
                            }
                            else
                            {
                                Mail_350 = rtb_mail_bm50_auto.Lines.ToList();
                            }

                            // Khởi tạo danh sách các Task để xử lý bất đồng bộ
                            List<Task> tasks = new List<Task>();

                            foreach (var mail_n in Mail_350)
                            {


                                // Tạo task xử lý cho mỗi email
                                var task = new Task(() =>
                                {
                                    try
                                    {
                                        HttpRequest httprequest_Mail_MOAKT = new HttpRequest();
                                        httprequest_Mail_MOAKT.Cookies = new CookieDictionary();
                                        httprequest_Mail_MOAKT.KeepAlive = true;
                                        httprequest_Mail_MOAKT.AllowAutoRedirect = true;
                                        httprequest_Mail_MOAKT.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                                        var mail_share = mailmoakt_com_BM_IG(httprequest_Mail_MOAKT, mail_n, row);
                                        httprequest_Mail_MOAKT_BM50_BM350.Add((httprequest_Mail_MOAKT, mail_share));
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                });

                                tasks.Add(task);
                                task.Start();
                            }

                            // Đợi tất cả các Task hoàn thành
                            Task.WhenAll(tasks).Wait();
                        }


                    }
                }

                


                int  nhan_bm_ig_fail = 0;
            check:
            nhanbm:

                try
                {
                    var STOP = "";
                    if (cmb_STOP.InvokeRequired)
                    {
                        cmb_STOP.Invoke(new Action(() =>
                        {
                            STOP = cmb_STOP.Text;
                        }));

                    }
                    if (STOP == "OFF")
                    {
                        row.Cells["cStatus"].Value = "NHẬN LINK OFF";
                        goto uot;
                    }


                }
                catch { }
      

                List<string> LINKBM50 = new List<string>();

                var chi_doc_link_mail_ao = "";
                if (cmb_chi_doc_link_mail_ao.InvokeRequired)
                {
                    cmb_chi_doc_link_mail_ao.Invoke(new Action(() =>
                    {

                        chi_doc_link_mail_ao = cmb_chi_doc_link_mail_ao.Text;

                    }));

                }
                else
                {
                    chi_doc_link_mail_ao = cmb_chi_doc_link_mail_ao.Text;
                }

                if (stt1 == "1")
                {
                    if (mail_nhan == "Moakt")
                    {

                        await Task.Run(() =>
                        {
                            DOC_LINK_DA_LUONG_BMIG_MAIL_MOAKT(httprequest_Mail_MOAKT_BM50_BM350,row);
                        });
                    }
                    else
                    {
                        await Task.Run(() =>
                        {
                            DOC_LINK_DA_LUONG_BMIG();
                        });

                    }
                


                    var LOAI_BM_NHAN = "";
                    if (CMB_LOAI_BM_NHAN.InvokeRequired)
                    {
                        CMB_LOAI_BM_NHAN.Invoke(new Action(() => 
                        {
                            LOAI_BM_NHAN = CMB_LOAI_BM_NHAN.Text;

                        }));
                    }
                    if (chi_doc_link_mail_ao == "OFF")
                    {
                        if (LOAI_BM_NHAN == "BM50")
                        {
                            if (rtb_Link_BM50_IG_auto.InvokeRequired)
                            {
                                rtb_Link_BM50_IG_auto.Invoke(new Action(() =>
                                {
                                    LINKBM50 = rtb_Link_BM50_IG_auto.Lines.ToList();
                                    rtb_Link_BM50_IG_auto.Clear();
                                }));

                            }
                        }
                        else
                        {
                            if (rtb_Link_BM350_IG_auto.InvokeRequired)
                            {
                                rtb_Link_BM350_IG_auto.Invoke(new Action(() =>
                                {
                                    LINKBM50 = rtb_Link_BM350_IG_auto.Lines.ToList();
                                    rtb_Link_BM350_IG_auto.Clear();
                                }));

                            }
                        }
                    }
              


                    if (LINKBM50.Count == 0)
                    {
                        int delay = (int)DELAY_DOC_MAIL.Value;
                        Thread.Sleep(TimeSpan.FromSeconds(delay));
                        goto check;
                    }
                }
                else
                {

                    Thread.Sleep(TimeSpan.FromSeconds(90));
                }

        

                if (chi_doc_link_mail_ao == "ON")
                {
                    goto nhanbm;
                }


                List<string> LINK_DONE = new List<string>();
                List<string> LINK_FAIL = new List<string>();
                string nhan_link_bm_API_Auto = "";
                if (cmbAPI_Auto_selenium_NhanBM_IG.InvokeRequired)
                {
                    cmbAPI_Auto_selenium_NhanBM_IG.Invoke(new Action(() =>
                    {
                        nhan_link_bm_API_Auto = cmbAPI_Auto_selenium_NhanBM_IG.Text;

                    }));
                }
                List<string> ID_link = new List<string>();

                if (nhan_link_bm_API_Auto == "API")
                {
                    try
                    {
                        row.Cells["cStatus"].Value = "NHẬN LINK .....";
                        var password = row.Cells["cPass"].Value.ToString();
                        var lastRowIndex = dgv1.Rows.Count - 1;
                        if (dgv1.AllowUserToAddRows) lastRowIndex--;

                        int sttCuoi = Convert.ToInt32(dgv1.Rows[lastRowIndex].Cells["cStt"].Value);


                        var link = "";
                        // Tạo từ điển lưu các control rtbACCOUNT
                        Dictionary<int, RichTextBox> rtbControls = new Dictionary<int, RichTextBox>
                            {
                                { 1, rtb_LINKBM_IG_1 },
                                { 2, rtb_LINKBM_IG_2 },
                                { 3, rtb_LINKBM_IG_3 },
                                { 4, rtb_LINKBM_IG_4 },
                                { 5, rtb_LINKBM_IG_5 },
                                { 6, rtb_LINKBM_IG_6 },
                                { 7, rtb_LINKBM_IG_7 },
                                { 8, rtb_LINKBM_IG_8 },
                                { 9, rtb_LINKBM_IG_9},
                                { 10, rtb_LINKBM_IG_10},
                                { 11, rtb_LINKBM_IG_11},
                                { 12, rtb_LINKBM_IG_12},
                                { 13, rtb_LINKBM_IG_13 },
                                { 14, rtb_LINKBM_IG_14 },
                                { 15, rtb_LINKBM_IG_15 },
                                { 16, rtb_LINKBM_IG_16 },
                                { 17, rtb_LINKBM_IG_17 },
                                { 18, rtb_LINKBM_IG_18 },
                                { 19, rtb_LINKBM_IG_19 },
                                { 20, rtb_LINKBM_IG_20 },
                                { 21, rtb_LINKBM_IG_21},
                                { 22, rtb_LINKBM_IG_22},
                                { 23, rtb_LINKBM_IG_23},
                                { 24, rtb_LINKBM_IG_24 },
                                { 25, rtb_LINKBM_IG_25 },
                                { 26, rtb_LINKBM_IG_26 },
                                { 27, rtb_LINKBM_IG_27 },
                                { 28, rtb_LINKBM_IG_28 },
                                { 29, rtb_LINKBM_IG_29 },
                                { 30, rtb_LINKBM_IG_30 },
                                { 31, rtb_LINKBM_IG_31 },
                                { 32, rtb_LINKBM_IG_32},
                                { 33, rtb_LINKBM_IG_33},
                                { 34, rtb_LINKBM_IG_34 },
                                { 35, rtb_LINKBM_IG_35 },
                                { 36, rtb_LINKBM_IG_36 },
                                { 37, rtb_LINKBM_IG_37 },
                                { 38, rtb_LINKBM_IG_38 },
                                { 39, rtb_LINKBM_IG_39 },
                                { 40, rtb_LINKBM_IG_40 },

                            };

                        Dictionary<int, RichTextBox> rtbLINKFAIL = new Dictionary<int, RichTextBox>
                            {
                                { 1, rtb_LINKBMFAIL_IG_1 },
                                { 2, rtb_LINKBMFAIL_IG_2 },
                                { 3, rtb_LINKBMFAIL_IG_3 },
                                { 4, rtb_LINKBMFAIL_IG_4 },
                                { 5, rtb_LINKBMFAIL_IG_5 },
                                { 6, rtb_LINKBMFAIL_IG_6 },
                                { 7, rtb_LINKBMFAIL_IG_7 },
                                { 8, rtb_LINKBMFAIL_IG_8 },
                                { 9, rtb_LINKBMFAIL_IG_9},
                                { 10, rtb_LINKBMFAIL_IG_10},
                                { 11, rtb_LINKBMFAIL_IG_11},
                                { 12, rtb_LINKBMFAIL_IG_12},
                                { 13, rtb_LINKBMFAIL_IG_13 },
                                { 14, rtb_LINKBMFAIL_IG_14 },
                                { 15, rtb_LINKBMFAIL_IG_15 },
                                { 16, rtb_LINKBMFAIL_IG_16 },
                                { 17, rtb_LINKBMFAIL_IG_17 },
                                { 18, rtb_LINKBMFAIL_IG_18 },
                                { 19, rtb_LINKBMFAIL_IG_19 },
                                { 20, rtb_LINKBMFAIL_IG_20 },
                                { 21, rtb_LINKBMFAIL_IG_21},
                                { 22, rtb_LINKBMFAIL_IG_22},
                                { 23, rtb_LINKBMFAIL_IG_23},
                                { 24, rtb_LINKBMFAIL_IG_24 },
                                { 25, rtb_LINKBMFAIL_IG_25 },
                                { 26, rtb_LINKBMFAIL_IG_26 },
                                { 27, rtb_LINKBMFAIL_IG_27 },
                                { 28, rtb_LINKBMFAIL_IG_28 },
                                { 29, rtb_LINKBMFAIL_IG_29 },
                                { 30, rtb_LINKBMFAIL_IG_30 },
                                { 31, rtb_LINKBMFAIL_IG_31 },
                                { 32, rtb_LINKBMFAIL_IG_32},
                                { 33, rtb_LINKBMFAIL_IG_33},
                                { 34, rtb_LINKBMFAIL_IG_34 },
                                { 35, rtb_LINKBMFAIL_IG_35 },
                                { 36, rtb_LINKBMFAIL_IG_36 },
                                { 37, rtb_LINKBMFAIL_IG_37 },
                                { 38, rtb_LINKBMFAIL_IG_38 },
                                { 39, rtb_LINKBMFAIL_IG_39 },
                                { 40, rtb_LINKBMFAIL_IG_40 },

                            };
                        int totalLink = LINKBM50.Count;     // = 51
                        int totalBox = sttCuoi;                  // 40 RichTextBox
                        int linksPerBox = 5;                // Mỗi box chứa 5 link

                        int currentIndex = 0;
                        List<string> DEMVIANHAN = new List<string>();
                        for(int c=0; c < totalBox; c++)
                        {
                            // Lấy TextBox tb_i để kiểm tra trạng thái
                            var tb = this.Controls.Find($"tb_{c}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                            if(tb != null)
                            {
                                if(tb.Text == "0")
                                {
                                    DEMVIANHAN.Add(tb.Text);
                                }
                 
                            }


                        }
                        if (stt1 == "1")
                        {
                            if ((totalLink / linksPerBox) >= DEMVIANHAN.Count)
                            {

                                for (int e = 1; e <= totalBox; e++)
                                {
                                    // Lấy TextBox tb_i để kiểm tra trạng thái
                                    var tb1 = this.Controls.Find($"tb_{e}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                                    if (tb1 != null)
                                    {
                                        if (tb1.InvokeRequired)
                                            tb1.Invoke(new Action(() => tb1.Text = "0"));
                                        else
                                            tb1.Text = "0";
                                    }
                                    //if(nhan_bm_ig_fail >= 5)
                                    //{

                                    //    if (tb1.InvokeRequired)
                                    //        tb1.Invoke(new Action(() => tb1.Text = "1"));
                                    //    else
                                    //        tb1.Text = "1";
                                    //    goto uot;
                                    //}
                                }


                            }
                        }
                        else
                        {
                            for (int e = 1; e <= totalBox; e++)
                            {
                                // Lấy TextBox tb_i để kiểm tra trạng thái
                                var tb1 = this.Controls.Find($"tb_{e}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                             
                                if (nhan_bm_ig_fail >= 5)
                                {
                                    if (tb1 != null)
                                    {
                                        row.Cells["cStatus"].Value = "NHẬN FAIL => 5BM";
                                        if (tb1.InvokeRequired)
                                            tb1.Invoke(new Action(() => tb1.Text = "1"));
                                        else
                                            tb1.Text = "1";
                                        goto uot;
                                    }
                                }
                            }
                        }
                  



                        for (int i = 1; i <= totalBox; i++)
                        {

                            // Lấy TextBox tb_i để kiểm tra trạng thái
                            var tb = this.Controls.Find($"tb_{i}", true).FirstOrDefault() as System.Windows.Forms.TextBox;

                            bool isUsed = false;

                            if (tb != null)
                            {
                                // Nếu TextBox có giá trị "1" thì RichTextBox đã dùng, bỏ qua
                                if (tb.InvokeRequired)
                                {
                                    tb.Invoke(new Action(() =>
                                    {
                                        isUsed = tb.Text.Trim() == "1";
                                    }));
                                }
                                else
                                {
                                    isUsed = tb.Text.Trim() == "1";
                                }
                            }
                            if (isUsed) continue; // ❌ Đã dùng, bỏ qua vòng lặp này

                            // Nếu chưa được sử dụng, tiếp tục chia link
                            if (!rtbControls.ContainsKey(i)) continue;

                            var rtb = rtbControls[i];

                            List<string> linksForBox = new List<string>();

                            for (int j = 0; j < linksPerBox && currentIndex < totalLink; j++)
                            {
                                var linkbm = LINKBM50[currentIndex]?.Trim();
                                if (!string.IsNullOrEmpty(linkbm))
                                {
                                    linksForBox.Add(linkbm);
                                }
                                currentIndex++;
                            }
                  
                            if (linksForBox.Count > 0)
                            {

                                string content = string.Join(Environment.NewLine, linksForBox);

                                if (rtb.InvokeRequired)
                                {
                                    

                                    rtb.Invoke(new Action(() =>
                                    {
                                        rtb.Clear();
                                        rtb.AppendText(content + Environment.NewLine);
                                    }));
                                }
                                else
                                {
                                    rtb.Clear();
                                    rtb.AppendText(content + Environment.NewLine);
                                }
                                // Đánh dấu TextBox = "1" (chỉ nếu tồn tại)
                                if (tb != null)
                                {
                                    if (tb.InvokeRequired)
                                    {
                                        tb.Invoke(new Action(() =>
                                        {
                                            tb.Text = "1";
                                        }));
                                    }
                                    else
                                    {
                                        tb.Text = "1";
                                    }
                                }

                             


                            }
                       
                           
                        }

                        // Lấy giá trị cStt từ DataGridViewRow
                        int cStt = Convert.ToInt32(row.Cells["cStt"].Value);
                        // Kiểm tra nếu cStt có trong từ điển
                        if (rtbControls.ContainsKey(cStt))
                        {
                            RichTextBox selectedRtb = rtbControls[cStt];

                            if (selectedRtb.InvokeRequired)
                            {
                                selectedRtb.Invoke(new Action(() =>
                                {
                                    ID_link = selectedRtb.Lines.ToList();
                                }));
                            }
                        }
                        if (ID_link.Count == 0)
                        {
                            goto check;
                        }



                        foreach (var id_link in ID_link)
                        {
                            if (string.IsNullOrEmpty(id_link))
                            {
                                goto out4;

                            }
                            var IDBM = "";
                            try
                            {
                                IDBM = id_link.Split('|')[0].ToString();
                                link = id_link.Split('|')[1].ToString();
                            }
                            catch { }
                            if (string.IsNullOrEmpty(link))
                            {
                                link = id_link;
                            }
                            chromedriver.Navigate().GoToUrl(link);
                            Thread.Sleep(2000);
                            try
                            {
                                var LOGINFACEBOOK = chromedriver.FindElements(By.XPath("//div//div[@role='button']"));
                                if (LOGINFACEBOOK.Count > 0)
                                {
                                    LOGINFACEBOOK[0].Click();

                                }

                      



                                var HTMl = chromedriver.PageSource;
                                var businessID = Regex.Match(HTMl, "businessID\":\"(.*?)\"").Groups[1].Value.ToString();
                                var businessName = Regex.Match(HTMl, "businessName\":\"(.*?)\"").Groups[1].Value.ToString();
                                if (string.IsNullOrEmpty(IDBM))
                                {
                                    IDBM = businessID;
                                }
                                else
                                {
                                    if (IDBM != businessID)
                                    {
                                        row.Cells["cStatus"].Value = $" Link BM {IDBM} Khác BM Đang Nhận: {businessID} Name: {businessName} FAIL!";
                                        LINK_FAIL.Add(IDBM);
                                        if (rtb_Link_FAIL.InvokeRequired)
                                        {
                                            rtb_Link_FAIL.Invoke(new Action(() =>
                                            {
                                                rtb_Link_FAIL.AppendText(IDBM + "|" + link + "| BM Khác" + Environment.NewLine);
                                            }));
                                        }
                                        goto out4;
                                    }
                                }


                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                var cookiestring = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                }
                                cookiestring = cookiestring.Trim(';');

                                HttpRequest httpRequest = new HttpRequest();
                                httpRequest.AllowAutoRedirect = true;
                                httpRequest.Cookies = new CookieDictionary();
                                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                EnsurePostWWWLoginHDFull(httpRequest);
                                httpRequest.KeepAlive = true;
                                var cookieRaws = cookiestring.Split(';');
                                foreach (var cookieraw in cookieRaws)
                                {
                                    var cookieJAr = cookieraw.Split('=');
                                    try
                                    {
                                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                    }
                                    catch { }
                                }
                                var manguon = chromedriver.PageSource;
                                var userid = Regex.Match(manguon, "USER_ID\":\"(.*?)\"").Groups[1].Value;
                                var token = Regex.Match(manguon, "URL=\\/invitation\\/\\?token=(.*?);").Groups[1].Value;
                                var join_id = Regex.Match(manguon, "&amp;join_id=(.*?)&").Groups[1].Value;
                                var fb_dtsg = Regex.Match(manguon, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                                var lsd = Regex.Match(manguon, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                                var datapass = $"first_name={userid}&last_name={userid}&invitation_token={token}&receive_marketing_messages=false&user_preferred_business_email&join_id={join_id}&mma_qpl_join_id&__aaid=0&__user={userid}&__a=1&__req=2&__hs=19967.BP:DEFAULT.2.0..0.0&dpr=1&__ccg=EXCELLENT&__rev=1016140233&__s=eq4kgy:g2a9c6:2ln3ia&__hsi=7409593093397164476&__dyn=7xeUmwkHgydwn8K2Wmh0no6u5U4e1Fx-ewSwMxW0DUS2S0lW4o3Bw5VCwjE3awbG78b87C1xwEwpU1vohwnU5W0IU9k2C1FwnE3_x20CU-0KU3mwkE5G1HwywnE2Lx-0lK3qazo11E2ZwrU6C0oe0ue1TwmU&__csr=&fb_dtsg={fb_dtsg}&jazoest=25507&lsd={lsd}&__spin_r=1016140233&__spin_b=trunk&__spin_t=1725180329&__jssesw=1&qpl_active_flow_ids=433725819,692797008&ajax_password={password}";
                                var postnhanlinkbm2 = httpRequest.Post("https://business.facebook.com/business/invitation/login/", datapass, "application/x-www-form-urlencoded");
                                if (postnhanlinkbm2.IsOK)
                                {
                                    var responseStr = postnhanlinkbm2.ToString();
                                    if (responseStr.Contains("for (;;);{\"__ar\":1,\"rid\":\""))
                                    {
                                        row.Cells[7].Value = $"NHẬN LINK {link} DONE IDBM: {IDBM}";
                                        var sttStr = row.Cells["cStt"].Value?.ToString();
                                        if (int.TryParse(sttStr, out int stt))
                                        {
                                            var tbNhan = this.Controls.Find($"tb_nhan{stt}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                                            if (tbNhan != null)
                                            {
                                                if (tbNhan.InvokeRequired)
                                                {
                                                    tbNhan.Invoke(new Action(() =>
                                                    {
                                                        // Tăng số đếm lên 1
                                                        int current = 0;
                                                        int.TryParse(tbNhan.Text, out current);
                                                        tbNhan.Text = (current + 1).ToString();
                                                    }));
                                                }
                                                else
                                                {
                                                    int current = 0;
                                                    int.TryParse(tbNhan.Text, out current);
                                                    tbNhan.Text = (current + 1).ToString();
                                                }
                                                var RTBNhan = this.Controls.Find($"rtb_LINKBM_IG_{stt}", true).FirstOrDefault() as System.Windows.Forms.RichTextBox;
                                                if (RTBNhan != null)
                                                {

                                                    if (RTBNhan.InvokeRequired)
                                                    {
                                                        RTBNhan.Invoke(new Action(() =>
                                                        {
                                                            RTBNhan.Clear();
                                                        }));
                                                    }



                                                }

                                            }
                                      

                                        }
                                        LINK_DONE.Add(IDBM);
                                        chromedriver.Navigate().GoToUrl("https://business.facebook.com/");



                                    }
                                    else
                                    {
                                        row.Cells[8].Value = $"NHẬN LINK {link} FAIL! IDBM: {IDBM}";
                                        nhan_bm_ig_fail++;

                                        LINK_FAIL.Add(IDBM);
                                        // Kiểm tra nếu cStt có trong từ điển
                                        if (rtbLINKFAIL.ContainsKey(cStt))
                                        {
                                            RichTextBox selectedRtb1 = rtbLINKFAIL[cStt];

                                            if (selectedRtb1.InvokeRequired)
                                            {
                                                selectedRtb1.Invoke(new Action(() =>
                                                {
                                                    selectedRtb1.AppendText(IDBM + "|" + link + Environment.NewLine);
                                                }));
                                            }
                                        }

                                    }
                                }
                                else
                                {
                                    row.Cells[8].Value = $"NHẬN LINK {link} FAIL! IDBM: {IDBM}";
                                    nhan_bm_ig_fail++;
                                    LINK_FAIL.Add(IDBM);
                                    if (rtbLINKFAIL.ContainsKey(cStt))
                                    {
                                        RichTextBox selectedRtb1 = rtbLINKFAIL[cStt];

                                        if (selectedRtb1.InvokeRequired)
                                        {
                                            selectedRtb1.Invoke(new Action(() =>
                                            {
                                                selectedRtb1.AppendText(IDBM + "|" + link + Environment.NewLine);
                                            }));
                                        }
                                    }
                                }

                            }
                            catch { }

                        out4:
                            Thread.Sleep(100);
                        }

                    }
                    catch { }
                }
                if (nhan_link_bm_API_Auto == "Auto")
                {

                    try
                    {



                        var link = "";
                        // Tạo từ điển lưu các control rtbACCOUNT
                        Dictionary<int, RichTextBox> rtbControls = new Dictionary<int, RichTextBox>
                            {
                                { 1, rtb_LINKBM_IG_1 },
                                { 2, rtb_LINKBM_IG_2 },
                                { 3, rtb_LINKBM_IG_3 },
                                { 4, rtb_LINKBM_IG_4 },
                                { 5, rtb_LINKBM_IG_5 },
                                { 6, rtb_LINKBM_IG_6 },
                                { 7, rtb_LINKBM_IG_7 },
                                { 8, rtb_LINKBM_IG_8 },
                                { 9, rtb_LINKBM_IG_9},
                                { 10, rtb_LINKBM_IG_10},
                                { 11, rtb_LINKBM_IG_11},
                                { 12, rtb_LINKBM_IG_12},
                                { 13, rtb_LINKBM_IG_13 },
                                { 14, rtb_LINKBM_IG_14 },
                                { 15, rtb_LINKBM_IG_15 },
                                { 16, rtb_LINKBM_IG_16 },
                                { 17, rtb_LINKBM_IG_17 },
                                { 18, rtb_LINKBM_IG_18 },
                                { 19, rtb_LINKBM_IG_19 },
                                { 20, rtb_LINKBM_IG_20 },
                                { 21, rtb_LINKBM_IG_21},
                                { 22, rtb_LINKBM_IG_22},
                                { 23, rtb_LINKBM_IG_23},
                                { 24, rtb_LINKBM_IG_24 },
                                { 25, rtb_LINKBM_IG_25 },
                                { 26, rtb_LINKBM_IG_26 },
                                { 27, rtb_LINKBM_IG_27 },
                                { 28, rtb_LINKBM_IG_28 },
                                { 29, rtb_LINKBM_IG_29 },
                                { 30, rtb_LINKBM_IG_30 },
                                { 31, rtb_LINKBM_IG_31 },
                                { 32, rtb_LINKBM_IG_32},
                                { 33, rtb_LINKBM_IG_33},
                                { 34, rtb_LINKBM_IG_34 },
                                { 35, rtb_LINKBM_IG_35 },
                                { 36, rtb_LINKBM_IG_36 },
                                { 37, rtb_LINKBM_IG_37 },
                                { 38, rtb_LINKBM_IG_38 },
                                { 39, rtb_LINKBM_IG_39 },
                                { 40, rtb_LINKBM_IG_40 },

                            };

                        Dictionary<int, RichTextBox> rtbLINKFAIL = new Dictionary<int, RichTextBox>
                            {
                                { 1, rtb_LINKBMFAIL_IG_1 },
                                { 2, rtb_LINKBMFAIL_IG_2 },
                                { 3, rtb_LINKBMFAIL_IG_3 },
                                { 4, rtb_LINKBMFAIL_IG_4 },
                                { 5, rtb_LINKBMFAIL_IG_5 },
                                { 6, rtb_LINKBMFAIL_IG_6 },
                                { 7, rtb_LINKBMFAIL_IG_7 },
                                { 8, rtb_LINKBMFAIL_IG_8 },
                                { 9, rtb_LINKBMFAIL_IG_9},
                                { 10, rtb_LINKBMFAIL_IG_10},
                                { 11, rtb_LINKBMFAIL_IG_11},
                                { 12, rtb_LINKBMFAIL_IG_12},
                                { 13, rtb_LINKBMFAIL_IG_13 },
                                { 14, rtb_LINKBMFAIL_IG_14 },
                                { 15, rtb_LINKBMFAIL_IG_15 },
                                { 16, rtb_LINKBMFAIL_IG_16 },
                                { 17, rtb_LINKBMFAIL_IG_17 },
                                { 18, rtb_LINKBMFAIL_IG_18 },
                                { 19, rtb_LINKBMFAIL_IG_19 },
                                { 20, rtb_LINKBMFAIL_IG_20 },
                                { 21, rtb_LINKBMFAIL_IG_21},
                                { 22, rtb_LINKBMFAIL_IG_22},
                                { 23, rtb_LINKBMFAIL_IG_23},
                                { 24, rtb_LINKBMFAIL_IG_24 },
                                { 25, rtb_LINKBMFAIL_IG_25 },
                                { 26, rtb_LINKBMFAIL_IG_26 },
                                { 27, rtb_LINKBMFAIL_IG_27 },
                                { 28, rtb_LINKBMFAIL_IG_28 },
                                { 29, rtb_LINKBMFAIL_IG_29 },
                                { 30, rtb_LINKBMFAIL_IG_30 },
                                { 31, rtb_LINKBMFAIL_IG_31 },
                                { 32, rtb_LINKBMFAIL_IG_32},
                                { 33, rtb_LINKBMFAIL_IG_33},
                                { 34, rtb_LINKBMFAIL_IG_34 },
                                { 35, rtb_LINKBMFAIL_IG_35 },
                                { 36, rtb_LINKBMFAIL_IG_36 },
                                { 37, rtb_LINKBMFAIL_IG_37 },
                                { 38, rtb_LINKBMFAIL_IG_38 },
                                { 39, rtb_LINKBMFAIL_IG_39 },
                                { 40, rtb_LINKBMFAIL_IG_40 },

                            };
                        // Lấy giá trị cStt từ DataGridViewRow
                        int cStt = Convert.ToInt32(row.Cells["cStt"].Value);
                        // Kiểm tra nếu cStt có trong từ điển
                        if (rtbControls.ContainsKey(cStt))
                        {
                            RichTextBox selectedRtb = rtbControls[cStt];

                            if (selectedRtb.InvokeRequired)
                            {
                                selectedRtb.Invoke(new Action(() =>
                                {
                                    ID_link = selectedRtb.Lines.ToList();
                                }));
                            }
                        }
                        foreach (var id_link in ID_link)
                        {
                            var IDBM = id_link.Split('|')[0].ToString();
                            link = id_link.Split('|')[1].ToString();
                            chromedriver.Navigate().GoToUrl(link);
                            Thread.Sleep(2000);

                            try
                            {

                                try
                                {
                                    var LogininwitnhFb = chromedriver.FindElement(By.XPath("//span[text()='Log in with Facebook' or text()='Đăng nhập bằng Facebook']"));
                                    LogininwitnhFb.Click();
                                    Thread.Sleep(1000);

                                }
                                catch
                                {
                                    var LogininwitnhFb = chromedriver.FindElement(By.XPath("//span[text()='Iniciar sesión con Facebook']"));
                                    LogininwitnhFb.Click();
                                    Thread.Sleep(1000);

                                }
                                var HTMl = chromedriver.PageSource;
                                var businessID = Regex.Match(HTMl, "{\"businessID\":\"(.*?)\"").Groups[1].Value.ToString();

                                var businessName = Regex.Match(HTMl, "businessName\":\"(.*?)\"").Groups[1].Value.ToString();

                                if (IDBM != businessID)
                                {
                                    row.Cells["cStatus"].Value = $" Link BM {IDBM} Khác BM Đang Nhận: {businessID} Name: {businessName} FAIL!";
                                    LINK_FAIL.Add(IDBM);
                                    if (rtb_Link_FAIL.InvokeRequired)
                                    {
                                        rtb_Link_FAIL.Invoke(new Action(() =>
                                        {
                                            rtb_Link_FAIL.AppendText(IDBM + "|" + link + "| BM Khác" + Environment.NewLine);
                                        }));
                                    }
                                    goto out4;
                                }



                                string user = username + " " + username;
                                try
                                {
                                    var userName = chromedriver.FindElement(By.XPath("//input[@placeholder='First and last name' or @placeholder='Họ và tên']"));
                                    userName.SendKeys(user);
                                    Thread.Sleep(1000);
                                }
                                catch
                                {

                                    var userName = chromedriver.FindElement(By.XPath("//input[@placeholder='First name and surname' or @placeholder='Nombre y apellido']"));
                                    userName.SendKeys(user);
                                    Thread.Sleep(1000);

                                }

                                try
                                {
                                    var Continue = chromedriver.FindElement(By.XPath("//div[text()='Continue' or text()='Tiếp tục']"));
                                    Continue.Click();
                                    Thread.Sleep(1000);

                                }
                                catch
                                {
                                    var Continue = chromedriver.FindElement(By.XPath("//div[text()='Continuar']"));
                                    Continue.Click();
                                    Thread.Sleep(1000);


                                }
                                try
                                {
                                    var Continue1 = chromedriver.FindElement(By.XPath("//div[text()='Continue' or text()='Tiếp tục']"));
                                    Continue1.Click();
                                    Thread.Sleep(1000);
                                }
                                catch
                                {
                                    var Continue1 = chromedriver.FindElement(By.XPath("//div[text()='Continuar']"));
                                    Continue1.Click();
                                    Thread.Sleep(1000);
                                }

                                try
                                {
                                    var Acceptinvitation = chromedriver.FindElement(By.XPath("//div[text()='Accept invitation' or text()='Chấp nhận lời mời']"));
                                    Acceptinvitation.Click();
                                    Thread.Sleep(12000);
                                }
                                catch
                                {
                                    //Aceptar invitación

                                    var Acceptinvitation = chromedriver.FindElement(By.XPath("//div[text()='Accept Invitation' or text()='Aceptar invitación']"));
                                    Acceptinvitation.Click();
                                    Thread.Sleep(12000);

                                }


                                var url = chromedriver.Url;
                                if (url.Contains(IDBM))
                                {
                                    row.Cells[7].Value = $"Nhận Link {link} Thành Công IDBM: {IDBM}";
                                    LINK_DONE.Add(IDBM);
                                }
                                else
                                {
                                    row.Cells[8].Value = $"Nhận Link {link} Thất Bại! IDBM: {IDBM}";
                                    LINK_FAIL.Add(IDBM);
                                    // Kiểm tra nếu cStt có trong từ điển
                                    if (rtbLINKFAIL.ContainsKey(cStt))
                                    {
                                        RichTextBox selectedRtb1 = rtbLINKFAIL[cStt];

                                        if (selectedRtb1.InvokeRequired)
                                        {
                                            selectedRtb1.Invoke(new Action(() =>
                                            {
                                                selectedRtb1.AppendText(IDBM + "|" + link + Environment.NewLine);
                                            }));
                                        }
                                    }

                                }

                            }
                            catch { }

                            try
                            {

                                var Firstname = chromedriver.FindElement(By.XPath("/html/body/div[1]/div[1]/div/div/div/div/div[2]/div/div/div/div[1]/div[2]/div[2]/div/div[1]/div[1]/div/div[2]/div/div[1]/div/div[1]/div[2]/div[1]/div/input"));
                                Firstname.SendKeys(username);
                                Thread.Sleep(1000);

                                var Lastname = chromedriver.FindElement(By.XPath("/html/body/div[1]/div[1]/div/div/div/div/div[2]/div/div/div/div[1]/div[2]/div[2]/div/div[1]/div[2]/div/div[2]/div/div[1]/div/div[1]/div[2]/div[1]/div/input"));
                                Lastname.SendKeys(username);
                                Thread.Sleep(1000);


                                var Continue = chromedriver.FindElement(By.XPath("//div[text()='Continue' or text()='Tiếp']"));
                                Continue.Click();
                                Thread.Sleep(1000);

                                var Continue1 = chromedriver.FindElement(By.XPath("//div[text()='Continue' or text()='Tiếp']"));
                                Continue1.Click();
                                Thread.Sleep(1000);

                                try
                                {
                                    var Acceptinvitation = chromedriver.FindElement(By.XPath("//div[text()='Accept invitation' or text()='Chấp nhận lời mời']"));
                                    Acceptinvitation.Click();
                                    Thread.Sleep(12000);
                                }
                                catch
                                {
                                    var Acceptinvitation = chromedriver.FindElement(By.XPath("//div[text()='Accept Invitation']"));
                                    Acceptinvitation.Click();
                                    Thread.Sleep(12000);

                                }

                                var url = chromedriver.Url;
                                if (url.Contains(IDBM))
                                {
                                    row.Cells[7].Value = $"Nhận Link {link} Thành Công IDBM: {IDBM}";
                                    LINK_DONE.Add(IDBM);
                                }
                                else
                                {
                                    row.Cells[8].Value = $"Nhận Link {link} Thất Bại! IDBM: {IDBM}";
                                    LINK_FAIL.Add(IDBM);
                                    // Kiểm tra nếu cStt có trong từ điển
                                    if (rtbLINKFAIL.ContainsKey(cStt))
                                    {
                                        RichTextBox selectedRtb1 = rtbLINKFAIL[cStt];

                                        if (selectedRtb1.InvokeRequired)
                                        {
                                            selectedRtb1.Invoke(new Action(() =>
                                            {
                                                selectedRtb1.AppendText(IDBM + "|" + link + Environment.NewLine);
                                            }));
                                        }
                                    }

                                }


                            }
                            catch { }

                        out4:
                            Thread.Sleep(100);

                        }

                    }
                    catch { }
                }
                if(nhan_link_bm_API_Auto == "API_GET")
                {
                    try
                    {
                        row.Cells["cStatus"].Value = "NHẬN LINK .....";
                        var password = row.Cells["cPass"].Value.ToString();
                        var lastRowIndex = dgv1.Rows.Count - 1;
                        if (dgv1.AllowUserToAddRows) lastRowIndex--;

                        int sttCuoi = Convert.ToInt32(dgv1.Rows[lastRowIndex].Cells["cStt"].Value);


                        var link1 = "";
                        // Tạo từ điển lưu các control rtbACCOUNT
                        Dictionary<int, RichTextBox> rtbControls = new Dictionary<int, RichTextBox>
                            {
                                { 1, rtb_LINKBM_IG_1 },
                                { 2, rtb_LINKBM_IG_2 },
                                { 3, rtb_LINKBM_IG_3 },
                                { 4, rtb_LINKBM_IG_4 },
                                { 5, rtb_LINKBM_IG_5 },
                                { 6, rtb_LINKBM_IG_6 },
                                { 7, rtb_LINKBM_IG_7 },
                                { 8, rtb_LINKBM_IG_8 },
                                { 9, rtb_LINKBM_IG_9},
                                { 10, rtb_LINKBM_IG_10},
                                { 11, rtb_LINKBM_IG_11},
                                { 12, rtb_LINKBM_IG_12},
                                { 13, rtb_LINKBM_IG_13 },
                                { 14, rtb_LINKBM_IG_14 },
                                { 15, rtb_LINKBM_IG_15 },
                                { 16, rtb_LINKBM_IG_16 },
                                { 17, rtb_LINKBM_IG_17 },
                                { 18, rtb_LINKBM_IG_18 },
                                { 19, rtb_LINKBM_IG_19 },
                                { 20, rtb_LINKBM_IG_20 },
                                { 21, rtb_LINKBM_IG_21},
                                { 22, rtb_LINKBM_IG_22},
                                { 23, rtb_LINKBM_IG_23},
                                { 24, rtb_LINKBM_IG_24 },
                                { 25, rtb_LINKBM_IG_25 },
                                { 26, rtb_LINKBM_IG_26 },
                                { 27, rtb_LINKBM_IG_27 },
                                { 28, rtb_LINKBM_IG_28 },
                                { 29, rtb_LINKBM_IG_29 },
                                { 30, rtb_LINKBM_IG_30 },
                                { 31, rtb_LINKBM_IG_31 },
                                { 32, rtb_LINKBM_IG_32},
                                { 33, rtb_LINKBM_IG_33},
                                { 34, rtb_LINKBM_IG_34 },
                                { 35, rtb_LINKBM_IG_35 },
                                { 36, rtb_LINKBM_IG_36 },
                                { 37, rtb_LINKBM_IG_37 },
                                { 38, rtb_LINKBM_IG_38 },
                                { 39, rtb_LINKBM_IG_39 },
                                { 40, rtb_LINKBM_IG_40 },

                            };

                        Dictionary<int, RichTextBox> rtbLINKFAIL = new Dictionary<int, RichTextBox>
                            {
                                { 1, rtb_LINKBMFAIL_IG_1 },
                                { 2, rtb_LINKBMFAIL_IG_2 },
                                { 3, rtb_LINKBMFAIL_IG_3 },
                                { 4, rtb_LINKBMFAIL_IG_4 },
                                { 5, rtb_LINKBMFAIL_IG_5 },
                                { 6, rtb_LINKBMFAIL_IG_6 },
                                { 7, rtb_LINKBMFAIL_IG_7 },
                                { 8, rtb_LINKBMFAIL_IG_8 },
                                { 9, rtb_LINKBMFAIL_IG_9},
                                { 10, rtb_LINKBMFAIL_IG_10},
                                { 11, rtb_LINKBMFAIL_IG_11},
                                { 12, rtb_LINKBMFAIL_IG_12},
                                { 13, rtb_LINKBMFAIL_IG_13 },
                                { 14, rtb_LINKBMFAIL_IG_14 },
                                { 15, rtb_LINKBMFAIL_IG_15 },
                                { 16, rtb_LINKBMFAIL_IG_16 },
                                { 17, rtb_LINKBMFAIL_IG_17 },
                                { 18, rtb_LINKBMFAIL_IG_18 },
                                { 19, rtb_LINKBMFAIL_IG_19 },
                                { 20, rtb_LINKBMFAIL_IG_20 },
                                { 21, rtb_LINKBMFAIL_IG_21},
                                { 22, rtb_LINKBMFAIL_IG_22},
                                { 23, rtb_LINKBMFAIL_IG_23},
                                { 24, rtb_LINKBMFAIL_IG_24 },
                                { 25, rtb_LINKBMFAIL_IG_25 },
                                { 26, rtb_LINKBMFAIL_IG_26 },
                                { 27, rtb_LINKBMFAIL_IG_27 },
                                { 28, rtb_LINKBMFAIL_IG_28 },
                                { 29, rtb_LINKBMFAIL_IG_29 },
                                { 30, rtb_LINKBMFAIL_IG_30 },
                                { 31, rtb_LINKBMFAIL_IG_31 },
                                { 32, rtb_LINKBMFAIL_IG_32},
                                { 33, rtb_LINKBMFAIL_IG_33},
                                { 34, rtb_LINKBMFAIL_IG_34 },
                                { 35, rtb_LINKBMFAIL_IG_35 },
                                { 36, rtb_LINKBMFAIL_IG_36 },
                                { 37, rtb_LINKBMFAIL_IG_37 },
                                { 38, rtb_LINKBMFAIL_IG_38 },
                                { 39, rtb_LINKBMFAIL_IG_39 },
                                { 40, rtb_LINKBMFAIL_IG_40 },

                            };
                        int totalLink = LINKBM50.Count;     // = 51
                        int totalBox = sttCuoi;                  // 40 RichTextBox
                        int linksPerBox = 5;                // Mỗi box chứa 5 link

                        int currentIndex = 0;
                        List<string> DEMVIANHAN = new List<string>();
                        for (int c = 0; c < totalBox; c++)
                        {
                            // Lấy TextBox tb_i để kiểm tra trạng thái
                            var tb = this.Controls.Find($"tb_{c}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                            if (tb != null)
                            {
                                if (tb.Text == "0")
                                {
                                    DEMVIANHAN.Add(tb.Text);
                                }

                            }


                        }
                        if (stt1 == "1")
                        {
                            if ((totalLink / linksPerBox) >= DEMVIANHAN.Count)
                            {

                                for (int e = 1; e <= totalBox; e++)
                                {
                                    // Lấy TextBox tb_i để kiểm tra trạng thái
                                    var tb1 = this.Controls.Find($"tb_{e}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                                    if (tb1 != null)
                                    {
                                        if (tb1.InvokeRequired)
                                            tb1.Invoke(new Action(() => tb1.Text = "0"));
                                        else
                                            tb1.Text = "0";
                                    }
                                    //if(nhan_bm_ig_fail >= 5)
                                    //{

                                    //    if (tb1.InvokeRequired)
                                    //        tb1.Invoke(new Action(() => tb1.Text = "1"));
                                    //    else
                                    //        tb1.Text = "1";
                                    //    goto uot;
                                    //}
                                }


                            }
                        }
                        else
                        {
                            for (int e = 1; e <= totalBox; e++)
                            {
                                // Lấy TextBox tb_i để kiểm tra trạng thái
                                var tb1 = this.Controls.Find($"tb_{e}", true).FirstOrDefault() as System.Windows.Forms.TextBox;

                                if (nhan_bm_ig_fail >= 5)
                                {
                                    if (tb1 != null)
                                    {
                                        row.Cells["cStatus"].Value = "NHẬN FAIL => 5BM";
                                        if (tb1.InvokeRequired)
                                            tb1.Invoke(new Action(() => tb1.Text = "1"));
                                        else
                                            tb1.Text = "1";
                                        goto uot;
                                    }
                                }
                            }
                        }




                        for (int i = 1; i <= totalBox; i++)
                        {

                            // Lấy TextBox tb_i để kiểm tra trạng thái
                            var tb = this.Controls.Find($"tb_{i}", true).FirstOrDefault() as System.Windows.Forms.TextBox;

                            bool isUsed = false;

                            if (tb != null)
                            {
                                // Nếu TextBox có giá trị "1" thì RichTextBox đã dùng, bỏ qua
                                if (tb.InvokeRequired)
                                {
                                    tb.Invoke(new Action(() =>
                                    {
                                        isUsed = tb.Text.Trim() == "1";
                                    }));
                                }
                                else
                                {
                                    isUsed = tb.Text.Trim() == "1";
                                }
                            }
                            if (isUsed) continue; // ❌ Đã dùng, bỏ qua vòng lặp này

                            // Nếu chưa được sử dụng, tiếp tục chia link
                            if (!rtbControls.ContainsKey(i)) continue;

                            var rtb = rtbControls[i];

                            List<string> linksForBox = new List<string>();

                            for (int j = 0; j < linksPerBox && currentIndex < totalLink; j++)
                            {
                                var linkbm = LINKBM50[currentIndex]?.Trim();
                                if (!string.IsNullOrEmpty(linkbm))
                                {
                                    linksForBox.Add(linkbm);
                                }
                                currentIndex++;
                            }

                            if (linksForBox.Count > 0)
                            {

                                string content = string.Join(Environment.NewLine, linksForBox);

                                if (rtb.InvokeRequired)
                                {


                                    rtb.Invoke(new Action(() =>
                                    {
                                        rtb.Clear();
                                        rtb.AppendText(content + Environment.NewLine);
                                    }));
                                }
                                else
                                {
                                    rtb.Clear();
                                    rtb.AppendText(content + Environment.NewLine);
                                }
                                // Đánh dấu TextBox = "1" (chỉ nếu tồn tại)
                                if (tb != null)
                                {
                                    if (tb.InvokeRequired)
                                    {
                                        tb.Invoke(new Action(() =>
                                        {
                                            tb.Text = "1";
                                        }));
                                    }
                                    else
                                    {
                                        tb.Text = "1";
                                    }
                                }




                            }


                        }

                        // Lấy giá trị cStt từ DataGridViewRow
                        int cStt = Convert.ToInt32(row.Cells["cStt"].Value);
                        // Kiểm tra nếu cStt có trong từ điển
                        if (rtbControls.ContainsKey(cStt))
                        {
                            RichTextBox selectedRtb = rtbControls[cStt];

                            if (selectedRtb.InvokeRequired)
                            {
                                selectedRtb.Invoke(new Action(() =>
                                {
                                    ID_link = selectedRtb.Lines.ToList();
                                }));
                            }
                        }
                        if (ID_link.Count == 0)
                        {
                            goto check;
                        }
                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                        var cookiestring = "";
                        foreach (var cookie in cookiess)
                        {
                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                        }
                        cookiestring = cookiestring.Trim(';');

                        HttpRequest httpRequest = new HttpRequest();
                        httpRequest.AllowAutoRedirect = true;
                        httpRequest.Cookies = new CookieDictionary();
                        httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                        EnsurePostWWWLoginHDFull(httpRequest);
                        httpRequest.KeepAlive = true;
                        var cookieRaws = cookiestring.Split(';');
                        foreach (var cookieraw in cookieRaws)
                        {
                            var cookieJAr = cookieraw.Split('=');
                            try
                            {
                                httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                            }
                            catch { }
                        }

                        httpRequest["authority"] = "www.facebook.com";
                        httpRequest["accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                        httpRequest["sec-fetch-dest"] = "document";
                        httpRequest["sec-fetch-mode"] = "navigate";
                        httpRequest["sec-fetch-site"] = "same-origin";
                        httpRequest["sec-fetch-user"] = "?1";
                        httpRequest["priority"] = "u=0, i";
                        httpRequest["sec-ch-ua"] = "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"";
                        httpRequest["sec-fetch-site"] = "none";
                        httpRequest["sec-ch-ua-mobile"] = "?0";
                        httpRequest["sec-ch-ua-platform"] = "1";
                        httpRequest["upgrade-insecure-requests"] = "\"Windows\"";
                        httpRequest["cache-control"] = "max-age=0";
                        httpRequest["upgrade-insecure-requests"] = "1";
                        httpRequest["Accept-Language"] = "en-US,en;q=0.9";

                        var response = httpRequest.Get("https://www.facebook.com/");
                        if (response.IsOK)
                        {

                            var responseStr = response.ToString();

                            foreach (var id_link in ID_link)
                            {
                                if (string.IsNullOrEmpty(id_link))
                                {
                                    goto out4;

                                }
                                var IDBM1 = "";
                                try
                                {
                                    IDBM1 = id_link.Split('|')[0].ToString();
                                    link1 = id_link.Split('|')[1].ToString();
                                }
                                catch { }


                                if (string.IsNullOrEmpty(link1))
                                {
                                    link1 = id_link;
                                }


                                httpRequest.AddHeader("authority", "m.facebook.com");
                                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("origin", "https://www.facebook.com");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("sec-ch-ua", "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "none");
                                var fb_dtsg1 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                var jazoest1 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                var lsd1 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                var url_enterpass = "https://m.facebook.com/password/reauth/?next=https://mbasic.facebook.com/security/2fac/settings/?paipv=0&eav=AfZfmwJnXhbeLP6m-giW1oCoZD0faAw6x_1LxHqf1nvS-tew9Vl6iEkBMuwwPNYH7Zw&paipv=0&eav=AfbC-ToI9zgklrUncTH4S-pXjfy5d5SPf9ZLf_iWIHepbPFg8mMnmmsnW0Or3AkCflI";
                                var data = $"fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&encpass=#PWD_BROWSER:0:1111:{password}";
                                response = httpRequest.Post(url_enterpass, data, "application/x-www-form-urlencoded");
                                var responseStr_bs = response.ToString();
                                var url = httpRequest.Address.ToString();
                                var cookie1 = httpRequest.Cookies.ToString();

                                httpRequest.AddHeader("authority", "fb.me");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "none");
                                response = httpRequest.Get(link1);
                                var responseStr_6 = response.ToString();
                                var businessName = Regex.Match(responseStr_6, "inviteBusinessName\":\"(.*?)\",").Groups[1].Value.ToString().Replace("\\","");
                                var businessID = businessName.Split('/')[1];



                                if (string.IsNullOrEmpty(IDBM1))
                                {
                                    IDBM1 = businessID;
                                }
                                else
                                {
                                    if (IDBM1 != businessID)
                                    {
                                        row.Cells["cStatus"].Value = $" Link BM {IDBM1} Khác BM Đang Nhận: {businessID} Name: {businessName} FAIL!";
                                        LINK_FAIL.Add(IDBM1);
                                        if (rtb_Link_FAIL.InvokeRequired)
                                        {
                                            rtb_Link_FAIL.Invoke(new Action(() =>
                                            {
                                                rtb_Link_FAIL.AppendText(IDBM1 + "|" + link1 + "| BM Khác" + Environment.NewLine);
                                            }));
                                        }
                                        goto out4;
                                    }
                                }
                                url = httpRequest.Address.ToString();
                                var invitation_token = Regex.Match(responseStr_6, "invitation\\\\\\/\\?token=(.*?)&").Groups[1].Value.ToString();
                                var cookieRaw = cookie1.Split(';');
                                foreach (var cookie in cookieRaw)
                                {
                                    try
                                    {
                                        var key = cookie.Split('=')[0].ToString().Trim();
                                        var value = cookie.Split('=')[1].ToString().Trim();
                                        httpRequest.Cookies.Add(key, value);

                                    }
                                    catch { }
                                }

                                httpRequest.AddHeader("authority", "business.facebook.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "none");
                                fb_dtsg1 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                jazoest1 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                lsd1 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();

                                var payload = $"first_name={username}&last_name={username}&invitation_token={invitation_token}&receive_marketing_messages=false&user_preferred_business_email&__user={username}&__a=1&__req=2&__hs=19664.BP:DEFAULT.2.0..0.0&dpr=1&__ccg=GOOD&__rev=1009675755&__s=voml6w:orwnqa:3cyaaa&__hsi=7297248857485608221&__dyn=7xeUmwkHgydwn8K2WnFwn84a2i5U4e1Fx-ewSwMxW0DUS2S0lW4o3Bw5VCwjE3awbG78b87C1xwEwlU-0nS4o5-1uwbe2l0Fwwwi85W0_Ugw9KfwbK0RE5a1qwqU8E5W0HUvw5rwSxy0gq0Lo6-1FwbO0NE1rE&__csr=&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1009675755&__spin_b=trunk&__spin_t=1699023148&__jssesw=1";
                                response = httpRequest.Post("https://business.facebook.com/business/invitation/login/", payload, "application/x-www-form-urlencoded");
                                if (response.IsOK)
                                {
                                    var responseStr_9 = response.ToString();

                                    if (responseStr_9.Contains("for (;;);{\"__ar\":1,\"payload\":null,\"lid\":\"")|| responseStr_9.Contains("for (;;);{\"__ar\":1,\"rid\":\""))
                                    {
                                        row.Cells[7].Value = $"NHẬN LINK {link1} DONE IDBM: {IDBM1}";
                                        var sttStr = row.Cells["cStt"].Value?.ToString();
                                        if (int.TryParse(sttStr, out int stt))
                                        {
                                            var tbNhan = this.Controls.Find($"tb_nhan{stt}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                                            if (tbNhan != null)
                                            {
                                                if (tbNhan.InvokeRequired)
                                                {
                                                    tbNhan.Invoke(new Action(() =>
                                                    {
                                                        // Tăng số đếm lên 1
                                                        int current = 0;
                                                        int.TryParse(tbNhan.Text, out current);
                                                        tbNhan.Text = (current + 1).ToString();
                                                    }));
                                                }
                                                else
                                                {
                                                    int current = 0;
                                                    int.TryParse(tbNhan.Text, out current);
                                                    tbNhan.Text = (current + 1).ToString();
                                                }
                                                var RTBNhan = this.Controls.Find($"rtb_LINKBM_IG_{stt}", true).FirstOrDefault() as System.Windows.Forms.RichTextBox;
                                                if (RTBNhan != null)
                                                {

                                                    if (RTBNhan.InvokeRequired)
                                                    {
                                                        RTBNhan.Invoke(new Action(() =>
                                                        {
                                                            RTBNhan.Clear();
                                                        }));
                                                    }



                                                }

                                            }


                                        }
                                        LINK_DONE.Add(IDBM1);

                                        goto next;
                                    }
                                    else
                                    {
                                        row.Cells[8].Value = $"NHẬN LINK {link1} FAIL! IDBM: {IDBM1}";
                                        nhan_bm_ig_fail++;

                                        LINK_FAIL.Add(IDBM1);
                                        // Kiểm tra nếu cStt có trong từ điển
                                        if (rtbLINKFAIL.ContainsKey(cStt))
                                        {
                                            RichTextBox selectedRtb1 = rtbLINKFAIL[cStt];

                                            if (selectedRtb1.InvokeRequired)
                                            {
                                                selectedRtb1.Invoke(new Action(() =>
                                                {
                                                    selectedRtb1.AppendText(IDBM1 + "|" + link1 + Environment.NewLine);
                                                }));
                                            }
                                        }


                                        goto next;
                                    }

                                }
                                else
                                {
                                    row.Cells[8].Value = $"NHẬN LINK {link1} FAIL! IDBM: {IDBM1}";
                                    nhan_bm_ig_fail++;
                                    LINK_FAIL.Add(IDBM1);
                                    if (rtbLINKFAIL.ContainsKey(cStt))
                                    {
                                        RichTextBox selectedRtb1 = rtbLINKFAIL[cStt];

                                        if (selectedRtb1.InvokeRequired)
                                        {
                                            selectedRtb1.Invoke(new Action(() =>
                                            {
                                                selectedRtb1.AppendText(IDBM1 + "|" + link1 + Environment.NewLine);
                                            }));
                                        }
                                    }
                                }
                            next:
                                Thread.Sleep(1);

                            }

                        out4:
                            Thread.Sleep(100);
                        }



                    }
                    catch { }
                }    

                row.Cells[7].Value = $"NHẬN DONE: {LINK_DONE.Count} / {ID_link.Count}  NHẬN FAIL: {LINK_FAIL.Count} / {ID_link.Count}";



            

                goto nhanbm;

            uot:
                Thread.Sleep(1);
            }
            catch { }

        }


        private async Task NHAN_LINK_BM_IG_AUTO_API(HttpRequest httpRequest, DataGridViewRow row, string username)

        {
            try
            {
                var mail_nhan = "";
                if (cmb_loai_mail_nhan_bm_ig.InvokeRequired)
                {
                    cmb_loai_mail_nhan_bm_ig.Invoke(new Action(() =>
                    {
                        mail_nhan = cmb_loai_mail_nhan_bm_ig.Text;
                    }));
                }
                List<(HttpRequest Request, string Mail)> httprequest_Mail_MOAKT_BM50_BM350 = new List<(HttpRequest, string)>();
                var stt1 = row.Cells["cStt"].Value.ToString();
                if (mail_nhan == "Moakt")
                {

                    if (stt1 == "1")
                    {
                        List<string> Link = new List<string>();
                        List<string> Mail = new List<string>();
                        List<string> Mail_350 = new List<string>();
                        List<string> Link1 = new List<string>();

                        var lOAI_BM_NHAN = "";
                        if (CMB_LOAI_BM_NHAN.InvokeRequired)
                        {
                            CMB_LOAI_BM_NHAN.Invoke(new Action(() =>
                            {
                                lOAI_BM_NHAN = CMB_LOAI_BM_NHAN.Text;
                            }));


                        }
                        else
                        {
                            lOAI_BM_NHAN = CMB_LOAI_BM_NHAN.Text;
                        }
                        if (lOAI_BM_NHAN == "BM50")
                        {
                            // Lấy dữ liệu từ rich_MAIL_DOC_LINK
                            if (rtb_mail_bm50_auto.InvokeRequired)
                            {
                                rtb_mail_bm50_auto.Invoke(new Action(() =>
                                {
                                    Mail = rtb_mail_bm50_auto.Lines.ToList();
                                }));
                            }
                            else
                            {
                                Mail = rtb_mail_bm50_auto.Lines.ToList();
                            }

                            // Khởi tạo danh sách các Task để xử lý bất đồng bộ
                            List<Task> tasks = new List<Task>();

                            foreach (var mail_n in Mail)
                            {

                                // Tạo task xử lý cho mỗi email
                                var task = new Task(() =>
                                {
                                    try
                                    {
                                        HttpRequest httprequest_Mail_MOAKT = new HttpRequest();
                                        httprequest_Mail_MOAKT.Cookies = new CookieDictionary();
                                        httprequest_Mail_MOAKT.KeepAlive = true;
                                        httprequest_Mail_MOAKT.AllowAutoRedirect = true;
                                        httprequest_Mail_MOAKT.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                                        var mail_share = mailmoakt_com_BM_IG(httprequest_Mail_MOAKT, mail_n, row);
                                        httprequest_Mail_MOAKT_BM50_BM350.Add((httprequest_Mail_MOAKT, mail_share));

                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                });

                                tasks.Add(task);
                                task.Start();
                            }

                            // Đợi tất cả các Task hoàn thành
                            Task.WhenAll(tasks).Wait();
                        }
                        else
                        {

                            if (rtb_mail_bm350_auto.InvokeRequired)
                            {
                                rtb_mail_bm350_auto.Invoke(new Action(() =>
                                {
                                    Mail_350 = rtb_mail_bm350_auto.Lines.ToList();
                                }));
                            }
                            else
                            {
                                Mail_350 = rtb_mail_bm50_auto.Lines.ToList();
                            }

                            // Khởi tạo danh sách các Task để xử lý bất đồng bộ
                            List<Task> tasks = new List<Task>();

                            foreach (var mail_n in Mail_350)
                            {


                                // Tạo task xử lý cho mỗi email
                                var task = new Task(() =>
                                {
                                    try
                                    {
                                        HttpRequest httprequest_Mail_MOAKT = new HttpRequest();
                                        httprequest_Mail_MOAKT.Cookies = new CookieDictionary();
                                        httprequest_Mail_MOAKT.KeepAlive = true;
                                        httprequest_Mail_MOAKT.AllowAutoRedirect = true;
                                        httprequest_Mail_MOAKT.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                                        var mail_share = mailmoakt_com_BM_IG(httprequest_Mail_MOAKT, mail_n, row);
                                        httprequest_Mail_MOAKT_BM50_BM350.Add((httprequest_Mail_MOAKT, mail_share));
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                });

                                tasks.Add(task);
                                task.Start();
                            }

                            // Đợi tất cả các Task hoàn thành
                            Task.WhenAll(tasks).Wait();
                        }


                    }
                }





                int nhan_bm_ig_fail = 0;
            check:
            nhanbm:

                try
                {
                    var STOP = "";
                    if (cmb_STOP.InvokeRequired)
                    {
                        cmb_STOP.Invoke(new Action(() =>
                        {
                            STOP = cmb_STOP.Text;
                        }));

                    }
                    if (STOP == "OFF")
                    {
                        row.Cells["cStatus"].Value = "NHẬN LINK OFF";
                        goto uot;
                    }


                }
                catch { }


                List<string> LINKBM50 = new List<string>();

              

                if (stt1 == "1")
                {
                    if (mail_nhan == "Moakt")
                    {

                        await Task.Run(() =>
                        {
                            DOC_LINK_DA_LUONG_BMIG_MAIL_MOAKT(httprequest_Mail_MOAKT_BM50_BM350, row);
                        });
                    }
                    else
                    {
                        await Task.Run(() =>
                        {
                            DOC_LINK_DA_LUONG_BMIG();
                        });

                    }



                    var LOAI_BM_NHAN = "";
                    if (CMB_LOAI_BM_NHAN.InvokeRequired)
                    {
                        CMB_LOAI_BM_NHAN.Invoke(new Action(() =>
                        {
                            LOAI_BM_NHAN = CMB_LOAI_BM_NHAN.Text;

                        }));
                    }
                    if (LOAI_BM_NHAN == "BM50")
                    {
                        if (rtb_Link_BM50_IG_auto.InvokeRequired)
                        {
                            rtb_Link_BM50_IG_auto.Invoke(new Action(() =>
                            {
                                LINKBM50 = rtb_Link_BM50_IG_auto.Lines.ToList();
                                rtb_Link_BM50_IG_auto.Clear();
                            }));

                        }
                    }
                    else
                    {
                        if (rtb_Link_BM350_IG_auto.InvokeRequired)
                        {
                            rtb_Link_BM350_IG_auto.Invoke(new Action(() =>
                            {
                                LINKBM50 = rtb_Link_BM350_IG_auto.Lines.ToList();
                                rtb_Link_BM350_IG_auto.Clear();
                            }));

                        }
                    }




                    if (LINKBM50.Count == 0)
                    {
                        int delay = (int)DELAY_DOC_MAIL.Value;
                        Thread.Sleep(TimeSpan.FromSeconds(delay));
                        goto check;
                    }
                }
                else
                {

                    Thread.Sleep(TimeSpan.FromSeconds(90));
                }



                List<string> LINK_DONE = new List<string>();
                List<string> LINK_FAIL = new List<string>();
                string nhan_link_bm_API_Auto = "";
                if (cmbAPI_Auto_selenium_NhanBM_IG.InvokeRequired)
                {
                    cmbAPI_Auto_selenium_NhanBM_IG.Invoke(new Action(() =>
                    {
                        nhan_link_bm_API_Auto = cmbAPI_Auto_selenium_NhanBM_IG.Text;

                    }));
                }
                List<string> ID_link = new List<string>();

                if (nhan_link_bm_API_Auto == "API_GET")
                {
                    try
                    {
                        row.Cells["cStatus"].Value = "NHẬN LINK .....";
                        var password = row.Cells["cPass"].Value.ToString();
                        var lastRowIndex = dgv1.Rows.Count - 1;
                        if (dgv1.AllowUserToAddRows) lastRowIndex--;

                        int sttCuoi = Convert.ToInt32(dgv1.Rows[lastRowIndex].Cells["cStt"].Value);


                        var link = "";
                        // Tạo từ điển lưu các control rtbACCOUNT
                        Dictionary<int, RichTextBox> rtbControls = new Dictionary<int, RichTextBox>
                            {
                                { 1, rtb_LINKBM_IG_1 },
                                { 2, rtb_LINKBM_IG_2 },
                                { 3, rtb_LINKBM_IG_3 },
                                { 4, rtb_LINKBM_IG_4 },
                                { 5, rtb_LINKBM_IG_5 },
                                { 6, rtb_LINKBM_IG_6 },
                                { 7, rtb_LINKBM_IG_7 },
                                { 8, rtb_LINKBM_IG_8 },
                                { 9, rtb_LINKBM_IG_9},
                                { 10, rtb_LINKBM_IG_10},
                                { 11, rtb_LINKBM_IG_11},
                                { 12, rtb_LINKBM_IG_12},
                                { 13, rtb_LINKBM_IG_13 },
                                { 14, rtb_LINKBM_IG_14 },
                                { 15, rtb_LINKBM_IG_15 },
                                { 16, rtb_LINKBM_IG_16 },
                                { 17, rtb_LINKBM_IG_17 },
                                { 18, rtb_LINKBM_IG_18 },
                                { 19, rtb_LINKBM_IG_19 },
                                { 20, rtb_LINKBM_IG_20 },
                                { 21, rtb_LINKBM_IG_21},
                                { 22, rtb_LINKBM_IG_22},
                                { 23, rtb_LINKBM_IG_23},
                                { 24, rtb_LINKBM_IG_24 },
                                { 25, rtb_LINKBM_IG_25 },
                                { 26, rtb_LINKBM_IG_26 },
                                { 27, rtb_LINKBM_IG_27 },
                                { 28, rtb_LINKBM_IG_28 },
                                { 29, rtb_LINKBM_IG_29 },
                                { 30, rtb_LINKBM_IG_30 },
                                { 31, rtb_LINKBM_IG_31 },
                                { 32, rtb_LINKBM_IG_32},
                                { 33, rtb_LINKBM_IG_33},
                                { 34, rtb_LINKBM_IG_34 },
                                { 35, rtb_LINKBM_IG_35 },
                                { 36, rtb_LINKBM_IG_36 },
                                { 37, rtb_LINKBM_IG_37 },
                                { 38, rtb_LINKBM_IG_38 },
                                { 39, rtb_LINKBM_IG_39 },
                                { 40, rtb_LINKBM_IG_40 },

                            };

                        Dictionary<int, RichTextBox> rtbLINKFAIL = new Dictionary<int, RichTextBox>
                            {
                                { 1, rtb_LINKBMFAIL_IG_1 },
                                { 2, rtb_LINKBMFAIL_IG_2 },
                                { 3, rtb_LINKBMFAIL_IG_3 },
                                { 4, rtb_LINKBMFAIL_IG_4 },
                                { 5, rtb_LINKBMFAIL_IG_5 },
                                { 6, rtb_LINKBMFAIL_IG_6 },
                                { 7, rtb_LINKBMFAIL_IG_7 },
                                { 8, rtb_LINKBMFAIL_IG_8 },
                                { 9, rtb_LINKBMFAIL_IG_9},
                                { 10, rtb_LINKBMFAIL_IG_10},
                                { 11, rtb_LINKBMFAIL_IG_11},
                                { 12, rtb_LINKBMFAIL_IG_12},
                                { 13, rtb_LINKBMFAIL_IG_13 },
                                { 14, rtb_LINKBMFAIL_IG_14 },
                                { 15, rtb_LINKBMFAIL_IG_15 },
                                { 16, rtb_LINKBMFAIL_IG_16 },
                                { 17, rtb_LINKBMFAIL_IG_17 },
                                { 18, rtb_LINKBMFAIL_IG_18 },
                                { 19, rtb_LINKBMFAIL_IG_19 },
                                { 20, rtb_LINKBMFAIL_IG_20 },
                                { 21, rtb_LINKBMFAIL_IG_21},
                                { 22, rtb_LINKBMFAIL_IG_22},
                                { 23, rtb_LINKBMFAIL_IG_23},
                                { 24, rtb_LINKBMFAIL_IG_24 },
                                { 25, rtb_LINKBMFAIL_IG_25 },
                                { 26, rtb_LINKBMFAIL_IG_26 },
                                { 27, rtb_LINKBMFAIL_IG_27 },
                                { 28, rtb_LINKBMFAIL_IG_28 },
                                { 29, rtb_LINKBMFAIL_IG_29 },
                                { 30, rtb_LINKBMFAIL_IG_30 },
                                { 31, rtb_LINKBMFAIL_IG_31 },
                                { 32, rtb_LINKBMFAIL_IG_32},
                                { 33, rtb_LINKBMFAIL_IG_33},
                                { 34, rtb_LINKBMFAIL_IG_34 },
                                { 35, rtb_LINKBMFAIL_IG_35 },
                                { 36, rtb_LINKBMFAIL_IG_36 },
                                { 37, rtb_LINKBMFAIL_IG_37 },
                                { 38, rtb_LINKBMFAIL_IG_38 },
                                { 39, rtb_LINKBMFAIL_IG_39 },
                                { 40, rtb_LINKBMFAIL_IG_40 },

                            };
                        int totalLink = LINKBM50.Count;     // = 51
                        int totalBox = sttCuoi;                  // 40 RichTextBox
                        int linksPerBox = 5;                // Mỗi box chứa 5 link

                        int currentIndex = 0;
                        List<string> DEMVIANHAN = new List<string>();
                        for (int c = 0; c < totalBox; c++)
                        {
                            // Lấy TextBox tb_i để kiểm tra trạng thái
                            var tb = this.Controls.Find($"tb_{c}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                            if (tb != null)
                            {
                                if (tb.Text == "0")
                                {
                                    DEMVIANHAN.Add(tb.Text);
                                }

                            }


                        }
                        if (stt1 == "1")
                        {
                            if ((totalLink / linksPerBox) >= DEMVIANHAN.Count)
                            {

                                for (int e = 1; e <= totalBox; e++)
                                {
                                    // Lấy TextBox tb_i để kiểm tra trạng thái
                                    var tb1 = this.Controls.Find($"tb_{e}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                                    if (tb1 != null)
                                    {
                                        if (tb1.InvokeRequired)
                                            tb1.Invoke(new Action(() => tb1.Text = "0"));
                                        else
                                            tb1.Text = "0";
                                    }
                                 
                                }


                            }
                        }

                        for (int e = 1; e <= totalBox; e++)
                        {
                            // Lấy TextBox tb_i để kiểm tra trạng thái
                            var tb1 = this.Controls.Find($"tb_{e}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                            int gioi_han = (int)number_nhan_fail.Value;

                            if (nhan_bm_ig_fail >= gioi_han)
                            {
                                row.Cells["cStatus"].Value = $"{gioi_han}BM FAIL! => Out Login";
                                if (tb1.InvokeRequired)
                                    tb1.Invoke(new Action(() => tb1.Text = "1"));
                                else
                                    tb1.Text = "";
                                goto uot;
                            }
                        }



                        for (int i = 1; i <= totalBox; i++)
                        {

                            // Lấy TextBox tb_i để kiểm tra trạng thái
                            var tb = this.Controls.Find($"tb_{i}", true).FirstOrDefault() as System.Windows.Forms.TextBox;

                            bool isUsed = false;

                            if (tb != null)
                            {
                                // Nếu TextBox có giá trị "1" thì RichTextBox đã dùng, bỏ qua
                                if (tb.InvokeRequired)
                                {
                                    tb.Invoke(new Action(() =>
                                    {
                                        isUsed = tb.Text.Trim() == "1";
                                    }));
                                }
                                else
                                {
                                    isUsed = tb.Text.Trim() == "1";
                                }
                            }
                            if (isUsed) continue; // ❌ Đã dùng, bỏ qua vòng lặp này

                            // Nếu chưa được sử dụng, tiếp tục chia link
                            if (!rtbControls.ContainsKey(i)) continue;

                            var rtb = rtbControls[i];

                            List<string> linksForBox = new List<string>();

                            for (int j = 0; j < linksPerBox && currentIndex < totalLink; j++)
                            {
                                var linkbm = LINKBM50[currentIndex]?.Trim();
                                if (!string.IsNullOrEmpty(linkbm))
                                {
                                    linksForBox.Add(linkbm);
                                }
                                currentIndex++;
                            }

                            if (linksForBox.Count > 0)
                            {

                                string content = string.Join(Environment.NewLine, linksForBox);

                                if (rtb.InvokeRequired)
                                {


                                    rtb.Invoke(new Action(() =>
                                    {
                                        rtb.Clear();
                                        rtb.AppendText(content + Environment.NewLine);
                                    }));
                                }
                                else
                                {
                                    rtb.Clear();
                                    rtb.AppendText(content + Environment.NewLine);
                                }
                                // Đánh dấu TextBox = "1" (chỉ nếu tồn tại)
                                if (tb != null)
                                {
                                    if (tb.InvokeRequired)
                                    {
                                        tb.Invoke(new Action(() =>
                                        {
                                            tb.Text = "1";
                                        }));
                                    }
                                    else
                                    {
                                        tb.Text = "1";
                                    }
                                }




                            }


                        }

                        // Lấy giá trị cStt từ DataGridViewRow
                        int cStt = Convert.ToInt32(row.Cells["cStt"].Value);
                        // Kiểm tra nếu cStt có trong từ điển
                        if (rtbControls.ContainsKey(cStt))
                        {
                            RichTextBox selectedRtb = rtbControls[cStt];

                            if (selectedRtb.InvokeRequired)
                            {
                                selectedRtb.Invoke(new Action(() =>
                                {
                                    ID_link = selectedRtb.Lines.ToList();
                                }));
                            }
                        }
                        if (ID_link.Count == 0)
                        {
                            goto check;
                        }

                        httpRequest["authority"] = "www.facebook.com";
                        httpRequest["accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
                        httpRequest["sec-fetch-dest"] = "document";
                        httpRequest["sec-fetch-mode"] = "navigate";
                        httpRequest["sec-fetch-site"] = "same-origin";
                        httpRequest["sec-fetch-user"] = "?1";
                        httpRequest["priority"] = "u=0, i";
                        httpRequest["sec-ch-ua"] = "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"";
                        httpRequest["sec-fetch-site"] = "none";
                        httpRequest["sec-ch-ua-mobile"] = "?0";
                        httpRequest["sec-ch-ua-platform"] = "1";
                        httpRequest["upgrade-insecure-requests"] = "\"Windows\"";
                        httpRequest["cache-control"] = "max-age=0";
                        httpRequest["upgrade-insecure-requests"] = "1";
                        httpRequest["Accept-Language"] = "en-US,en;q=0.9";

                        var response = httpRequest.Get("https://www.facebook.com/");
                        if (response.IsOK)
                        {

                            var responseStr = response.ToString();
                            var ACCOUNT_ID = Regex.Match(responseStr, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                            var url1 = httpRequest.Address.ToString();
                            if (url1.Contains("https://www.facebook.com/checkpoint/601051028565049/"))
                            {
                                try
                                {
                                    row.Cells["cStatus"].Value = "DISS MISS";

                                    httpRequest.AddHeader("authority", "www.facebook.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("origin", "https://www.facebook.com");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("referer", "https://www.facebook.com/checkpoint/601051028565049/?next=https%3A%2F%2Fwww.facebook.com%2F%3Flsrc%3Dlb");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("x-asbd-id", "129477");
                                    httpRequest.AddHeader("x-fb-friendly-name", "FBScrapingWarningMutation");
                                    var fb_dtsg2 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                    var jazoest2 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                    var lsd2 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                    var payload_d = $"av={username}&__user={username}&__a=1&__req=8&__hs=20095.HYP:comet_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019175737&__s=dqxj5a:senuu9:e67otl&__hsi=7457002493664995955&__dyn=7xeUmwlEnwn8K2Wmh0no6u5U4e0yoW3q32360CEbo19oe8hw2nVE4W099w8G1Dz81s8hwnU2lwv89k2C1Fwc60D8vwRwlE-U2zxe2GewbS361qw8Xwn82Lw5XwSyES1Mw9m0Lo6-1Fw4mwr86C0No7S3m1TwLwHwGwbu&__csr=gxiS_GQqVqDzFAfGUzz9aByJAF12iK6Ey4Xh4maxqbwAwMwBwJwJwTxm5E1jo1cEmwee1Bxe0wU2MwPw20E3wwb60O87G0agw06abw2x802kUw&__comet_req=15&fb_dtsg={fb_dtsg2}&jazoest={jazoest2}&lsd={lsd2}&__spin_r=1019175737&__spin_b=trunk&__spin_t=1736218690&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=FBScrapingWarningMutation&variables={{}}&server_timestamps=true&doc_id=6339492849481770";
                                    response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_d, "application/x-www-form-urlencoded");
                                    var responseStr_d = response.ToString();
                                    url1 = httpRequest.Address.ToString();
                                    response = httpRequest.Get("https://www.facebook.com/?lsrc=lb");
                                    var responseStr_F = response.ToString();
                                 
                                    var ACCOUNT_ID1 = Regex.Match(responseStr_F, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                                    if(ACCOUNT_ID1 == username)
                                    {
                                        row.Cells["cStatus"].Value = $"GỠ DISS MISS DONE";
                                        goto next_nhan;
                                    }
                                    else
                                    {
                                        row.Cells["cStatus"].Value = $"ACCOUNT_ID DM null Login Fail";
                                        goto uot;
                                    }
                                  
                                }
                                catch { }

                            }
                            if(string.IsNullOrEmpty(ACCOUNT_ID))
                            {
                                row.Cells["cStatus"].Value = $"ACCOUNT_ID null Login Fail";
                                goto uot;

                            }
                        next_nhan:
                            int nhap_pass = 1;
                            var cookie1 = "";
                            var fb_dtsg1 = "";
                            var jazoest1 = "";
                            var lsd1 = "";
                            var url = "";
                            foreach (var id_link in ID_link)
                            {
                                try
                                {
                                nextlink:
                                    int o = (int)numericUpDown6.Value;
                                    Thread.Sleep(TimeSpan.FromSeconds(o));

                                    if (string.IsNullOrEmpty(id_link))
                                    {
                                        goto out4;

                                    }
                                    var IDBM = "";
                                    try
                                    {
                                        IDBM = id_link.Split('|')[0].ToString();
                                        link = id_link.Split('|')[1].ToString();
                                    }
                                    catch { }
                                    if (string.IsNullOrEmpty(link))
                                    {
                                        link = id_link;
                                    }
                             

                                    if (nhap_pass == 1)
                                    {
                                        try
                                        {
                                            httpRequest.AddHeader("authority", "m.facebook.com");
                                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("origin", "https://www.facebook.com");
                                            httpRequest.AddHeader("priority", "u=1, i");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                                            httpRequest.AddHeader("sec-fetch-site", "none");
                                            fb_dtsg1 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                            jazoest1 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                            lsd1 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                            var url_enterpass = "https://m.facebook.com/password/reauth/?next=https://mbasic.facebook.com/security/2fac/settings/?paipv=0&eav=AfZfmwJnXhbeLP6m-giW1oCoZD0faAw6x_1LxHqf1nvS-tew9Vl6iEkBMuwwPNYH7Zw&paipv=0&eav=AfbC-ToI9zgklrUncTH4S-pXjfy5d5SPf9ZLf_iWIHepbPFg8mMnmmsnW0Or3AkCflI";
                                            var data = $"fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&encpass=#PWD_BROWSER:0:1111:{password}";
                                            response = httpRequest.Post(url_enterpass, data, "application/x-www-form-urlencoded");
                                            var responseStr_bs = response.ToString();
                                            url = httpRequest.Address.ToString();
                                            cookie1 = httpRequest.Cookies.ToString();
                                        }
                                        catch 
                                        {
                                            row.Cells["cStatus"].Value = $"NHẬP PASS FAIL!";
                                            goto uot;

                                        }
                                
                                    }
                             

                   

                                    if (url.Contains("https://www.facebook.com/checkpoint/601051028565049/"))
                                    {
                                        try
                                        {
                                            row.Cells["cStatus"].Value = "DISS MISS";

                                            httpRequest.AddHeader("authority", "www.facebook.com");
                                            httpRequest.AddHeader("accept", "*/*");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("origin", "https://www.facebook.com");
                                            httpRequest.AddHeader("priority", "u=1, i");
                                            httpRequest.AddHeader("referer", "https://www.facebook.com/checkpoint/601051028565049/?next=https%3A%2F%2Fwww.facebook.com%2F%3Flsrc%3Dlb");
                                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                            httpRequest.AddHeader("x-asbd-id", "129477");
                                            httpRequest.AddHeader("x-fb-friendly-name", "FBScrapingWarningMutation");

                                            var payload_d = $"av={username}&__user={username}&__a=1&__req=8&__hs=20095.HYP:comet_pkg.2.1.0.2.1&dpr=1&__ccg=GOOD&__rev=1019175737&__s=dqxj5a:senuu9:e67otl&__hsi=7457002493664995955&__dyn=7xeUmwlEnwn8K2Wmh0no6u5U4e0yoW3q32360CEbo19oe8hw2nVE4W099w8G1Dz81s8hwnU2lwv89k2C1Fwc60D8vwRwlE-U2zxe2GewbS361qw8Xwn82Lw5XwSyES1Mw9m0Lo6-1Fw4mwr86C0No7S3m1TwLwHwGwbu&__csr=gxiS_GQqVqDzFAfGUzz9aByJAF12iK6Ey4Xh4maxqbwAwMwBwJwJwTxm5E1jo1cEmwee1Bxe0wU2MwPw20E3wwb60O87G0agw06abw2x802kUw&__comet_req=15&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1019175737&__spin_b=trunk&__spin_t=1736218690&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=FBScrapingWarningMutation&variables={{}}&server_timestamps=true&doc_id=6339492849481770";
                                            response = httpRequest.Post("https://www.facebook.com/api/graphql/", payload_d, "application/x-www-form-urlencoded");
                                            var responseStr_d = response.ToString();
                                            url = httpRequest.Address.ToString();

                                            response = httpRequest.Get("https://www.facebook.com/?lsrc=lb");
                                            var responseStr_F = response.ToString();
                                          
                                            var ACCOUNT_ID1 = Regex.Match(responseStr_F, "ACCOUNT_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                                        
                                            if (ACCOUNT_ID1 == username)
                                            {
                                                row.Cells["cStatus"].Value = $"GỠ DISS MISS DONE";
                                                goto nextlink;
                                            }
                                            else
                                            {
                                                row.Cells["cStatus"].Value = $"ACCOUNT_ID DM null Login Fail";
                                                goto uot;
                                            }

                                          
                                        }
                                        catch { }
                                    

                                    }


                                    httpRequest.AddHeader("authority", "fb.me");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    response = httpRequest.Get(link);
                                    var responseStr_6 = response.ToString();

                                    var businessName = Regex.Match(responseStr_6, "inviteBusinessName\":\"(.*?)\",").Groups[1].Value.ToString().Replace("\\", "");
                                    var businessID = businessName.Split('/')[1];
                                    if (string.IsNullOrEmpty(IDBM))
                                    {
                                        IDBM = businessID;
                                    }
                                    else
                                    {
                                        if (IDBM != businessID)
                                        {
                                            row.Cells["cStatus"].Value = $" Link BM {IDBM} Khác BM Đang Nhận: {businessID} Name: {businessName} FAIL!";
                                            LINK_FAIL.Add(IDBM);
                                            if (rtb_Link_FAIL.InvokeRequired)
                                            {
                                                rtb_Link_FAIL.Invoke(new Action(() =>
                                                {
                                                    rtb_Link_FAIL.AppendText(IDBM + "|" + link + "| BM Khác" + Environment.NewLine);
                                                }));
                                            }
                                            goto out4;
                                        }
                                    }
                                    url = httpRequest.Address.ToString();
                                    var invitation_token = Regex.Match(responseStr_6, "invitation\\\\\\/\\?token=(.*?)&").Groups[1].Value.ToString();
                                    var cookieRaw = cookie1.Split(';');
                                    foreach (var cookie in cookieRaw)
                                    {
                                        try
                                        {
                                            var key = cookie.Split('=')[0].ToString().Trim();
                                            var value = cookie.Split('=')[1].ToString().Trim();
                                            httpRequest.Cookies.Add(key, value);

                                        }
                                        catch { }
                                    }

                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    fb_dtsg1 = Regex.Match(responseStr, "DTSGInitData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                    jazoest1 = Regex.Match(responseStr, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                    lsd1 = Regex.Match(responseStr, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();

                                    var payload = $"first_name={username}&last_name={username}&invitation_token={invitation_token}&receive_marketing_messages=false&user_preferred_business_email&__user={username}&__a=1&__req=2&__hs=19664.BP:DEFAULT.2.0..0.0&dpr=1&__ccg=GOOD&__rev=1009675755&__s=voml6w:orwnqa:3cyaaa&__hsi=7297248857485608221&__dyn=7xeUmwkHgydwn8K2WnFwn84a2i5U4e1Fx-ewSwMxW0DUS2S0lW4o3Bw5VCwjE3awbG78b87C1xwEwlU-0nS4o5-1uwbe2l0Fwwwi85W0_Ugw9KfwbK0RE5a1qwqU8E5W0HUvw5rwSxy0gq0Lo6-1FwbO0NE1rE&__csr=&fb_dtsg={fb_dtsg1}&jazoest={jazoest1}&lsd={lsd1}&__spin_r=1009675755&__spin_b=trunk&__spin_t=1699023148&__jssesw=1";
                                    response = httpRequest.Post("https://business.facebook.com/business/invitation/login/", payload, "application/x-www-form-urlencoded");
                                    if (response.IsOK)
                                    {
                                        var responseStr_9 = response.ToString();

                                        if (responseStr_9.Contains("for (;;);{\"__ar\":1,\"payload\":null,\"lid\":\"")
                                            || responseStr_9.Contains("for (;;);{\"__ar\":1,\"rid\":\""))
                                        {
                                            row.Cells[7].Value = $"NHẬN LINK {link} DONE IDBM: {IDBM}";
                                            var sttStr = row.Cells["cStt"].Value?.ToString();
                                            if (int.TryParse(sttStr, out int stt))
                                            {
                                                var tbNhan = this.Controls.Find($"tb_nhan{stt}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                                                if (tbNhan != null)
                                                {
                                                    if (tbNhan.InvokeRequired)
                                                    {
                                                        tbNhan.Invoke(new Action(() =>
                                                        {
                                                            // Tăng số đếm lên 1
                                                            int current = 0;
                                                            int.TryParse(tbNhan.Text, out current);
                                                            tbNhan.Text = (current + 1).ToString();
                                                        }));
                                                    }
                                                    else
                                                    {
                                                        int current = 0;
                                                        int.TryParse(tbNhan.Text, out current);
                                                        tbNhan.Text = (current + 1).ToString();
                                                    }
                                                    var RTBNhan = this.Controls.Find($"rtb_LINKBM_IG_{stt}", true).FirstOrDefault() as System.Windows.Forms.RichTextBox;
                                                    if (RTBNhan != null)
                                                    {

                                                        if (RTBNhan.InvokeRequired)
                                                        {
                                                            RTBNhan.Invoke(new Action(() =>
                                                            {
                                                                RTBNhan.Clear();
                                                            }));
                                                        }



                                                    }

                                                }


                                            }
                                            LINK_DONE.Add(IDBM);

                                            goto next;
                                        }
                                        else
                                        {
                                            row.Cells[8].Value = $"NHẬN LINK {link} FAIL! IDBM: {IDBM}";
                                            nhan_bm_ig_fail++;

                                            LINK_FAIL.Add(IDBM);
                                            // Kiểm tra nếu cStt có trong từ điển
                                            if (rtbLINKFAIL.ContainsKey(cStt))
                                            {
                                                RichTextBox selectedRtb1 = rtbLINKFAIL[cStt];

                                                if (selectedRtb1.InvokeRequired)
                                                {
                                                    selectedRtb1.Invoke(new Action(() =>
                                                    {
                                                        selectedRtb1.AppendText(IDBM + "|" + link + Environment.NewLine);
                                                    }));
                                                }
                                            }

                                            var CLEAR_LINK = "";
                                            if (cmb_DIE_BM_CLEAR.InvokeRequired)
                                            {
                                                cmb_DIE_BM_CLEAR.Invoke(new Action(() =>
                                                {
                                                    CLEAR_LINK = cmb_DIE_BM_CLEAR.Text;

                                                }));

                                            }
                                            if (CLEAR_LINK == "ON")
                                            {

                                                var sttStr = row.Cells["cStt"].Value?.ToString();
                                                if (int.TryParse(sttStr, out int stt))
                                                {
                                                    var tbNhan = this.Controls.Find($"tb_nhan{stt}", true).FirstOrDefault() as System.Windows.Forms.TextBox;
                                                    if (tbNhan != null)
                                                    {
                                                        var RTBNhan = this.Controls.Find($"rtb_LINKBM_IG_{stt}", true).FirstOrDefault() as System.Windows.Forms.RichTextBox;
                                                        if (RTBNhan != null)
                                                        {

                                                            if (RTBNhan.InvokeRequired)
                                                            {
                                                                RTBNhan.Invoke(new Action(() =>
                                                                {
                                                                    RTBNhan.Clear();
                                                                }));
                                                            }

                                                        }

                                                    }


                                                }

                                            }
                     

                                            goto next;
                                        }

                                    }
                                    else
                                    {
                                        row.Cells[8].Value = $"NHẬN LINK {link} FAIL! IDBM: {IDBM}";
                                        nhan_bm_ig_fail++;
                                        LINK_FAIL.Add(IDBM);
                                        if (rtbLINKFAIL.ContainsKey(cStt))
                                        {
                                            RichTextBox selectedRtb1 = rtbLINKFAIL[cStt];

                                            if (selectedRtb1.InvokeRequired)
                                            {
                                                selectedRtb1.Invoke(new Action(() =>
                                                {
                                                    selectedRtb1.AppendText(IDBM + "|" + link + Environment.NewLine);
                                                }));
                                            }
                                        }
                                    }
                                next:
                                    Thread.Sleep(1);
                                }
                                catch { }

                                nhap_pass++;
                            }
                         
                        out4:
                            Thread.Sleep(100);
                        }

                    }
                    catch { }
                }
     
                row.Cells[7].Value = $"NHẬN DONE: {LINK_DONE.Count} / {ID_link.Count}  NHẬN FAIL: {LINK_FAIL.Count} / {ID_link.Count}";





                goto nhanbm;

            uot:
                Thread.Sleep(1);
            }
            catch { }

        }
        private List<string> link_moakt_BM_IG1(HttpRequest httprequest)
        {
            List<string> links = new List<string>();

            try
            {
                // 1. Lấy danh sách email trong inbox
                httprequest.AddHeader("authority", "moakt.com");
                httprequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httprequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httprequest.AddHeader("referer", "https://moakt.com/vi/inbox");
                httprequest.AddHeader("priority", "u=0, i");
                var inboxResponse = httprequest.Get("https://moakt.com/vi/inbox").ToString();

                // 2. Lấy tất cả token email
                var emailTokens = Regex.Matches(inboxResponse, "\\/vi\\/email\\/(.*?)\"")
                                       .Cast<Match>()
                                       .Select(m => m.Groups[1].Value)
                                       .Distinct()
                                       .ToList();

                foreach (var token in emailTokens)
                {
                    try
                    {
                        // 3. Lấy nội dung email
                        var emailContent = httprequest.Get($"https://moakt.com/vi/email/{token}/content/").ToString();

                        // 4. Tìm tất cả link Facebook trong email
                        var matches = Regex.Matches(emailContent, @"https:\/\/(fb\.me\/[^\\""]+|www\.facebook\.com\/[^\\""]+|business\.facebook\.com\/[^\\""]+)");
                        foreach (Match match in matches)
                        {
                            string link = match.Value.Replace("amp;", "");
                            if (!string.IsNullOrEmpty(link) && !links.Contains(link))
                            {
                                links.Add(link);
                            }
                        }

                        // 5. Xóa email sau khi xử lý
                        httprequest.Get($"https://moakt.com/email/{token}/delete"); // Nếu Moakt hỗ trợ DELETE
                                                                                       // Nếu không có DELETE, dùng GET đến endpoint xóa hoặc bỏ qua
                    }
                    catch
                    {
                        // Bỏ qua lỗi email riêng lẻ
                    }
                }
            }
            catch
            {
                // Bỏ qua lỗi tổng thể
            }

            return links;
        }
        private List<string> link_moakt_BM_IG(HttpRequest httprequest, DataGridViewRow row)
        {
            List<string> Link = new List<string>();
            try
            {
                row.Cells["cStatus"].Value = "ĐỌC LINK ......";
                //httprequest.AddHeader("authority", "moakt.com");
                //httprequest.AddHeader("accept", "application/json, text/javascript, */*; q=0.01");
                //httprequest.AddHeader("accept-language", "en-US,en;q=0.9");
                //httprequest.AddHeader("priority", "u=1, i");
                //httprequest.AddHeader("referer", "https://moakt.com/en/inbox");
                //httprequest.AddHeader("sec-ch-ua", "\"Chromium\";v=\"140\", \"Not=A?Brand\";v=\"24\", \"Google Chrome\";v=\"140\"");
                //httprequest.AddHeader("sec-ch-ua-mobile", "?0");
                //httprequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                //httprequest.AddHeader("sec-fetch-dest", "empty");
                //httprequest.AddHeader("sec-fetch-mode", "cors");
                //httprequest.AddHeader("sec-fetch-site", "same-origin");
                //httprequest.AddHeader("x-requested-with", "XMLHttpRequest");

                //var response = httprequest.Get("https://moakt.com/vi/inbox");
                httprequest.AddHeader("authority", "moakt.com");
                httprequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httprequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httprequest.AddHeader("referer", "https://moakt.com/vi/inbox");
                httprequest.AddHeader("priority", "u=0, i");
                httprequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httprequest.AddHeader("sec-ch-ua-mobile", "?0");
                httprequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httprequest.AddHeader("sec-fetch-dest", "document");
                httprequest.AddHeader("sec-fetch-mode", "navigate");
                httprequest.AddHeader("sec-fetch-site", "same-origin");
                httprequest.AddHeader("sec-fetch-user", "?1");
                httprequest.AddHeader("upgrade-insecure-requests", "1");
                var response = httprequest.Get("https://moakt.com/vi/inbox");
                if (response.IsOK)
                {
                    var responseStr_1 = response.ToString();

                    var secondsLeftStr = Regex.Match(responseStr_1, "var time_left = (.*?);").Groups[1].Value.ToString();

                    int secondsLeft = int.Parse(secondsLeftStr);



                    if (secondsLeft < 1800)
                    {
                        row.Cells["cStatus"].Value = "THÊM 3600S ......";
                        httprequest.AddHeader("authority", "moakt.com");
                        httprequest.AddHeader("accept", "application/json, text/javascript, */*; q=0.01");
                        httprequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httprequest.AddHeader("priority", "u=1, i");
                        httprequest.AddHeader("referer", "https://moakt.com/en/inbox");
                        httprequest.AddHeader("sec-ch-ua", "\"Chromium\";v=\"140\", \"Not=A?Brand\";v=\"24\", \"Google Chrome\";v=\"140\"");
                        httprequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httprequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httprequest.AddHeader("sec-fetch-dest", "empty");
                        httprequest.AddHeader("sec-fetch-mode", "cors");
                        httprequest.AddHeader("sec-fetch-site", "same-origin");
                        httprequest.AddHeader("x-requested-with", "XMLHttpRequest");
                        var pay_load1 = "getJson=true";
                        response = httprequest.Post("https://moakt.com/en/inbox/extend", pay_load1, "application/x-www-form-urlencoded");

                        Thread.Sleep(1000);
                        if (response.IsOK)
                        {
                            var responseStr_2 = response.ToString();
                            if (responseStr_2.Contains("\"seconds_left\": 3600") || responseStr_2.Contains("\"seconds_left\": 3599") || responseStr_2.Contains("\"seconds_left\": 3598"))
                            {
                                row.Cells["cStatus"].Value = "THÊM 3600S DONE";
                            }

                        }
                    }

                    List<string> tokens = new List<string>();
            
                  
                    var matches = Regex.Matches(responseStr_1, "\\/vi\\/email\\/(.*?)\"");

                    foreach (Match match in matches)
                    {
                        try
                        {
                            if (match.Groups.Count > 1)
                            {
                                tokens.Add(match.Groups[1].Value);
                            }
                        }
                        catch
                        { }

                    }




                    foreach (var token in tokens)
                    {
                        try
                        {
                            if (token.Contains("delete"))
                            {
                                goto next_doc;
                            }
                            httprequest.AddHeader("authority", "moakt.com");
                            httprequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                            httprequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httprequest.AddHeader("priority", "u=0, i");
                            httprequest.AddHeader("referer", "https://moakt.com/vi/inbox");
                            httprequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                            httprequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httprequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httprequest.AddHeader("sec-fetch-dest", "document");
                            httprequest.AddHeader("sec-fetch-mode", "navigate");
                            httprequest.AddHeader("sec-fetch-site", "same-origin");
                            httprequest.AddHeader("sec-fetch-user", "?1");
                            httprequest.AddHeader("upgrade-insecure-requests", "1");
                            response = httprequest.Get($"https://moakt.com/vi/email/{token}");
                            var responseStr3 = response.ToString();
                            var document = new HtmlDocument();
                            document.LoadHtml(responseStr3);

                            var titleNode = document.DocumentNode.SelectSingleNode("//li[@class='title']");
                            var IDBM = "";
                            var LOAIBM = "";
                            if (titleNode != null)
                            {
                                var titleText = titleNode.InnerText.Trim().Replace("&#34;", "");

                                IDBM = titleText.Split('/')[1];
                                LOAIBM = titleText.Split('/')[2].Trim();
                            }
                       

                            httprequest.AddHeader("authority", "moakt.com");
                            httprequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                            httprequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httprequest.AddHeader("priority", "u=0, i");
                            httprequest.AddHeader("referer", $"https://moakt.com/vi/email/{token}");
                            httprequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                            httprequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httprequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httprequest.AddHeader("sec-fetch-dest", "iframe");
                            httprequest.AddHeader("sec-fetch-mode", "navigate");
                            httprequest.AddHeader("sec-fetch-site", "same-origin");
                            httprequest.AddHeader("upgrade-insecure-requests", "1");

                            response = httprequest.Get($"https://moakt.com/vi/email/{token}/content/");
                            var responseStr4 = response.ToString();
                            var linkBM = "";


                            var token2 = Regex.Match(responseStr4, "https:\\/\\/fb\\.me\\/(.*?)\"").Groups[1].Value.ToString();
                            if (!string.IsNullOrEmpty(token2))
                            {
                                linkBM = $"https://fb.me/{token2}";
                            }
                            var token3 = Regex.Match(responseStr4, "https:\\/\\/www\\.facebook\\.com\\/aymt\\/offsite\\/\\?(.*?)\"").Groups[1].Value.Replace("amp;", "").ToString();
                            if (!string.IsNullOrEmpty(token3))
                            {
                                linkBM = $"https://www.facebook.com/aymt/offsite/?{token3}";
                            }
                            var token4 = Regex.Match(responseStr4, "https:\\/\\/business\\.facebook\\.com\\/invitation\\/\\?token=(.*?)\"").Groups[1].Value.ToString();
                            if (!string.IsNullOrEmpty(token4))
                            {
                                linkBM = $"https://business.facebook.com/invitation/?token={token4}";
                            }

                            Link.Add($"{IDBM}|{linkBM}|{LOAIBM}");
                            // 5. Xóa email sau khi xử lý
                            httprequest.Get($"https://moakt.com/email/{token}/delete");

                            //var pay_load = "getJson=true";

                            //response = httprequest.Post("https://moakt.com/en/inbox/extend", pay_load, "application/x-www-form-urlencoded");
                            //Thread.Sleep(1000);
                            //if (response.IsOK)
                            //{
                            //    var responseStr_1 = response.ToString();
                            //    if (responseStr_1.Contains("time_left = 3600")|| responseStr_1.Contains("time_left = 3599")|| responseStr_1.Contains("time_left = 3598"))
                            //    {

                            //    }

                            //}
                        }
                        catch
                        {

                        }

                    next_doc:
                        Thread.Sleep(1);


                    }
                }

       



            }
            catch { }

            return Link;


        }
        private string mailmoakt_com_BM_IG(HttpRequest httprequest,string mail, DataGridViewRow row)
        {
            try
            {
                row.Cells["cStatus"].Value = $"ĐĂNG KÝ MAIL {mail}";
                httprequest.AddHeader("authority", "moakt.com");
                httprequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httprequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httprequest.AddHeader("cache-control", "max-age=0");
                httprequest.AddHeader("priority", "u=0, i");
                httprequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httprequest.AddHeader("sec-ch-ua-mobile", "?0");
                httprequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httprequest.AddHeader("sec-fetch-dest", "document");
                httprequest.AddHeader("sec-fetch-mode", "navigate");
                httprequest.AddHeader("sec-fetch-site", "none");
                httprequest.AddHeader("sec-fetch-user", "?1");
                httprequest.AddHeader("upgrade-insecure-requests", "1");

                var response = httprequest.Get("https://moakt.com/");
                var responseStr = response.ToString();
                var cookie = httprequest.Cookies.ToString();

                List<string> domain = new List<string>()
                {
                   "teml.net",
                    "tmpeml.com",
                    "tmpbox.net",
                    "moakt.cc",
                    "disbox.net",
                    "tmpmail.org",
                    "tmpmail.net",
                    "tmails.net",
                    "disbox.org",
                    "moakt.co",
                    "moakt.ws",
                    "tmail.ws",
                    "bareed.ws"

                };
                httprequest.AddHeader("authority", "moakt.com");
                httprequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httprequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httprequest.AddHeader("cache-control", "max-age=0");
                httprequest.AddHeader("priority", "u=0, i");
                httprequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httprequest.AddHeader("sec-ch-ua-mobile", "?0");
                httprequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httprequest.AddHeader("sec-fetch-dest", "document");
                httprequest.AddHeader("sec-fetch-mode", "navigate");
                httprequest.AddHeader("sec-fetch-site", "none");
                httprequest.AddHeader("sec-fetch-user", "?1");
                httprequest.AddHeader("upgrade-insecure-requests", "1");
                var domain_moakt = mail.Split('@')[1].ToString();

                var name = mail.Split('@')[0].ToString();
                var mail_moakt = name + "@" + domain_moakt;
                var payload = $"domain={domain_moakt}&username={name}&setemail=Tạo+mới&preferred_domain=teml.net";
                response = httprequest.Post("https://moakt.com/vi/inbox", payload, "application/x-www-form-urlencoded");
                //var payload = $"domain={domain_moakt}&username={name}&setemail=Create&preferred_domain=";
                //response = httprequest.Post("https://moakt.com/en/inbox", payload, "application/x-www-form-urlencoded");
                var responseStr1 = response.ToString();
       
                if (responseStr1.Contains(name))
                {
                    row.Cells["cStatus"].Value = $"ĐĂNG KÝ MAIL {mail} DONE";
                   
                    if (rtb_mail_moakt_done.InvokeRequired)
                    {
                        rtb_mail_moakt_done.Invoke(new Action(() =>
                        {
                            rtb_mail_moakt_done.AppendText(mail_moakt + Environment.NewLine);
                        }));
                    }
                    else
                    {
                        rtb_mail_moakt_done.AppendText(mail_moakt + Environment.NewLine);
                    }
                    return mail_moakt;

                
                }
                else
                {
                    row.Cells["cStatus"].Value = $"ĐĂNG KÝ MAIL {mail} FAIL!";
                    if (rtb_mail_moakt_fail.InvokeRequired)
                    {
                        rtb_mail_moakt_fail.Invoke(new Action(() =>
                        {
                            rtb_mail_moakt_fail.AppendText(mail_moakt + Environment.NewLine);
                        }));
                    }
                    else
                    {
                        rtb_mail_moakt_fail.AppendText(mail_moakt + Environment.NewLine);
                    }
                    return "";
                }
            }
            catch { }

            return "";

        }


        // TEST WA
        private async void tESTWABMToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                CreateWhatsApp(chromeDriver, accountData.Row, accountData.User);



                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);

            }
            catch { }
        }



        private void CreateWhatsApp(ChromeDriver chromedriver, DataGridViewRow row, string username)
        {
            //try
            //{

            //    string actorId = "100065197640000";
            //    string businessId = "";
            //    string accessToken = "";
            //    var payload = new
            //    {
            //        input = new
            //        {
            //            client_mutation_id = "3",
            //            actor_id = actorId,
            //            app_id = "765958025778070",
            //            log_session_id = "WBxP--1149220992-1213723823",
            //            business_id = businessId,
            //            api_account_type = "SELF",
            //            creation_source = "BUSINESS_MANAGER",
            //            friendly_name = "F&F Cred - 300tk",
            //            timezone_id = 132,
            //            primary_funding_source = (string)null,
            //            on_behalf_of_business_id = (string)null,
            //            partner_business_id = businessId,
            //            page_id = (string)null,
            //            product = "SELF",
            //            disable_automatic_sharing = (string)null,
            //            obo_onboarding_info_input = (string)null
            //        }
            //    };

            //    string variables = HttpUtility.UrlEncode(JsonConvert.SerializeObject(payload));
            //    string url = $"https://graph.facebook.com/graphql?method=post&locale=en_US&pretty=false&format=json&fb_api_req_friendly_name=useCreateWhatsAppBusinessAPIAccountMutation_CreateWhatsAppBusinessAPIAccountMutation&doc_id=29701466519469036&fb_api_caller_class=RelayModern&server_timestamps=true&variables={variables}&access_token={accessToken}";



            //}
            //catch { }
         
        }



        // Nhận BM 
        private async void nHẬNBMToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            try
            {
                var KIEU_NHAN = "";
                if (cmb_CACH_NHAN_LINK.InvokeRequired)
                {
                    cmb_CACH_NHAN_LINK.Invoke(new Action(() =>
                    {
                        KIEU_NHAN = cmb_CACH_NHAN_LINK.Text;

                    }));
                }
                else
                {
                    KIEU_NHAN = cmb_CACH_NHAN_LINK.Text;
                }

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                if (KIEU_NHAN == "1_1")
                                {
                                    NHANLINKBM(chromeDriver, accountData.Row, accountData.User);
                                }
                                if (KIEU_NHAN == "NHAN_NHIEU")
                                {
                                    NHAN_LINK_BM_1VIA_NHIEU_LINK(chromeDriver, accountData.Row, accountData.User);
                                }


                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);

            }
            catch { }
        }

        private string NHANLINKBM(ChromeDriver chromedriver, DataGridViewRow row, string username)
        {
            try
            {
                string nhan_link_bm_API_Auto = "";
                if (cmbAPI_Auto_selenium_NhanBM.InvokeRequired)
                {
                    cmbAPI_Auto_selenium_NhanBM.Invoke(new Action(() =>
                    {
                        nhan_link_bm_API_Auto = cmbAPI_Auto_selenium_NhanBM.Text;

                    }));
                }

                if (nhan_link_bm_API_Auto == "API")
                {
                    try
                    {
                        row.Cells["cStatus"].Value = "NHẬN LINK .....";
                        var password = row.Cells["cPass"].Value.ToString();

                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                        var cookiestring = "";
                        foreach (var cookie in cookiess)
                        {
                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                        }
                        cookiestring = cookiestring.Trim(';');

                        HttpRequest httpRequest = new HttpRequest();
                        httpRequest.AllowAutoRedirect = true;
                        httpRequest.Cookies = new CookieDictionary();
                        httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                        //httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36 Edg/94.0.992.50";
                        EnsurePostWWWLoginHDFull(httpRequest);
                        httpRequest.KeepAlive = true;
                        var cookieRaws = cookiestring.Split(';');
                        foreach (var cookieraw in cookieRaws)
                        {
                            var cookieJAr = cookieraw.Split('=');
                            try
                            {
                                httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                            }
                            catch { }
                        }

                        var stt = row.Cells["cStt"].Value.ToString();

                        int t = int.Parse(stt);
                        int number_link = t - 1;
                        var ID_link = new List<string>();
                        var link = "";
                        // Giả sử bạn có một RichTextBox tên là rtbLINK và một luồng nền
                        if (rtbLINK.InvokeRequired)
                        {
                            // Nếu đang ở ngoài luồng chính, sử dụng Invoke để chạy mã trên luồng chính
                            rtbLINK.Invoke(new Action(() =>
                            {
                                ID_link = rtbLINK.Lines.ToList();  // Thao tác trên RichTextBox trong luồng chính
                                                                   // Tiếp tục xử lý với biến 'link'
                            }));
                        }
                        link = ID_link[number_link].Split('|')[1];
                        chromedriver.Navigate().GoToUrl(link);
                        Thread.Sleep(3000);
                        try
                        {
                            var LOGINFACEBOOK = chromedriver.FindElements(By.XPath("//div//div[@role='button']"));
                            if (LOGINFACEBOOK.Count > 0)
                            {
                                LOGINFACEBOOK[0].Click();
                                Thread.Sleep(3000);
                            }
                            var manguon = chromedriver.PageSource;
                            var userid = Regex.Match(manguon, "USER_ID\":\"(.*?)\"").Groups[1].Value;
                            var token = Regex.Match(manguon, "URL=\\/invitation\\/\\?token=(.*?);").Groups[1].Value;
                            var join_id = Regex.Match(manguon, "&amp;join_id=(.*?)&").Groups[1].Value;
                            var fb_dtsg = Regex.Match(manguon, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                            var lsd = Regex.Match(manguon, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                            var datapass = $"first_name={userid}&last_name={userid}&invitation_token={token}&receive_marketing_messages=false&user_preferred_business_email&join_id={join_id}&mma_qpl_join_id&__aaid=0&__user={userid}&__a=1&__req=2&__hs=19967.BP:DEFAULT.2.0..0.0&dpr=1&__ccg=EXCELLENT&__rev=1016140233&__s=eq4kgy:g2a9c6:2ln3ia&__hsi=7409593093397164476&__dyn=7xeUmwkHgydwn8K2Wmh0no6u5U4e1Fx-ewSwMxW0DUS2S0lW4o3Bw5VCwjE3awbG78b87C1xwEwpU1vohwnU5W0IU9k2C1FwnE3_x20CU-0KU3mwkE5G1HwywnE2Lx-0lK3qazo11E2ZwrU6C0oe0ue1TwmU&__csr=&fb_dtsg={fb_dtsg}&jazoest=25507&lsd={lsd}&__spin_r=1016140233&__spin_b=trunk&__spin_t=1725180329&__jssesw=1&qpl_active_flow_ids=433725819,692797008&ajax_password={password}";
                            var postnhanlinkbm2 = httpRequest.Post("https://business.facebook.com/business/invitation/login/", datapass, "application/x-www-form-urlencoded");
                            if (postnhanlinkbm2.IsOK)
                            {
                                var responseStr = postnhanlinkbm2.ToString();
                                if (responseStr.Contains("for (;;);{\"__ar\":1,\"rid\":\""))
                                {
                                    row.Cells[7].Value = $"NHẬN LINK {link} DONE";
                                    chromedriver.Navigate().GoToUrl("https://business.facebook.com/");
                                    return "DONE";
                                }
                                else
                                {
                                    row.Cells[7].Value = $"NHẬN LINK {link} FAIL!";
                                    if (rtb_Link_FAIL.InvokeRequired)
                                    {
                                        rtb_Link_FAIL.Invoke(new Action(() =>
                                        {
                                            rtb_Link_FAIL.AppendText(link + Environment.NewLine);
                                        }));
                                    }
                                    return "FAIL";
                                }
                            }


                        }
                        catch { }
                    }
                    catch { }
                }
                if (nhan_link_bm_API_Auto == "Auto")
                {

                    try
                    {
                        var stt = row.Cells["cStt"].Value.ToString();

                        int t = int.Parse(stt);
                        int number_link = t - 1;
                        var ID_link = new List<string>();
                        var link = "";
                        // Giả sử bạn có một RichTextBox tên là rtbLINK và một luồng nền
                        if (rtbLINK.InvokeRequired)
                        {
                            // Nếu đang ở ngoài luồng chính, sử dụng Invoke để chạy mã trên luồng chính
                            rtbLINK.Invoke(new Action(() =>
                            {
                                ID_link = rtbLINK.Lines.ToList();  // Thao tác trên RichTextBox trong luồng chính
                                                                   // Tiếp tục xử lý với biến 'link'
                            }));
                        }
                        link = ID_link[number_link].Split('|')[1];
                        var IDBM = ID_link[number_link].Split('|')[0].ToString();
                        chromedriver.Navigate().GoToUrl(link);

                        try
                        {

                            try
                            {
                                var LogininwitnhFb = chromedriver.FindElement(By.XPath("//span[text()='Log in with Facebook' or text()='Đăng nhập bằng Facebook']"));
                                LogininwitnhFb.Click();
                                Thread.Sleep(1000);

                            }
                            catch
                            {
                                var LogininwitnhFb = chromedriver.FindElement(By.XPath("//span[text()='Iniciar sesión con Facebook']"));
                                LogininwitnhFb.Click();
                                Thread.Sleep(1000);

                            }

                            string user = username + " " + username;
                            try
                            {
                                var userName = chromedriver.FindElement(By.XPath("//input[@placeholder='First and last name' or @placeholder='Họ và tên']"));
                                userName.SendKeys(user);
                                Thread.Sleep(1000);
                            }
                            catch
                            {

                                var userName = chromedriver.FindElement(By.XPath("//input[@placeholder='First name and surname' or @placeholder='Nombre y apellido']"));
                                userName.SendKeys(user);
                                Thread.Sleep(1000);

                            }

                            try
                            {
                                var Continue = chromedriver.FindElement(By.XPath("//div[text()='Continue' or text()='Tiếp tục']"));
                                Continue.Click();
                                Thread.Sleep(1000);

                            }
                            catch
                            {
                                var Continue = chromedriver.FindElement(By.XPath("//div[text()='Continuar']"));
                                Continue.Click();
                                Thread.Sleep(1000);


                            }
                            try
                            {
                                var Continue1 = chromedriver.FindElement(By.XPath("//div[text()='Continue' or text()='Tiếp tục']"));
                                Continue1.Click();
                                Thread.Sleep(1000);
                            }
                            catch
                            {
                                var Continue1 = chromedriver.FindElement(By.XPath("//div[text()='Continuar']"));
                                Continue1.Click();
                                Thread.Sleep(1000);
                            }

                            try
                            {
                                var Acceptinvitation = chromedriver.FindElement(By.XPath("//div[text()='Accept invitation' or text()='Chấp nhận lời mời']"));
                                Acceptinvitation.Click();
                                Thread.Sleep(12000);
                            }
                            catch
                            {
                                //Aceptar invitación

                                var Acceptinvitation = chromedriver.FindElement(By.XPath("//div[text()='Accept Invitation' or text()='Aceptar invitación']"));
                                Acceptinvitation.Click();
                                Thread.Sleep(12000);

                            }


                            var url = chromedriver.Url;
                            if (url.Contains(IDBM))
                            {
                                row.Cells[7].Value = $"Nhận Link {link} Thành Công";
                                return "DONE";
                            }
                            else
                            {
                                row.Cells[7].Value = $"Nhận Link {link} Thất Bại!";
                                if (rtb_Link_FAIL.InvokeRequired)
                                {
                                    rtb_Link_FAIL.Invoke(new Action(() =>
                                    {
                                        rtb_Link_FAIL.AppendText(link + Environment.NewLine);
                                    }));
                                }
                                return "FAIL";
                            }

                        }
                        catch { }

                        try
                        {

                            var Firstname = chromedriver.FindElement(By.XPath("/html/body/div[1]/div[1]/div/div/div/div/div[2]/div/div/div/div[1]/div[2]/div[2]/div/div[1]/div[1]/div/div[2]/div/div[1]/div/div[1]/div[2]/div[1]/div/input"));
                            Firstname.SendKeys(username);
                            Thread.Sleep(1000);

                            var Lastname = chromedriver.FindElement(By.XPath("/html/body/div[1]/div[1]/div/div/div/div/div[2]/div/div/div/div[1]/div[2]/div[2]/div/div[1]/div[2]/div/div[2]/div/div[1]/div/div[1]/div[2]/div[1]/div/input"));
                            Lastname.SendKeys(username);
                            Thread.Sleep(1000);


                            var Continue = chromedriver.FindElement(By.XPath("//div[text()='Continue' or text()='Tiếp']"));
                            Continue.Click();
                            Thread.Sleep(1000);

                            var Continue1 = chromedriver.FindElement(By.XPath("//div[text()='Continue' or text()='Tiếp']"));
                            Continue1.Click();
                            Thread.Sleep(1000);

                            try
                            {
                                var Acceptinvitation = chromedriver.FindElement(By.XPath("//div[text()='Accept invitation' or text()='Chấp nhận lời mời']"));
                                Acceptinvitation.Click();
                                Thread.Sleep(12000);
                            }
                            catch
                            {
                                var Acceptinvitation = chromedriver.FindElement(By.XPath("//div[text()='Accept Invitation']"));
                                Acceptinvitation.Click();
                                Thread.Sleep(12000);

                            }

                            var url = chromedriver.Url;
                            if (url.Contains(IDBM))
                            {
                                row.Cells[7].Value = $"Nhận Link {link} Thành Công";
                                return "DONE";
                            }
                            else
                            {
                                row.Cells[7].Value = $"Nhận Link {link} Thất Bại!";
                                if (rtb_Link_FAIL.InvokeRequired)
                                {
                                    rtb_Link_FAIL.Invoke(new Action(() =>
                                    {
                                        rtb_Link_FAIL.AppendText(link + Environment.NewLine);
                                    }));
                                }
                                return "FAIL";
                            }


                        }
                        catch { }


                    }
                    catch { }
                }
            }
            catch { }

            return "FAIL";

        }
        private void NHAN_LINK_BM_1VIA_NHIEU_LINK(ChromeDriver chromedriver, DataGridViewRow row, string username)
        {
            try
            {
                List<string> LINK_DONE = new List<string>();
                List<string> LINK_FAIL = new List<string>();
                string nhan_link_bm_API_Auto = "";
                if (cmbAPI_Auto_selenium_NhanBM.InvokeRequired)
                {
                    cmbAPI_Auto_selenium_NhanBM.Invoke(new Action(() =>
                    {
                        nhan_link_bm_API_Auto = cmbAPI_Auto_selenium_NhanBM.Text;

                    }));
                }
                List<string> ID_link = new List<string>();

                if (nhan_link_bm_API_Auto == "API")
                {
                    try
                    {
                        row.Cells["cStatus"].Value = "NHẬN LINK .....";
                        var password = row.Cells["cPass"].Value.ToString();



                        var link = "";
                        // Tạo từ điển lưu các control rtbACCOUNT
                        Dictionary<int, RichTextBox> rtbControls = new Dictionary<int, RichTextBox>
                            {
                                { 1, rtb_LINKBM_1 },
                                { 2, rtb_LINKBM_2 },
                                { 3, rtb_LINKBM_3 },
                                { 4, rtb_LINKBM_4 },
                                { 5, rtb_LINKBM_5 },
                                { 6, rtb_LINKBM_6 },
                                { 7, rtb_LINKBM_7 },
                                { 8, rtb_LINKBM_8 },
                                { 9, rtb_LINKBM_9 },
                                { 10, rtb_LINKBM_10},
                                { 11, rtb_LINKBM_11},
                                { 12, rtb_LINKBM_12},
                                { 13, rtb_LINKBM_13 },
                                { 14, rtb_LINKBM_14 },
                                { 15, rtb_LINKBM_15 },
                                { 16, rtb_LINKBM_16 },
                                { 17, rtb_LINKBM_17 },
                                { 18, rtb_LINKBM_18 },
                                { 19, rtb_LINKBM_19 },
                                { 20, rtb_LINKBM_20 },

                            };
                        // Lấy giá trị cStt từ DataGridViewRow
                        int cStt = Convert.ToInt32(row.Cells["cStt"].Value);
                        // Kiểm tra nếu cStt có trong từ điển
                        if (rtbControls.ContainsKey(cStt))
                        {
                            RichTextBox selectedRtb = rtbControls[cStt];

                            if (selectedRtb.InvokeRequired)
                            {
                                selectedRtb.Invoke(new Action(() =>
                                {
                                    ID_link = selectedRtb.Lines.ToList();
                                }));
                            }
                        }
                        foreach (var id_link in ID_link)
                        {
                            var IDBM = "";
                            try
                            {
                                IDBM = id_link.Split('|')[0].ToString();
                                link = id_link.Split('|')[1].ToString();
                            }
                            catch { }
                            if (string.IsNullOrEmpty(link))
                            {
                                link = id_link;
                            }
                            chromedriver.Navigate().GoToUrl(link);
                            Thread.Sleep(2000);
                            try
                            {
                                var LOGINFACEBOOK = chromedriver.FindElements(By.XPath("//div//div[@role='button']"));
                                if (LOGINFACEBOOK.Count > 0)
                                {
                                    LOGINFACEBOOK[0].Click();

                                }
                                var HTMl = chromedriver.PageSource;
                                var businessID = Regex.Match(HTMl, "businessID\":\"(.*?)\"").Groups[1].Value.ToString();
                                var businessName = Regex.Match(HTMl, "businessName\":\"(.*?)\"").Groups[1].Value.ToString();
                                if (string.IsNullOrEmpty(IDBM))
                                {
                                    IDBM = businessID;
                                }
                                else
                                {
                                    if (IDBM != businessID)
                                    {
                                        row.Cells["cStatus"].Value = $" Link BM {IDBM} Khác BM Đang Nhận: {businessID} Name: {businessName} FAIL!";
                                        LINK_FAIL.Add(IDBM);
                                        if (rtb_Link_FAIL.InvokeRequired)
                                        {
                                            rtb_Link_FAIL.Invoke(new Action(() =>
                                            {
                                                rtb_Link_FAIL.AppendText(IDBM + "|" + link + "| BM Khác" + Environment.NewLine);
                                            }));
                                        }
                                        goto out4;
                                    }
                                }


                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                var cookiestring = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                }
                                cookiestring = cookiestring.Trim(';');

                                HttpRequest httpRequest = new HttpRequest();
                                httpRequest.AllowAutoRedirect = true;
                                httpRequest.Cookies = new CookieDictionary();
                                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                EnsurePostWWWLoginHDFull(httpRequest);
                                httpRequest.KeepAlive = true;
                                var cookieRaws = cookiestring.Split(';');
                                foreach (var cookieraw in cookieRaws)
                                {
                                    var cookieJAr = cookieraw.Split('=');
                                    try
                                    {
                                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                    }
                                    catch { }
                                }
                                var manguon = chromedriver.PageSource;
                                var userid = Regex.Match(manguon, "USER_ID\":\"(.*?)\"").Groups[1].Value;
                                var token = Regex.Match(manguon, "URL=\\/invitation\\/\\?token=(.*?);").Groups[1].Value;
                                var join_id = Regex.Match(manguon, "&amp;join_id=(.*?)&").Groups[1].Value;
                                var fb_dtsg = Regex.Match(manguon, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                                var lsd = Regex.Match(manguon, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                                var datapass = $"first_name={userid}&last_name={userid}&invitation_token={token}&receive_marketing_messages=false&user_preferred_business_email&join_id={join_id}&mma_qpl_join_id&__aaid=0&__user={userid}&__a=1&__req=2&__hs=19967.BP:DEFAULT.2.0..0.0&dpr=1&__ccg=EXCELLENT&__rev=1016140233&__s=eq4kgy:g2a9c6:2ln3ia&__hsi=7409593093397164476&__dyn=7xeUmwkHgydwn8K2Wmh0no6u5U4e1Fx-ewSwMxW0DUS2S0lW4o3Bw5VCwjE3awbG78b87C1xwEwpU1vohwnU5W0IU9k2C1FwnE3_x20CU-0KU3mwkE5G1HwywnE2Lx-0lK3qazo11E2ZwrU6C0oe0ue1TwmU&__csr=&fb_dtsg={fb_dtsg}&jazoest=25507&lsd={lsd}&__spin_r=1016140233&__spin_b=trunk&__spin_t=1725180329&__jssesw=1&qpl_active_flow_ids=433725819,692797008&ajax_password={password}";
                                var postnhanlinkbm2 = httpRequest.Post("https://business.facebook.com/business/invitation/login/", datapass, "application/x-www-form-urlencoded");
                                if (postnhanlinkbm2.IsOK)
                                {
                                    var responseStr = postnhanlinkbm2.ToString();
                                    if (responseStr.Contains("for (;;);{\"__ar\":1,\"rid\":\""))
                                    {
                                        row.Cells[7].Value = $"NHẬN LINK {link} DONE IDBM: {IDBM}";
                                        LINK_DONE.Add(IDBM);
                                        chromedriver.Navigate().GoToUrl("https://business.facebook.com/");

                                    }
                                    else
                                    {
                                        row.Cells[8].Value = $"NHẬN LINK {link} FAIL! IDBM: {IDBM}";
                                        LINK_FAIL.Add(IDBM);
                                        if (rtb_Link_FAIL.InvokeRequired)
                                        {
                                            rtb_Link_FAIL.Invoke(new Action(() =>
                                            {
                                                rtb_Link_FAIL.AppendText(IDBM + "|" + link + Environment.NewLine);
                                            }));
                                        }

                                    }
                                }
                                else
                                {
                                    row.Cells[8].Value = $"NHẬN LINK {link} FAIL! IDBM: {IDBM}";
                                    LINK_FAIL.Add(IDBM);
                                    if (rtb_Link_FAIL.InvokeRequired)
                                    {
                                        rtb_Link_FAIL.Invoke(new Action(() =>
                                        {
                                            rtb_Link_FAIL.AppendText(IDBM + "|" + link + Environment.NewLine);
                                        }));
                                    }
                                }

                            }
                            catch { }

                        out4:
                            Thread.Sleep(100);
                        }

                    }
                    catch { }
                }
                if (nhan_link_bm_API_Auto == "Auto")
                {

                    try
                    {



                        var link = "";
                        // Tạo từ điển lưu các control rtbACCOUNT
                        Dictionary<int, RichTextBox> rtbControls = new Dictionary<int, RichTextBox>
                            {
                                { 1, rtb_LINKBM_1 },
                                { 2, rtb_LINKBM_2 },
                                { 3, rtb_LINKBM_3 },
                                { 4, rtb_LINKBM_4 },
                                { 5, rtb_LINKBM_5 },
                                { 6, rtb_LINKBM_6 },
                                { 7, rtb_LINKBM_7 },
                                { 8, rtb_LINKBM_8 },
                                { 9, rtb_LINKBM_9 },
                                { 10, rtb_LINKBM_10},
                                { 11, rtb_LINKBM_11},
                                { 12, rtb_LINKBM_12},
                                { 13, rtb_LINKBM_13 },
                                { 14, rtb_LINKBM_14 },
                                { 15, rtb_LINKBM_15 },
                                { 16, rtb_LINKBM_16 },
                                { 17, rtb_LINKBM_17 },
                                { 18, rtb_LINKBM_18 },
                                { 19, rtb_LINKBM_19 },
                                { 20, rtb_LINKBM_20 },

                            };
                        // Lấy giá trị cStt từ DataGridViewRow
                        int cStt = Convert.ToInt32(row.Cells["cStt"].Value);
                        // Kiểm tra nếu cStt có trong từ điển
                        if (rtbControls.ContainsKey(cStt))
                        {
                            RichTextBox selectedRtb = rtbControls[cStt];

                            if (selectedRtb.InvokeRequired)
                            {
                                selectedRtb.Invoke(new Action(() =>
                                {
                                    ID_link = selectedRtb.Lines.ToList();
                                }));
                            }
                        }
                        foreach (var id_link in ID_link)
                        {
                            var IDBM = id_link.Split('|')[0].ToString();
                            link = id_link.Split('|')[1].ToString();
                            chromedriver.Navigate().GoToUrl(link);
                            Thread.Sleep(2000);

                            try
                            {

                                try
                                {
                                    var LogininwitnhFb = chromedriver.FindElement(By.XPath("//span[text()='Log in with Facebook' or text()='Đăng nhập bằng Facebook']"));
                                    LogininwitnhFb.Click();
                                    Thread.Sleep(1000);

                                }
                                catch
                                {
                                    var LogininwitnhFb = chromedriver.FindElement(By.XPath("//span[text()='Iniciar sesión con Facebook']"));
                                    LogininwitnhFb.Click();
                                    Thread.Sleep(1000);

                                }
                                var HTMl = chromedriver.PageSource;
                                var businessID = Regex.Match(HTMl, "{\"businessID\":\"(.*?)\"").Groups[1].Value.ToString();

                                var businessName = Regex.Match(HTMl, "businessName\":\"(.*?)\"").Groups[1].Value.ToString();

                                if (IDBM != businessID)
                                {
                                    row.Cells["cStatus"].Value = $" Link BM {IDBM} Khác BM Đang Nhận: {businessID} Name: {businessName} FAIL!";
                                    LINK_FAIL.Add(IDBM);
                                    if (rtb_Link_FAIL.InvokeRequired)
                                    {
                                        rtb_Link_FAIL.Invoke(new Action(() =>
                                        {
                                            rtb_Link_FAIL.AppendText(IDBM + "|" + link + "| BM Khác" + Environment.NewLine);
                                        }));
                                    }
                                    goto out4;
                                }



                                string user = username + " " + username;
                                try
                                {
                                    var userName = chromedriver.FindElement(By.XPath("//input[@placeholder='First and last name' or @placeholder='Họ và tên']"));
                                    userName.SendKeys(user);
                                    Thread.Sleep(1000);
                                }
                                catch
                                {

                                    var userName = chromedriver.FindElement(By.XPath("//input[@placeholder='First name and surname' or @placeholder='Nombre y apellido']"));
                                    userName.SendKeys(user);
                                    Thread.Sleep(1000);

                                }

                                try
                                {
                                    var Continue = chromedriver.FindElement(By.XPath("//div[text()='Continue' or text()='Tiếp tục']"));
                                    Continue.Click();
                                    Thread.Sleep(1000);

                                }
                                catch
                                {
                                    var Continue = chromedriver.FindElement(By.XPath("//div[text()='Continuar']"));
                                    Continue.Click();
                                    Thread.Sleep(1000);


                                }
                                try
                                {
                                    var Continue1 = chromedriver.FindElement(By.XPath("//div[text()='Continue' or text()='Tiếp tục']"));
                                    Continue1.Click();
                                    Thread.Sleep(1000);
                                }
                                catch
                                {
                                    var Continue1 = chromedriver.FindElement(By.XPath("//div[text()='Continuar']"));
                                    Continue1.Click();
                                    Thread.Sleep(1000);
                                }

                                try
                                {
                                    var Acceptinvitation = chromedriver.FindElement(By.XPath("//div[text()='Accept invitation' or text()='Chấp nhận lời mời']"));
                                    Acceptinvitation.Click();
                                    Thread.Sleep(12000);
                                }
                                catch
                                {
                                    //Aceptar invitación

                                    var Acceptinvitation = chromedriver.FindElement(By.XPath("//div[text()='Accept Invitation' or text()='Aceptar invitación']"));
                                    Acceptinvitation.Click();
                                    Thread.Sleep(12000);

                                }


                                var url = chromedriver.Url;
                                if (url.Contains(IDBM))
                                {
                                    row.Cells[7].Value = $"Nhận Link {link} Thành Công IDBM: {IDBM}";
                                    LINK_DONE.Add(IDBM);
                                }
                                else
                                {
                                    row.Cells[8].Value = $"Nhận Link {link} Thất Bại! IDBM: {IDBM}";
                                    LINK_FAIL.Add(IDBM);
                                    if (rtb_Link_FAIL.InvokeRequired)
                                    {
                                        rtb_Link_FAIL.Invoke(new Action(() =>
                                        {
                                            rtb_Link_FAIL.AppendText(IDBM + "|" + link + Environment.NewLine);
                                        }));
                                    }

                                }

                            }
                            catch { }

                            try
                            {

                                var Firstname = chromedriver.FindElement(By.XPath("/html/body/div[1]/div[1]/div/div/div/div/div[2]/div/div/div/div[1]/div[2]/div[2]/div/div[1]/div[1]/div/div[2]/div/div[1]/div/div[1]/div[2]/div[1]/div/input"));
                                Firstname.SendKeys(username);
                                Thread.Sleep(1000);

                                var Lastname = chromedriver.FindElement(By.XPath("/html/body/div[1]/div[1]/div/div/div/div/div[2]/div/div/div/div[1]/div[2]/div[2]/div/div[1]/div[2]/div/div[2]/div/div[1]/div/div[1]/div[2]/div[1]/div/input"));
                                Lastname.SendKeys(username);
                                Thread.Sleep(1000);


                                var Continue = chromedriver.FindElement(By.XPath("//div[text()='Continue' or text()='Tiếp']"));
                                Continue.Click();
                                Thread.Sleep(1000);

                                var Continue1 = chromedriver.FindElement(By.XPath("//div[text()='Continue' or text()='Tiếp']"));
                                Continue1.Click();
                                Thread.Sleep(1000);

                                try
                                {
                                    var Acceptinvitation = chromedriver.FindElement(By.XPath("//div[text()='Accept invitation' or text()='Chấp nhận lời mời']"));
                                    Acceptinvitation.Click();
                                    Thread.Sleep(12000);
                                }
                                catch
                                {
                                    var Acceptinvitation = chromedriver.FindElement(By.XPath("//div[text()='Accept Invitation']"));
                                    Acceptinvitation.Click();
                                    Thread.Sleep(12000);

                                }

                                var url = chromedriver.Url;
                                if (url.Contains(IDBM))
                                {
                                    row.Cells[7].Value = $"Nhận Link {link} Thành Công IDBM: {IDBM}";
                                    LINK_DONE.Add(IDBM);
                                }
                                else
                                {
                                    row.Cells[8].Value = $"Nhận Link {link} Thất Bại! IDBM: {IDBM}";
                                    LINK_FAIL.Add(IDBM);
                                    if (rtb_Link_FAIL.InvokeRequired)
                                    {
                                        rtb_Link_FAIL.Invoke(new Action(() =>
                                        {
                                            rtb_Link_FAIL.AppendText(IDBM + "|" + link + Environment.NewLine);
                                        }));
                                    }

                                }


                            }
                            catch { }

                        out4:
                            Thread.Sleep(100);

                        }

                    }
                    catch { }
                }
                row.Cells[7].Value = $"NHẬN DONE: {LINK_DONE.Count} / {ID_link.Count}  NHẬN FAIL: {LINK_FAIL.Count} / {ID_link.Count}";
            }
            catch { }

        }

        private void REG_IG_PHONE(DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {

            try
            {
                row.Cells["cStatus"].Value = "REG....... ";


                string deviceID = null;
                var listDevice = KAutoHelper.ADBHelper.GetDevices();

                if (listDevice != null && listDevice.Count > 0)
                {
                    deviceID = listDevice[0];
                }
                // Mở APP IG

                KAutoHelper.ADBHelper.TapByPercent(deviceID, 86.9, 47.9);
                Thread.Sleep(3000);
                // Tạo TK 
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 47.7, 84.8);
                Thread.Sleep(3000);
                // Theo FB
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 49.2, 83.4);
                Thread.Sleep(3000);
                // Theo Thu cong
                //KAutoHelper.ADBHelper.TapByPercent(deviceID, 48.1, 90.4);
                //Thread.Sleep(3000);
                // Bằng Mail
                //KAutoHelper.ADBHelper.TapByPercent(deviceID, 46.2, 48.5);
                //Thread.Sleep(3000);
                //
                //KAutoHelper.ADBHelper.TapByPercent(deviceID, 17.3, 28.2);
                //Thread.Sleep(3000);

                ////NHẬP MAIL
                //KAutoHelper.ADBHelper.InputText(deviceID, mail);
                ////Tiếp
                //KAutoHelper.ADBHelper.TapByPercent(deviceID, 50.4, 37.5);
                ////
                //KAutoHelper.ADBHelper.TapByPercent(deviceID, 5.2, 28.7);

                // XÓA TÊN 
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 88.0, 23.3);
                //NHẬP TÊN MỚI
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 5.2, 22.8);

                var firstname = File.ReadAllLines("firstname.txt").ToList();
                Random rnd = new Random();
                int indexRandom = rnd.Next(0, firstname.Count);
                var lastname = File.ReadAllLines("lastname.txt").ToList();
                Random rnd_1 = new Random();
                int indexRandom_1 = rnd_1.Next(0, lastname.Count);
                var kytu = File.ReadAllLines("kytu.txt").ToList();
                Random rnd1 = new Random();
                int indexRandom1 = rnd1.Next(0, kytu.Count);
                string fullname = lastname[indexRandom_1] + " " + firstname[indexRandom];
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 5.2, 22.8);
                //Tên Đầy Đủ
                KAutoHelper.ADBHelper.InputText(deviceID, fullname);
                Thread.Sleep(3000);

                // Tiếp
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 48.5, 36.9);
                //
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 37.6, 29.6);
                for (int i = 0; i < 20; i++)
                {
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 94.0, 83.9);
                }

                Random rd02 = new Random();
                int randomNumber1 = rd02.Next(1, 100);

                string username_tk = firstname[indexRandom].ToLower() + lastname[indexRandom_1].ToLower() + kytu[indexRandom1] + randomNumber1;
                KAutoHelper.ADBHelper.InputText(deviceID, username_tk);
                //Tiếp
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 47.7, 38.0);


                string passig1 = firstname[indexRandom].ToLower() + kytu[indexRandom1] + randomNumber1;














                Thread.Sleep(TimeSpan.FromSeconds(60));
                string codehotmail = "";
                var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(mail, passmail);
                if (string.IsNullOrEmpty(accessToken))
                {
                    (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(mail, passmail);
                }
                if (string.IsNullOrEmpty(accessToken))
                {
                    (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(mail, passmail);
                }
                codehotmail = ReadHotmail_IG(username1, accessToken);
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 10.1, 28.6);

                KAutoHelper.ADBHelper.InputText(deviceID, codehotmail);
                //Tiếp
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 47.4, 36.2);
                //Nhập MK
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 7.9, 25.5);

                KAutoHelper.ADBHelper.InputText(deviceID, passmail);
                //Tiếp
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 52.3, 34.0);


                //ngay 01
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 27.8, 47.9);
                Random random = new Random();
                // Sinh một số ngẫu nhiên từ 0 đến 100
                int randomNumber = random.Next(1, 31);
                string day = randomNumber.ToString();
                KAutoHelper.ADBHelper.InputText(deviceID, day);
                //// ĐẶT
                //KAutoHelper.ADBHelper.TapByPercent(deviceID, 70.3, 64.5);
                Thread.Sleep(TimeSpan.FromSeconds(2));
                //tháng 12
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 48.1, 47.9);
                Thread.Sleep(TimeSpan.FromSeconds(2));
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 48.1, 47.9);
                Random random1 = new Random();
                // Sinh một số ngẫu nhiên từ 0 đến 100
                int randomNumber3 = random1.Next(1, 12);
                string month = "Th" + randomNumber3.ToString();

                KAutoHelper.ADBHelper.InputText(deviceID, month);
                Thread.Sleep(TimeSpan.FromSeconds(2));
                //// ĐẶT
                //KAutoHelper.ADBHelper.TapByPercent(deviceID, 69.2, 63.4);
                // năm 1999
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 70.3, 47.9);
                Thread.Sleep(TimeSpan.FromSeconds(2));
                Random random2 = new Random();
                // Sinh một số ngẫu nhiên từ 0 đến 100
                int randomNumber2 = random2.Next(1980, 2007);
                string year = randomNumber2.ToString();
                KAutoHelper.ADBHelper.InputText(deviceID, year);
                Thread.Sleep(TimeSpan.FromSeconds(2));

                // Đặt
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 69.9, 64.1);
                Thread.Sleep(3000);
                //Tiếp
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 48.1, 48.4);
                Thread.Sleep(3000);


                // Tiếp
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 45.9, 28.4);
                Thread.Sleep(3000);
                // Tôi Đồng Ý
                KAutoHelper.ADBHelper.TapByPercent(deviceID, 49.6, 83.6);
                Thread.Sleep(10000);



            }
            catch { }


        }
        private void REG_BM_IG(DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {
                var chromedriver = Createchromedrive();

                var Login = "";
                cmb_LOGIN_IG.Invoke(new Action(() =>
                {
                    Login = cmb_LOGIN_IG.Text;
                }));


                if (Login == "2FA")
                {
                    LOGIN_IG_2FA(chromedriver, row, uid, password, c2FAvsCookie, mail, passmail, mailkhoiphuc);
                }
                if (Login == "Cookie")
                {
                    LOGIN_IG_COOKIE(chromedriver, row, uid, password, c2FAvsCookie, mail, passmail, mailkhoiphuc);
                }


                var batsangtao = BAT_SANG_TAO(chromedriver, row, uid, password, c2FAvsCookie, mail, passmail, mailkhoiphuc);


                REG_BM_IG(chromedriver, row, uid, password, c2FAvsCookie, mail, passmail, mailkhoiphuc);













            }
            catch { }
        }

        private void LOGIN_IG_2FA(ChromeDriver chromedriver, DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {

                chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                Thread.Sleep(2000);

                var enter_username = chromedriver.FindElements(By.XPath("//input[@name='username']"));
                if (enter_username.Count > 0)
                {
                    enter_username.LastOrDefault().SendKeys(uid);
                    Thread.Sleep(2000);
                }
                var enter_pass = chromedriver.FindElements(By.XPath("//input[@name='password']"));
                if (enter_pass.Count > 0)
                {
                    enter_pass.LastOrDefault().SendKeys(password);
                    Thread.Sleep(2000);
                }
                var Login = chromedriver.FindElements(By.XPath("//button[@type='submit']"));
                if (Login.Count > 0)
                {
                    Login.LastOrDefault().Click();
                    Thread.Sleep(5000);
                }

                var code = GetCode(c2FAvsCookie);
                Thread.Sleep(2000);
                if (string.IsNullOrEmpty(code))
                {
                    code = GetCode(c2FAvsCookie);
                    Thread.Sleep(2000);
                }
                if (string.IsNullOrEmpty(code))
                {
                    row.Cells["cStatus"].Value = "Lấy code 2FA FAIL";
                    // return "LOGIN FAIL";
                }

                var enterCode = chromedriver.FindElements(By.XPath("//input[@name='verificationCode']"));
                if (enterCode.Count > 0)
                {
                    enterCode.LastOrDefault().SendKeys(code);
                    Thread.Sleep(1000);
                }
                var Confirm = chromedriver.FindElements(By.XPath("//form/div[2]/button"));
                if (Confirm.Count > 0)
                {
                    Confirm.LastOrDefault().Click();
                    Thread.Sleep(10000);
                }
                var html = chromedriver.PageSource;

                var uid_ig = Regex.Match(chromedriver.PageSource, "NON_FACEBOOK_USER_ID\":\"(.*?)\"").Groups[1].Value;

                if (uid_ig == "0")
                {
                    // return "LOGIN FAIL";
                }
                else
                {
                    // return "LOGIN DONE";
                }








            }
            catch { }
        }

        private string BAT_SANG_TAO(ChromeDriver chromedriver, DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {
                chromedriver.Navigate().GoToUrl("https://www.instagram.com/accounts/convert_to_professional_account/");

            batsangtao:
                var manguon = chromedriver.PageSource;
                var isBusinessaccount = Regex.Match(manguon, "is_business_account\":(.*?),").Groups[1].Value;
                if (isBusinessaccount == "false")
                {
                    row.Cells["cStatus"].Value = "Đăng nhập thành công=>Bật sáng tạo";
                    var scriptConvert = "(function() {\r\n    function getCSRFCookie(cookieString) {\r\n        const name = \"csrftoken=\";\r\n        const decodedCookie = decodeURIComponent(cookieString);\r\n        const cookieArray = decodedCookie.split(';');\r\n        for (let i = 0; i < cookieArray.length; i++) {\r\n            let cookie = cookieArray[i].trim();\r\n            if (cookie.indexOf(name) === 0) {\r\n                return cookie.substring(name.length, cookie.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    const cookieString = document.cookie;\r\n    const csrfToken = getCSRFCookie(cookieString);\r\n\r\n    fetch(\"https://www.instagram.com/api/v1/business/account/convert_account/\", {\r\n        headers: {\r\n            \"content-type\": \"application/x-www-form-urlencoded\",\r\n            \"x-csrftoken\": csrfToken,\r\n        },\r\n        body: `category_id=180164648685982&create_business_id=true&entry_point=ig_web_settings&set_public=true&should_bypass_contact_check=true&should_show_category=0&to_account_type=2`,\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        credentials: \"include\"\r\n    }).then(response => response.json()).then(data => {\r\n        console.log(\"Done\");\r\n        console.log(data);\r\n    }).catch(error => {\r\n        console.error(\"Error:\", error);\r\n    });\r\n})();\r\n";
                    chromedriver.ExecuteScript(scriptConvert);
                    Thread.Sleep(100);
                    chromedriver.Navigate().Refresh();
                    Thread.Sleep(1000);

                }

                manguon = chromedriver.PageSource;
                isBusinessaccount = Regex.Match(manguon, "is_business_account\":(.*?),").Groups[1].Value;
                if (isBusinessaccount == "false")
                {
                    row.Cells["cStatus"].Value = "Bật sáng tạo Fail";
                    goto batsangtao;

                }
                else
                {
                    row.Cells["cStatus"].Value = "Bật sáng tạo Done";

                }





            }
            catch { }
            return "";
        }

        private void REG_BM_IG(ChromeDriver chromedriver, DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {

                row.Cells["cStatus"].Value = "REG BM";
                chromedriver.Navigate().GoToUrl("http://business.facebook.com/");
                Thread.Sleep(2000);
                var originalTab = "";
                try
                {
                    var Login_IG = chromedriver.FindElements(By.XPath("//div[4]/div/div"));
                    if (Login_IG.Count > 0)
                    {
                        // Cuộn đến phần tử
                        var element = Login_IG[1];
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(2000);
                    }


                    originalTab = chromedriver.CurrentWindowHandle;

                    // Chuyển sang tab mới
                    chromedriver.SwitchTo().Window(chromedriver.WindowHandles[1]);
                    var LoginasIG = chromedriver.FindElements(By.XPath("//div[4]/div[1]/div[@role='button']"));
                    if (LoginasIG.Count > 0)
                    {
                        LoginasIG.LastOrDefault().Click();
                        Thread.Sleep(2000);
                    }

                }
                catch { }



                // Quay lại tab trước đó (tab gốc)
                chromedriver.SwitchTo().Window(originalTab);
                Thread.Sleep(2000);


                chromedriver.Navigate().GoToUrl("https://business.facebook.com/latest/settings/business_users/?business_id=");
                var uidbm = Regex.Match(chromedriver.PageSource, "business_id=(.*?)\"}").Groups[1].Value;
                var nameBM = Regex.Match(chromedriver.PageSource, "globalScopeName\":\"(.*?)\"").Groups[1].Value;


                if (!string.IsNullOrEmpty(uidbm))
                {
                    row.Cells["cStatus"].Value = "Add thông tin businessUser";


                    var scriptAddThongTin = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id,\r\n    businessUserID = require(\"CurrentBusinessUser\").business_user_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsUpdateBusinessUserForIGMAMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=2g&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=cjs5u2:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48W2a4p8aHwzzXwKwt8jwGzEaE8o4-222SU5G4E5yexfwjES1xwjokGvwOwem32fwLCyKbwzwea0Lo6-3u36iU9E2cwNwDwjouwqo4e220hi7E5y1rw&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsUpdateBusinessUserForIGMAMutation&variables={{\"businessUserID\":\"${{businessUserID}}\",\"firstName\":null,\"lastName\":null,\"email\":\"akajsjss111@hotmail.com\",\"roles\":null,\"business_account_task_ids\":null,\"expireTime\":null,\"clientTimezoneID\":null,\"businessID\":\"${{businessId}}\",\"nonce\":null,\"should_send_email_notif\":null,\"entryPoint\":\"BIZWEB_SETTINGS_ADD_CONTACT_INFO_UPDATE_BUSINESS_USER_FOR_IGMA\"}}&server_timestamps=true&doc_id=6412870625471134`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                    chromedriver.ExecuteScript(scriptAddThongTin);


                }

                string usernamemail1 = "c3c1c61bd7d1@drmail.in";

                row.Cells["cStatus"].Value = "Share về mail " + usernamemail1;
                var scriptInvite = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsInvitePeopleModalMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=6s&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=m2vooy:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmwoEeogzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiF-3a0Voc8-2-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1FwgU88158uwm85K&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&qpl_active_flow_ids=558499583&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsInvitePeopleModalMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"${{uid}}\",\"business_id\":\"${{businessId}}\",\"business_emails\":[\"{usernamemail1}\"],\"business_account_task_ids\":[\"926381894526285\",\"603931664885191\",\"1327662214465567\",\"862159105082613\",\"6161001899617846786\",\"1633404653754086\",\"967306614466178\",\"2848818871965443\",\"245181923290198\",\"388517145453246\"],\"invite_origin_surface\":\"MBS_INVITE_USER_FLOW\",\"assets\":[],\"expiry_time\":0,\"is_spark_permission\":false,\"client_timezone_id\":\"Asia/Jakarta\"}}}}&server_timestamps=true&doc_id=23919966164285762&fb_api_analytics_tags=[\"qpl_active_flow_ids=558499583\"]`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";

                var resultInvite = chromedriver.ExecuteScript(scriptInvite);
                Thread.Sleep(3000);



                try
                {

                    var cookies = chromedriver.Manage().Cookies.AllCookies;
                    var cookieString = "";
                    foreach (var cookie in cookies)
                    {
                        cookieString += cookie.Name + "=" + cookie.Value + ";";
                    }

                    cookieString = cookieString.TrimEnd(';');

                    HttpRequest http = new HttpRequest();
                    http.Cookies = new CookieDictionary();
                    http.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                    http.KeepAlive = true;
                    var cookieRaws = cookieString.Split(';');
                    foreach (var cookieRaw in cookieRaws)
                    {
                        var cookieJar = cookieRaw.Split('=');
                        try
                        {
                            http.Cookies.Add(cookieJar[0], cookieJar[1]);
                        }
                        catch { }
                    }
                    for (int i = 0; i < 2; i++)
                    {
                        row.Cells["cStatus"].Value = "Reg BM thứ " + (i + 2);
                        chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={uidbm}&placement=standalone&global_scope_id={uidbm}");
                        Thread.Sleep(3000);
                        var pageSourcebillinghub = chromedriver.PageSource;
                        var fbdtsgbilling = Regex.Match(pageSourcebillinghub, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                        var lsdbilling = Regex.Match(pageSourcebillinghub, "LSD\\\",\\[],{\\\"token\\\":\\\"(.*?)\\\"").Groups[1].Value;
                        var userIDbilling = Regex.Match(pageSourcebillinghub, "userID\":\"(.*?)\"").Groups[1].Value;

                        Random random = new Random();
                        int numberRandom = random.Next(0, 100000000);
                        string nameBusiness = "Ran Dom" + numberRandom;
                        string Name = "RAN";
                        string Lastname = "DOM";
                        string mailbusiness = "habkns@gmail.com";
                        //http.AddHeader("", "");
                        //http.AddHeader("", "");
                        //http.AddHeader("", "");
                        //http.AddHeader("", "");
                        //http.AddHeader("", "");
                        //http.AddHeader("", "");
                        //http.AddHeader("", "");
                        //http.AddHeader("", "");
                        //http.AddHeader("", "");

                        var databilling = $"av={userIDbilling}&__aaid=0&__bid={uidbm}&__user={userIDbilling}&__a=1&__req=11&__hs=20186.BP:payments_noncomet_pkg.2.0...0&dpr=1&__ccg=EXCELLENT&__rev=1021674742&__s=gmncr6:pj2wss:xo0geh&__hsi=7490963212360425237&__dyn=7xeUmxa2C5rgydwCwRyU8EKmhe2Om2q1DxiFGxK7oG484S4UKewSAAzpoixW4E726US2Sfxq4U5i4824yoyaxG4o4B0l898888oe82xwCCwjFEK2Z162-8G6kE8Rpo46Urwxw9m4VA48a8lwWxe4oeUa85Cdw9-0CE4a4ouyUd85W7o6eu2C2l0FgKi3a2i11grzUeUmwvC6UgzE8EhAwGK2efK2i9wAx25U9F8W6888dUnwj84idwmEiwYxKexe5U4qu2W1Uxi48bE463e13wHxWcAz8eoGdwzweau0Jomwm86CiU9E4KeyE9Eco9U4S7ErwMxN0lF9Ugwxwe61TwmUaE2mwwxS0zo98&fb_dtsg={fbdtsgbilling}&jazoest=25413&lsd={lsdbilling}&__spin_r=1021674742&__spin_b=trunk&__spin_t=1744125786&__jssesw=1&qpl_active_flow_ids=1001920343&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useBusinessCreationMutationMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"{userIDbilling}\",\"business_name\":\"{nameBusiness}\",\"user_first_name\":\"{Name}\",\"user_last_name\":\"{Lastname}\",\"user_email\":\"{mailbusiness}\",\"creation_source\":\"BM_HOME_BUSINESS_CREATION_IN_SCOPE_SELECTOR\",\"entry_point\":\"UNIFIED_GLOBAL_SCOPE_SELECTOR\"}}}}&server_timestamps=true&doc_id=7780408488685584&fb_api_analytics_tags=[\"qpl_active_flow_ids=1001920343\"]";
                        Thread.Sleep(300);


                        var posttaobm2 = http.Post("https://business.facebook.com/api/graphql/?_callFlowletID=0&_triggerFlowletID=9816&qpl_active_flow_instance_ids=", databilling, "application/x-www-form-urlencoded");
                        if (posttaobm2.IsOK)
                        {
                            var responseStr = posttaobm2.ToString();
                            if (responseStr.Contains("profile_picture_url"))
                            {
                                //status create thanh cong
                                row.Cells["cStatus"].Value = "Reg BM thứ " + (i + 2) + " thành công";
                                var uidBMNew = JObject.Parse(responseStr)["data"]["bizkit_create_business"]["id"].ToString();
                                chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_users/?asset_id={uidBMNew}&business_id={uidBMNew}");
                                Thread.Sleep(1000);
                                var nameBMNew = Regex.Match(chromedriver.PageSource, "globalScopeName\":\"(.*?)\"").Groups[1].Value;




                                chromedriver.ExecuteScript(scriptInvite);

                                Thread.Sleep(3000);

                            }
                            else
                            {
                                row.Cells["cStatus"].Value = "Reg BM thứ " + (i + 2) + " thất bại";
                            }


                        }





                    }
                    row.Cells["cStatus"].Value = "lấy IDBM";
                    chromedriver.Navigate().Refresh();
                    Thread.Sleep(5000);
                    var manguon1 = chromedriver.PageSource;
                    Thread.Sleep(100);
                    var tokenEAAG = Regex.Match(manguon1, "apiAccessToken\":\"(.*?)\"").Groups[1].Value;
                    Thread.Sleep(100);
                    chromedriver.Navigate().GoToUrl($"https://graph.facebook.com/v15.0/me/businesses?access_token={tokenEAAG}&limit=100&fields=%5B%22id%22,%22allow_page_management_in_www%22,%22business_users%7Brole%7D%22,%22sharing_eligibility_status%22,%22owned_ad_accounts.limit(1)%7Bcurrency,adtrust_dsl%7D%22,%22created_time%22,%22name%22,%20%22status%22%5D");
                    Thread.Sleep(2000);
                    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                    doc.LoadHtml(chromedriver.PageSource);
                    // Select the content inside <pre> tag
                    var preNode = doc.DocumentNode.SelectSingleNode("//pre");

                    if (preNode != null)
                    {

                        JObject jobject = JObject.Parse(preNode.InnerText);
                        var dataValues = jobject["data"];

                        if (dataValues != null)
                        {
                            var dataValuesArr = dataValues.ToObject<JArray>();
                            foreach (var itemObject in dataValuesArr)
                            {
                                var businessId = itemObject["id"].ToString();
                                var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                row.Cells["cCheckBM"].Value += $"{businessId}|{typeBm}|{statusBm}|" + Environment.NewLine;

                                StreamWriter sw5 = new StreamWriter("checkBM.txt", true);
                                sw5.WriteLine(businessId + "|" + typeBm + "|" + statusBm + "|" + uid + "|" + password);
                                sw5.Close();
                                Thread.Sleep(1000);

                            }

                        }



                    }

                    Thread.Sleep(TimeSpan.FromMinutes(2));
                }
                catch { row.Cells["cStatus"].Value = "IG KO REG ĐƯỢC BM"; }








            }
            catch { }
        }

        // Sửa đổi lstDataChrome để lưu trữ AccountData
        private Dictionary<ChromeDriver, AccountData1> lstDataChromeIG = new Dictionary<ChromeDriver, AccountData1>();

        private void LOGIN_IG_COOKIE(ChromeDriver chromedriver, DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {

                Thread.Sleep(2000);
                //var chromedriver = Createchromedrive();
                chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                row.Cells["cStatus"].Value = "Login.....";
                var cookieRaw = c2FAvsCookie.Split(';');
                foreach (var cookieItem in cookieRaw)
                {
                    try
                    {
                        var cookieJar = cookieItem.Split('=');

                        Cookie cookieChrome = new Cookie(cookieJar[0].Trim(), cookieJar[1].Trim(), "facebook.com", "/", DateTime.Now.AddDays(10));
                        chromedriver.Manage().Cookies.AddCookie(cookieChrome);
                    }
                    catch { }
                }
                chromedriver.Navigate().Refresh();
                chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                Thread.Sleep(1000);






            }
            catch { }
        }

        // LẤY COOKIE
        private async void lấyCookieVIAToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {

                                LOAD_COOKIE(chromeDriver, accountData.Row, accountData.User);

                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);

            }
            catch { }

        }


        private void LOAD_COOKIE(ChromeDriver chromedriver, DataGridViewRow row, string username)
        {
            try
            {
                var password = row.Cells["cPass"].Value.ToString();
                var c2FAvsCookie = "";
                try
                {
                    c2FAvsCookie = row.Cells["c2FAvsCookie"].Value.ToString();
                }
                catch { }
                var mail = row.Cells["cMail"].Value.ToString();
                var passmail = row.Cells["cPassMail"].Value.ToString();
                var mailkhoiphuc = row.Cells["cMailKP"].Value.ToString();

                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                var cookiestring = "";

                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }
                row.Cells["c2FAvsCookie"].Value = cookiestring;
                if (string.IsNullOrEmpty(c2FAvsCookie))
                {
                    row.Cells["cCheckBM"].Value = username + "|" + password + "|" + cookiestring + "|" + mail + "|" + passmail + "|" + mailkhoiphuc;
                }
                else
                {
                    row.Cells["cCheckBM"].Value = username + "|" + password + "|" + cookiestring + "|" + c2FAvsCookie + "|" + mail + "|" + passmail + "|" + mailkhoiphuc;
                }
            }
            catch { }
        }


        private class AccountData1
        {
            public DataGridViewRow Row1 { get; set; }
            public string User1 { get; set; }

        }

        private void LOGIN_IG_COOKIE1(DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {
                var chromedriver = Createchromedrive_IG();

                Thread.Sleep(2000);
                //var chromedriver = Createchromedrive();
                chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                row.Cells["cStatus"].Value = "Login.....";
                var cookieRaw = c2FAvsCookie.Split(';');
                foreach (var cookieItem in cookieRaw)
                {
                    try
                    {
                        var cookieJar = cookieItem.Split('=');

                        Cookie cookieChrome = new Cookie(cookieJar[0].Trim(), cookieJar[1].Trim(), "instagram.com", "/", DateTime.Now.AddDays(10));
                        chromedriver.Manage().Cookies.AddCookie(cookieChrome);
                    }
                    catch { }
                }
                chromedriver.Navigate().Refresh();
                chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                Thread.Sleep(5000);
                if (chromedriver.Url.Contains("https://www.instagram.com/accounts/suspended"))
                {
                    row.Cells["cStatus"].Value = "282";
                    chromedriver.Close();
                    chromedriver.Quit();
                }
                else
                {
                    lstDataChromeIG.Add(chromedriver, new AccountData1 { Row1 = row, User1 = uid });
                    row.Cells["cStatus"].Value = "Login DONE";
                }





            }
            catch { }
        }

        private async void tẮTBẬTSÁNGTẠOIGToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var tasks = new List<Task>();
            foreach (var entry in lstDataChromeIG)
            {
                ChromeDriver chromeDriver = entry.Key;
                AccountData1 accountData = entry.Value;

                // Kiểm tra xem cột "cSelect" có tồn tại không
                if (accountData.Row1.Cells[9] != null)
                {
                    var cSelectValue = accountData.Row1.Cells[9].Value;

                    // Kiểm tra xem cột "cSelect" có được chọn hay không
                    if (cSelectValue != null && (bool)cSelectValue)
                    {
                        // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                        tasks.Add(Task.Run(() =>
                        {
                            ON_OFF_SANGTAO(chromeDriver, accountData.Row1, accountData.User1);


                        }));
                    }
                }
                else
                {
                    // Cột "cSelect" không tồn tại
                    MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                }
            }
            await Task.WhenAll(tasks);



        }

        private void ON_OFF_SANGTAO(ChromeDriver chromedriver, DataGridViewRow row, string username)
        {
            try
            {
                chromedriver.Navigate().GoToUrl("https://www.instagram.com/accounts/convert_to_professional_account/");


                var manguon = chromedriver.PageSource;
                var isBusinessaccount = Regex.Match(manguon, "is_business_account\":(.*?),").Groups[1].Value;
                if (isBusinessaccount == "false")
                {
                    row.Cells["cStatus"].Value = "Đăng nhập thành công=>Bật sáng tạo";
                    var scriptConvert = "(function() {\r\n    function getCSRFCookie(cookieString) {\r\n        const name = \"csrftoken=\";\r\n        const decodedCookie = decodeURIComponent(cookieString);\r\n        const cookieArray = decodedCookie.split(';');\r\n        for (let i = 0; i < cookieArray.length; i++) {\r\n            let cookie = cookieArray[i].trim();\r\n            if (cookie.indexOf(name) === 0) {\r\n                return cookie.substring(name.length, cookie.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    const cookieString = document.cookie;\r\n    const csrfToken = getCSRFCookie(cookieString);\r\n\r\n    fetch(\"https://www.instagram.com/api/v1/business/account/convert_account/\", {\r\n        headers: {\r\n            \"content-type\": \"application/x-www-form-urlencoded\",\r\n            \"x-csrftoken\": csrfToken,\r\n        },\r\n        body: `category_id=180164648685982&create_business_id=true&entry_point=ig_web_settings&set_public=true&should_bypass_contact_check=true&should_show_category=0&to_account_type=2`,\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        credentials: \"include\"\r\n    }).then(response => response.json()).then(data => {\r\n        console.log(\"Done\");\r\n        console.log(data);\r\n    }).catch(error => {\r\n        console.error(\"Error:\", error);\r\n    });\r\n})();\r\n";
                    chromedriver.ExecuteScript(scriptConvert);
                    Thread.Sleep(5000);
                    chromedriver.Navigate().Refresh();
                    Thread.Sleep(5000);

                }
                if (isBusinessaccount == "true")
                {
                    row.Cells["cStatus"].Value = " Tắt sáng tạo";

                    var scriptSwitch = $"(function() {{\r\n    function getCSRFCookie(cookieString) {{\r\n        const name = \"csrftoken=\";\r\n        const decodedCookie = decodeURIComponent(cookieString);\r\n        const cookieArray = decodedCookie.split(';');\r\n        for (let i = 0; i < cookieArray.length; i++) {{\r\n            let cookie = cookieArray[i].trim();\r\n            if (cookie.indexOf(name) === 0) {{\r\n                return cookie.substring(name.length, cookie.length);\r\n            }}\r\n        }}\r\n        return \"\";\r\n    }}\r\n\r\n    const cookieString = document.cookie;\r\n    const csrfToken = getCSRFCookie(cookieString);\r\n\r\n    fetch(\"https://www.instagram.com/api/v1/business/account/convert_account/\", {{\r\n        headers: {{\r\n            \"content-type\": \"application/x-www-form-urlencoded\",\r\n            \"x-csrftoken\": csrfToken,\r\n        }},\r\n        body: `entry_point=ig_web_settings&to_account_type=1`,\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        credentials: \"include\"\r\n    }}).then(response => response.json()).then(data => {{\r\n        console.log(\"Done\");\r\n        console.log(data);\r\n    }}).catch(error => {{\r\n        console.error(\"Error:\", error);\r\n    }});\r\n}})();\r\n";
                    chromedriver.ExecuteScript(scriptSwitch);
                    Thread.Sleep(5000);
                    chromedriver.Navigate().Refresh();
                    Thread.Sleep(5000);

                }
                chromedriver.Navigate().Refresh();
                manguon = chromedriver.PageSource;
                isBusinessaccount = Regex.Match(manguon, "is_business_account\":(.*?),").Groups[1].Value;
                if (isBusinessaccount == "false")
                {
                    row.Cells["cStatus"].Value = "Tắt sáng tạo Done";


                }
                else
                {
                    row.Cells["cStatus"].Value = "Bật sáng tạo Done";

                }





            }
            catch { }
        }

        private async void rEGBM12ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    var tasks = new List<Task>();
            //    foreach (var entry in lstDataChromeIG)
            //    {
            //        ChromeDriver chromeDriver = entry.Key;
            //        AccountData1 accountData = entry.Value;

            //        // Kiểm tra xem cột "cSelect" có tồn tại không
            //        if (accountData.Row1.Cells[9] != null)
            //        {
            //            var cSelectValue = accountData.Row1.Cells[9].Value;

            //            // Kiểm tra xem cột "cSelect" có được chọn hay không
            //            if (cSelectValue != null && (bool)cSelectValue)
            //            {
            //                // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
            //                tasks.Add(Task.Run(() =>
            //                {
            //                    REG_BM_1_2(chromeDriver, accountData.Row1, accountData.User1);
            //                }));
            //                // 👉 Thêm delay 1s sau mỗi lần tạo Task
            //                await Task.Delay(1000);
            //            }
            //        }
            //        else
            //        {
            //            // Cột "cSelect" không tồn tại
            //            MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
            //        }
            //    }
            //    await Task.WhenAll(tasks);
            //}
            //catch { }

            try
            {
                int maxConcurrent = 5; // Số task chạy cùng lúc

                using (SemaphoreSlim semaphore = new SemaphoreSlim(maxConcurrent))
                {
                    var tasks = new List<Task>();

                    foreach (var entry in lstDataChromeIG)
                    {
                        ChromeDriver chromeDriver = entry.Key;
                        AccountData1 accountData = entry.Value;

                        // Kiểm tra cột cSelect
                        if (accountData.Row1.Cells[9] != null)
                        {
                            var cSelectValue = accountData.Row1.Cells[9].Value;

                            if (cSelectValue != null && (bool)cSelectValue)
                            {
                                await semaphore.WaitAsync(); // 👈 Chặn nếu đã đủ 5 task đang chạy

                                var driverCopy = chromeDriver;
                                var rowCopy = accountData.Row1;
                                var userCopy = accountData.User1;

                                var task = Task.Run(() =>
                                {
                                    try
                                    {
                                        REG_BM_1_2(driverCopy, rowCopy, userCopy);
                                    }
                                    finally
                                    {
                                        semaphore.Release(); // ✅ Giải phóng slot
                                    }
                                });

                                tasks.Add(task);
                            }
                        }
                        else
                        {
                            MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                        }
                    }

                    await Task.WhenAll(tasks); // Chờ tất cả task hoàn tất
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi: " + ex.Message);
            }

        }

        private void REG_BM_1_2(ChromeDriver chromedriver, DataGridViewRow row, string username)
        {
            try
            {

                int share_BM_IG = 0;

                int check_business_page = 0;
            regbm:

                var on_off_sang_tao = "";
                if (cmb_TAT_BAT_SANG_TAO.InvokeRequired)
                {
                    cmb_TAT_BAT_SANG_TAO.Invoke(new Action(() =>
                    {
                        on_off_sang_tao = cmb_TAT_BAT_SANG_TAO.Text;
                    }));

                }
                if (on_off_sang_tao == "ON")
                {

                    try
                    {

                        chromedriver.Navigate().GoToUrl("https://www.instagram.com/accounts/convert_to_professional_account/");
                        Thread.Sleep(5000);
                        var url282 = chromedriver.Url;
                        if (url282.Contains("https://www.instagram.com/accounts/suspended"))
                        {
                            row.Cells["cStatus"].Value = "282";
                            goto next;
                        }

                        var manguon = chromedriver.PageSource;
                        var isBusinessaccount = Regex.Match(manguon, "is_business_account\":(.*?),").Groups[1].Value;
                        if (isBusinessaccount == "true")
                        {
                            row.Cells["cStatus"].Value = " Tắt sáng tạo.....";

                            var scriptSwitch = $"(function() {{\r\n    function getCSRFCookie(cookieString) {{\r\n        const name = \"csrftoken=\";\r\n        const decodedCookie = decodeURIComponent(cookieString);\r\n        const cookieArray = decodedCookie.split(';');\r\n        for (let i = 0; i < cookieArray.length; i++) {{\r\n            let cookie = cookieArray[i].trim();\r\n            if (cookie.indexOf(name) === 0) {{\r\n                return cookie.substring(name.length, cookie.length);\r\n            }}\r\n        }}\r\n        return \"\";\r\n    }}\r\n\r\n    const cookieString = document.cookie;\r\n    const csrfToken = getCSRFCookie(cookieString);\r\n\r\n    fetch(\"https://www.instagram.com/api/v1/business/account/convert_account/\", {{\r\n        headers: {{\r\n            \"content-type\": \"application/x-www-form-urlencoded\",\r\n            \"x-csrftoken\": csrfToken,\r\n        }},\r\n        body: `entry_point=ig_web_settings&to_account_type=1`,\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        credentials: \"include\"\r\n    }}).then(response => response.json()).then(data => {{\r\n        console.log(\"Done\");\r\n        console.log(data);\r\n    }}).catch(error => {{\r\n        console.error(\"Error:\", error);\r\n    }});\r\n}})();\r\n";
                            Thread.Sleep(2000);
                            chromedriver.ExecuteScript(scriptSwitch);
                            Thread.Sleep(2000);
                            chromedriver.Navigate().Refresh();

                            manguon = chromedriver.PageSource;
                            isBusinessaccount = Regex.Match(manguon, "is_business_account\":(.*?),").Groups[1].Value;
                            if (isBusinessaccount == "false")
                            {
                                row.Cells["cStatus"].Value = "Tắt sáng tạo Done";


                            }
                        }

                        Thread.Sleep(5000);
                        manguon = chromedriver.PageSource;
                        isBusinessaccount = Regex.Match(manguon, "is_business_account\":(.*?),").Groups[1].Value;
                        if (isBusinessaccount == "false")
                        {
                            row.Cells["cStatus"].Value = "Bật sáng tạo.....";
                            var scriptConvert = "(function() {\r\n    function getCSRFCookie(cookieString) {\r\n        const name = \"csrftoken=\";\r\n        const decodedCookie = decodeURIComponent(cookieString);\r\n        const cookieArray = decodedCookie.split(';');\r\n        for (let i = 0; i < cookieArray.length; i++) {\r\n            let cookie = cookieArray[i].trim();\r\n            if (cookie.indexOf(name) === 0) {\r\n                return cookie.substring(name.length, cookie.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    const cookieString = document.cookie;\r\n    const csrfToken = getCSRFCookie(cookieString);\r\n\r\n    fetch(\"https://www.instagram.com/api/v1/business/account/convert_account/\", {\r\n        headers: {\r\n            \"content-type\": \"application/x-www-form-urlencoded\",\r\n            \"x-csrftoken\": csrfToken,\r\n        },\r\n        body: `category_id=180164648685982&create_business_id=true&entry_point=ig_web_settings&set_public=true&should_bypass_contact_check=true&should_show_category=0&to_account_type=2`,\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        credentials: \"include\"\r\n    }).then(response => response.json()).then(data => {\r\n        console.log(\"Done\");\r\n        console.log(data);\r\n    }).catch(error => {\r\n        console.error(\"Error:\", error);\r\n    });\r\n})();\r\n";
                            chromedriver.ExecuteScript(scriptConvert);
                            Thread.Sleep(2000);
                            chromedriver.Navigate().Refresh();
                            Thread.Sleep(2000);
                            manguon = chromedriver.PageSource;
                            isBusinessaccount = Regex.Match(manguon, "is_business_account\":(.*?),").Groups[1].Value;

                            if (isBusinessaccount == "true")
                            {
                                row.Cells["cStatus"].Value = "Bật sáng tạo Done";

                            }

                        }
                        Thread.Sleep(2000);
                        if (share_BM_IG == 1)
                        {
                            chromedriver.Navigate().Refresh();
                            Thread.Sleep(3000);

                        }



                    }
                    catch { }


                }



                row.Cells["cStatus"].Value = "REG BM....";
                chromedriver.Navigate().GoToUrl("http://business.facebook.com/");

                try
                {

                    Thread.Sleep(2000);
                    var Login_IG = chromedriver.FindElements(By.XPath("//div[4]/div/div"));
                    if (Login_IG.Count > 0)
                    {
                        // Cuộn đến phần tử
                        var element = Login_IG[1];
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(10000);
                    }




                    Thread.Sleep(15000);
                    var html1 = chromedriver.PageSource;
                    var idbm1 = "";
                    try
                    {
                        idbm1 = Regex.Match(html1, "business_id=(.*?)&").Groups[1].Value.ToString();
                    }
                    catch { }
                    if (string.IsNullOrEmpty(idbm1))
                    {
                        idbm1 = Regex.Match(html1, "asset_id=(.*?)&").Groups[1].Value.ToString();

                    }

                    if (string.IsNullOrEmpty(idbm1))
                    {
                        var originalTab = chromedriver.CurrentWindowHandle;

                        // Chuyển sang tab mới
                        chromedriver.SwitchTo().Window(chromedriver.WindowHandles[1]);

                        var url_business = chromedriver.Url;
                        if (url_business.Contains("https://www.instagram.com/accounts/suspended"))
                        {
                            row.Cells["cStatus"].Value = "282";
                            chromedriver.Close();
                            chromedriver.Quit();
                            goto next;


                        }

                        if (url_business.Contains("https://business.facebook.com/page_unavailable/"))
                        {
                            var LoginIG = chromedriver.FindElements(By.XPath("//div[1]/div[2]/a[@href='/business/loginpage/?is_null_state=true&option=IG']"));
                            if (LoginIG.Count > 0)
                            {
                                LoginIG.LastOrDefault().Click();
                                Thread.Sleep(2000);

                            }

                        }
                        else
                        {
                            var LoginasIG = chromedriver.FindElements(By.XPath("//div[4]/div[1]/div[@role='button']"));
                            if (LoginasIG.Count > 0)
                            {
                                LoginasIG.LastOrDefault().Click();
                                Thread.Sleep(2000);
                            }

                        }

                        // Quay lại tab trước đó (tab gốc)
                        chromedriver.SwitchTo().Window(originalTab);

                        Thread.Sleep(10000);
                    }


                }
                catch { }
                int x = 0;
            checkbm:

                Thread.Sleep(2000);
                var html = chromedriver.PageSource;
                var idbm = "";
                try
                {
                    idbm = Regex.Match(html, "business_id=(.*?)&").Groups[1].Value.ToString();
                }
                catch { }
                if (string.IsNullOrEmpty(idbm))
                {
                    idbm = Regex.Match(html, "asset_id=(.*?)&").Groups[1].Value.ToString();

                }
                if (string.IsNullOrEmpty(idbm))
                {
                    row.Cells["cStatus"].Value = "Đăng Nhập https://business.facebook.com/page_unavailable/ Fail";
                    var url1 = chromedriver.Url;
                    if (url1.Contains("https://business.facebook.com/page_unavailable/"))
                    {
                        check_business_page++;
                        Thread.Sleep(1000);
                        if (check_business_page == 2)
                        {
                            goto next;
                        }
                        if (check_business_page == 1)
                        {
                            goto regbm;
                        }
                    }
                    goto next;

                }

                var accessToken_EAAG = "";
                try
                {
                    Thread.Sleep(5000);
                    chromedriver.Navigate().GoToUrl("https://business.facebook.com/billing_hub");

                    html = chromedriver.PageSource;

                    accessToken_EAAG = Regex.Match(html, "init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                    if (string.IsNullOrEmpty(accessToken_EAAG))
                    {
                        MessageBox.Show("accessToken_EAAG NULL");
                        x++;
                        if (x > 2)
                        {
                            MessageBox.Show("accessToken_EAAG NULL ko vào được business");
                            goto next;
                        }
                        goto checkbm;
                    }
                    Thread.Sleep(2000);
                    row.Cells["cStatus"].Value = "Check BM....";
                    var cookiess = chromedriver.Manage().Cookies.AllCookies;
                    var cookiestring = "";
                    foreach (var cookie in cookiess)
                    {
                        cookiestring += cookie.Name + "=" + cookie.Value + ";";
                    }
                    cookiestring = cookiestring.Trim(';');

                    HttpRequest httpRequest = new HttpRequest();
                    httpRequest.AllowAutoRedirect = true;
                    httpRequest.Cookies = new CookieDictionary();
                    httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                    EnsurePostWWWLoginHDFull(httpRequest);
                    httpRequest.KeepAlive = true;
                    var cookieRaws = cookiestring.Split(';');
                    foreach (var cookieraw in cookieRaws)
                    {
                        var cookieJAr = cookieraw.Split('=');
                        try
                        {
                            httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                        }
                        catch { }
                    }

                    var checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={accessToken_EAAG}&limit=3&fields=%5B%22id%22,%22allow_page_management_in_www%22,%22business_users%7Brole%7D%22,%22sharing_eligibility_status%22,%22owned_ad_accounts.limit(1)%7Bcurrency,adtrust_dsl%7D%22,%22created_time%22,%22name%22,%20%22status%22%5D";
                    var response = httpRequest.Get(checkBM);
                    if (response.IsOK)
                    {
                        var responseSTR6 = response.ToString();
                        HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                        doc.LoadHtml(responseSTR6);
                        JObject jobject = JObject.Parse(responseSTR6);
                        var dataValues = jobject["data"];
                        if (dataValues != null)
                        {
                            var dataValuesArr = dataValues.ToObject<JArray>();
                            foreach (var itemObject in dataValuesArr)
                            {
                                var businessId = itemObject["id"].ToString();
                                var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                var createdtime = itemObject["created_time"].ToString();
                                var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                var nameBM = itemObject["name"].ToString();

                                row.Cells["cCheckBM"].Value += $"{businessId}|{typeBm}|{statusBm}|";
                                // Đổi màu chữ nếu là BM350
                                if (typeBm == "BM350")
                                {
                                    row.Cells["cCheckBM"].Style.ForeColor = Color.Red; // Đặt màu đỏ
                                }
                                else
                                {
                                    row.Cells["cCheckBM"].Style.ForeColor = Color.Black; // Mặc định màu đen
                                }

                                StreamWriter sw2 = new StreamWriter("BMCLONE.txt", true);
                                sw2.WriteLine($"{businessId}|{typeBm}|{statusBm}|" + DateTime.Now);
                                sw2.Close();


                                if (statusBm == "BM Live")
                                {
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("dpr", "0.800000011920929");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"\"");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "1334");
                                    response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_users/?global_scope_id={idbm}&business_id={idbm}&nav_ref=bizweb_biz_home_scope_selector&redirect_session_id=682002f6-727b-4b16-9b53-6d96b4f77f5b");
                                    if (response.IsOK)
                                    {
                                        var responseStr1 = response.ToString();
                                        var scriptAddThongTin = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id,\r\n    businessUserID = require(\"CurrentBusinessUser\").business_user_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsUpdateBusinessUserForIGMAMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=2g&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=cjs5u2:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48W2a4p8aHwzzXwKwt8jwGzEaE8o4-222SU5G4E5yexfwjES1xwjokGvwOwem32fwLCyKbwzwea0Lo6-3u36iU9E2cwNwDwjouwqo4e220hi7E5y1rw&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsUpdateBusinessUserForIGMAMutation&variables={{\"businessUserID\":\"${{businessUserID}}\",\"firstName\":null,\"lastName\":null,\"email\":\"akajsjss111@hotmail.com\",\"roles\":null,\"business_account_task_ids\":null,\"expireTime\":null,\"clientTimezoneID\":null,\"businessID\":\"${{businessId}}\",\"nonce\":null,\"should_send_email_notif\":null,\"entryPoint\":\"BIZWEB_SETTINGS_ADD_CONTACT_INFO_UPDATE_BUSINESS_USER_FOR_IGMA\"}}&server_timestamps=true&doc_id=6412870625471134`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                        chromedriver.ExecuteScript(scriptAddThongTin);
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);
                                        }
                                        Thread.Sleep(100);
                                        chromedriver.Navigate().Refresh();
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);
                                        }

                                        var STT = "";
                                        if (cmb_Admin_BM.InvokeRequired)
                                        {
                                            cmb_Admin_BM.Invoke(new Action(() =>
                                            {
                                                STT = cmb_Admin_BM.Text;
                                            }));
                                        }
                                        else
                                        {
                                            STT = cmb_Admin_BM.Text;
                                        }
                                        var ADMIN = "";
                                        if (STT == "Quyền Admin")
                                        {
                                            ADMIN = "ADMIN";
                                        }
                                        if (STT == "Quyền Nhân Viên")
                                        {
                                            ADMIN = "EMPLOYEE";
                                        }
                                        var hotmail_mailmoakt = "";
                                        row.Cells["cStatus"].Value = "Share BM....";
                                        if (cmb_MAIL_SHARE_BM_IG.InvokeRequired)
                                        {
                                            cmb_MAIL_SHARE_BM_IG.Invoke(new Action(() =>
                                            {
                                                hotmail_mailmoakt = cmb_MAIL_SHARE_BM_IG.Text;
                                            }));


                                        }
                                        if (hotmail_mailmoakt == "HOTMAIL")
                                        {

                                            List<string> Mail = new List<string>();

                                            if (rtb_hotmail.InvokeRequired)
                                            {
                                                rtb_hotmail.Invoke(new Action(() =>
                                                {
                                                    Mail = rtb_hotmail.Lines.ToList();
                                                }));
                                            }
                                            var rnd = new Random();


                                            var hotmail_pass = Mail[rnd.Next(Mail.Count)].ToString();

                                            var mail_backup = hotmail_pass.Split('|')[0].ToString();
                                            row.Cells["cStatus"].Value = $"Share BM {idbm} => {mail_backup}";
                                            var usernamemail = mail_backup.Split('@')[0].ToString();
                                            var domain = mail_backup.Split('@')[1].ToString();

                                            var list_kt = File.ReadAllLines("kytuhotmail.txt").ToList();
                                            Random rd = new Random();
                                            var index = rd.Next(0, list_kt.Count);
                                            var kt = list_kt[index];

                                            var mail_share = usernamemail + "%2B" + kt + businessId + "@" + domain;

                                            var scriptInvite = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsInvitePeopleModalMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=6s&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=m2vooy:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmwoEeogzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiF-3a0Voc8-2-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1FwgU88158uwm85K&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&qpl_active_flow_ids=558499583&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsInvitePeopleModalMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"${{uid}}\",\"business_id\":\"${{businessId}}\",\"business_emails\":[\"{mail_share}\"],\"business_account_task_ids\":[\"926381894526285\",\"603931664885191\",\"1327662214465567\",\"862159105082613\",\"6161001899617846786\",\"1633404653754086\",\"967306614466178\",\"2848818871965443\",\"245181923290198\",\"388517145453246\"],\"invite_origin_surface\":\"MBS_INVITE_USER_FLOW\",\"assets\":[],\"expiry_time\":0,\"is_spark_permission\":false,\"client_timezone_id\":\"Asia/Jakarta\"}}}}&server_timestamps=true&doc_id=23919966164285762&fb_api_analytics_tags=[\"qpl_active_flow_ids=558499583\"]`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);
                                            }
                                            var resultInvite = chromedriver.ExecuteScript(scriptInvite);
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);
                                            }
                                            Thread.Sleep(1000);
                                            if (resultInvite != null)
                                            {
                                                var resultInviteText = resultInvite.ToString();
                                                if (resultInviteText.Contains("errors"))
                                                {
                                                    row.Cells["cStatus"].Value = "MOI THAT BAI";
                                                }

                                                chromedriver.Navigate().Refresh();

                                            }
                                            else
                                            {
                                                row.Cells["cStatus"].Value = "MOI THANH CONG";
                                                Thread.Sleep(1000);
                                                row.Cells["cStatus"].Value = $"Share BM {idbm} => {mail_backup} DONE";
                                                chromedriver.Navigate().Refresh();
                                                share_BM_IG++;
                                                if (share_BM_IG == 3)
                                                {
                                                    chromedriver.Close();
                                                    chromedriver.Quit();
                                                    goto next;

                                                }
                                            }

                                        }
                                        else
                                        {
                                            HttpRequest httprequest_Mail_MOAKT = new HttpRequest();
                                            httprequest_Mail_MOAKT.Cookies = new CookieDictionary();
                                            httprequest_Mail_MOAKT.KeepAlive = true;
                                            httprequest_Mail_MOAKT.AllowAutoRedirect = true;
                                            httprequest_Mail_MOAKT.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                                            var mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                            if (string.IsNullOrEmpty(mail_share))
                                            {
                                                mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                            }

                                            var scriptInvite = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsInvitePeopleModalMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=6s&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=m2vooy:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmwoEeogzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiF-3a0Voc8-2-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1FwgU88158uwm85K&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&qpl_active_flow_ids=558499583&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsInvitePeopleModalMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"${{uid}}\",\"business_id\":\"${{businessId}}\",\"business_emails\":[\"{mail_share}\"],\"business_account_task_ids\":[\"926381894526285\",\"603931664885191\",\"1327662214465567\",\"862159105082613\",\"6161001899617846786\",\"1633404653754086\",\"967306614466178\",\"2848818871965443\",\"245181923290198\",\"388517145453246\"],\"invite_origin_surface\":\"MBS_INVITE_USER_FLOW\",\"assets\":[],\"expiry_time\":0,\"is_spark_permission\":false,\"client_timezone_id\":\"Asia/Jakarta\"}}}}&server_timestamps=true&doc_id=23919966164285762&fb_api_analytics_tags=[\"qpl_active_flow_ids=558499583\"]`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);
                                            }
                                            var resultInvite = chromedriver.ExecuteScript(scriptInvite);
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);
                                            }
                                            Thread.Sleep(1000);
                                            if (resultInvite != null)
                                            {
                                                var resultInviteText = resultInvite.ToString();
                                                if (resultInviteText.Contains("errors"))
                                                {
                                                    row.Cells["cStatus"].Value = "MOI THAT BAI";

                                                }

                                            }
                                            else
                                            {
                                                row.Cells["cStatus"].Value = "MOI THANH CONG";
                                            }



                                            var link = link_moakt(httprequest_Mail_MOAKT);
                                            if (string.IsNullOrEmpty(link))
                                            {
                                                Thread.Sleep(2000);
                                                link = link_moakt(httprequest_Mail_MOAKT);

                                            }
                                            if (!string.IsNullOrEmpty(link))
                                            {

                                                if (rtb_Link_BM_IG.InvokeRequired)
                                                {
                                                    rtb_Link_BM_IG.Invoke(new Action(() =>
                                                    {
                                                        rtb_Link_BM_IG.AppendText(businessId + "|" + link + Environment.NewLine);

                                                    }));
                                                }
                                                row.Cells["cStatus"].Value = $"SHARE BM {businessId} DONE";
                                                chromedriver.Navigate().Refresh();
                                                share_BM_IG++;
                                                if (share_BM_IG == 3)
                                                {
                                                    chromedriver.Close();
                                                    chromedriver.Quit();
                                                    goto next;

                                                }


                                            }
                                            else
                                            {
                                                row.Cells["cStatus"].Value = $"SHARE BM {businessId} FAIL";
                                                chromedriver.Navigate().Refresh();

                                            }
                                        }

                                    }


                                }
                                else
                                {
                                    row.Cells["cStatus"].Value = $"BM {businessId} DIE";
                                }






                            }
                        }
                    }
                    else
                    {
                        row.Cells["cStatus"].Value = $"Check BM FAIL ......";
                        goto checkbm;

                    }
                }
                catch
                {
                    row.Cells["cStatus"].Value = $"Check BM FAIL ......";
                    goto checkbm;
                }




                try
                {
                    var CHECK_ADMIN = "";
                    if (cmb_CHECK_ADMIN.InvokeRequired)
                    {
                        cmb_CHECK_ADMIN.Invoke(new Action(() =>
                        {
                            CHECK_ADMIN = cmb_CHECK_ADMIN.Text;
                        }));

                    }
                    if (CHECK_ADMIN == "ON")
                    {
                        CHECK_ADMIN_BM_IG(chromedriver, row, accessToken_EAAG);
                        goto regbm;
                    }




                }
                catch { }


            next:
                Thread.Sleep(1);

            }
            catch { }
        }


        private async void rEGBM2025ToolStripMenuItem_Click(object sender, EventArgs e)
        {
            i = 0; x = 0; c = 0; k = 0;

            var semaphore = new SemaphoreSlim(5); // Tối đa 5 task chạy song song
            var tasks = new List<Task>();
            foreach (DataGridViewRow row in dgv1.Rows)
            {
                var select = row.Cells["cSelect"].Value;

                if (select != null && (bool)select)
                {
                    try
                    {
                        isStop = false;



                        var CHUC_NANG = "";
                        if (cmb_Chuc_Nang.InvokeRequired)
                        {
                            cmb_Chuc_Nang.Invoke(new Action(() =>
                            {
                                CHUC_NANG = cmb_Chuc_Nang.Text;

                            }));
                        }
                        else
                        {
                            CHUC_NANG = cmb_Chuc_Nang.Text;
                        }

                        await semaphore.WaitAsync(); // Chờ nếu đang có 5 task hoạt động

                        var rowCopy = row; // để tránh lỗi capture biến trong vòng lặp


                        var task = Task.Run(() =>
                        {
                            try
                            {
                                var username = row.Cells[1].Value.ToString();
                                var pass = row.Cells[2].Value.ToString();
                                var cookie = row.Cells[3].Value.ToString();
                                var mail = row.Cells[4].Value.ToString();
                                var passmail = row.Cells[5].Value.ToString();
                                var mailkhoiphuc = row.Cells[6].Value.ToString();

                        
                                if (CHUC_NANG == "REG_BM_IG_2025")
                                {
                                    REG_BM_2025_NEW(row, username, pass, cookie, mail, passmail, mailkhoiphuc,"");
                                }


                                if (CHUC_NANG == "REG_BM_IG_2025")
                                {
                                    Thread.Sleep(3000);
                                }
                              

                            }
                            catch { }
                            finally
                            {
                                semaphore.Release(); // Giải phóng slot sau khi chạy xong
                            }     

                        });
                        tasks.Add(task);
                    }
                    catch { }





                }
            }
            await Task.WhenAll(tasks); // Chờ tất cả task hoàn thành
        }

        private void REG_BM_2025_NEW1(DataGridViewRow row, string username, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            string profilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Profiles", username);
            ChromeDriver chromedriver = null;
            try
            {
                int share_BM_IG = 0;
                int check_business_page = 0;
            login:
                chromedriver = Createchromedrive_IG_NEW(profilePath);

                try
                {
                   

                    Thread.Sleep(2000);
                    //var chromedriver = Createchromedrive();
                    chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                    row.Cells["cStatus"].Value = "Login.....";
                    var cookieRaw = c2FAvsCookie.Split(';');
                    foreach (var cookieItem in cookieRaw)
                    {
                        try
                        {
                            var cookieJar = cookieItem.Split('=');

                            Cookie cookieChrome = new Cookie(cookieJar[0].Trim(), cookieJar[1].Trim(), "instagram.com", "/", DateTime.Now.AddDays(10));
                            chromedriver.Manage().Cookies.AddCookie(cookieChrome);
                        }
                        catch { }
                    }
                    chromedriver.Navigate().Refresh();
                    chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                    Thread.Sleep(5000);
                    if (chromedriver.Url.Contains("https://www.instagram.com/accounts/suspended"))
                    {
                        row.Cells["cStatus"].Value = "282";
                        chromedriver.Close();
                        chromedriver.Quit();
                        goto next;
                    }
                    else
                    {
                        lstDataChromeIG.Add(chromedriver, new AccountData1 { Row1 = row, User1 = username });
                        row.Cells["cStatus"].Value = "Login DONE";
                    }

                }
                catch { }
     
            regbm:

                var on_off_sang_tao = "";
                if (cmb_TAT_BAT_SANG_TAO.InvokeRequired)
                {
                    cmb_TAT_BAT_SANG_TAO.Invoke(new Action(() =>
                    {
                        on_off_sang_tao = cmb_TAT_BAT_SANG_TAO.Text;
                    }));

                }
                if (on_off_sang_tao == "ON")
                {

                    try
                    {

                        chromedriver.Navigate().GoToUrl("https://www.instagram.com/accounts/convert_to_professional_account/");
                        Thread.Sleep(5000);
                        var url282 = chromedriver.Url;
                        if (url282.Contains("https://www.instagram.com/accounts/suspended"))
                        {
                            row.Cells["cStatus"].Value = "282";
                            goto next;
                        }

                        var manguon = chromedriver.PageSource;
                        var isBusinessaccount = Regex.Match(manguon, "is_business_account\":(.*?),").Groups[1].Value;
                        if (isBusinessaccount == "true")
                        {
                            row.Cells["cStatus"].Value = " Tắt sáng tạo.....";

                            var scriptSwitch = $"(function() {{\r\n    function getCSRFCookie(cookieString) {{\r\n        const name = \"csrftoken=\";\r\n        const decodedCookie = decodeURIComponent(cookieString);\r\n        const cookieArray = decodedCookie.split(';');\r\n        for (let i = 0; i < cookieArray.length; i++) {{\r\n            let cookie = cookieArray[i].trim();\r\n            if (cookie.indexOf(name) === 0) {{\r\n                return cookie.substring(name.length, cookie.length);\r\n            }}\r\n        }}\r\n        return \"\";\r\n    }}\r\n\r\n    const cookieString = document.cookie;\r\n    const csrfToken = getCSRFCookie(cookieString);\r\n\r\n    fetch(\"https://www.instagram.com/api/v1/business/account/convert_account/\", {{\r\n        headers: {{\r\n            \"content-type\": \"application/x-www-form-urlencoded\",\r\n            \"x-csrftoken\": csrfToken,\r\n        }},\r\n        body: `entry_point=ig_web_settings&to_account_type=1`,\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        credentials: \"include\"\r\n    }}).then(response => response.json()).then(data => {{\r\n        console.log(\"Done\");\r\n        console.log(data);\r\n    }}).catch(error => {{\r\n        console.error(\"Error:\", error);\r\n    }});\r\n}})();\r\n";
                            Thread.Sleep(2000);
                            chromedriver.ExecuteScript(scriptSwitch);
                            Thread.Sleep(2000);
                            chromedriver.Navigate().Refresh();

                            manguon = chromedriver.PageSource;
                            isBusinessaccount = Regex.Match(manguon, "is_business_account\":(.*?),").Groups[1].Value;
                            if (isBusinessaccount == "false")
                            {
                                row.Cells["cStatus"].Value = "Tắt sáng tạo Done";


                            }
                        }

                        Thread.Sleep(5000);
                        manguon = chromedriver.PageSource;
                        isBusinessaccount = Regex.Match(manguon, "is_business_account\":(.*?),").Groups[1].Value;
                        if (isBusinessaccount == "false")
                        {
                            row.Cells["cStatus"].Value = "Bật sáng tạo.....";
                            var scriptConvert = "(function() {\r\n    function getCSRFCookie(cookieString) {\r\n        const name = \"csrftoken=\";\r\n        const decodedCookie = decodeURIComponent(cookieString);\r\n        const cookieArray = decodedCookie.split(';');\r\n        for (let i = 0; i < cookieArray.length; i++) {\r\n            let cookie = cookieArray[i].trim();\r\n            if (cookie.indexOf(name) === 0) {\r\n                return cookie.substring(name.length, cookie.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    const cookieString = document.cookie;\r\n    const csrfToken = getCSRFCookie(cookieString);\r\n\r\n    fetch(\"https://www.instagram.com/api/v1/business/account/convert_account/\", {\r\n        headers: {\r\n            \"content-type\": \"application/x-www-form-urlencoded\",\r\n            \"x-csrftoken\": csrfToken,\r\n        },\r\n        body: `category_id=180164648685982&create_business_id=true&entry_point=ig_web_settings&set_public=true&should_bypass_contact_check=true&should_show_category=0&to_account_type=2`,\r\n        method: \"POST\",\r\n        mode: \"cors\",\r\n        credentials: \"include\"\r\n    }).then(response => response.json()).then(data => {\r\n        console.log(\"Done\");\r\n        console.log(data);\r\n    }).catch(error => {\r\n        console.error(\"Error:\", error);\r\n    });\r\n})();\r\n";
                            chromedriver.ExecuteScript(scriptConvert);
                            Thread.Sleep(2000);
                            chromedriver.Navigate().Refresh();
                            Thread.Sleep(2000);
                            manguon = chromedriver.PageSource;
                            isBusinessaccount = Regex.Match(manguon, "is_business_account\":(.*?),").Groups[1].Value;

                            if (isBusinessaccount == "true")
                            {
                                row.Cells["cStatus"].Value = "Bật sáng tạo Done";

                            }

                        }
                        Thread.Sleep(2000);
                        if (share_BM_IG == 1)
                        {
                            chromedriver.Navigate().Refresh();
                            Thread.Sleep(3000);
                       
                        }



                    }
                    catch { }


                }



                row.Cells["cStatus"].Value = "REG BM....";
                chromedriver.Navigate().GoToUrl("https://business.facebook.com/business/loginpage/?next=https%3A%2F%2Fbusiness.facebook.com%2F%3Fnav_ref%3Dbiz_unified_f3_login_page_to_mbs&login_options%5B0%5D=FB&login_options%5B1%5D=IG&login_options%5B2%5D=SSO&config_ref=biz_login_tool_flavor_mbs");

                try
                {

                    Thread.Sleep(2000);
                    var Login_IG = chromedriver.FindElements(By.XPath("//div[4]/div/div[@role='button']"));
                    if (Login_IG.Count > 0)
                    {
                        // Cuộn đến phần tử
                        var element = Login_IG.LastOrDefault();
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(10000);
                    }




                    Thread.Sleep(15000);
                    var html1 = chromedriver.PageSource;
                    var idbm1 = "";
                    try
                    {
                        idbm1 = Regex.Match(html1, "business_id=(.*?)&").Groups[1].Value.ToString();
                    }
                    catch { }
                    if (string.IsNullOrEmpty(idbm1))
                    {
                        idbm1 = Regex.Match(html1, "asset_id=(.*?)&").Groups[1].Value.ToString();

                    }

                    if (string.IsNullOrEmpty(idbm1))
                    {
                        var originalTab = chromedriver.CurrentWindowHandle;

                        // Chuyển sang tab mới
                        chromedriver.SwitchTo().Window(chromedriver.WindowHandles[1]);

                        var url_business = chromedriver.Url;
                        if (url_business.Contains("https://www.instagram.com/accounts/suspended"))
                        {
                            row.Cells["cStatus"].Value = "282";
                            chromedriver.Close();
                            chromedriver.Quit();
                            goto next;


                        }

                        if (url_business.Contains("https://business.facebook.com/page_unavailable/"))
                        {
                            var LoginIG = chromedriver.FindElements(By.XPath("//div[1]/div[2]/a[@href='/business/loginpage/?is_null_state=true&option=IG']"));
                            if (LoginIG.Count > 0)
                            {
                                LoginIG.LastOrDefault().Click();
                                Thread.Sleep(2000);

                            }

                        }
                        else
                        {
                            var LoginasIG = chromedriver.FindElements(By.XPath("//div[4]/div[1]/div[@role='button']"));
                            if (LoginasIG.Count > 0)
                            {
                                LoginasIG.LastOrDefault().Click();
                                Thread.Sleep(2000);
                            }

                        }

                        // Quay lại tab trước đó (tab gốc)
                        chromedriver.SwitchTo().Window(originalTab);

                        Thread.Sleep(10000);
                    }


                }
                catch { }
                int x = 0;
            checkbm:
            
                Thread.Sleep(2000);
                var html = chromedriver.PageSource;
                var idbm = "";
                try
                {
                    idbm = Regex.Match(html, "business_id=(.*?)&").Groups[1].Value.ToString();
                }
                catch { }
                if (string.IsNullOrEmpty(idbm))
                {
                    idbm = Regex.Match(html, "asset_id=(.*?)&").Groups[1].Value.ToString();

                }
                if (string.IsNullOrEmpty(idbm))
                {
                    row.Cells["cStatus"].Value = "Đăng Nhập https://business.facebook.com/page_unavailable/ Fail";
                    var url1 = chromedriver.Url;
                    if (url1.Contains("https://business.facebook.com/page_unavailable/")
                        || url1.Contains("https://business.facebook.com/out_of_scope_redirect/?in_business_subdomain=1&out_of_scope_page_type=default"))
                    {
                        check_business_page++;
                        Thread.Sleep(2000);
                        if (check_business_page > 2)
                        {
                            try
                            {
                                chromedriver.Close();
                                chromedriver.Quit();
                            }
                            catch { }
                            Thread.Sleep(2000);
                            goto next;
                        }
                        try
                        {
                            chromedriver.Close();
                            chromedriver.Quit();
                        }
                        catch { }

                        goto login;
                    }

                }
                var url2 = chromedriver.Url;
                if (url2.Contains("https://business.facebook.com/page_unavailable/")
                    || url2.Contains("https://business.facebook.com/out_of_scope_redirect/?in_business_subdomain=1&out_of_scope_page_type=default"))
                {
                    check_business_page++;
                    if (check_business_page > 1)
                    {
                        try
                        {
                            chromedriver.Close();
                            chromedriver.Quit();
                        }
                        catch { }
                        Thread.Sleep(2000);
                        goto next;
                    }
                    try
                    {
                        chromedriver.Close();
                        chromedriver.Quit();
                    }
                    catch { }
                    Thread.Sleep(2000);
                    goto login;
                }
                var accessToken_EAAG = "";
                try
                {
                    Thread.Sleep(5000);
                    chromedriver.Navigate().GoToUrl("https://business.facebook.com/billing_hub");
            

                    html = chromedriver.PageSource;

                    accessToken_EAAG = Regex.Match(html, "init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                    if (string.IsNullOrEmpty(accessToken_EAAG))
                    {
                        //MessageBox.Show("accessToken_EAAG NULL");
                        row.Cells["cStatus"].Value = "accessToken_EAAG NULL";
                        x++;
                        if (x > 2)
                        {
                            //MessageBox.Show("accessToken_EAAG NULL ko vào được business");
                            row.Cells["cStatus"].Value = "accessToken_EAAG NULL ko vào được businessL";
                            try
                            {
                                chromedriver.Close();
                                chromedriver.Quit();
                            }
                            catch { }
                            Thread.Sleep(2000);
                            goto login;
                        }
                        goto checkbm;
                    }
                    Thread.Sleep(2000);
                    row.Cells["cStatus"].Value = "Check BM....";
                    var cookiess = chromedriver.Manage().Cookies.AllCookies;
                    var cookiestring = "";
                    foreach (var cookie in cookiess)
                    {
                        cookiestring += cookie.Name + "=" + cookie.Value + ";";
                    }
                    cookiestring = cookiestring.Trim(';');

                    HttpRequest httpRequest = new HttpRequest();
                    httpRequest.AllowAutoRedirect = true;
                    httpRequest.Cookies = new CookieDictionary();
                    httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                    EnsurePostWWWLoginHDFull(httpRequest);
                    httpRequest.KeepAlive = true;
                    var cookieRaws = cookiestring.Split(';');
                    foreach (var cookieraw in cookieRaws)
                    {
                        var cookieJAr = cookieraw.Split('=');
                        try
                        {
                            httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                        }
                        catch { }
                    }

                    var checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={accessToken_EAAG}&limit=3&fields=%5B%22id%22,%22allow_page_management_in_www%22,%22business_users%7Brole%7D%22,%22sharing_eligibility_status%22,%22owned_ad_accounts.limit(1)%7Bcurrency,adtrust_dsl%7D%22,%22created_time%22,%22name%22,%20%22status%22%5D";
                    var response = httpRequest.Get(checkBM);
                    if (response.IsOK)
                    {
                        var responseSTR6 = response.ToString();
                        HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                        doc.LoadHtml(responseSTR6);
                        JObject jobject = JObject.Parse(responseSTR6);
                        var dataValues = jobject["data"];
                        if (dataValues != null)
                        {
                            var dataValuesArr = dataValues.ToObject<JArray>();
                            foreach (var itemObject in dataValuesArr)
                            {
                                var businessId = itemObject["id"].ToString();
                                var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                var createdtime = itemObject["created_time"].ToString();
                                var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                var nameBM = itemObject["name"].ToString();

                                row.Cells["cCheckBM"].Value += $"{businessId}|{typeBm}|{statusBm}|";
                                // Đổi màu chữ nếu là BM350
                                if (typeBm == "BM350")
                                {
                                    row.Cells["cCheckBM"].Style.ForeColor = Color.Red; // Đặt màu đỏ
                                }
                                else
                                {
                                    row.Cells["cCheckBM"].Style.ForeColor = Color.Black; // Mặc định màu đen
                                }

                                StreamWriter sw2 = new StreamWriter("BMCLONE.txt", true);
                                sw2.WriteLine($"{businessId}|{typeBm}|{statusBm}|" + DateTime.Now);
                                sw2.Close();


                                if (statusBm == "BM Live")
                                {
                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("dpr", "0.800000011920929");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"\"");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "1334");
                                    response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_users/?global_scope_id={idbm}&business_id={idbm}&nav_ref=bizweb_biz_home_scope_selector&redirect_session_id=682002f6-727b-4b16-9b53-6d96b4f77f5b");
                                    if (response.IsOK)
                                    {
                                        var responseStr1 = response.ToString();
                                        var scriptAddThongTin = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id,\r\n    businessUserID = require(\"CurrentBusinessUser\").business_user_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsUpdateBusinessUserForIGMAMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=2g&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=cjs5u2:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48W2a4p8aHwzzXwKwt8jwGzEaE8o4-222SU5G4E5yexfwjES1xwjokGvwOwem32fwLCyKbwzwea0Lo6-3u36iU9E2cwNwDwjouwqo4e220hi7E5y1rw&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsUpdateBusinessUserForIGMAMutation&variables={{\"businessUserID\":\"${{businessUserID}}\",\"firstName\":null,\"lastName\":null,\"email\":\"akajsjss111@hotmail.com\",\"roles\":null,\"business_account_task_ids\":null,\"expireTime\":null,\"clientTimezoneID\":null,\"businessID\":\"${{businessId}}\",\"nonce\":null,\"should_send_email_notif\":null,\"entryPoint\":\"BIZWEB_SETTINGS_ADD_CONTACT_INFO_UPDATE_BUSINESS_USER_FOR_IGMA\"}}&server_timestamps=true&doc_id=6412870625471134`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                        chromedriver.ExecuteScript(scriptAddThongTin);
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);
                                        }
                                        Thread.Sleep(100);
                                        chromedriver.Navigate().Refresh();
                                        while (isStop)
                                        {
                                            Thread.Sleep(1000);
                                        }

                                        var STT = "";
                                        if (cmb_Admin_BM.InvokeRequired)
                                        {
                                            cmb_Admin_BM.Invoke(new Action(() =>
                                            {
                                                STT = cmb_Admin_BM.Text;
                                            }));
                                        }
                                        else
                                        {
                                            STT = cmb_Admin_BM.Text;
                                        }
                                        var ADMIN = "";
                                        if (STT == "Quyền Admin")
                                        {
                                            ADMIN = "ADMIN";
                                        }
                                        if (STT == "Quyền Nhân Viên")
                                        {
                                            ADMIN = "EMPLOYEE";
                                        }
                                        var hotmail_mailmoakt = "";
                                        row.Cells["cStatus"].Value = "Share BM....";
                                        if (cmb_MAIL_SHARE_BM_IG.InvokeRequired)
                                        {
                                            cmb_MAIL_SHARE_BM_IG.Invoke(new Action(() =>
                                            {
                                                hotmail_mailmoakt = cmb_MAIL_SHARE_BM_IG.Text;
                                            }));


                                        }
                                        if (hotmail_mailmoakt == "HOTMAIL")
                                        {

                                            List<string> Mail = new List<string>();

                                            if (rtb_hotmail.InvokeRequired)
                                            {
                                                rtb_hotmail.Invoke(new Action(() =>
                                                {
                                                    Mail = rtb_hotmail.Lines.ToList();
                                                }));
                                            }
                                            var rnd = new Random();


                                            var hotmail_pass = Mail[rnd.Next(Mail.Count)].ToString();

                                            var mail_backup = hotmail_pass.Split('|')[0].ToString();
                                            row.Cells["cStatus"].Value = $"Share BM {idbm} => {mail_backup}";
                                            var usernamemail = mail_backup.Split('@')[0].ToString();
                                            var domain = mail_backup.Split('@')[1].ToString();

                                            var list_kt = File.ReadAllLines("kytuhotmail.txt").ToList();
                                            Random rd = new Random();
                                            var index = rd.Next(0, list_kt.Count);
                                            var kt = list_kt[index];
                                            var mail_share = "";
                                         
                                            if (share_BM_IG == 2)
                                            {
                                                if (typeBm == "BM350")
                                                {
                                                    mail_share = usernamemail + "%2B" + "_BMB" + businessId + "@" + domain;
                                                }
                                                else
                                                {
                                                    mail_share = usernamemail + "%2B" + "_BMIII" + businessId + "@" + domain;
                                                }
                                               

                                            }
                                            else
                                            {
                                                if (typeBm == "BM350")
                                                {
                                                    mail_share = usernamemail + "%2B" + "_BMA" + businessId + "@" + domain;
                                                }
                                                else
                                                {
                                                    mail_share = usernamemail + "%2B" + kt + businessId + "@" + domain;
                                                }

                                            }
                                          
                                        
                                            var scriptInvite = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsInvitePeopleModalMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=6s&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=m2vooy:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmwoEeogzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiF-3a0Voc8-2-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1FwgU88158uwm85K&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&qpl_active_flow_ids=558499583&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsInvitePeopleModalMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"${{uid}}\",\"business_id\":\"${{businessId}}\",\"business_emails\":[\"{mail_share}\"],\"business_account_task_ids\":[\"926381894526285\",\"603931664885191\",\"1327662214465567\",\"862159105082613\",\"6161001899617846786\",\"1633404653754086\",\"967306614466178\",\"2848818871965443\",\"245181923290198\",\"388517145453246\"],\"invite_origin_surface\":\"MBS_INVITE_USER_FLOW\",\"assets\":[],\"expiry_time\":0,\"is_spark_permission\":false,\"client_timezone_id\":\"Asia/Jakarta\"}}}}&server_timestamps=true&doc_id=23919966164285762&fb_api_analytics_tags=[\"qpl_active_flow_ids=558499583\"]`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);
                                            }
                                            var resultInvite = chromedriver.ExecuteScript(scriptInvite);
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);
                                            }
                                            Thread.Sleep(1000);
                                            if (resultInvite != null)
                                            {
                                                var resultInviteText = resultInvite.ToString();
                                                if (resultInviteText.Contains("errors"))
                                                {
                                                    row.Cells["cStatus"].Value = "MOI THAT BAI";
                                                }

                                                chromedriver.Navigate().Refresh();

                                            }
                                            else
                                            {
                                                row.Cells["cStatus"].Value = "MOI THANH CONG";
                                                Thread.Sleep(1000);
                                                row.Cells["cStatus"].Value = $"Share BM {idbm} => {mail_backup} DONE";
                                                chromedriver.Navigate().Refresh();
                                                share_BM_IG++;
                                                if (share_BM_IG == 3)
                                                {
                                                    chromedriver.Close();
                                                    chromedriver.Quit();
                                                    goto next;

                                                }
                                            }

                                        }
                                        else
                                        {
                                            HttpRequest httprequest_Mail_MOAKT = new HttpRequest();
                                            httprequest_Mail_MOAKT.Cookies = new CookieDictionary();
                                            httprequest_Mail_MOAKT.KeepAlive = true;
                                            httprequest_Mail_MOAKT.AllowAutoRedirect = true;
                                            httprequest_Mail_MOAKT.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                                            var mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                            if (string.IsNullOrEmpty(mail_share))
                                            {
                                                mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                            }

                                            var scriptInvite = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsInvitePeopleModalMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=6s&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=m2vooy:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmwoEeogzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiF-3a0Voc8-2-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1FwgU88158uwm85K&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&qpl_active_flow_ids=558499583&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsInvitePeopleModalMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"${{uid}}\",\"business_id\":\"${{businessId}}\",\"business_emails\":[\"{mail_share}\"],\"business_account_task_ids\":[\"926381894526285\",\"603931664885191\",\"1327662214465567\",\"862159105082613\",\"6161001899617846786\",\"1633404653754086\",\"967306614466178\",\"2848818871965443\",\"245181923290198\",\"388517145453246\"],\"invite_origin_surface\":\"MBS_INVITE_USER_FLOW\",\"assets\":[],\"expiry_time\":0,\"is_spark_permission\":false,\"client_timezone_id\":\"Asia/Jakarta\"}}}}&server_timestamps=true&doc_id=23919966164285762&fb_api_analytics_tags=[\"qpl_active_flow_ids=558499583\"]`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);
                                            }
                                            var resultInvite = chromedriver.ExecuteScript(scriptInvite);
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);
                                            }
                                            Thread.Sleep(1000);
                                            if (resultInvite != null)
                                            {
                                                var resultInviteText = resultInvite.ToString();
                                                if (resultInviteText.Contains("errors"))
                                                {
                                                    row.Cells["cStatus"].Value = "MOI THAT BAI";

                                                }

                                            }
                                            else
                                            {
                                                row.Cells["cStatus"].Value = "MOI THANH CONG";
                                            }



                                            var link = link_moakt(httprequest_Mail_MOAKT);
                                            if (string.IsNullOrEmpty(link))
                                            {
                                                Thread.Sleep(2000);
                                                link = link_moakt(httprequest_Mail_MOAKT);

                                            }
                                            if (!string.IsNullOrEmpty(link))
                                            {

                                                if (rtb_Link_BM_IG.InvokeRequired)
                                                {
                                                    rtb_Link_BM_IG.Invoke(new Action(() =>
                                                    {
                                                        rtb_Link_BM_IG.AppendText(businessId + "|" + link + Environment.NewLine);

                                                    }));
                                                }
                                                row.Cells["cStatus"].Value = $"SHARE BM {businessId} DONE";
                                                chromedriver.Navigate().Refresh();
                                                share_BM_IG++;
                                                if (share_BM_IG == 3)
                                                {
                                                    chromedriver.Close();
                                                    chromedriver.Quit();
                                                    goto next;

                                                }


                                            }
                                            else
                                            {
                                                row.Cells["cStatus"].Value = $"SHARE BM {businessId} FAIL";
                                                chromedriver.Navigate().Refresh();

                                            }
                                        }

                                    }


                                }
                                else
                                {
                                    row.Cells["cStatus"].Value = $"BM {businessId} DIE";
                                    goto next;
                                }






                            }
                        }
                    }
                    else
                    {
                        row.Cells["cStatus"].Value = $"Check BM FAIL ......";
                        goto checkbm;

                    }
                }
                catch
                {
                    row.Cells["cStatus"].Value = $"Check BM FAIL ......";
                    goto checkbm;
                }
                try
                {
                    var CHECK_ADMIN = "";
                    if (cmb_CHECK_ADMIN.InvokeRequired)
                    {
                        cmb_CHECK_ADMIN.Invoke(new Action(() =>
                        {
                            CHECK_ADMIN = cmb_CHECK_ADMIN.Text;
                        }));

                    }
                    if (CHECK_ADMIN == "ON")
                    {
                        CHECK_ADMIN_BM_IG(chromedriver, row, accessToken_EAAG);
                        goto regbm;
                    }




                }
                catch { }


            next:
                Thread.Sleep(1);

            }
            catch { }
            finally
            {
                if (chromedriver != null)
                {
                    try
                    {
                        chromedriver.Quit();
                    }
                    catch { }
                    WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                    if (Directory.Exists(profilePath))
                    {
                        try
                        {
                            Directory.Delete(profilePath, true);
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Failed to delete profile {username}: {ex.Message}");
                        }
                    }
                }
            }
        }

        // CHECK ADMIN IG
        private void CHECK_ADMIN_BM_IG(ChromeDriver chromedriver , DataGridViewRow row  , string token_EEAB)
        {
        checkadmin:
            try
            {

          
                int delay = (int)delay_check_admin.Value;
                Thread.Sleep(TimeSpan.FromSeconds(delay));

                chromedriver.Navigate().Refresh();
                Thread.Sleep(1000);
                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                var cookiestring = "";
                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }
                cookiestring = cookiestring.Trim(';');
                HttpRequest httpRequest = new HttpRequest();
                httpRequest.AllowAutoRedirect = true;
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                httpRequest.KeepAlive = true;
                var cookieRaws = cookiestring.Split(';');
                foreach (var cookieraw in cookieRaws)
                {
                    var cookieJAr = cookieraw.Split('=');
                    try
                    {
                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                    }
                    catch { }
                }
                httpRequest.AddHeader("authority", "adsmanager.facebook.com");
                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httpRequest.AddHeader("cache-control", "max-age=0");
                httpRequest.AddHeader("dpr", "0.800000011920929");
                httpRequest.AddHeader("priority", "u=0, i");
                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                httpRequest.AddHeader("sec-fetch-dest", "document");
                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                httpRequest.AddHeader("sec-fetch-user", "?1");
                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                httpRequest.AddHeader("viewport-width", "1411");

                row.Cells["cStatus"].Value = "Check ADMIN BM.....";
    
                var checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={token_EEAB}&limit=3&fields=id,name,created_time,status,business_users{{role,id,name}},owned_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}},shared_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}},sharing_eligibility_status,allow_page_management_in_www";

                List<string> ADMIN = new List<string>();

                var response = httpRequest.Get(checkBM);
                if (response.IsOK)
                {
                    var responseSTR6 = response.ToString();
                    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                    doc.LoadHtml(responseSTR6);
                    JObject jobject = JObject.Parse(responseSTR6);
                    var dataValues = jobject["data"];
                    if (dataValues != null)
                    {
                        var dataValuesArr = dataValues.ToObject<JArray>();
                        foreach (var itemObject in dataValuesArr)
                        {
                            ADMIN = new List<string>();
                            var businessId = itemObject["id"].ToString();
                            var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                            var createdtime = itemObject["created_time"].ToString();
                            var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                            var business_users = itemObject["business_users"]?["data"];
                            var nameBM = itemObject["name"].ToString();
                            var userName = "";
                            if (business_users != null)
                            {
                                var businessUsersArr = business_users.ToObject<JArray>();
                                foreach (var userObject in businessUsersArr)
                                {
                                    try
                                    {
                                        var role = userObject["role"]?.ToString();
                                        var userId = userObject["id"]?.ToString();
                                        userName = userObject["name"]?.ToString();
                                        ADMIN.Add(userName);
                                    }
                                    catch { }
                                 
                                }


                                row.Cells["cStatus"].Value = $"ADMIN {ADMIN.Count}";
                                if (ADMIN.Count < 1)
                                {
                               
                                    goto checkadmin;

                                }
                                else
                                {
                                    row.Cells["cStatus"].Value = $"ADMIN {ADMIN.Count} =>{userName} NHẬN BM DONE";


                                }
                            }
                            else
                            {
                                goto checkadmin;
                            }

                        }
                    }

                }

            
            }
            catch 
            {
                row.Cells["cStatus"].Value = "CHECK ADMIN FAIL! ";
                goto checkadmin;

            }
        }

        private List<string> CHECK_ADMIN_BM_IG5bm(ChromeDriver chromedriver, DataGridViewRow row, string token_EEAB)
        {
            int checkadmin_sl = 0;
        checkadmin:
            List<string> listNHANBMDONE = new List<string>();
            try
            {
                var chi_share_bm350 = "";
                if (cmb_chishare_bm350.InvokeRequired)
                {
                    cmb_chishare_bm350.Invoke(new Action(() =>
                    {

                        chi_share_bm350 = cmb_chishare_bm350.Text;
                    }));
                }
                else
                {
                    chi_share_bm350 = cmb_chishare_bm350.Text;
                }
           
              
                List<string> listNHANBMFAIL = new List<string>();
                int delay = (int)delay_check_admin.Value;
                Thread.Sleep(TimeSpan.FromSeconds(delay));

                chromedriver.Navigate().Refresh();
                Thread.Sleep(1000);
                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                var cookiestring = "";
                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }
                cookiestring = cookiestring.Trim(';');
                HttpRequest httpRequest = new HttpRequest();
                httpRequest.AllowAutoRedirect = true;
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                httpRequest.KeepAlive = true;
                var cookieRaws = cookiestring.Split(';');
                foreach (var cookieraw in cookieRaws)
                {
                    var cookieJAr = cookieraw.Split('=');
                    try
                    {
                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                    }
                    catch { }
                }
                httpRequest.AddHeader("authority", "adsmanager.facebook.com");
                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httpRequest.AddHeader("cache-control", "max-age=0");
                httpRequest.AddHeader("dpr", "0.800000011920929");
                httpRequest.AddHeader("priority", "u=0, i");
                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.205\", \"Chromium\";v=\"131.0.6778.205\", \"Not_A Brand\";v=\"24.0.0.0\"");
                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                httpRequest.AddHeader("sec-fetch-dest", "document");
                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                httpRequest.AddHeader("sec-fetch-user", "?1");
                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                httpRequest.AddHeader("viewport-width", "1411");

                row.Cells["cStatus"].Value = "Check ADMIN BM.....";

                var checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={token_EEAB}&limit=10&fields=id,name,created_time,status,business_users{{role,id,name}},owned_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}},shared_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}},sharing_eligibility_status,allow_page_management_in_www";

                List<string> ADMIN = new List<string>();

                var response = httpRequest.Get(checkBM);
                if (response.IsOK)
                {
                    var responseSTR6 = response.ToString();
                    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                    doc.LoadHtml(responseSTR6);
                    JObject jobject = JObject.Parse(responseSTR6);
                    var dataValues = jobject["data"];
                    if (dataValues != null)
                    {
                        var dataValuesArr = dataValues.ToObject<JArray>();
                        foreach (var itemObject in dataValuesArr)
                        {
                            ADMIN = new List<string>();
                            var businessId = itemObject["id"].ToString();
                            var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                            var createdtime = itemObject["created_time"].ToString();
                            var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                            var business_users = itemObject["business_users"]?["data"];
                            var nameBM = itemObject["name"].ToString();
                            if(chi_share_bm350 == "ON")
                            {
                                if(typeBm == "BM50")
                                {
                                    goto check;
                                }
                            }
                      
                            var userName = "";
                            if (business_users != null)
                            {
                                var businessUsersArr = business_users.ToObject<JArray>();
                                foreach (var userObject in businessUsersArr)
                                {
                                    try
                                    {
                                        var role = userObject["role"]?.ToString();
                                        var userId = userObject["id"]?.ToString();
                                        userName = userObject["name"]?.ToString();
                                        ADMIN.Add(userName);
                                    }
                                    catch { }

                                }


                                row.Cells["cStatus"].Value = $"ADMIN {ADMIN.Count}";
                                if (ADMIN.Count < 1)
                                {
                                   
                                    goto checkadmin;
                                }
                                else
                                {
                                    row.Cells["cStatus"].Value = $"ADMIN {ADMIN.Count} =>{userName} NHẬN BM DONE";
                                    listNHANBMDONE.Add(businessId);
                            
                                }
                            }
                            else
                            {
                                checkadmin_sl++;
                                int slcheck = (int)numericUpDown5_slcheck_bm350.Value;
                                if (checkadmin_sl == slcheck)
                                {
                                    goto next;
                                }
                                goto checkadmin;
                              
                            }
                        check:
                            Thread.Sleep(100);
                        }

                       
                    }

                }




            next:
                Thread.Sleep(10);
                row.Cells["cStatus"].Value = $"NHẬN BM DONE {listNHANBMDONE.Count}.";
            }
            catch
            {
                row.Cells["cStatus"].Value = "CHECK ADMIN FAIL! ";
                goto checkadmin;

            }
            return listNHANBMDONE;
        }
        // REG BM IG API 

        private void REG_BM2025_API(DataGridViewRow row, string username, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {

                HttpRequest httpRequest = new HttpRequest();
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.KeepAlive = true;
                httpRequest.AllowAutoRedirect = true;
                httpRequest.UserAgent = "";
                if (cmb_User_Agent.InvokeRequired)
                {
                    cmb_User_Agent.Invoke(new Action(() =>
                    {
                        httpRequest.UserAgent = cmb_User_Agent.Text;
                    }));
                }
                else
                {
                    httpRequest.UserAgent = cmb_User_Agent.Text;
                }
                var cookieRaw = c2FAvsCookie.Split(';');
                foreach (var cookie in cookieRaw)
                {
                    try
                    {
                        var key = cookie.Split('=')[0].ToString().Trim();
                        var value = cookie.Split('=')[1].ToString().Trim();
                        httpRequest.Cookies.Add(key, value);

                    }
                    catch { }
                }
                var x_csrftoken = Regex.Match(c2FAvsCookie, "csrftoken=(.*?);").Groups[1].Value.ToString();

                httpRequest.AddHeader("authority", "www.instagram.com");
                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httpRequest.AddHeader("cache-control", "max-age=0");
                httpRequest.AddHeader("dpr", "0.800000011920929");
                httpRequest.AddHeader("priority", "u=0, i");
                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                httpRequest.AddHeader("sec-fetch-dest", "document");
                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                httpRequest.AddHeader("sec-fetch-user", "?1");
                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                httpRequest.AddHeader("viewport-width", "1555");

                var response = httpRequest.Get("https://www.instagram.com/");
                if (response.IsOK)
                {
                    var responseStr = response.ToString();

                    var uid_ig = Regex.Match(responseStr, "NON_FACEBOOK_USER_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                    if (uid_ig != "0")
                    {

                        var url = httpRequest.Address.ToString();
                        if (url.Contains("https://www.instagram.com/accounts/suspended"))
                        {
                            row.Cells["cStatus"].Value = "282";
                           // goto next;

                        }
                        row.Cells["cStatus"].Value = "Login IG DONE";

                        Thread.Sleep(1000);


                        httpRequest.AddHeader("authority", "www.instagram.com");
                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httpRequest.AddHeader("cache-control", "max-age=0");
                        httpRequest.AddHeader("dpr", "0.800000011920929");
                        httpRequest.AddHeader("priority", "u=0, i");
                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                        httpRequest.AddHeader("sec-fetch-dest", "document");
                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                        httpRequest.AddHeader("sec-fetch-user", "?1");
                        httpRequest.AddHeader("upgrade-insecure-requests", "1");
                        httpRequest.AddHeader("viewport-width", "1523");

                        response = httpRequest.Get("https://www.instagram.com/accounts/edit/");
                        if (response.IsOK)
                        {

                            var responseStr1 = response.ToString();
                            var is_business_account = Regex.Match(responseStr1, "is_business_account\":(.*?),\"").Groups[1].Value.ToString();
                            var jazoest = Regex.Match(responseStr1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                            if (is_business_account == "true")
                            {
                                row.Cells["cStatus"].Value = "Tắt sáng tạo....";

                                httpRequest.AddHeader("authority", "www.instagram.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("referer", "https://www.instagram.com/accounts/convert_to_professional_account/");
                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                httpRequest.AddHeader("x-asbd-id", "359341");
                                httpRequest.AddHeader("x-csrftoken", $"{x_csrftoken}");
                                httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                httpRequest.AddHeader("x-ig-www-claim", "hmac.AR34YWnGjxxjCEwHaZzVZCzRgzIj_LiW4DczpSUaTS-pD6Cf");
                                httpRequest.AddHeader("x-instagram-ajax", "1022415872");
                                httpRequest.AddHeader("x-requested-with", "XMLHttpRequest");
                                httpRequest.AddHeader("x-web-session-id", "iu9lxw:8nvinr:vldo60");

                                var payload1 = $"entry_point=ig_web_settings&to_account_type=1&jazoest={jazoest}";

                                response = httpRequest.Post("https://www.instagram.com/api/v1/business/account/convert_account/", payload1, "application/x-www-form-urlencoded");
                                if (response.IsOK)
                                {

                                    var responseStr5 = response.ToString();
                                    httpRequest.AddHeader("authority", "www.instagram.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("cache-control", "max-age=0");
                                    httpRequest.AddHeader("dpr", "0.800000011920929");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "1523");

                                    response = httpRequest.Get("https://www.instagram.com/accounts/edit/");
                                    if (response.IsOK)
                                    {

                                        var responseStr6 = response.ToString();
                                        is_business_account = Regex.Match(responseStr6, "is_business_account\":(.*?),\"").Groups[1].Value.ToString();
                                        if (is_business_account == "false")
                                        {
                                            row.Cells["cStatus"].Value = "Tắt sáng tạo Done";

                                            Thread.Sleep(2000);

    




                                        }

                                    }

                                }



                            }

                            if (is_business_account == "false")
                            {
                                row.Cells["cStatus"].Value = "Bật sáng tạo....";


                                httpRequest.AddHeader("authority", "www.instagram.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=0, i");
                                httpRequest.AddHeader("referer", "https://www.instagram.com/accounts/convert_to_professional_account/");
                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                httpRequest.AddHeader("x-asbd-id", "359341");
                                httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                httpRequest.AddHeader("x-ig-www-claim", "hmac.AR34YWnGjxxjCEwHaZzVZCzRgzIj_LiW4DczpSUaTS-pD6Cf");
                                httpRequest.AddHeader("x-requested-with", "XMLHttpRequest");
                                httpRequest.AddHeader("x-web-session-id", "e2e698:8nvinr:nx39nm");


                                response = httpRequest.Get("https://www.instagram.com/api/v1/business/account/get_suggested_categories/");
                                if (response.IsOK)
                                {
                                    var responseStr2 = response.ToString();
                                    var categoryIds = new List<string>();
                                    var jObject = JObject.Parse(responseStr2);

                                    foreach (var category in jObject["categories"])
                                    {
                                        var categoryId = category["category_id"]?.ToString();
                                        if (!string.IsNullOrEmpty(categoryId))
                                        {
                                            categoryIds.Add(categoryId);
                                        }
                                    }

                                    // Chọn ngẫu nhiên một category_id
                                    var random = new Random();
                                    var randomIndex = random.Next(categoryIds.Count);
                                    var randomCategoryId = categoryIds[randomIndex];


                                    httpRequest.AddHeader("authority", "www.instagram.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("referer", "https://www.instagram.com/accounts/convert_to_professional_account/");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");

                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("x-asbd-id", "359341");
                                    httpRequest.AddHeader("x-csrftoken", $"{x_csrftoken}");
                                    httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                    httpRequest.AddHeader("x-ig-www-claim", "hmac.AR2Qo_jECY2DldCw3kYwS_uWKu1ALSUhGyO6jtxgrTQ-uu8C");
                                    httpRequest.AddHeader("x-instagram-ajax", "1022409608");
                                    httpRequest.AddHeader("x-requested-with", "XMLHttpRequest");
                                    httpRequest.AddHeader("x-web-session-id", "qm9btk:6b0awl:2ty6hw");
                                    var payload = $"category_id={randomCategoryId}&create_business_id=true&entry_point=ig_web_settings&set_public=true&should_bypass_contact_check=true&should_show_category=0&to_account_type=2&jazoest={jazoest}";

                                    response = httpRequest.Post("https://www.instagram.com/api/v1/business/account/convert_account/", payload, "application/x-www-form-urlencoded");
                                    if (response.IsOK)
                                    {
                                        var responseStr3 = response.ToString();


                                        httpRequest.AddHeader("authority", "www.instagram.com");
                                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("cache-control", "max-age=0");
                                        httpRequest.AddHeader("dpr", "0.800000011920929");
                                        httpRequest.AddHeader("priority", "u=0, i");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "document");
                                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                        httpRequest.AddHeader("sec-fetch-user", "?1");
                                        httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                        httpRequest.AddHeader("viewport-width", "1523");

                                        response = httpRequest.Get("https://www.instagram.com/accounts/edit/");
                                        if (response.IsOK)
                                        {

                                            var responseStr4 = response.ToString();
                                            var is_business_account1 = Regex.Match(responseStr4, "is_business_account\":(.*?),\"").Groups[1].Value.ToString();
                                            var fb_dtsg = Regex.Match(responseStr4, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                            var jazoest_1 = Regex.Match(responseStr4, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                            var lsd = Regex.Match(responseStr4, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                         

                                            if (is_business_account1 == "true")
                                            {
                                                row.Cells["cStatus"].Value = "Bật sáng tạo Done";
                                                var Cookie5 = httpRequest.Cookies.ToString();
                                                httpRequest = new HttpRequest();
                                                httpRequest.Cookies = new CookieDictionary();
                                                httpRequest.KeepAlive = true;
                                                httpRequest.AllowAutoRedirect = true;
                                                httpRequest.UserAgent = "";
                                                if (cmb_User_Agent.InvokeRequired)
                                                {
                                                    cmb_User_Agent.Invoke(new Action(() =>
                                                    {
                                                        httpRequest.UserAgent = cmb_User_Agent.Text;
                                                    }));
                                                }
                                                else
                                                {
                                                    httpRequest.UserAgent = cmb_User_Agent.Text;
                                                }
                                                cookieRaw = Cookie5.Split(';');
                                                foreach (var cookie in cookieRaw)
                                                {
                                                    try
                                                    {
                                                        var key = cookie.Split('=')[0].ToString().Trim();
                                                        var value = cookie.Split('=')[1].ToString().Trim();
                                                        httpRequest.Cookies.Add(key, value);

                                                    }
                                                    catch { }
                                                }
                                                httpRequest.AddHeader("authority", "business.facebook.com");
                                                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                httpRequest.AddHeader("priority", "u=0, i");
                                                httpRequest.AddHeader("sec-ch-ua", "\"Chromium\";v=\"136\", \"Google Chrome\";v=\"136\", \"Not.A/Brand\";v=\"99\"");
                                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                httpRequest.AddHeader("sec-fetch-dest", "document");
                                                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                                httpRequest.AddHeader("sec-fetch-site", "none");
                                                httpRequest.AddHeader("sec-fetch-user", "?1");
                                                httpRequest.AddHeader("upgrade-insecure-requests", "1");

                                                response = httpRequest.Get("https://business.facebook.com/business/loginpage/?next=https%3A%2F%2Fbusiness.facebook.com%2F%3Fnav_ref%3Dbiz_unified_f3_login_page_to_mbs&login_options%5B0%5D=FB&login_options%5B1%5D=IG&login_options%5B2%5D=SSO&config_ref=biz_login_tool_flavor_mbs://business.facebook.com/");
                                                if (response.IsOK)
                                                {
                                                    var responseStr_1 = response.ToString();
                                                    var Cookie41 = httpRequest.Cookies.ToString();

                                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9,vi;q=0.8");
                                                    httpRequest.AddHeader("priority", "u=0, i");
                                                    httpRequest.AddHeader("sec-ch-ua", "\"Chromium\";v=\"136\", \"Google Chrome\";v=\"136\", \"Not.A/Brand\";v=\"99\"");
                                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");

                                                    response = httpRequest.Get("https://business.facebook.com/business/loginpage/?next=https%3A%2F%2Fbusiness.facebook.com%2F%3Fnav_ref%3Dbiz_unified_f3_login_page_to_mbs&login_options%5B0%5D=FB&login_options%5B1%5D=IG&login_options%5B2%5D=SSO&config_ref=biz_login_tool_flavor_mbs");
                                                    if(response.IsOK)
                                                    {
                                                        var responseStr_2 = response.ToString();
                                                        var Cookie = httpRequest.Cookies.ToString();



                                                    }





                                                    httpRequest.AddHeader("", "");

                                                    httpRequest.AddHeader("", "");
                                                    httpRequest.AddHeader("", "");

                                                    httpRequest.AddHeader("", "");


                                                }



                                     



                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch { }




        }
        private void REG_BM_2025_NEW(DataGridViewRow row, string username, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc,string c2FA_IG)
        {
            var CHUC_NANG = "";
            if (cmb_Chuc_Nang.InvokeRequired)
            {
                cmb_Chuc_Nang.Invoke(new Action(() =>
                {
                    CHUC_NANG = cmb_Chuc_Nang.Text;

                }));
            }
            else
            {
                CHUC_NANG = cmb_Chuc_Nang.Text;
            }
            var x2fa_ignew = "";
            if (CHUC_NANG == "REG_BM_IG_2025")
            {
                x2fa_ignew = mail;
            }
            else
            {
                x2fa_ignew = c2FA_IG;
            }

            var tao_bm_5 = "";

            if (cmb_Tao_5BM_IG.InvokeRequired)
            {
                cmb_Tao_5BM_IG.Invoke(new Action(() =>
                {
                    tao_bm_5 = cmb_Tao_5BM_IG.Text;

                }));
            }
            else
            {
                tao_bm_5 = cmb_Tao_5BM_IG.Text;
            }
            string profilePath = null;
            ChromeDriver chromedriver = null;
            var businessId = "";
            try
            {
                int rip_ig = 0;
                int check_business_page = 0;
                int share_BM_IG = 0;
            regbm:
                c2FAvsCookie = row.Cells["c2FAvsCookie"].Value.ToString();

                HttpRequest httpRequest = new HttpRequest();
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.KeepAlive = true;
                httpRequest.AllowAutoRedirect = true;
                httpRequest.UserAgent = "";
                if (cmb_User_Agent.InvokeRequired)
                {
                    cmb_User_Agent.Invoke(new Action(() =>
                    {
                        httpRequest.UserAgent = cmb_User_Agent.Text;
                    }));
                }
                else
                {
                    httpRequest.UserAgent = cmb_User_Agent.Text;
                }
                var cookieRaw = c2FAvsCookie.Split(';');
                foreach (var cookie in cookieRaw)
                {
                    try
                    {
                        var key = cookie.Split('=')[0].ToString().Trim();
                        var value = cookie.Split('=')[1].ToString().Trim();
                        httpRequest.Cookies.Add(key, value);

                    }
                    catch { }
                }
                var x_csrftoken = Regex.Match(c2FAvsCookie, "csrftoken=(.*?);").Groups[1].Value.ToString();
         
                if (string.IsNullOrEmpty(x_csrftoken))
                {
                    x_csrftoken = Regex.Match(c2FAvsCookie, @"csrftoken=([^;]+)").Groups[1].Value.ToString();
                }
                httpRequest.AddHeader("authority", "www.instagram.com");
                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httpRequest.AddHeader("cache-control", "max-age=0");
                httpRequest.AddHeader("dpr", "0.800000011920929");
                httpRequest.AddHeader("priority", "u=0, i");
                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                httpRequest.AddHeader("sec-fetch-dest", "document");
                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                httpRequest.AddHeader("sec-fetch-user", "?1");
                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                httpRequest.AddHeader("viewport-width", "1555");

                var response = httpRequest.Get("https://www.instagram.com/");
                if (response.IsOK)
                {
                    var responseStr = response.ToString();

                    var uid_ig = Regex.Match(responseStr, "NON_FACEBOOK_USER_ID\":\"(.*?)\"").Groups[1].Value.ToString();
                    if (uid_ig != "0")
                    {

                        var url = httpRequest.Address.ToString();
                        if (url.Contains("https://www.instagram.com/accounts/suspended"))
                        {
                            row.Cells["cStatus"].Value = "282";
                            goto next;

                        }
                        row.Cells["cStatus"].Value = "Login IG DONE";

                        Thread.Sleep(1000);
                        httpRequest.AddHeader("authority", "www.instagram.com");
                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httpRequest.AddHeader("cache-control", "max-age=0");
                        httpRequest.AddHeader("dpr", "0.800000011920929");
                        httpRequest.AddHeader("priority", "u=0, i");
                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                        httpRequest.AddHeader("sec-fetch-dest", "document");
                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                        httpRequest.AddHeader("sec-fetch-user", "?1");
                        httpRequest.AddHeader("upgrade-insecure-requests", "1");
                        httpRequest.AddHeader("viewport-width", "1523");

                        response = httpRequest.Get("https://www.instagram.com/accounts/edit/");
                        if (response.IsOK)
                        {

                            var responseStr1 = response.ToString();
                            var is_business_account = Regex.Match(responseStr1, "is_business_account\":(.*?),\"").Groups[1].Value.ToString();
                            var jazoest = Regex.Match(responseStr1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                            int loginfail = 0;                                       
                            try
                            {
                                if (is_business_account == "true")
                                {
                                    row.Cells["cStatus"].Value = "Tắt sáng tạo....";

                                    httpRequest.AddHeader("authority", "www.instagram.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("referer", "https://www.instagram.com/accounts/convert_to_professional_account/");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("x-asbd-id", "359341");
                                    httpRequest.AddHeader("x-csrftoken", $"{x_csrftoken}");
                                    httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                    httpRequest.AddHeader("x-ig-www-claim", "hmac.AR34YWnGjxxjCEwHaZzVZCzRgzIj_LiW4DczpSUaTS-pD6Cf");
                                    httpRequest.AddHeader("x-instagram-ajax", "1022415872");
                                    httpRequest.AddHeader("x-requested-with", "XMLHttpRequest");
                                    httpRequest.AddHeader("x-web-session-id", "iu9lxw:8nvinr:vldo60");

                                    var payload1 = $"entry_point=ig_web_settings&to_account_type=1&jazoest={jazoest}";

                                    response = httpRequest.Post("https://www.instagram.com/api/v1/business/account/convert_account/", payload1, "application/x-www-form-urlencoded");
                                    if (response.IsOK)
                                    {

                                        var responseStr5 = response.ToString();
                                        httpRequest.AddHeader("authority", "www.instagram.com");
                                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("cache-control", "max-age=0");
                                        httpRequest.AddHeader("dpr", "0.800000011920929");
                                        httpRequest.AddHeader("priority", "u=0, i");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "document");
                                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                        httpRequest.AddHeader("sec-fetch-user", "?1");
                                        httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                        httpRequest.AddHeader("viewport-width", "1523");

                                        response = httpRequest.Get("https://www.instagram.com/accounts/edit/");
                                        if (response.IsOK)
                                        {

                                            var responseStr6 = response.ToString();
                                            is_business_account = Regex.Match(responseStr6, "is_business_account\":(.*?),\"").Groups[1].Value.ToString();
                                            if (is_business_account == "false")
                                            {
                                                row.Cells["cStatus"].Value = "Tắt sáng tạo Done";

                                                Thread.Sleep(2000);

                                            }

                                        }

                                    }

                                }
                            }
                            catch {

                                try
                                {
                                    row.Cells["cStatus"].Value = "DIE COOKIE";
                                login_next:
                                    profilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Profiles", username);
                                    chromedriver = null;
                                    chromedriver = Createchromedrive_IG_NEW(profilePath);

                                    Thread.Sleep(2000);

                                    chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                                    row.Cells["cStatus"].Value = "Login.....";
                                    row.Cells["cStatus"].Value = "LOGIN UID PASS";

                                    var enter_user = chromedriver.FindElements(By.XPath("//input[@name='username']"));
                                    if (enter_user.Count > 0)
                                    {
                                        enter_user.LastOrDefault().SendKeys(username);
                                        Thread.Sleep(1000);

                                    }

                                    var enter_password = chromedriver.FindElements(By.XPath("//input[@name='password']"));
                                    if (enter_password.Count > 0)
                                    {
                                        enter_password.LastOrDefault().SendKeys(password);
                                        Thread.Sleep(1000);

                                    }

                                    var login = chromedriver.FindElements(By.XPath("//button[@type='submit']"));
                                    if (login.Count > 0)
                                    {
                                        login.LastOrDefault().Click();
                                        Thread.Sleep(5000);

                                    }
                                    if (!string.IsNullOrEmpty(x2fa_ignew))
                                    {
                                        row.Cells["cStatus"].Value = "ENTER CODE 2FA ";
                                        var code = GetCode(x2fa_ignew);
                                        var enter_code = chromedriver.FindElements(By.XPath("//input[@name='verificationCode']"));
                                        if (enter_code.Count > 0)
                                        {
                                            enter_code.LastOrDefault().SendKeys(code);
                                            Thread.Sleep(2000);
                                        }
                                        var confirm = chromedriver.FindElements(By.XPath("//form/div[2]/button"));
                                        if (confirm.Count > 0)
                                        {
                                            confirm.LastOrDefault().Click();
                                            Thread.Sleep(10000);
                                        }
                                        url = chromedriver.Url;
                                        if (url.Contains("https://www.instagram.com/challenge/"))
                                        {

                                            var dissmiss = chromedriver.FindElements(By.XPath("//div[@aria-label='Dismiss']"));
                                            if (dissmiss.Count > 0)
                                            {
                                                dissmiss.LastOrDefault().Click();
                                                Thread.Sleep(5000);
                                            }
                                        }
                                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                        string cookiestring = "";
                                        foreach (var cookie in cookiess)
                                        {
                                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                        }
                                        c2FAvsCookie = cookiestring;
                                        row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                                    }
                                    else
                                    {
                                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                        string cookiestring = "";
                                        foreach (var cookie in cookiess)
                                        {
                                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                        }
                                        c2FAvsCookie = cookiestring;
                                        row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                                    }
                                    var uid_ig1 = Regex.Match(chromedriver.PageSource, "NON_FACEBOOK_USER_ID\":\"(.*?)\"").Groups[1].Value;

                                    if (uid_ig1 != "0")
                                    {
                                        try
                                        {
                                            row.Cells["cStatus"].Value = "LOGIN DONE";
                                            Thread.Sleep(5000);
                                            url = chromedriver.Url;
                                            if (url.Contains("https://www.instagram.com/challenge/"))
                                            {

                                                var dissmiss = chromedriver.FindElements(By.XPath("//div[@aria-label='Dismiss']"));
                                                if (dissmiss.Count > 0)
                                                {
                                                    dissmiss.LastOrDefault().Click();
                                                    Thread.Sleep(5000);
                                                }
                                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                                string cookiestring = "";
                                                foreach (var cookie in cookiess)
                                                {
                                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                                }
                                                c2FAvsCookie = cookiestring;
                                                row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                                            }
                                            if (chromedriver.Url.Contains("https://www.instagram.com/accounts/suspended"))
                                            {
                                                row.Cells["cStatus"].Value = "282";
                                                chromedriver.Close();
                                                chromedriver.Quit();
                                                goto next;
                                            }
                                        }
                                        catch { }
                                        finally
                                        {
                                            if (chromedriver != null)
                                            {
                                                try
                                                {
                                                    chromedriver.Quit();
                                                }
                                                catch { }
                                                WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                                                if (Directory.Exists(profilePath))
                                                {
                                                    try
                                                    {
                                                        Directory.Delete(profilePath, true);
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        Console.WriteLine($"Failed to delete profile {username}: {ex.Message}");
                                                    }
                                                }
                                            }
                                        }

                                        goto regbm;
                                    }
                                    else
                                    {
                                        row.Cells["cStatus"].Value = "LOGIN FAIL";
                                        loginfail++;
                                        if(loginfail <= 1)
                                        {
                                            try
                                            {

                                            }
                                            catch { }
                                            finally
                                            {
                                                if (chromedriver != null)
                                                {
                                                    try
                                                    {
                                                        chromedriver.Quit();
                                                    }
                                                    catch { }
                                                    WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                                                    if (Directory.Exists(profilePath))
                                                    {
                                                        try
                                                        {
                                                            Directory.Delete(profilePath, true);
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            Console.WriteLine($"Failed to delete profile {username}: {ex.Message}");
                                                        }
                                                    }
                                                }
                                            }

                                            goto login_next;
                                        }
                                        goto next;
                                    }



                                }
                                catch
                                {

                                }
                            }
             
                            try
                            {
                                if (is_business_account == "false")
                                {
                                    row.Cells["cStatus"].Value = "Bật sáng tạo....";


                                    httpRequest.AddHeader("authority", "www.instagram.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("referer", "https://www.instagram.com/accounts/convert_to_professional_account/");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("x-asbd-id", "359341");
                                    httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                    httpRequest.AddHeader("x-ig-www-claim", "hmac.AR34YWnGjxxjCEwHaZzVZCzRgzIj_LiW4DczpSUaTS-pD6Cf");
                                    httpRequest.AddHeader("x-requested-with", "XMLHttpRequest");
                                    httpRequest.AddHeader("x-web-session-id", "e2e698:8nvinr:nx39nm");


                                    response = httpRequest.Get("https://www.instagram.com/api/v1/business/account/get_suggested_categories/");
                                    if (response.IsOK)
                                    {
                                        var responseStr2 = response.ToString();
                                        var categoryIds = new List<string>();
                                        var jObject = JObject.Parse(responseStr2);

                                        foreach (var category in jObject["categories"])
                                        {
                                            var categoryId = category["category_id"]?.ToString();
                                            if (!string.IsNullOrEmpty(categoryId))
                                            {
                                                categoryIds.Add(categoryId);
                                            }
                                        }

                                        // Chọn ngẫu nhiên một category_id
                                        var random = new Random();
                                        var randomIndex = random.Next(categoryIds.Count);
                                        var randomCategoryId = categoryIds[randomIndex];


                                        httpRequest.AddHeader("authority", "www.instagram.com");
                                        httpRequest.AddHeader("accept", "*/*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        httpRequest.AddHeader("referer", "https://www.instagram.com/accounts/convert_to_professional_account/");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");

                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                        httpRequest.AddHeader("x-asbd-id", "359341");
                                        httpRequest.AddHeader("x-csrftoken", $"{x_csrftoken}");
                                        httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                        httpRequest.AddHeader("x-ig-www-claim", "hmac.AR2Qo_jECY2DldCw3kYwS_uWKu1ALSUhGyO6jtxgrTQ-uu8C");
                                        httpRequest.AddHeader("x-instagram-ajax", "1022409608");
                                        httpRequest.AddHeader("x-requested-with", "XMLHttpRequest");
                                        httpRequest.AddHeader("x-web-session-id", "qm9btk:6b0awl:2ty6hw");
                                        var payload = $"category_id={randomCategoryId}&create_business_id=true&entry_point=ig_web_settings&set_public=true&should_bypass_contact_check=true&should_show_category=0&to_account_type=2&jazoest={jazoest}";

                                        response = httpRequest.Post("https://www.instagram.com/api/v1/business/account/convert_account/", payload, "application/x-www-form-urlencoded");
                                        if (response.IsOK)
                                        {
                                            var responseStr3 = response.ToString();


                                            httpRequest.AddHeader("authority", "www.instagram.com");
                                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("cache-control", "max-age=0");
                                            httpRequest.AddHeader("dpr", "0.800000011920929");
                                            httpRequest.AddHeader("priority", "u=0, i");
                                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "document");
                                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                            httpRequest.AddHeader("sec-fetch-user", "?1");
                                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                            httpRequest.AddHeader("viewport-width", "1523");

                                            response = httpRequest.Get("https://www.instagram.com/accounts/edit/");
                                            if (response.IsOK)
                                            {

                                                var responseStr4 = response.ToString();
                                                var is_business_account1 = Regex.Match(responseStr4, "is_business_account\":(.*?),\"").Groups[1].Value.ToString();

                                                if (is_business_account1 == "true")
                                                {
                                                    row.Cells["cStatus"].Value = "Bật sáng tạo Done";

                                                    var cooke_ig = httpRequest.Cookies.ToString();

                                                    var regbm_API_CH = "";
                                                    if (cmb_REG_BM_IG_API_CHROME.InvokeRequired)
                                                    {
                                                        cmb_REG_BM_IG_API_CHROME.Invoke(new Action(() =>
                                                        {
                                                            regbm_API_CH = cmb_REG_BM_IG_API_CHROME.Text;
                                                        }));

                                                    }

                                                    if (regbm_API_CH == "CHROME")
                                                    {


                                                    login:
                                                        profilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Profiles", username);
                                                        chromedriver = null;

                                                        try
                                                        {
                                                            chromedriver = Createchromedrive_IG_NEW(profilePath);
                                                            try
                                                            {


                                                                Thread.Sleep(2000);
                                                                //var chromedriver = Createchromedrive();
                                                                chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                                                                row.Cells["cStatus"].Value = "Login.....";
                                                                cookieRaw = c2FAvsCookie.Split(';');
                                                                foreach (var cookieItem in cookieRaw)
                                                                {
                                                                    try
                                                                    {
                                                                        var cookieJar = cookieItem.Split('=');

                                                                        Cookie cookieChrome = new Cookie(cookieJar[0].Trim(), cookieJar[1].Trim(), "instagram.com", "/", DateTime.Now.AddDays(10));
                                                                        chromedriver.Manage().Cookies.AddCookie(cookieChrome);
                                                                    }
                                                                    catch { }
                                                                }
                                                                chromedriver.Navigate().Refresh();
                                                                chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                                                                Thread.Sleep(5000);
                                                                url = chromedriver.Url;
                                                                if (url.Contains("https://www.instagram.com/challenge/"))
                                                                {

                                                                    var dissmiss = chromedriver.FindElements(By.XPath("//div[@aria-label='Dismiss']"));
                                                                    if (dissmiss.Count > 0)
                                                                    {
                                                                        dissmiss.LastOrDefault().Click();
                                                                        Thread.Sleep(5000);
                                                                    }
                                                                }
                                                                if (chromedriver.Url.Contains("https://www.instagram.com/accounts/suspended"))
                                                                {
                                                                    row.Cells["cStatus"].Value = "282";
                                                                    chromedriver.Close();
                                                                    chromedriver.Quit();
                                                                    goto next;
                                                                }
                                                                else
                                                                {
                                                                    lstDataChromeIG.Add(chromedriver, new AccountData1 { Row1 = row, User1 = username });
                                                                    row.Cells["cStatus"].Value = "Login DONE";
                                                                }

                                                            }
                                                            catch { }



                                                        business:
                                                            row.Cells["cStatus"].Value = "REG BM....";
                                                            chromedriver.Navigate().GoToUrl("https://business.facebook.com/business/loginpage/?next=https%3A%2F%2Fbusiness.facebook.com%2F%3Fnav_ref%3Dbiz_unified_f3_login_page_to_mbs&login_options%5B0%5D=FB&login_options%5B1%5D=IG&login_options%5B2%5D=SSO&config_ref=biz_login_tool_flavor_mbs");

                                                            Thread.Sleep(2000);
                                                            var Login_IG = chromedriver.FindElements(By.XPath("//div[4]/div/div[@role='button']"));
                                                            if (Login_IG.Count > 0)
                                                            {
                                                                // Cuộn đến phần tử
                                                                var element = Login_IG.LastOrDefault();
                                                                ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                                                                // Đợi một chút để trang có thể cuộn xong
                                                                Thread.Sleep(500);
                                                                // Click vào phần tử
                                                                element.Click();
                                                                Thread.Sleep(10000);
                                                            }

                                                            Thread.Sleep(15000);

                                                            var html1 = chromedriver.PageSource;
                                                            var idbm1 = "";
                                                            try
                                                            {
                                                                idbm1 = Regex.Match(html1, "business_id=(.*?)&").Groups[1].Value.ToString();
                                                            }
                                                            catch { }
                                                            if (string.IsNullOrEmpty(idbm1))
                                                            {
                                                                idbm1 = Regex.Match(html1, "asset_id=(.*?)&").Groups[1].Value.ToString();

                                                            }

                                                            if (string.IsNullOrEmpty(idbm1))
                                                            {
                                                                var originalTab = chromedriver.CurrentWindowHandle;

                                                                // Chuyển sang tab mới
                                                                chromedriver.SwitchTo().Window(chromedriver.WindowHandles[1]);

                                                                var url_business = chromedriver.Url;
                                                                if (url_business.Contains("https://www.instagram.com/accounts/suspended"))
                                                                {
                                                                    row.Cells["cStatus"].Value = "282";
                                                                    chromedriver.Close();
                                                                    chromedriver.Quit();
                                                                    goto next;


                                                                }
                                                            loginuid_pass:
                                                                url = chromedriver.Url;
                                                                if (url.Contains("https://www.instagram.com/accounts/login/")
                                                                    || url.Contains("https://www.instagram.com/#"))
                                                                {
                                                                    row.Cells["cStatus"].Value = "LOGIN UID PASS";
                                                                    chromedriver.Navigate().GoToUrl("https://www.instagram.com/accounts/login/");
                                                                    var enter_user = chromedriver.FindElements(By.XPath("//input[@name='username']"));
                                                                    if (enter_user.Count > 0)
                                                                    {
                                                                        enter_user.LastOrDefault().SendKeys(username);
                                                                        Thread.Sleep(1000);

                                                                    }

                                                                    var enter_password = chromedriver.FindElements(By.XPath("//input[@name='password']"));
                                                                    if (enter_password.Count > 0)
                                                                    {
                                                                        enter_password.LastOrDefault().SendKeys(password);
                                                                        Thread.Sleep(1000);

                                                                    }

                                                                    var login = chromedriver.FindElements(By.XPath("//button[@type='submit']"));
                                                                    if (login.Count > 0)
                                                                    {
                                                                        login.LastOrDefault().Click();
                                                                        Thread.Sleep(5000);

                                                                    }
                                                                    if (!string.IsNullOrEmpty(x2fa_ignew))
                                                                    {
                                                                        row.Cells["cStatus"].Value = "ENTER CODE 2FA ";
                                                                        var code = GetCode(x2fa_ignew);
                                                                        var enter_code = chromedriver.FindElements(By.XPath("//input[@name='verificationCode']"));
                                                                        if (enter_code.Count > 0)
                                                                        {
                                                                            enter_code.LastOrDefault().SendKeys(code);
                                                                            Thread.Sleep(2000);
                                                                        }
                                                                        var confirm = chromedriver.FindElements(By.XPath("//form/div[2]/button"));
                                                                        if (confirm.Count > 0)
                                                                        {
                                                                            confirm.LastOrDefault().Click();
                                                                            Thread.Sleep(10000);
                                                                        }
                                                                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                                                        string cookiestring = "";
                                                                        foreach (var cookie in cookiess)
                                                                        {
                                                                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                                                        }
                                                                        c2FAvsCookie = cookiestring;
                                                                        row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                                                                    }
                                                                    else
                                                                    {
                                                                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                                                        string cookiestring = "";
                                                                        foreach (var cookie in cookiess)
                                                                        {
                                                                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                                                        }
                                                                        c2FAvsCookie = cookiestring;
                                                                        row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                                                                    }

                                                                }
                                                                url = chromedriver.Url;
                                                                if (url.Contains("https://www.instagram.com/challenge/"))
                                                                {

                                                                    var dissmiss = chromedriver.FindElements(By.XPath("//div[@aria-label='Dismiss']"));
                                                                    if (dissmiss.Count > 0)
                                                                    {
                                                                        dissmiss.LastOrDefault().Click();
                                                                        Thread.Sleep(5000);
                                                                    }
                                                                    var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                                                    while (isStop)
                                                                    {
                                                                        Thread.Sleep(1000);

                                                                    }
                                                                    string cookiestring = "";
                                                                    foreach (var cookie in cookiess)
                                                                    {
                                                                        cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                                                    }
                                                                    c2FAvsCookie = cookiestring;
                                                                    row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                                                                    goto business;
                                                                }
                                                                if (url_business.Contains("https://business.facebook.com/page_unavailable/"))
                                                                {
                                                                    var LoginIG = chromedriver.FindElements(By.XPath("//div[1]/div[2]/a[@href='/business/loginpage/?is_null_state=true&option=IG']"));
                                                                    if (LoginIG.Count > 0)
                                                                    {
                                                                        LoginIG.LastOrDefault().Click();
                                                                        Thread.Sleep(2000);

                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    var LoginasIG = chromedriver.FindElements(By.XPath("//div[1]/div[@role='button']"));
                                                                    if (LoginasIG.Count > 0)
                                                                    {
                                                                        foreach (var item in LoginasIG)
                                                                        {
                                                                            try
                                                                            {
                                                                                if (item.Text.Contains($"{username.ToLower()}"))
                                                                                {
                                                                                    item.Click();
                                                                                    Thread.Sleep(2000);

                                                                                }
                                                                            }
                                                                            catch { }
                                                                        }
                                                                    }

                                                                }

                                                                // Quay lại tab trước đó (tab gốc)
                                                                chromedriver.SwitchTo().Window(originalTab);
                                                                Thread.Sleep(10000);
                                                                chromedriver.Navigate().Refresh();
                                                                url = chromedriver.Url;
                                                                if (url.Contains("https://business.facebook.com/business/loginpage/?next=https%3A%2F%2Fbusiness.facebook.com%2F%3Fnav_ref%3Dbiz_unified_f3_login_page_to_mbs&login_options%5B0%5D=FB&login_options%5B1%5D=IG&login_options%5B2%5D=SSO&config_ref=biz_login_tool_flavor_mbs"))
                                                                {
                                                                    chromedriver.Navigate().GoToUrl("https://www.instagram.com/accounts/login/");

                                                                    goto loginuid_pass;
                                                                }
                                                                if (url.Contains("https://www.instagram.com/"))
                                                                {
                                                                    goto business;
                                                                }
                                                            }

                                                        }
                                                        catch
                                                        {


                                                        }
                                                        int x = 0;
                                                    checkbm:

                                                        Thread.Sleep(2000);
                                                        var html = chromedriver.PageSource;
                                                        var idbm = "";
                                                        try
                                                        {
                                                            idbm = Regex.Match(html, "business_id=(.*?)&").Groups[1].Value.ToString();
                                                        }
                                                        catch { }
                                                        if (string.IsNullOrEmpty(idbm))
                                                        {
                                                            idbm = Regex.Match(html, "asset_id=(.*?)&").Groups[1].Value.ToString();

                                                        }
                                                        if (string.IsNullOrEmpty(idbm))
                                                        {
                                                            row.Cells["cStatus"].Value = "Đăng Nhập https://business.facebook.com/page_unavailable/ Fail";
                                                            var url1 = chromedriver.Url;
                                                            if (url1.Contains("https://business.facebook.com/page_unavailable/")
                                                                || url1.Contains("https://business.facebook.com/out_of_scope_redirect/?in_business_subdomain=1&out_of_scope_page_type=default"))
                                                            {
                                                                check_business_page++;
                                                                Thread.Sleep(2000);
                                                                if (check_business_page > 2)
                                                                {
                                                                    try
                                                                    {
                                                                        chromedriver.Close();
                                                                        chromedriver.Quit();
                                                                    }
                                                                    catch { }
                                                                    Thread.Sleep(2000);
                                                                    goto next;
                                                                }
                                                                try
                                                                {
                                                                    chromedriver.Close();
                                                                    chromedriver.Quit();


                                                                }
                                                                catch { }
                                                                finally
                                                                {
                                                                    if (chromedriver != null)
                                                                    {
                                                                        try
                                                                        {
                                                                            chromedriver.Quit();
                                                                        }
                                                                        catch { }
                                                                        WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                                                                        if (Directory.Exists(profilePath))
                                                                        {
                                                                            try
                                                                            {
                                                                                Directory.Delete(profilePath, true);
                                                                            }
                                                                            catch (Exception ex)
                                                                            {
                                                                                Console.WriteLine($"Failed to delete profile {username}: {ex.Message}");
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                                goto login;
                                                            }

                                                        }
                                                        var url2 = chromedriver.Url;
                                                        if (url2.Contains("https://business.facebook.com/page_unavailable/")
                                                            || url2.Contains("https://business.facebook.com/out_of_scope_redirect/?in_business_subdomain=1&out_of_scope_page_type=default"))
                                                        {
                                                            check_business_page++;
                                                            if (check_business_page > 1)
                                                            {
                                                                try
                                                                {
                                                                    chromedriver.Close();
                                                                    chromedriver.Quit();
                                                                }
                                                                catch { }
                                                                Thread.Sleep(2000);
                                                                goto next;
                                                            }
                                                            try
                                                            {
                                                                chromedriver.Close();
                                                                chromedriver.Quit();
                                                            }
                                                            catch { }
                                                            finally
                                                            {
                                                                if (chromedriver != null)
                                                                {
                                                                    try
                                                                    {
                                                                        chromedriver.Quit();
                                                                    }
                                                                    catch { }
                                                                    WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                                                                    if (Directory.Exists(profilePath))
                                                                    {
                                                                        try
                                                                        {
                                                                            Directory.Delete(profilePath, true);
                                                                        }
                                                                        catch (Exception ex)
                                                                        {
                                                                            Console.WriteLine($"Failed to delete profile {username}: {ex.Message}");
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            Thread.Sleep(2000);
                                                            goto login;
                                                        }

                                                 
                                                        var accessToken_EAAG = "";
                                                        if (tao_bm_5 == "1")
                                                        {
                                                            try
                                                            {
                                                                Thread.Sleep(5000);
                                                                chromedriver.Navigate().GoToUrl("https://business.facebook.com/billing_hub");


                                                                html = chromedriver.PageSource;

                                                                accessToken_EAAG = Regex.Match(html, "init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                                                                if (string.IsNullOrEmpty(accessToken_EAAG))
                                                                {
                                                                    chromedriver.Navigate().GoToUrl("https://business.facebook.com/billing_hub/accounts?business_id=&placement=standalone&global_scope_id=");
                                                                    //MessageBox.Show("accessToken_EAAG NULL");
                                                                    row.Cells["cStatus"].Value = "accessToken_EAAG NULL";
                                                                    x++;
                                                                    if (x > 2)
                                                                    {
                                                                        //MessageBox.Show("accessToken_EAAG NULL ko vào được business");
                                                                        row.Cells["cStatus"].Value = "accessToken_EAAG NULL ko vào được businessL";
                                                                        try
                                                                        {
                                                                            chromedriver.Close();
                                                                            chromedriver.Quit();
                                                                        }
                                                                        catch { }
                                                                        finally
                                                                        {
                                                                            if (chromedriver != null)
                                                                            {
                                                                                try
                                                                                {
                                                                                    chromedriver.Quit();
                                                                                }
                                                                                catch { }
                                                                                WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                                                                                if (Directory.Exists(profilePath))
                                                                                {
                                                                                    try
                                                                                    {
                                                                                        Directory.Delete(profilePath, true);
                                                                                    }
                                                                                    catch (Exception ex)
                                                                                    {
                                                                                        Console.WriteLine($"Failed to delete profile {username}: {ex.Message}");
                                                                                    }
                                                                                }
                                                                            }
                                                                        }


                                                                        Thread.Sleep(2000);
                                                                        goto login;
                                                                    }
                                                                    goto checkbm;
                                                                }
                                                                Thread.Sleep(2000);

                                                                row.Cells["cStatus"].Value = "Check BM....";
                                                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                                                var cookiestring = "";
                                                                foreach (var cookie in cookiess)
                                                                {
                                                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                                                }
                                                                cookiestring = cookiestring.Trim(';');

                                                                httpRequest = new HttpRequest();
                                                                httpRequest.AllowAutoRedirect = true;
                                                                httpRequest.Cookies = new CookieDictionary();
                                                                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                                                EnsurePostWWWLoginHDFull(httpRequest);
                                                                httpRequest.KeepAlive = true;
                                                                var cookieRaws = cookiestring.Split(';');
                                                                foreach (var cookieraw in cookieRaws)
                                                                {
                                                                    var cookieJAr = cookieraw.Split('=');
                                                                    try
                                                                    {
                                                                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                                                    }
                                                                    catch { }
                                                                }
                                                                row.Cells["cCheckBM"].Value = "";
                                                                var nameBM = "";
                                                                var checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={accessToken_EAAG}&limit=10&fields=%5B%22id%22,%22allow_page_management_in_www%22,%22business_users%7Brole%7D%22,%22sharing_eligibility_status%22,%22owned_ad_accounts.limit(1)%7Bcurrency,adtrust_dsl%7D%22,%22created_time%22,%22name%22,%20%22status%22%5D";
                                                                response = httpRequest.Get(checkBM);
                                                                if (response.IsOK)
                                                                {
                                                                    var responseSTR6 = response.ToString();
                                                                    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                                                                    doc.LoadHtml(responseSTR6);
                                                                    JObject jobject = JObject.Parse(responseSTR6);
                                                                    var dataValues = jobject["data"];
                                                                    if (dataValues != null)
                                                                    {
                                                                        var dataValuesArr = dataValues.ToObject<JArray>();
                                                                        foreach (var itemObject in dataValuesArr)
                                                                        {
                                                                            businessId = itemObject["id"].ToString();
                                                                            var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                                                            var createdtime = itemObject["created_time"].ToString();
                                                                            var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                                                                  nameBM = itemObject["name"].ToString();

                                                                            row.Cells["cCheckBM"].Value += $"{businessId}|{typeBm}|{statusBm}|";
                                                                            // Đổi màu chữ nếu là BM350
                                                                            if (typeBm == "BM350")
                                                                            {
                                                                                row.Cells["cCheckBM"].Style.ForeColor = Color.Red; // Đặt màu đỏ
                                                                            }
                                                                            else
                                                                            {
                                                                                row.Cells["cCheckBM"].Style.ForeColor = Color.Black; // Mặc định màu đen
                                                                            }

                                                                            StreamWriter sw2 = new StreamWriter("BMCLONE.txt", true);
                                                                            sw2.WriteLine($"{businessId}|{typeBm}|{statusBm}|{username}" + DateTime.Now);
                                                                            sw2.Close();


                                                                            if (statusBm == "BM Live")
                                                                            {
                                                                                httpRequest.AddHeader("authority", "business.facebook.com");
                                                                                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                                                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                                                httpRequest.AddHeader("dpr", "0.800000011920929");
                                                                                httpRequest.AddHeader("priority", "u=0, i");
                                                                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                                                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                                                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                                                httpRequest.AddHeader("sec-fetch-dest", "document");
                                                                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"\"");
                                                                                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                                                                httpRequest.AddHeader("sec-fetch-site", "none");
                                                                                httpRequest.AddHeader("sec-fetch-user", "?1");
                                                                                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                                                                httpRequest.AddHeader("viewport-width", "1334");
                                                                                response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_users/?global_scope_id={idbm}&business_id={idbm}&nav_ref=bizweb_biz_home_scope_selector&redirect_session_id=682002f6-727b-4b16-9b53-6d96b4f77f5b");
                                                                                if (response.IsOK)
                                                                                {
                                                                                    var responseStr01 = response.ToString();
                                                                                    var scriptAddThongTin = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id,\r\n    businessUserID = require(\"CurrentBusinessUser\").business_user_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsUpdateBusinessUserForIGMAMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=2g&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=cjs5u2:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48W2a4p8aHwzzXwKwt8jwGzEaE8o4-222SU5G4E5yexfwjES1xwjokGvwOwem32fwLCyKbwzwea0Lo6-3u36iU9E2cwNwDwjouwqo4e220hi7E5y1rw&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsUpdateBusinessUserForIGMAMutation&variables={{\"businessUserID\":\"${{businessUserID}}\",\"firstName\":null,\"lastName\":null,\"email\":\"akajsjss111@hotmail.com\",\"roles\":null,\"business_account_task_ids\":null,\"expireTime\":null,\"clientTimezoneID\":null,\"businessID\":\"${{businessId}}\",\"nonce\":null,\"should_send_email_notif\":null,\"entryPoint\":\"BIZWEB_SETTINGS_ADD_CONTACT_INFO_UPDATE_BUSINESS_USER_FOR_IGMA\"}}&server_timestamps=true&doc_id=6412870625471134`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                                                                    chromedriver.ExecuteScript(scriptAddThongTin);
                                                                                    while (isStop)
                                                                                    {
                                                                                        Thread.Sleep(1000);
                                                                                    }
                                                                                    Thread.Sleep(100);
                                                                                    chromedriver.Navigate().Refresh();
                                                                                    while (isStop)
                                                                                    {
                                                                                        Thread.Sleep(1000);
                                                                                    }

                                                                                    var STT = "";
                                                                                    if (cmb_Admin_BM.InvokeRequired)
                                                                                    {
                                                                                        cmb_Admin_BM.Invoke(new Action(() =>
                                                                                        {
                                                                                            STT = cmb_Admin_BM.Text;
                                                                                        }));
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        STT = cmb_Admin_BM.Text;
                                                                                    }
                                                                                    var ADMIN = "";
                                                                                    if (STT == "Quyền Admin")
                                                                                    {
                                                                                        ADMIN = "ADMIN";
                                                                                    }
                                                                                    if (STT == "Quyền Nhân Viên")
                                                                                    {
                                                                                        ADMIN = "EMPLOYEE";
                                                                                    }
                                                                                    var hotmail_mailmoakt = "";
                                                                                    row.Cells["cStatus"].Value = "Share BM....";
                                                                                    if (cmb_MAIL_SHARE_BM_IG.InvokeRequired)
                                                                                    {
                                                                                        cmb_MAIL_SHARE_BM_IG.Invoke(new Action(() =>
                                                                                        {
                                                                                            hotmail_mailmoakt = cmb_MAIL_SHARE_BM_IG.Text;
                                                                                        }));


                                                                                    }
                                                                                    if (hotmail_mailmoakt == "HOTMAIL")
                                                                                    {

                                                                                        List<string> Mail = new List<string>();
                                                                                        List<string> MailBM350 = new List<string>();
                                                                                        if (rtb_hotmail_BM350.InvokeRequired)
                                                                                        {
                                                                                            rtb_hotmail_BM350.Invoke(new Action(() =>
                                                                                            {

                                                                                                MailBM350 = rtb_hotmail_BM350.Lines.ToList();
                                                                                            }));


                                                                                        }

                                                                                        if (rtb_hotmail.InvokeRequired)
                                                                                        {
                                                                                            rtb_hotmail.Invoke(new Action(() =>
                                                                                            {
                                                                                                Mail = rtb_hotmail.Lines.ToList();
                                                                                            }));
                                                                                        }
                                                                                        var rnd = new Random();
                                                                                        var rnd1 = new Random();

                                                                                        var hotmail_pass = Mail[rnd.Next(Mail.Count)].ToString();
                                                                                        var hotmail_pass_BM350 = MailBM350[rnd1.Next(MailBM350.Count)].ToString();
                                                                                        var mail_backup = hotmail_pass.Split('|')[0].ToString();
                                                                                        var mail_backup_BM350 = hotmail_pass_BM350.Split('|')[0].ToString();
                                                                                        if (typeBm == "BM350")
                                                                                        {
                                                                                            row.Cells["cStatus"].Value = $"Share BM {idbm} => {mail_backup_BM350}";
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            row.Cells["cStatus"].Value = $"Share BM {idbm} => {mail_backup}";
                                                                                        }
                                                                                        var usernamemail = mail_backup.Split('@')[0].ToString();
                                                                                        var usernamemail_BM350 = mail_backup_BM350.Split('@')[0].ToString();
                                                                                        var domain = mail_backup.Split('@')[1].ToString();

                                                                                        var list_kt = File.ReadAllLines("kytuhotmail.txt").ToList();
                                                                                        Random rd = new Random();
                                                                                        var index = rd.Next(0, list_kt.Count);
                                                                                        var kt = list_kt[index];
                                                                                        var mail_share = "";

                                                                                        if (share_BM_IG == 2)
                                                                                        {
                                                                                            if (typeBm == "BM350")
                                                                                            {
                                                                                                mail_share = usernamemail_BM350 + "%2B" + "_BMB" + businessId + "@" + domain;
                                                                                                StreamWriter sw = new StreamWriter("ACCOUNTIGBM350.txt", true);
                                                                                                sw.WriteLine($"{username}|{password}|{c2FAvsCookie}|{x2fa_ignew}|{mail}|{passmail}|{businessId}|{typeBm}");
                                                                                                sw.Close();

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                mail_share = usernamemail + "%2B" + "_BMIII" + businessId + "@" + domain;
                                                                                            }


                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if (typeBm == "BM350")
                                                                                            {
                                                                                                mail_share = usernamemail_BM350 + "%2B" + "_BMA" + businessId + "@" + domain;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                mail_share = usernamemail + "%2B" + kt + businessId + "@" + domain;
                                                                                            }

                                                                                        }


                                                                                        var scriptInvite = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsInvitePeopleModalMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=6s&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=m2vooy:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmwoEeogzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiF-3a0Voc8-2-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1FwgU88158uwm85K&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&qpl_active_flow_ids=558499583&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsInvitePeopleModalMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"${{uid}}\",\"business_id\":\"${{businessId}}\",\"business_emails\":[\"{mail_share}\"],\"business_account_task_ids\":[\"926381894526285\",\"603931664885191\",\"1327662214465567\",\"862159105082613\",\"6161001899617846786\",\"1633404653754086\",\"967306614466178\",\"2848818871965443\",\"245181923290198\",\"388517145453246\"],\"invite_origin_surface\":\"MBS_INVITE_USER_FLOW\",\"assets\":[],\"expiry_time\":0,\"is_spark_permission\":false,\"client_timezone_id\":\"Asia/Jakarta\"}}}}&server_timestamps=true&doc_id=23919966164285762&fb_api_analytics_tags=[\"qpl_active_flow_ids=558499583\"]`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                                                                        while (isStop)
                                                                                        {
                                                                                            Thread.Sleep(1000);
                                                                                        }
                                                                                        var resultInvite = chromedriver.ExecuteScript(scriptInvite);
                                                                                        while (isStop)
                                                                                        {
                                                                                            Thread.Sleep(1000);
                                                                                        }
                                                                                        Thread.Sleep(1000);
                                                                                        if (resultInvite != null)
                                                                                        {
                                                                                            var resultInviteText = resultInvite.ToString();
                                                                                            if (resultInviteText.Contains("errors"))
                                                                                            {
                                                                                                row.Cells["cStatus"].Value = "MOI THAT BAI";
                                                                                            }

                                                                                            chromedriver.Navigate().Refresh();

                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            row.Cells["cStatus"].Value = "MOI THANH CONG";
                                                                                            Thread.Sleep(1000);
                                                                                            if (typeBm == "BM350")
                                                                                            {
                                                                                                row.Cells["cStatus"].Value = $"Share BM {idbm} => {mail_backup_BM350} DONE";
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                row.Cells["cStatus"].Value = $"Share BM {idbm} => {mail_backup} DONE";
                                                                                            }
                                                                                            chromedriver.Navigate().Refresh();
                                                                                            share_BM_IG++;
                                                                                            if (share_BM_IG == 3)
                                                                                            {
                                                                                                chromedriver.Close();
                                                                                                chromedriver.Quit();
                                                                                                goto next;

                                                                                            }
                                                                                        }





                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        var doc_link_Moakt = "";

                                                                                        if (cmb_doc_luon_link_mail_ao.InvokeRequired)
                                                                                        {
                                                                                            cmb_doc_luon_link_mail_ao.Invoke(new Action(() =>
                                                                                            {
                                                                                                doc_link_Moakt = cmb_doc_luon_link_mail_ao.Text;
                                                                                            }));
                                                                                        }

                                                                                        if(doc_link_Moakt == "ON")
                                                                                        {
                                                                                            HttpRequest httprequest_Mail_MOAKT = new HttpRequest();
                                                                                            httprequest_Mail_MOAKT.Cookies = new CookieDictionary();
                                                                                            httprequest_Mail_MOAKT.KeepAlive = true;
                                                                                            httprequest_Mail_MOAKT.AllowAutoRedirect = true;
                                                                                            httprequest_Mail_MOAKT.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                                                                                            var mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                                                                            if (string.IsNullOrEmpty(mail_share))
                                                                                            {
                                                                                                mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                                                                            }

                                                                                            var scriptInvite = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsInvitePeopleModalMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=6s&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=m2vooy:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmwoEeogzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiF-3a0Voc8-2-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1FwgU88158uwm85K&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&qpl_active_flow_ids=558499583&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsInvitePeopleModalMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"${{uid}}\",\"business_id\":\"${{businessId}}\",\"business_emails\":[\"{mail_share}\"],\"business_account_task_ids\":[\"926381894526285\",\"603931664885191\",\"1327662214465567\",\"862159105082613\",\"6161001899617846786\",\"1633404653754086\",\"967306614466178\",\"2848818871965443\",\"245181923290198\",\"388517145453246\"],\"invite_origin_surface\":\"MBS_INVITE_USER_FLOW\",\"assets\":[],\"expiry_time\":0,\"is_spark_permission\":false,\"client_timezone_id\":\"Asia/Jakarta\"}}}}&server_timestamps=true&doc_id=23919966164285762&fb_api_analytics_tags=[\"qpl_active_flow_ids=558499583\"]`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                                                                            while (isStop)
                                                                                            {
                                                                                                Thread.Sleep(1000);
                                                                                            }
                                                                                            var resultInvite = chromedriver.ExecuteScript(scriptInvite);
                                                                                            while (isStop)
                                                                                            {
                                                                                                Thread.Sleep(1000);
                                                                                            }
                                                                                            Thread.Sleep(1000);
                                                                                            if (resultInvite != null)
                                                                                            {
                                                                                                var resultInviteText = resultInvite.ToString();
                                                                                                if (resultInviteText.Contains("errors"))
                                                                                                {
                                                                                                    row.Cells["cStatus"].Value = "MOI THAT BAI";
                                                                                                }

                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                row.Cells["cStatus"].Value = "MOI THANH CONG";
                                                                                            }



                                                                                            var link = link_moakt(httprequest_Mail_MOAKT);
                                                                                            if (string.IsNullOrEmpty(link))
                                                                                            {
                                                                                                Thread.Sleep(2000);
                                                                                                link = link_moakt(httprequest_Mail_MOAKT);

                                                                                            }
                                                                                            if (!string.IsNullOrEmpty(link))
                                                                                            {

                                                                                                if (rtb_Link_BM_IG.InvokeRequired)
                                                                                                {
                                                                                                    rtb_Link_BM_IG.Invoke(new Action(() =>
                                                                                                    {
                                                                                                        rtb_Link_BM_IG.AppendText(businessId + "|" + link + Environment.NewLine);

                                                                                                    }));
                                                                                                }
                                                                                                row.Cells["cStatus"].Value = $"SHARE BM {businessId} DONE";
                                                                                                chromedriver.Navigate().Refresh();
                                                                                                share_BM_IG++;
                                                                                                if (share_BM_IG == 3)
                                                                                                {
                                                                                                    chromedriver.Close();
                                                                                                    chromedriver.Quit();
                                                                                                    goto next;

                                                                                                }


                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                row.Cells["cStatus"].Value = $"SHARE BM {businessId} FAIL";
                                                                                                chromedriver.Navigate().Refresh();

                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                           
                                                                                            try
                                                                                            {
                                                                                                int doiten = 0;
                                                                                            doiten:
                                                                                                try
                                                                                                {
                                                                                                    httpRequest.AddHeader("authority", "business.facebook.com");
                                                                                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                                                                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                                                                    httpRequest.AddHeader("dpr", "0.800000011920929");
                                                                                                    httpRequest.AddHeader("priority", "u=0, i");
                                                                                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                                                                                    httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                                                                                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Not;A=Brand\";v=\"99.0.0.0\", \"Google Chrome\";v=\"139.0.7258.155\", \"Chromium\";v=\"139.0.7258.155\"");
                                                                                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                                                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                                                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                                                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                                                                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                                                                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                                                                                    httpRequest.AddHeader("sec-fetch-site", "none");
                                                                                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                                                                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                                                                                    httpRequest.AddHeader("viewport-width", "1353");


                                                                                                    response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_info?business_id={businessId}");
                                                                                                    if (response.IsOK)
                                                                                                    {
                                                                                                        var responseSTr1 = response.ToString();
                                                                                                        var user = Regex.Match(responseSTr1, "&__user=(.*?)&").Groups[1].Value.ToString();
                                                                                                        var fb_dtsg = Regex.Match(responseSTr1, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                                                                        var jazoest1 = Regex.Match(responseSTr1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                                                                                        var lsd = Regex.Match(responseSTr1, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                                                                        httpRequest.AddHeader("authority", "business.facebook.com");
                                                                                                        httpRequest.AddHeader("accept", "*/*");
                                                                                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                                                                        httpRequest.AddHeader("origin", "https://business.facebook.com");
                                                                                                        httpRequest.AddHeader("priority", "u=1, i");
                                                                                                        httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/business_info?business_id={businessId}");
                                                                                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                                                                                        httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                                                                                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Not;A=Brand\";v=\"99.0.0.0\", \"Google Chrome\";v=\"139.0.7258.155\", \"Chromium\";v=\"139.0.7258.155\"");
                                                                                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                                                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                                                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                                                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                                                                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                                                                                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                                                                                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                                                                                        httpRequest.AddHeader("x-asbd-id", "359341");
                                                                                                        httpRequest.AddHeader("x-bh-flowsessionid", "upl_wizard_1756710305233_5e79f9ec-2cbc-4004-babb-253eeaaa107e");
                                                                                                        httpRequest.AddHeader("x-fb-friendly-name", "BizKitSettingsUpdateBusinessBasicInfoMutation");
                                                                                                        httpRequest.AddHeader("x-fb-upl-sessionid", "upl_1756710305233_3f0fcf26-5db4-4207-bb43-1f8ecfe0b1db");
                                                                                                        var name_new_bm = $"{nameBM}/{businessId}/{typeBm}";
                                                                                                        var payload1 = $"av={user}&__aaid=0&__bid={businessId}&__user={user}&__a=1&__req=q&__hs=20340.HYP:bizweb_comet_pkg.2.1...0&dpr=1&__ccg=GOOD&__rev=1026879426&__s=9fcdzh:ddgm5e:s8c0fv&__hsi=7548065597737792877&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw5hz8hw9-0r-qbwgE7Ro4C0RUb87C2m3K2y11wBz8188O12ypU5-2a3-3a1YwBgao6C1uwiUmw9O48W2a4p8aHwzzXwKwt8jwGzEaE8o4-222SU5G4E5yexfwjESq1qwjokG9wOwem323-qaUK2e0UE2ZwrUdUcp8aE2cwNwDwjouwqk12xecw4kxW1owmU2wwwwww9G0I837wNw&__csr=g653kj6Yhf5POjn2dhT4nFdmhSSXbkLt9lcC-DqSF5sysynV9dkDPtagh99TZqIWWRX8CyZLCVi9Zd9dQhqRlpbAmHijmF4FKqOaTumFpbFqVQLh4WkCl5ye-haGLQimlHh7Vaz9onXUC9VGmWACJ9yHjALzAVe8VQjyaBp_t5yueKiEGh6BG9BABSXntGHACyK9hQ4ebKEC2Gm9yFWGcKCbjF-6UyFUGiFoHJ2ohyeiUWEGVaGm8G8z9EC58WmQ9oO3y5byeEhKdwAwUGiVFUy213rzp4u4EkAx678gxm3uEg-vgmwSgcEszFUaEgyosgkwBUrgozoyawhobo4a4bwqobEcUmwo8pxmax60BK1Px2U0mhyu2K09Yw3oU1j886e2Uownm12o-qNu9ia-0m14Vk0sM5Gx8ncRsaexk5X0IxeEj1uE3xhKaAccg5B0io18o4eFsFMm1vws9RkE0ixK0Z81_88-m4U52cwb-9y52wH-7oGfc1jw8Pw828Q035u2e0OHw2sUO03SK9gK0hjwvRg0PLBwl8y0afw8l0go3OAw3PE0ix624by80-OVA0eXwdW32Scw1lF1W0-9iw4Og0XG09IO00yUG4lgmU86QEkgmwd2awn8kw0LUB9w0lH9o8E7mE17ozpp20lE27wroz804_80ZeeypU6C8xjzEO3e3u0cegaUW5o4twvEKrw1310cW0m-21w&__hsdp=g9YAeI8cA74b29ILAigQol57C23NRn1Mmz5XAGqzF1S9x6im-ezU4Smt3193IS45CKl0yzycvUaXQ8yo6uumbxe4UWVah21y9e7Ey6ody38aEqz87Ym13y8NwXggwiElwOwkE8o0aBUcU2qw3N83MwBw1WC04080J20hq0PU&__hblp=0g98Caw4gxi3a17wOwn8W6LDxq5888C1WwqE4m1dwiovz8f83bohz8fk488A2q3-8wjrggxKbzofo2zzE4a0_8W0x82VwxwSwLwOwYw-wo84K1kx66o4u0FUco621ew47wpUfk9wYwkEcEfUcWwnUoxW9woo8U0wq0Ho989EcUfofo42qjybxy2m4onw9Oi586GFoeo2CwOU3jw4Dwoo20x61Uw8y0kK3uEy12x62G1HwmKdg4e0DVu2a48B1aaCzK6EZ3UaaUDBwkUcWK8wQwn8cEW1nw-xC1TwrU5e10wBwaKU4K10wgE2Pxu13w-xK1JwfjyE2XwjE4u1xz82uxK1NwFwKwIwhU8F81D8G&__sjsp=g9YAeI8cA74b29ILAigQol57C21n5ltMq5ENuVaCEWgtyohABLzE-1dBDgMigXdx1pHBg8EUz7-2KZ28C1LByUjxeeKiAgwoyjxW8xC3owO2G6EO1_5wgUycoeQ484G5ocE5a26&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1026879426&__spin_b=trunk&__spin_t=1757420970&__jssesw=1&__crn=comet.bizweb.BusinessCometBizSuiteSettingsBusinessInfoV3Route&qpl_active_flow_ids=558504925&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsUpdateBusinessNameMutation&variables={{\"businessID\":\"{businessId}\",\"businessName\":\"{name_new_bm}\"}}&server_timestamps=true&doc_id=9654905274628482&fb_api_analytics_tags=[\"qpl_active_flow_ids=558504925\"]";
                                                                                                        response = httpRequest.Post("https://business.facebook.com/api/graphql/?_callFlowletID=3229&_triggerFlowletID=3224&qpl_active_e2e_trace_ids=", payload1, "application/x-www-form-urlencoded");
                                                                                                        if (response.IsOK)
                                                                                                        {
                                                                                                            var responseSTr2 = response.ToString();
                                                                                                            if (responseSTr2.Contains($"name\":\"{name_new_bm}\""))
                                                                                                            {
                                                                                                                row.Cells["cStatus"].Value = "ĐỔI TÊN BM DONE ";
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                doiten++;
                                                                                                                if (doiten < 5)
                                                                                                                {
                                                                                                                    row.Cells["cStatus"].Value = "ĐỔI TÊN BM FAIL! ";
                                                                                                                    goto doiten;
                                                                                                                }

                                                                                                            }
                                                                                                        }


                                                                                                    }
                                                                                                }
                                                                                                catch
                                                                                                {
                                                                                                    doiten++;
                                                                                                    if (doiten < 5)
                                                                                                    {
                                                                                                        row.Cells["cStatus"].Value = "ĐỔI TÊN BM FAIL! ";
                                                                                                        goto doiten;
                                                                                                    }


                                                                                                }

                                                                                                List<string> Mail = new List<string>();
                                                                                                List<string> MailBM350 = new List<string>();
                                                                                                if (rtb_hotmail_BM350.InvokeRequired)
                                                                                                {
                                                                                                    rtb_hotmail_BM350.Invoke(new Action(() =>
                                                                                                    {

                                                                                                        MailBM350 = rtb_hotmail_BM350.Lines.ToList();
                                                                                                    }));


                                                                                                }

                                                                                                if (rtb_hotmail.InvokeRequired)
                                                                                                {
                                                                                                    rtb_hotmail.Invoke(new Action(() =>
                                                                                                    {
                                                                                                        Mail = rtb_hotmail.Lines.ToList();
                                                                                                    }));
                                                                                                }

                                                                                                var mail_share = "";
                                                                                             
                                                                                                Random rnd = new Random();
                                                                                                string hotmail_pass = hotmail_pass = Mail[rnd.Next(Mail.Count)].ToString();

                                                                                                var rnd1 = new Random();
                                                                                                var hotmail_pass_BM350 = MailBM350[rnd1.Next(MailBM350.Count)].ToString();

                                                                                                if (typeBm == "BM350")
                                                                                                {
                                                                                                    row.Cells["cStatus"].Value = $"Share BM {businessId} => {hotmail_pass_BM350}";
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    row.Cells["cStatus"].Value = $"Share BM {businessId} => {hotmail_pass}";
                                                                                                }


                                                                                                if (typeBm == "BM350")
                                                                                                {
                                                                                                    mail_share = hotmail_pass_BM350;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    mail_share = hotmail_pass;
                                                                                                }

                                                                                                var scriptInvite = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsInvitePeopleModalMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=6s&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=m2vooy:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmwoEeogzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiF-3a0Voc8-2-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1FwgU88158uwm85K&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&qpl_active_flow_ids=558499583&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsInvitePeopleModalMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"${{uid}}\",\"business_id\":\"${{businessId}}\",\"business_emails\":[\"{mail_share}\"],\"business_account_task_ids\":[\"926381894526285\",\"603931664885191\",\"1327662214465567\",\"862159105082613\",\"6161001899617846786\",\"1633404653754086\",\"967306614466178\",\"2848818871965443\",\"245181923290198\",\"388517145453246\"],\"invite_origin_surface\":\"MBS_INVITE_USER_FLOW\",\"assets\":[],\"expiry_time\":0,\"is_spark_permission\":false,\"client_timezone_id\":\"Asia/Jakarta\"}}}}&server_timestamps=true&doc_id=23919966164285762&fb_api_analytics_tags=[\"qpl_active_flow_ids=558499583\"]`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                                                                                while (isStop)
                                                                                                {
                                                                                                    Thread.Sleep(1000);
                                                                                                }
                                                                                                var resultInvite = chromedriver.ExecuteScript(scriptInvite);
                                                                                                while (isStop)
                                                                                                {
                                                                                                    Thread.Sleep(1000);
                                                                                                }
                                                                                                Thread.Sleep(1000);
                                                                                                if (resultInvite != null)
                                                                                                {
                                                                                                    var resultInviteText = resultInvite.ToString();
                                                                                                    if (resultInviteText.Contains("errors"))
                                                                                                    {
                                                                                                        row.Cells["cStatus"].Value = "MOI THAT BAI";
                                                                                                    }

                                                                                                    chromedriver.Navigate().Refresh();

                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    row.Cells["cStatus"].Value = "MOI THANH CONG";
                                                                                                    Thread.Sleep(1000);
                                                                                                    if (typeBm == "BM350")
                                                                                                    {
                                                                                                        row.Cells["cStatus"].Value = $"Share BM {businessId} => {hotmail_pass_BM350} DONE";
                                                                                                        rip_ig++;
                                                                                                        if (rip_ig == 3)
                                                                                                        {
                                                                                                           
                                                                                                            goto RIP_IG;

                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        row.Cells["cStatus"].Value = $"Share BM {businessId} => {hotmail_pass} DONE";
                                                                                                        rip_ig++;
                                                                                                        if (rip_ig == 3)
                                                                                                        {

                                                                                                            goto RIP_IG;

                                                                                                        }
                                                                                                    }
                                                                                                    chromedriver.Navigate().Refresh();

                                                                                                }


                                                                                            }
                                                                                            catch { }
                                                                                  


                                                                                        }
                                                                                      



                                                                                    }

                                                                                }


                                                                            }
                                                                            else
                                                                            {
                                                                                row.Cells["cStatus"].Value = $"BM {businessId} DIE";
                                                                                goto next;
                                                                            }


                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    row.Cells["cStatus"].Value = $"Check BM FAIL ......";
                                                                    goto checkbm;

                                                                }
                                                            }
                                                            catch
                                                            {
                                                                row.Cells["cStatus"].Value = $"Check BM FAIL ......";
                                                                goto checkbm;
                                                            }
                                                        RIP_IG:
                                                            try
                                                            {
                                                                var CHECK_ADMIN = "";
                                                                if (cmb_CHECK_ADMIN.InvokeRequired)
                                                                {
                                                                    cmb_CHECK_ADMIN.Invoke(new Action(() =>
                                                                    {
                                                                        CHECK_ADMIN = cmb_CHECK_ADMIN.Text;
                                                                    }));

                                                                }
                                                                if (CHECK_ADMIN == "ON")
                                                                {
                                                                    try
                                                                    {
                                                                        if (rip_ig == 3)
                                                                        {
                                                                            var RIP_IG = "";

                                                                            if (cmb_RIPIG.InvokeRequired)
                                                                            {
                                                                                cmb_RIPIG.Invoke(new Action(() =>
                                                                                {
                                                                                    RIP_IG = cmb_RIPIG.Text;
                                                                                }));
                                                                            }
                                                                            if (RIP_IG == "ON")
                                                                            {
                                                                                chromedriver.Navigate().GoToUrl("https://accountscenter.instagram.com/personal_info/");
                                                                                RIP(chromedriver, row, username, password, x2fa_ignew, mail, passmail, mailkhoiphuc);
                                                                            }

                                                                        }
                                                                        else
                                                                        {
                                                                            CHECK_ADMIN_BM_IG(chromedriver, row, accessToken_EAAG);

                                                                            var TKQC = "";
                                                                            if (cmb_TTKQC_BM_IG.InvokeRequired)
                                                                            {
                                                                                cmb_TTKQC_BM_IG.Invoke(new Action(() =>
                                                                                {
                                                                                    TKQC = cmb_TTKQC_BM_IG.Text;

                                                                                }));
                                                                            }
                                                                            if (TKQC == "ON")
                                                                            {
                                                                                var return01 = TAOTK_BM_IG(businessId, chromedriver, row, username, password, c2FAvsCookie, mail, passmail, mailkhoiphuc);
                                                                                if (return01 == "BM Die")
                                                                                {
                                                                                    row.Cells["cStatus"].Value = $"BM {businessId} DIE";
                                                                                    goto next;
                                                                                }
                                                                            }



                                                                        }

                                                                    }
                                                                    catch { }
                                                                    finally
                                                                    {
                                                                        if (chromedriver != null)
                                                                        {
                                                                            try
                                                                            {
                                                                                chromedriver.Quit();
                                                                            }
                                                                            catch { }
                                                                            WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                                                                            if (Directory.Exists(profilePath))
                                                                            {
                                                                                try
                                                                                {
                                                                                    Directory.Delete(profilePath, true);
                                                                                }
                                                                                catch (Exception ex)
                                                                                {
                                                                                    Console.WriteLine($"Failed to delete profile {username}: {ex.Message}");
                                                                                }
                                                                            }
                                                                        }
                                                                    }


                                                                    goto regbm;
                                                                }

                                                            }
                                                            catch { }

                                                        }
                                                        else
                                                        {
                                                            List<string> listBMLIVE = new List<string>();
                                                            List<string> listBMLIVETK = new List<string>();
                                                            List<string> listBMLIVE_TK_BM50_BM350 = new List<string>();
                                                            var chi_share_bm_350 = "";
                                                            if (cmb_chishare_bm350.InvokeRequired)
                                                            {
                                                                cmb_chishare_bm350.Invoke(new Action(() =>
                                                                {
                                                                    chi_share_bm_350 = cmb_chishare_bm350.Text;
                                                                }));



                                                            }
                                                            else
                                                            {
                                                                chi_share_bm_350 = cmb_chishare_bm350.Text;
                                                            }
                                                            try
                                                            {
                                                                Thread.Sleep(5000);
                                                                chromedriver.Navigate().GoToUrl("https://business.facebook.com/billing_hub");

                                                                var cookies = chromedriver.Manage().Cookies.AllCookies;
                                                                var cookieString = "";
                                                                foreach (var cookie in cookies)
                                                                {
                                                                    cookieString += cookie.Name + "=" + cookie.Value + ";";
                                                                }

                                                                cookieString = cookieString.TrimEnd(';');

                                                                HttpRequest http = new HttpRequest();
                                                                http.Cookies = new CookieDictionary();
                                                                http.UserAgent = xNet.Http.ChromeUserAgent();
                                                                http.KeepAlive = true;

                                                                var cookieRaws = cookieString.Split(';');
                                                                foreach (var cookieRaw1 in cookieRaws)
                                                                {
                                                                    var cookieJar = cookieRaw1.Split('=');
                                                                    try
                                                                    {
                                                                        http.Cookies.Add(cookieJar[0], cookieJar[1]);
                                                                    }
                                                                    catch { }
                                                                }
                                                                chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={businessId}&placement=standalone&global_scope_id={businessId}");
                                                                var pageSourcebillinghub = chromedriver.PageSource;
                                                                var fbdtsgbilling = Regex.Match(pageSourcebillinghub, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                                                                var lsdbilling = Regex.Match(pageSourcebillinghub, "LSD\\\",\\[],{\\\"token\\\":\\\"(.*?)\\\"").Groups[1].Value;
                                                                var userIDbilling = Regex.Match(pageSourcebillinghub, "userID\":\"(.*?)\"").Groups[1].Value;
                                                                int taobm = (int)num_tao_5bm.Value;
                                                                int delay_reg = (int)numericUpDown5_delay_regbmig.Value;

                                                                string filePath = "mailbusiness.txt";
                                                                var lines = File.ReadAllLines(filePath);

                                                                string filePathName = "firstname.txt";
                                                                var linesName = File.ReadAllLines(filePathName);

                                                                string filePathLastname = "lastname.txt";
                                                                var linesLastname = File.ReadAllLines(filePathLastname);

                                                                for (int z = 0; z < taobm; z++)
                                                                {
                                                                    try
                                                                    {
                                                                        // Tạo random để chọn 1 dòng bất kỳ
                                                                        Random randname = new Random();
                                                                        int indexname = randname.Next(linesName.Length);
                                                                        string Name = linesName[indexname].Trim();
                                                                        // Tạo random để chọn 1 dòng bất kỳ
                                                                        Random randLastname = new Random();
                                                                        int indexLastname = randLastname.Next(linesLastname.Length);
                                                                        string Lastname = linesLastname[indexLastname].Trim();
                                                                        // Tạo random để chọn 1 dòng bất kỳ
                                                                        Random rand = new Random();
                                                                        int index = rand.Next(lines.Length);
                                                                        string mailbusiness = lines[index].Trim();

                                                                        Random random1 = new Random();
                                                                        int numberRandom = random.Next(0, 100000000);
                                                                        string nameBusiness = Name + numberRandom;

                                                                        var databilling = $"av={userIDbilling}&__usid=6-Tsj2f3n10ciz3x:Psj2foz1pqge5l:0-Asj2f0rv8vjy2-RV=6:F=&__aaid=0&__bid={businessId}&__user={userIDbilling}&__a=1&__req=w&__hs=19966.BP:DEFAULT.2.0..0.0&dpr=1&__ccg=EXCELLENT&__rev=1016131455&__s=ed5dxo:k8nyiz:bhvqcl&__hsi=7409159100372555872&__dyn=7xeUmxa2C5rgmwCwRyU8EKmhe2Om2q1DxuqErxSax21dxebzEdF98Sm4Euxa1MxKdwJzUmxe1kx20zEyaxG4o4B0l898888oe82xwCCwjFEK2Z17wJBGEpiwzlBwgrxK261UxO4VA48a8lwWxe4oeUa85Cdw9-0CE4a4ouyUd85W7o6eu2C2l0FgKi3a2i11grzUeUmwvC6UgzE8EhAwGK2efK2i9wAx25U9F8W6888dUnwj8888US1qxa3O6UW4UnwhFU2DxiaBwKwgocU4e2K7EOicG3qazo8U3yDwbm5E5y1FAK2q1bzEG2q362u1dxW6Uc8swn9UgxS0Vo7u1rwGw&__csr=&fb_dtsg={fbdtsgbilling}&jazoest=25634&lsd={lsdbilling}&__spin_r=1016131455&__spin_b=trunk&__spin_t=1725079282&__jssesw=1&qpl_active_flow_ids=1001920343,558502430&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=useBusinessCreationMutationMutation&variables={{\"input\":{{\"client_mutation_id\":\"2\",\"actor_id\":\"{userIDbilling}\",\"business_name\":\"{nameBusiness}\",\"user_first_name\":\"{Name}\",\"user_last_name\":\"{Lastname}\",\"user_email\":\"{mailbusiness}\",\"creation_source\":\"BM_HOME_BUSINESS_CREATION_IN_SCOPE_SELECTOR\",\"entry_point\":\"UNIFIED_GLOBAL_SCOPE_SELECTOR\"}}}}&server_timestamps=true&doc_id=7780408488685584&fb_api_analytics_tags=[\"qpl_active_flow_ids=1001920343,558502430\"]";

                                                                        var posttaobm2 = http.Post("https://business.facebook.com/api/graphql/?_callFlowletID=10444&_triggerFlowletID=10444", databilling, "application/x-www-form-urlencoded").ToString();

                                                                        if (posttaobm2.Contains("profile_picture_url"))
                                                                        {
                                                                            //status create thanh cong
                                                                            row.Cells["cStatus"].Value = "Reg BM thứ " + (z + 2) + " thành công";
                                                                            Thread.Sleep(TimeSpan.FromSeconds(delay_reg));
                                                                        }
                                                                        else
                                                                        {
                                                                            row.Cells["cStatus"].Value = "Reg BM thứ " + (z + 2) + " thất bại";
                                                                        }
                                                                    }
                                                                    catch { }



                                                                }

                                                            }
                                                            catch { }
                                                            List<string> BM50 = new List<string>();
                                                            List<string> BMALL = new List<string>();
                                                            try
                                                            {
                                                                chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/home?asset_id=&business_id=&nav_ref=bm_home_redirect");
                                                                Thread.Sleep(2000);
                                                                html = chromedriver.PageSource;
                                                                businessId = Regex.Match(html, "business_id=(.*?)\"").Groups[1].Value.ToString();
                                                                url = chromedriver.Url.ToString();
                                                                if (string.IsNullOrEmpty(businessId))
                                                                {
                                                                    url = chromedriver.Url.ToString();
                                                                    businessId = Regex.Match(url, "business_id=(.*?)&").Groups[1].Value.ToString();

                                                                }



                                                                chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={businessId}&placement=standalone&global_scope_id={businessId}");

                                                                html = chromedriver.PageSource;

                                                                accessToken_EAAG = Regex.Match(html, "init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                                                                if (string.IsNullOrEmpty(accessToken_EAAG))
                                                                {
                                                                    chromedriver.Navigate().GoToUrl("https://business.facebook.com/billing_hub/accounts?business_id=&placement=standalone&global_scope_id=");
                                                                    //MessageBox.Show("accessToken_EAAG NULL");
                                                                    row.Cells["cStatus"].Value = "accessToken_EAAG NULL";
                                                                    x++;
                                                                    if (x > 2)
                                                                    {
                                                                        //MessageBox.Show("accessToken_EAAG NULL ko vào được business");
                                                                        row.Cells["cStatus"].Value = "accessToken_EAAG NULL ko vào được businessL";
                                                                        try
                                                                        {
                                                                            chromedriver.Close();
                                                                            chromedriver.Quit();
                                                                        }
                                                                        catch { }
                                                                        finally
                                                                        {
                                                                            if (chromedriver != null)
                                                                            {
                                                                                try
                                                                                {
                                                                                    chromedriver.Quit();
                                                                                }
                                                                                catch { }
                                                                                WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                                                                                if (Directory.Exists(profilePath))
                                                                                {
                                                                                    try
                                                                                    {
                                                                                        Directory.Delete(profilePath, true);
                                                                                    }
                                                                                    catch (Exception ex)
                                                                                    {
                                                                                        Console.WriteLine($"Failed to delete profile {username}: {ex.Message}");
                                                                                    }
                                                                                }
                                                                            }
                                                                        }


                                                                        Thread.Sleep(2000);
                                                                        goto login;
                                                                    }
                                                                    goto checkbm;
                                                                }
                                                                Thread.Sleep(2000);

                                                                row.Cells["cStatus"].Value = "Check BM....";
                                                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                                                var cookiestring = "";
                                                                foreach (var cookie in cookiess)
                                                                {
                                                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                                                }
                                                                cookiestring = cookiestring.Trim(';');

                                                                httpRequest = new HttpRequest();
                                                                httpRequest.AllowAutoRedirect = true;
                                                                httpRequest.Cookies = new CookieDictionary();
                                                                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                                                                EnsurePostWWWLoginHDFull(httpRequest);
                                                                httpRequest.KeepAlive = true;
                                                                var cookieRaws = cookiestring.Split(';');
                                                                foreach (var cookieraw in cookieRaws)
                                                                {
                                                                    var cookieJAr = cookieraw.Split('=');
                                                                    try
                                                                    {
                                                                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                                                    }
                                                                    catch { }
                                                                }
                                                                List<string> BMDIE = new List<string>();
                                                                List<string> BMLIVE = new List<string>();
                                                            
                                                                List<string> BM350 = new List<string>();
                                                                row.Cells["cCheckBM"].Value = "";
                                                                var checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={accessToken_EAAG}&limit=10&fields=%5B%22id%22,%22allow_page_management_in_www%22,%22business_users%7Brole%7D%22,%22sharing_eligibility_status%22,%22owned_ad_accounts.limit(1)%7Bcurrency,adtrust_dsl%7D%22,%22created_time%22,%22name%22,%20%22status%22%5D";
                                                                response = httpRequest.Get(checkBM);
                                                                if (response.IsOK)
                                                                {
                                                                    var responseSTR6 = response.ToString();
                                                                    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                                                                    doc.LoadHtml(responseSTR6);
                                                                    JObject jobject = JObject.Parse(responseSTR6);
                                                                    var dataValues = jobject["data"];
                                                                    if (dataValues != null)
                                                                    {
                                                                        var dataValuesArr = dataValues.ToObject<JArray>();
                                                                        foreach (var itemObject in dataValuesArr)
                                                                        {
                                                                            businessId = itemObject["id"].ToString();
                                                                            var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                                                            var createdtime = itemObject["created_time"].ToString();
                                                                            var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                                                            var nameBM = itemObject["name"].ToString();
                                                                            BMALL.Add(businessId);
                                                                            row.Cells["cCheckBM"].Value += $"{businessId}|{typeBm}|{statusBm}|";
                                                                            // Đổi màu chữ nếu là BM350
                                                                            if (typeBm == "BM350")
                                                                            {
                                                                                BM350.Add(businessId);
                                                                                row.Cells["cCheckBM"].Style.ForeColor = Color.Red; // Đặt màu đỏ
                                                                            }
                                                                            else
                                                                            {
                                                                                row.Cells["cCheckBM"].Style.ForeColor = Color.Black; // Mặc định màu đen
                                                                            }
                                                                            if (BM350.Count > 0)
                                                                            {
                                                                                var color350 = "";
                                                                                if (cmb_color350.InvokeRequired)
                                                                                {
                                                                                    cmb_color350.Invoke(new Action(() =>
                                                                                    {
                                                                                        color350 = cmb_color350.Text;
                                                                                    }));
                                                                                }
                                                                                row.Cells["cCheckBM"].Style.ForeColor = Color.FromName(color350);
                                                                            }

                                                                            StreamWriter sw2 = new StreamWriter("BMCLONE.txt", true);
                                                                            sw2.WriteLine($"{businessId}|{typeBm}|{statusBm}|{username}" + DateTime.Now);
                                                                            sw2.Close();
                                                                            if (statusBm == "BM Die")
                                                                            {

                                                                                BMDIE.Add($"{businessId}|{typeBm}|{statusBm}");

                                                                            }
                                                                            if (chi_share_bm_350 == "ON")
                                                                            {

                                                                                if (typeBm == "BM50")
                                                                                {
                                                                                    listBMLIVE.Add(businessId);
                                                                                    BM50.Add(businessId);
                                                                                    goto check;
                                                                                }

                                                                            }
                                                                            if (statusBm == "BM Live")
                                                                            {
                                                                                BMLIVE.Add($"{businessId}|{typeBm}|{statusBm}|{nameBM}");


                                                                            }

                                                                        check:
                                                                            Thread.Sleep(100);
                                                                        }
                                                                        var DINH_BM_DIE_BO = "";
                                                                        if (cmb_bo_DIE.InvokeRequired)
                                                                        {
                                                                            cmb_bo_DIE.Invoke(new Action(() =>
                                                                            {
                                                                                DINH_BM_DIE_BO = cmb_bo_DIE.Text;
                                                                            }));
                                                                        }
                                                                        if (DINH_BM_DIE_BO == "OFF")
                                                                        {
                                                                            if (BMDIE.Count > 0)
                                                                            {
                                                                                row.Cells["cStatus"].Value = $"{BMDIE.Count} BM DIE";
                                                                                goto next;
                                                                            }

                                                                        }

                                                                        if (BMLIVE.Count > 0)
                                                                        {
                                                                            var hotmail_mailmoakt = "";
                                                                            if (cmb_MAIL_SHARE_BM_IG.InvokeRequired)
                                                                            {
                                                                                cmb_MAIL_SHARE_BM_IG.Invoke(new Action(() =>
                                                                                {
                                                                                    hotmail_mailmoakt = cmb_MAIL_SHARE_BM_IG.Text;
                                                                                }));


                                                                            }
                                                                            foreach (var BMSHARE in BMLIVE)
                                                                            {

                                                                                businessId = BMSHARE.Split('|')[0].ToString();
                                                                                var typeBm = BMSHARE.Split('|')[1].ToString();
                                                                                var nameBm = BMSHARE.Split('|')[3].ToString();
                                                                                listBMLIVETK.Add(businessId);
                                                                                listBMLIVE_TK_BM50_BM350.Add($"{businessId}|{typeBm}");
                                                                               
                                                                                row.Cells["cStatus"].Value = "Share BM....";
                                                   
                                                                                if (hotmail_mailmoakt == "MAIL_MOAKT")
                                                                                {
                                                                                    int doiten = 0;
                                                                                doiten:
                                                                                    try
                                                                                    {
                                                                                        httpRequest.AddHeader("authority", "business.facebook.com");
                                                                                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                                                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                                                        httpRequest.AddHeader("dpr", "0.800000011920929");
                                                                                        httpRequest.AddHeader("priority", "u=0, i");
                                                                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                                                                        httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                                                                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Not;A=Brand\";v=\"99.0.0.0\", \"Google Chrome\";v=\"139.0.7258.155\", \"Chromium\";v=\"139.0.7258.155\"");
                                                                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                                                                        httpRequest.AddHeader("sec-fetch-dest", "document");
                                                                                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                                                                        httpRequest.AddHeader("sec-fetch-site", "none");
                                                                                        httpRequest.AddHeader("sec-fetch-user", "?1");
                                                                                        httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                                                                        httpRequest.AddHeader("viewport-width", "1353");


                                                                                        response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_info?business_id={businessId}");
                                                                                        if (response.IsOK)
                                                                                        {
                                                                                            var responseSTr1 = response.ToString();
                                                                                            var user = Regex.Match(responseSTr1, "&__user=(.*?)&").Groups[1].Value.ToString();
                                                                                            var fb_dtsg = Regex.Match(responseSTr1, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                                                            var jazoest1 = Regex.Match(responseSTr1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                                                                            var lsd = Regex.Match(responseSTr1, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                                                                                            httpRequest.AddHeader("authority", "business.facebook.com");
                                                                                            httpRequest.AddHeader("accept", "*/*");
                                                                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                                                            httpRequest.AddHeader("origin", "https://business.facebook.com");
                                                                                            httpRequest.AddHeader("priority", "u=1, i");
                                                                                            httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/business_info?business_id={businessId}");
                                                                                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                                                                            httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                                                                                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Not;A=Brand\";v=\"99.0.0.0\", \"Google Chrome\";v=\"139.0.7258.155\", \"Chromium\";v=\"139.0.7258.155\"");
                                                                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                                                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                                                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                                                                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                                                                                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                                                                                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                                                                            httpRequest.AddHeader("x-asbd-id", "359341");
                                                                                            httpRequest.AddHeader("x-bh-flowsessionid", "upl_wizard_1756710305233_5e79f9ec-2cbc-4004-babb-253eeaaa107e");
                                                                                            httpRequest.AddHeader("x-fb-friendly-name", "BizKitSettingsUpdateBusinessBasicInfoMutation");
                                                                                            httpRequest.AddHeader("x-fb-upl-sessionid", "upl_1756710305233_3f0fcf26-5db4-4207-bb43-1f8ecfe0b1db");
                                                                                            var name_new_bm = $"{nameBm}/{businessId}/{typeBm}";
                                                                                            var payload1 = $"av={user}&__aaid=0&__bid={businessId}&__user={user}&__a=1&__req=q&__hs=20340.HYP:bizweb_comet_pkg.2.1...0&dpr=1&__ccg=GOOD&__rev=1026879426&__s=9fcdzh:ddgm5e:s8c0fv&__hsi=7548065597737792877&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU29zEdF8ixy361twYwJw5hz8hw9-0r-qbwgE7Ro4C0RUb87C2m3K2y11wBz8188O12ypU5-2a3-3a1YwBgao6C1uwiUmw9O48W2a4p8aHwzzXwKwt8jwGzEaE8o4-222SU5G4E5yexfwjESq1qwjokG9wOwem323-qaUK2e0UE2ZwrUdUcp8aE2cwNwDwjouwqk12xecw4kxW1owmU2wwwwww9G0I837wNw&__csr=g653kj6Yhf5POjn2dhT4nFdmhSSXbkLt9lcC-DqSF5sysynV9dkDPtagh99TZqIWWRX8CyZLCVi9Zd9dQhqRlpbAmHijmF4FKqOaTumFpbFqVQLh4WkCl5ye-haGLQimlHh7Vaz9onXUC9VGmWACJ9yHjALzAVe8VQjyaBp_t5yueKiEGh6BG9BABSXntGHACyK9hQ4ebKEC2Gm9yFWGcKCbjF-6UyFUGiFoHJ2ohyeiUWEGVaGm8G8z9EC58WmQ9oO3y5byeEhKdwAwUGiVFUy213rzp4u4EkAx678gxm3uEg-vgmwSgcEszFUaEgyosgkwBUrgozoyawhobo4a4bwqobEcUmwo8pxmax60BK1Px2U0mhyu2K09Yw3oU1j886e2Uownm12o-qNu9ia-0m14Vk0sM5Gx8ncRsaexk5X0IxeEj1uE3xhKaAccg5B0io18o4eFsFMm1vws9RkE0ixK0Z81_88-m4U52cwb-9y52wH-7oGfc1jw8Pw828Q035u2e0OHw2sUO03SK9gK0hjwvRg0PLBwl8y0afw8l0go3OAw3PE0ix624by80-OVA0eXwdW32Scw1lF1W0-9iw4Og0XG09IO00yUG4lgmU86QEkgmwd2awn8kw0LUB9w0lH9o8E7mE17ozpp20lE27wroz804_80ZeeypU6C8xjzEO3e3u0cegaUW5o4twvEKrw1310cW0m-21w&__hsdp=g9YAeI8cA74b29ILAigQol57C23NRn1Mmz5XAGqzF1S9x6im-ezU4Smt3193IS45CKl0yzycvUaXQ8yo6uumbxe4UWVah21y9e7Ey6ody38aEqz87Ym13y8NwXggwiElwOwkE8o0aBUcU2qw3N83MwBw1WC04080J20hq0PU&__hblp=0g98Caw4gxi3a17wOwn8W6LDxq5888C1WwqE4m1dwiovz8f83bohz8fk488A2q3-8wjrggxKbzofo2zzE4a0_8W0x82VwxwSwLwOwYw-wo84K1kx66o4u0FUco621ew47wpUfk9wYwkEcEfUcWwnUoxW9woo8U0wq0Ho989EcUfofo42qjybxy2m4onw9Oi586GFoeo2CwOU3jw4Dwoo20x61Uw8y0kK3uEy12x62G1HwmKdg4e0DVu2a48B1aaCzK6EZ3UaaUDBwkUcWK8wQwn8cEW1nw-xC1TwrU5e10wBwaKU4K10wgE2Pxu13w-xK1JwfjyE2XwjE4u1xz82uxK1NwFwKwIwhU8F81D8G&__sjsp=g9YAeI8cA74b29ILAigQol57C21n5ltMq5ENuVaCEWgtyohABLzE-1dBDgMigXdx1pHBg8EUz7-2KZ28C1LByUjxeeKiAgwoyjxW8xC3owO2G6EO1_5wgUycoeQ484G5ocE5a26&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1026879426&__spin_b=trunk&__spin_t=1757420970&__jssesw=1&__crn=comet.bizweb.BusinessCometBizSuiteSettingsBusinessInfoV3Route&qpl_active_flow_ids=558504925&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsUpdateBusinessNameMutation&variables={{\"businessID\":\"{businessId}\",\"businessName\":\"{name_new_bm}\"}}&server_timestamps=true&doc_id=9654905274628482&fb_api_analytics_tags=[\"qpl_active_flow_ids=558504925\"]";
                                                                                            response = httpRequest.Post("https://business.facebook.com/api/graphql/?_callFlowletID=3229&_triggerFlowletID=3224&qpl_active_e2e_trace_ids=", payload1, "application/x-www-form-urlencoded");
                                                                                            if (response.IsOK)
                                                                                            {
                                                                                                var responseSTr2 = response.ToString();
                                                                                                if (responseSTr2.Contains($"name\":\"{name_new_bm}\""))
                                                                                                {
                                                                                                    row.Cells["cStatus"].Value = "ĐỔI TÊN BM DONE ";
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    doiten++;
                                                                                                    if(doiten < 5)
                                                                                                    {
                                                                                                        row.Cells["cStatus"].Value = "ĐỔI TÊN BM FAIL! ";
                                                                                                        goto doiten;
                                                                                                    }
                                                                                                   
                                                                                                }
                                                                                            }


                                                                                        }
                                                                                    }
                                                                                    catch 
                                                                                    {
                                                                                        doiten++;
                                                                                        if (doiten < 5)
                                                                                        {
                                                                                            row.Cells["cStatus"].Value = "ĐỔI TÊN BM FAIL! ";
                                                                                            goto doiten;
                                                                                        }
                                                                                   

                                                                                    }



                                                                                }





                                                                                chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_users/?global_scope_id={businessId}&business_id={businessId}&nav_ref=bizweb_biz_home_scope_selector&redirect_session_id=682002f6-727b-4b16-9b53-6d96b4f77f5b");

                                                                                httpRequest.AddHeader("authority", "business.facebook.com");
                                                                                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                                                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                                                httpRequest.AddHeader("dpr", "0.800000011920929");
                                                                                httpRequest.AddHeader("priority", "u=0, i");
                                                                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                                                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                                                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                                                httpRequest.AddHeader("sec-fetch-dest", "document");
                                                                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"\"");
                                                                                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                                                                httpRequest.AddHeader("sec-fetch-site", "none");
                                                                                httpRequest.AddHeader("sec-fetch-user", "?1");
                                                                                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                                                                httpRequest.AddHeader("viewport-width", "1334");
                                                                                response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_users/?global_scope_id={businessId}&business_id={businessId}&nav_ref=bizweb_biz_home_scope_selector&redirect_session_id=682002f6-727b-4b16-9b53-6d96b4f77f5b");
                                                                                if (response.IsOK)
                                                                                {
                                                                                    var responseStr01 = response.ToString();
                                                                                    var scriptAddThongTin = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id,\r\n    businessUserID = require(\"CurrentBusinessUser\").business_user_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsUpdateBusinessUserForIGMAMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=2g&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=cjs5u2:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48W2a4p8aHwzzXwKwt8jwGzEaE8o4-222SU5G4E5yexfwjES1xwjokGvwOwem32fwLCyKbwzwea0Lo6-3u36iU9E2cwNwDwjouwqo4e220hi7E5y1rw&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsUpdateBusinessUserForIGMAMutation&variables={{\"businessUserID\":\"${{businessUserID}}\",\"firstName\":null,\"lastName\":null,\"email\":\"akajsjss111@hotmail.com\",\"roles\":null,\"business_account_task_ids\":null,\"expireTime\":null,\"clientTimezoneID\":null,\"businessID\":\"${{businessId}}\",\"nonce\":null,\"should_send_email_notif\":null,\"entryPoint\":\"BIZWEB_SETTINGS_ADD_CONTACT_INFO_UPDATE_BUSINESS_USER_FOR_IGMA\"}}&server_timestamps=true&doc_id=6412870625471134`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                                                                    chromedriver.ExecuteScript(scriptAddThongTin);
                                                                                    while (isStop)
                                                                                    {
                                                                                        Thread.Sleep(1000);
                                                                                    }
                                                                                    Thread.Sleep(100);
                                                                                    chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={businessId}&placement=standalone&global_scope_id={businessId}");
                                                                                    while (isStop)
                                                                                    {
                                                                                        Thread.Sleep(1000);
                                                                                    }
                                                                                    int E = (int)n_slink_share_them.Value;
                                                                                    for (int link10 = 0; link10 < E; link10++)
                                                                                    {
                                                                                        try
                                                                                        {
                                                                                            var STT = "";
                                                                                            if (cmb_Admin_BM.InvokeRequired)
                                                                                            {
                                                                                                cmb_Admin_BM.Invoke(new Action(() =>
                                                                                                {
                                                                                                    STT = cmb_Admin_BM.Text;
                                                                                                }));
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                STT = cmb_Admin_BM.Text;
                                                                                            }
                                                                                            var ADMIN = "";
                                                                                            if (STT == "Quyền Admin")
                                                                                            {
                                                                                                ADMIN = "ADMIN";
                                                                                            }
                                                                                            if (STT == "Quyền Nhân Viên")
                                                                                            {
                                                                                                ADMIN = "EMPLOYEE";
                                                                                            }

                                                                                            row.Cells["cStatus"].Value = "Share BM....";

                                                                                            if (hotmail_mailmoakt == "HOTMAIL")
                                                                                            {

                                                                                                List<string> Mail = new List<string>();
                                                                                                List<string> MailBM350 = new List<string>();
                                                                                                if (rtb_hotmail_BM350.InvokeRequired)
                                                                                                {
                                                                                                    rtb_hotmail_BM350.Invoke(new Action(() =>
                                                                                                    {

                                                                                                        MailBM350 = rtb_hotmail_BM350.Lines.ToList();
                                                                                                    }));


                                                                                                }

                                                                                                if (rtb_hotmail.InvokeRequired)
                                                                                                {
                                                                                                    rtb_hotmail.Invoke(new Action(() =>
                                                                                                    {
                                                                                                        Mail = rtb_hotmail.Lines.ToList();
                                                                                                    }));
                                                                                                }
                                                                                                var rnd = new Random();
                                                                                                var rnd1 = new Random();

                                                                                                var hotmail_pass = Mail[rnd.Next(Mail.Count)].ToString();
                                                                                                var hotmail_pass_BM350 = MailBM350[rnd1.Next(MailBM350.Count)].ToString();
                                                                                                var mail_backup = hotmail_pass.Split('|')[0].ToString();
                                                                                                var mail_backup_BM350 = hotmail_pass_BM350.Split('|')[0].ToString();
                                                                                                if (typeBm == "BM350")
                                                                                                {
                                                                                                    row.Cells["cStatus"].Value = $"Share BM {businessId} => {mail_backup_BM350}";
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    row.Cells["cStatus"].Value = $"Share BM {businessId} => {mail_backup}";
                                                                                                }
                                                                                                var usernamemail = mail_backup.Split('@')[0].ToString();
                                                                                                var usernamemail_BM350 = mail_backup_BM350.Split('@')[0].ToString();
                                                                                                var domain = mail_backup.Split('@')[1].ToString();

                                                                                                var list_kt = File.ReadAllLines("kytuhotmail.txt").ToList();
                                                                                                Random rd = new Random();
                                                                                                var index = rd.Next(0, list_kt.Count);
                                                                                                var kt = list_kt[index];
                                                                                                var mail_share = "";

                                                                                                if (E == 1)
                                                                                                {
                                                                                                    if (typeBm == "BM350")
                                                                                                    {
                                                                                                        mail_share = usernamemail_BM350 + "%2B" + "_BX" + businessId + "@" + domain;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        mail_share = usernamemail + "%2B" + "_BV" + businessId + "@" + domain;
                                                                                                    }


                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if (typeBm == "BM350")
                                                                                                    {
                                                                                                        mail_share = usernamemail_BM350 + "%2B" + "_BMA" + businessId + "@" + domain;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        mail_share = usernamemail + "%2B" + kt + businessId + "@" + domain;
                                                                                                    }

                                                                                                }


                                                                                                var scriptInvite = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsInvitePeopleModalMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=6s&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=m2vooy:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmwoEeogzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiF-3a0Voc8-2-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1FwgU88158uwm85K&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&qpl_active_flow_ids=558499583&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsInvitePeopleModalMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"${{uid}}\",\"business_id\":\"${{businessId}}\",\"business_emails\":[\"{mail_share}\"],\"business_account_task_ids\":[\"926381894526285\",\"603931664885191\",\"1327662214465567\",\"862159105082613\",\"6161001899617846786\",\"1633404653754086\",\"967306614466178\",\"2848818871965443\",\"245181923290198\",\"388517145453246\"],\"invite_origin_surface\":\"MBS_INVITE_USER_FLOW\",\"assets\":[],\"expiry_time\":0,\"is_spark_permission\":false,\"client_timezone_id\":\"Asia/Jakarta\"}}}}&server_timestamps=true&doc_id=23919966164285762&fb_api_analytics_tags=[\"qpl_active_flow_ids=558499583\"]`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                                                                                while (isStop)
                                                                                                {
                                                                                                    Thread.Sleep(1000);
                                                                                                }
                                                                                                var resultInvite = chromedriver.ExecuteScript(scriptInvite);
                                                                                                while (isStop)
                                                                                                {
                                                                                                    Thread.Sleep(1000);
                                                                                                }
                                                                                                Thread.Sleep(1000);
                                                                                                if (resultInvite != null)
                                                                                                {
                                                                                                    var resultInviteText = resultInvite.ToString();
                                                                                                    if (resultInviteText.Contains("errors"))
                                                                                                    {
                                                                                                        row.Cells["cStatus"].Value = "MOI THAT BAI";
                                                                                                    }

                                                                                                    chromedriver.Navigate().Refresh();

                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    row.Cells["cStatus"].Value = "MOI THANH CONG";
                                                                                                    Thread.Sleep(1000);
                                                                                                    if (typeBm == "BM350")
                                                                                                    {
                                                                                                        row.Cells["cStatus"].Value = $"Share BM {businessId} => {mail_backup_BM350} DONE";
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        row.Cells["cStatus"].Value = $"Share BM {businessId} => {mail_backup} DONE";
                                                                                                    }
                                                                                                    chromedriver.Navigate().Refresh();

                                                                                                }





                                                                                            }
                                                                                            else
                                                                                            {

                                                                                                List<string> Mail = new List<string>();
                                                                                                List<string> MailBM350 = new List<string>();
                                                                                                if (rtb_hotmail_BM350.InvokeRequired)
                                                                                                {
                                                                                                    rtb_hotmail_BM350.Invoke(new Action(() =>
                                                                                                    {

                                                                                                        MailBM350 = rtb_hotmail_BM350.Lines.ToList();
                                                                                                    }));


                                                                                                }

                                                                                                if (rtb_hotmail.InvokeRequired)
                                                                                                {
                                                                                                    rtb_hotmail.Invoke(new Action(() =>
                                                                                                    {
                                                                                                        Mail = rtb_hotmail.Lines.ToList();
                                                                                                    }));
                                                                                                }


                                                                                                var mail_share = "";

                                                                                                // Khai báo ngoài vòng lặp, giữ trạng thái giữa các lần chọn
                                                                                                Random rnd = new Random();
                                                                                                string previousHotmailPass = null;
                                                                                                int repeatCount = 0;

                                                                                                // Trong nơi bạn cần lấy giá trị
                                                                                                string hotmail_pass = "";

                                                                                                if (Mail.Count == 0) throw new InvalidOperationException("Mail list is empty.");
                                                                                                if (Mail.Count == 1)
                                                                                                {
                                                                                                    // Nếu chỉ có 1 phần tử thì không thể tránh lặp, tùy xử lý:
                                                                                                    hotmail_pass = Mail[0].ToString();
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    // Lặp chọn tới khi thỏa điều kiện (chỉ lặp khi cần)
                                                                                                    do
                                                                                                    {
                                                                                                        hotmail_pass = Mail[rnd.Next(Mail.Count)].ToString();

                                                                                                        if (previousHotmailPass != null && hotmail_pass == previousHotmailPass)
                                                                                                        {
                                                                                                            repeatCount++;
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            // chuyển sang giá trị mới -> reset counter
                                                                                                            previousHotmailPass = hotmail_pass;
                                                                                                            repeatCount = 1;
                                                                                                            break; // đã chọn xong
                                                                                                        }

                                                                                                        // nếu đã lặp 3 lần với cùng 1 giá trị thì buộc chọn giá trị khác
                                                                                                        if (repeatCount > 3)
                                                                                                        {
                                                                                                            // chọn lần nữa cho đến khi khác previousHotmailPass
                                                                                                            string candidate;
                                                                                                            do
                                                                                                            {
                                                                                                                candidate = Mail[rnd.Next(Mail.Count)].ToString();
                                                                                                            } while (candidate == previousHotmailPass);
                                                                                                            hotmail_pass = candidate;

                                                                                                            previousHotmailPass = hotmail_pass;
                                                                                                            repeatCount = 1;
                                                                                                            break;
                                                                                                        }

                                                                                                        // nếu chưa vượt 3, có thể exit (đã chọn) hoặc tiếp tục thử lại tuỳ logic
                                                                                                        // ở đây ta break để dùng giá trị vừa lấy (dù có thể giống previous, nhưng chưa vượt giới hạn)
                                                                                                        break;

                                                                                                    } while (true);
                                                                                                }
                                                                                                var rnd1 = new Random();
                                                                                                var hotmail_pass_BM350 = MailBM350[rnd1.Next(MailBM350.Count)].ToString();

                                                                                                if (typeBm == "BM350")
                                                                                                {
                                                                                                    row.Cells["cStatus"].Value = $"Share BM {businessId} => {hotmail_pass_BM350}";
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    row.Cells["cStatus"].Value = $"Share BM {businessId} => {hotmail_pass}";
                                                                                                }


                                                                                                if (E == 1)
                                                                                                {
                                                                                                    if (typeBm == "BM350")
                                                                                                    {
                                                                                                        mail_share = hotmail_pass_BM350;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        mail_share = hotmail_pass;
                                                                                                    }


                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if (typeBm == "BM350")
                                                                                                    {
                                                                                                        mail_share = hotmail_pass_BM350;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        mail_share = hotmail_pass;
                                                                                                    }

                                                                                                }


                                                                                                var scriptInvite = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsInvitePeopleModalMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=6s&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=m2vooy:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmwoEeogzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiF-3a0Voc8-2-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1FwgU88158uwm85K&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&qpl_active_flow_ids=558499583&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsInvitePeopleModalMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"${{uid}}\",\"business_id\":\"${{businessId}}\",\"business_emails\":[\"{mail_share}\"],\"business_account_task_ids\":[\"926381894526285\",\"603931664885191\",\"1327662214465567\",\"862159105082613\",\"6161001899617846786\",\"1633404653754086\",\"967306614466178\",\"2848818871965443\",\"245181923290198\",\"388517145453246\"],\"invite_origin_surface\":\"MBS_INVITE_USER_FLOW\",\"assets\":[],\"expiry_time\":0,\"is_spark_permission\":false,\"client_timezone_id\":\"Asia/Jakarta\"}}}}&server_timestamps=true&doc_id=23919966164285762&fb_api_analytics_tags=[\"qpl_active_flow_ids=558499583\"]`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                                                                                while (isStop)
                                                                                                {
                                                                                                    Thread.Sleep(1000);
                                                                                                }
                                                                                                var resultInvite = chromedriver.ExecuteScript(scriptInvite);
                                                                                                while (isStop)
                                                                                                {
                                                                                                    Thread.Sleep(1000);
                                                                                                }
                                                                                                Thread.Sleep(1000);
                                                                                                if (resultInvite != null)
                                                                                                {
                                                                                                    var resultInviteText = resultInvite.ToString();
                                                                                                    if (resultInviteText.Contains("errors"))
                                                                                                    {
                                                                                                        row.Cells["cStatus"].Value = "MOI THAT BAI";
                                                                                                    }

                                                                                                    chromedriver.Navigate().Refresh();

                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    row.Cells["cStatus"].Value = "MOI THANH CONG";
                                                                                                    Thread.Sleep(1000);
                                                                                                    if (typeBm == "BM350")
                                                                                                    {
                                                                                                        row.Cells["cStatus"].Value = $"Share BM {businessId} => {hotmail_pass_BM350} DONE";
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        row.Cells["cStatus"].Value = $"Share BM {businessId} => {hotmail_pass} DONE";
                                                                                                    }
                                                                                                    chromedriver.Navigate().Refresh();

                                                                                                }





                                                                                            }
                                                                                        }
                                                                                        catch
                                                                                        {

                                                                                        }

                                                                                    }


                                                                                }
                                                                            }

                                                                        }
                                                                        else
                                                                        {
                                                                            row.Cells["cStatus"].Value = $"{BMDIE.Count} BM DIE";
                                                                            goto next;
                                                                        }





                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    row.Cells["cStatus"].Value = $"Check BM FAIL ......";
                                                                    goto checkbm;

                                                                }
                                                            }
                                                            catch
                                                            {
                                                                row.Cells["cStatus"].Value = $"Check BM FAIL ......";
                                                                goto checkbm;
                                                            }

                                                            var CHECK_ADMIN = "";
                                                            if (cmb_CHECK_ADMIN.InvokeRequired)
                                                            {
                                                                cmb_CHECK_ADMIN.Invoke(new Action(() =>
                                                                {
                                                                    CHECK_ADMIN = cmb_CHECK_ADMIN.Text;
                                                                }));

                                                            }
                                                            if (CHECK_ADMIN == "ON")
                                                            {
                                                                if (chi_share_bm_350 == "ON")
                                                                {
                                                                    if (BMALL.Count == BM50.Count)
                                                                    {
                                                                        goto taobmt6;
                                                                    }

                                                                }
                                                                List<string> listADMIN = new List<string>();
                                                                listADMIN =CHECK_ADMIN_BM_IG5bm(chromedriver, row, accessToken_EAAG);
                                                                if (listADMIN.Count == 0)
                                                                {
                                                                    goto next;
                                                                }
                                                                var TKQC = "";
                                                                if (cmb_TTKQC_BM_IG.InvokeRequired)
                                                                {
                                                                    cmb_TTKQC_BM_IG.Invoke(new Action(() =>
                                                                    {
                                                                        TKQC = cmb_TTKQC_BM_IG.Text;

                                                                    }));
                                                                }
                                                                if (TKQC == "ON")
                                                                {
                                                                    TAOTK_BM_IG5bm(listBMLIVE_TK_BM50_BM350, chromedriver, row, username, password, c2FAvsCookie, mail, passmail, mailkhoiphuc);

                                                                }
                                                            taobmt6:
                                                                var REG_BMT6 = "";
                                                                if (cmb_BMT6.InvokeRequired)
                                                                {
                                                                    cmb_BMT6.Invoke(new Action(() =>
                                                                    {
                                                                        REG_BMT6 = cmb_BMT6.Text;
                                                                    }));
                                                                }
                                                                if (REG_BMT6 == "ON")
                                                                {
                                                                    REG_BMIG_T6(listBMLIVE, chromedriver, row, username, password, x2fa_ignew, mail, passmail, mailkhoiphuc);
                                                                }

                                                                var RIP_IG = "";

                                                                if (cmb_RIPIG.InvokeRequired)
                                                                {
                                                                    cmb_RIPIG.Invoke(new Action(() =>
                                                                    {
                                                                        RIP_IG = cmb_RIPIG.Text;
                                                                    }));
                                                                }
                                                                if (RIP_IG == "ON")
                                                                {
                                                                    chromedriver.Navigate().GoToUrl("https://accountscenter.instagram.com/personal_info/");
                                                                    RIP(chromedriver, row, username, password, x2fa_ignew, mail, passmail, mailkhoiphuc);
                                                                }

                                                            }

                                                            var KICK_bm3 = "";


                                                            if (cmb_kick_BM3_IG.InvokeRequired)
                                                            {
                                                                cmb_kick_BM3_IG.Invoke(new Action(() =>
                                                                {
                                                                    KICK_bm3 = cmb_kick_BM3_IG.Text;
                                                                }));
                                                            }
                                                            if (KICK_bm3 == "ON")
                                                            {

                                                                KICK_BM3(listBMLIVE_TK_BM50_BM350, chromedriver, row, username, password, c2FAvsCookie, mail, passmail, mailkhoiphuc, accessToken_EAAG);
                                                            }
                                                        }

                                                    }
                                                    else
                                                    {


                                                        //httpRequest.AddHeader("authority", "www.facebook.com");
                                                        //httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                                        //httpRequest.AddHeader("accept-language", "en-US,en;q=0.9,vi;q=0.8");
                                                        //httpRequest.AddHeader("priority", "u=0, i");
                                                        //httpRequest.AddHeader("referer", "https://www.instagram.com/");
                                                        //httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                                                        //httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                        //httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                        //httpRequest.AddHeader("sec-fetch-dest", "iframe");
                                                        //httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                                        //httpRequest.AddHeader("sec-fetch-site", "cross-site");
                                                        //httpRequest.AddHeader("sec-fetch-storage-access", "active");
                                                        //httpRequest.AddHeader("upgrade-insecure-requests", "1");

                                                        //response = httpRequest.Get("https://www.facebook.com/instagram/login_sync/");
                                                        //if (response.IsOK)
                                                        //{
                                                        //    var responseStr_2 = response.ToString();
                                                        //    var cooke_business = httpRequest.Cookies.ToString();
                                                        //}


                                                        //httpRequest.AddHeader("authority", "business.facebook.com");
                                                        //httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                                        //httpRequest.AddHeader("accept-language", "en-US,en;q=0.9,vi;q=0.8");
                                                        //httpRequest.AddHeader("dpr", "1");
                                                        //httpRequest.AddHeader("priority", "u=0, i");
                                                        //httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                                        //httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                                                        //httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Not;A=Brand\";v=\"99.0.0.0\", \"Google Chrome\";v=\"139.0.7258.155\", \"Chromium\";v=\"139.0.7258.155\"");
                                                        //httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                        //httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                                        //httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                        //httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                                        //httpRequest.AddHeader("sec-fetch-dest", "document");
                                                        //httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                                        //httpRequest.AddHeader("sec-fetch-site", "none");
                                                        //httpRequest.AddHeader("sec-fetch-user", "?1");
                                                        //httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                                        //httpRequest.AddHeader("viewport-width", "1019");

                                                        //response = httpRequest.Get("https://business.facebook.com/business/loginpage/?next=https%3A%2F%2Fbusiness.facebook.com%2F%3Fnav_ref%3Dbiz_unified_f3_login_page_to_mbs&login_options%5B0%5D=FB&login_options%5B1%5D=IG&login_options%5B2%5D=SSO&config_ref=biz_login_tool_flavor_mbs");
                                                        //if (response.IsOK)
                                                        //{
                                                        //    var responseStr_1 = response.ToString();
                                                        //    var cooke_business = httpRequest.Cookies.ToString();
                                                        //}

                                                    }



                                                }
                                                else
                                                {
                                                    row.Cells["cStatus"].Value = "Bật sáng tạo FAIL!";
                                                    goto regbm;
                                                }
                                            }
                                            else
                                            {
                                                row.Cells["cStatus"].Value = "Bật sáng tạo FAIL!";
                                                goto regbm;
                                            }
                                        }
                                        else
                                        {
                                            row.Cells["cStatus"].Value = "Bật sáng tạo FAIL!";
                                            goto regbm;
                                        }
                                    }
                                    else
                                    {
                                        row.Cells["cStatus"].Value = "Bật sáng tạo FAIL!";
                                        goto regbm;
                                    }
                                  




                                }
                            }
                            catch
                            {
                            
                          
                                try
                                {
                                    row.Cells["cStatus"].Value = "DIE COOKIE";
                                login_next:
                                    profilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Profiles", username);
                                    chromedriver = null;
                                    chromedriver = Createchromedrive_IG_NEW(profilePath);

                                    Thread.Sleep(2000);
                 
                                    chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                                    row.Cells["cStatus"].Value = "Login.....";
                                    row.Cells["cStatus"].Value = "LOGIN UID PASS";

                                    var enter_user = chromedriver.FindElements(By.XPath("//input[@name='username']"));
                                    if (enter_user.Count > 0)
                                    {
                                        enter_user.LastOrDefault().SendKeys(username);
                                        Thread.Sleep(1000);

                                    }

                                    var enter_password = chromedriver.FindElements(By.XPath("//input[@name='password']"));
                                    if (enter_password.Count > 0)
                                    {
                                        enter_password.LastOrDefault().SendKeys(password);
                                        Thread.Sleep(1000);

                                    }

                                    var login = chromedriver.FindElements(By.XPath("//button[@type='submit']"));
                                    if (login.Count > 0)
                                    {
                                        login.LastOrDefault().Click();
                                        Thread.Sleep(5000);

                                    }
                                    if (!string.IsNullOrEmpty(x2fa_ignew))
                                    {
                                        row.Cells["cStatus"].Value = "ENTER CODE 2FA ";
                                        var code = GetCode(x2fa_ignew);
                                        var enter_code = chromedriver.FindElements(By.XPath("//input[@name='verificationCode']"));
                                        if (enter_code.Count > 0)
                                        {
                                            enter_code.LastOrDefault().SendKeys(code);
                                            Thread.Sleep(2000);
                                        }
                                        var confirm = chromedriver.FindElements(By.XPath("//form/div[2]/button"));
                                        if (confirm.Count > 0)
                                        {
                                            confirm.LastOrDefault().Click();
                                            Thread.Sleep(10000);
                                        }
                                        url = chromedriver.Url;
                                        if (url.Contains("https://www.instagram.com/challenge/"))
                                        {

                                            var dissmiss = chromedriver.FindElements(By.XPath("//div[@aria-label='Dismiss']"));
                                            if (dissmiss.Count > 0)
                                            {
                                                dissmiss.LastOrDefault().Click();
                                                Thread.Sleep(5000);
                                            }
                                        }
                                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                        string cookiestring = "";
                                        foreach (var cookie in cookiess)
                                        {
                                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                        }
                                        c2FAvsCookie = cookiestring;
                                        row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                                    }
                                    else
                                    {
                                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                        string cookiestring = "";
                                        foreach (var cookie in cookiess)
                                        {
                                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                        }
                                        c2FAvsCookie = cookiestring;
                                        row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                                    }
                                    var uid_ig1 = Regex.Match(chromedriver.PageSource, "NON_FACEBOOK_USER_ID\":\"(.*?)\"").Groups[1].Value;

                                    if (uid_ig1 != "0")
                                    {
                                        try
                                        {
                                            row.Cells["cStatus"].Value = "LOGIN DONE";
                                            Thread.Sleep(5000);
                                            url = chromedriver.Url;
                                            if (url.Contains("https://www.instagram.com/challenge/"))
                                            {

                                                var dissmiss = chromedriver.FindElements(By.XPath("//div[@aria-label='Dismiss']"));
                                                if (dissmiss.Count > 0)
                                                {
                                                    dissmiss.LastOrDefault().Click();
                                                    Thread.Sleep(5000);
                                                }
                                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                                string cookiestring = "";
                                                foreach (var cookie in cookiess)
                                                {
                                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                                }
                                                c2FAvsCookie = cookiestring;
                                                row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                                            }
                                            if (chromedriver.Url.Contains("https://www.instagram.com/accounts/suspended"))
                                            {
                                                row.Cells["cStatus"].Value = "282";
                                                chromedriver.Close();
                                                chromedriver.Quit();
                                                goto next;
                                            }
                                        }
                                        catch { }
                                        finally
                                        {
                                            if (chromedriver != null)
                                            {
                                                try
                                                {
                                                    chromedriver.Quit();
                                                }
                                                catch { }
                                                WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                                                if (Directory.Exists(profilePath))
                                                {
                                                    try
                                                    {
                                                        Directory.Delete(profilePath, true);
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        Console.WriteLine($"Failed to delete profile {username}: {ex.Message}");
                                                    }
                                                }
                                            }
                                        }

                                        goto regbm;
                                    }
                                    else
                                    {
                                        row.Cells["cStatus"].Value = "LOGIN FAIL";
                                        loginfail++;
                                        if (loginfail <= 1)
                                        {
                                            try
                                            {

                                            }
                                            catch { }
                                            finally
                                            {
                                                if (chromedriver != null)
                                                {
                                                    try
                                                    {
                                                        chromedriver.Quit();
                                                    }
                                                    catch { }
                                                    WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                                                    if (Directory.Exists(profilePath))
                                                    {
                                                        try
                                                        {
                                                            Directory.Delete(profilePath, true);
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            Console.WriteLine($"Failed to delete profile {username}: {ex.Message}");
                                                        }
                                                    }
                                                }
                                            }

                                            goto login_next;
                                        }
                                        goto next;
                                    }



                                }
                                catch 
                                { 

                                }


                            }

                      


                        }


                    }
                    else
                    {
                        row.Cells["cStatus"].Value = "Login IG FAIL!";
                        try
                        {
                            row.Cells["cStatus"].Value = "Login.....";
                            profilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Profiles", username);
                            chromedriver = null;
                            chromedriver = Createchromedrive_IG_NEW(profilePath);

                            Thread.Sleep(2000);

                            chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                        
                            row.Cells["cStatus"].Value = "LOGIN UID PASS";

                            var enter_user = chromedriver.FindElements(By.XPath("//input[@name='username']"));
                            if (enter_user.Count > 0)
                            {
                                enter_user.LastOrDefault().SendKeys(username);
                                Thread.Sleep(1000);

                            }

                            var enter_password = chromedriver.FindElements(By.XPath("//input[@name='password']"));
                            if (enter_password.Count > 0)
                            {
                                enter_password.LastOrDefault().SendKeys(password);
                                Thread.Sleep(1000);

                            }

                            var login = chromedriver.FindElements(By.XPath("//button[@type='submit']"));
                            if (login.Count > 0)
                            {
                                login.LastOrDefault().Click();
                                Thread.Sleep(5000);

                            }
                            if (!string.IsNullOrEmpty(x2fa_ignew))
                            {
                                row.Cells["cStatus"].Value = "ENTER CODE 2FA ";
                                var code = GetCode(x2fa_ignew);
                                var enter_code = chromedriver.FindElements(By.XPath("//input[@name='verificationCode']"));
                                if (enter_code.Count > 0)
                                {
                                    enter_code.LastOrDefault().SendKeys(code);
                                    Thread.Sleep(2000);
                                }
                                var confirm = chromedriver.FindElements(By.XPath("//form/div[2]/button"));
                                if (confirm.Count > 0)
                                {
                                    confirm.LastOrDefault().Click();
                                    Thread.Sleep(10000);
                                }
                                var url = chromedriver.Url;
                                if (url.Contains("https://www.instagram.com/challenge/"))
                                {

                                    var dissmiss = chromedriver.FindElements(By.XPath("//div[@aria-label='Dismiss']"));
                                    if (dissmiss.Count > 0)
                                    {
                                        dissmiss.LastOrDefault().Click();
                                        Thread.Sleep(5000);
                                    }
                                }
                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                string cookiestring = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                }
                                c2FAvsCookie = cookiestring;
                                row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                            }
                            else
                            {
                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                string cookiestring = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                }
                                c2FAvsCookie = cookiestring;
                                row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                            }
                            var uid_ig1 = Regex.Match(chromedriver.PageSource, "NON_FACEBOOK_USER_ID\":\"(.*?)\"").Groups[1].Value;

                            if (uid_ig1 != "0")
                            {
                                try
                                {
                                    row.Cells["cStatus"].Value = "LOGIN DONE";
                                    Thread.Sleep(5000);
                                   var url = chromedriver.Url;
                                    if (url.Contains("https://www.instagram.com/challenge/"))
                                    {

                                        var dissmiss = chromedriver.FindElements(By.XPath("//div[@aria-label='Dismiss']"));
                                        if (dissmiss.Count > 0)
                                        {
                                            dissmiss.LastOrDefault().Click();
                                            Thread.Sleep(5000);
                                        }
                                    }
                                    if (chromedriver.Url.Contains("https://www.instagram.com/accounts/suspended"))
                                    {
                                        row.Cells["cStatus"].Value = "282";
                                        chromedriver.Close();
                                        chromedriver.Quit();
                                        goto next;
                                    }
                                }
                                catch { }
                                finally
                                {
                                    if (chromedriver != null)
                                    {
                                        try
                                        {
                                            chromedriver.Quit();
                                        }
                                        catch { }
                                        WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                                        if (Directory.Exists(profilePath))
                                        {
                                            try
                                            {
                                                Directory.Delete(profilePath, true);
                                            }
                                            catch (Exception ex)
                                            {
                                                Console.WriteLine($"Failed to delete profile {username}: {ex.Message}");
                                            }
                                        }
                                    }
                                }

                                goto regbm;
                            }
                            else
                            {
                                row.Cells["cStatus"].Value = "LOGIN FAIL";
                                goto next;
                            }



                        }
                        catch
                        {

                        }
                        goto next;
                    }
                }


            next:
                Thread.Sleep(1);

            }
            catch { }
            var on_off_chrome = "";
            if (cmb_on_off_chrome.InvokeRequired)
            {
                cmb_on_off_chrome.Invoke(new Action(() =>
                {
                    on_off_chrome = cmb_on_off_chrome.Text;


                }));


            }
            if (on_off_chrome == "ON")
            {
                try
                {

                }
                catch { }
                finally
                {
                    if (chromedriver != null)
                    {
                        try
                        {
                            chromedriver.Quit();
                        }
                        catch { }
                        WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                        if (Directory.Exists(profilePath))
                        {
                            try
                            {
                                Directory.Delete(profilePath, true);
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine($"Failed to delete profile {username}: {ex.Message}");
                            }
                        }
                    }
                }
            }
          




        }

        // KICK BM3
        private void KICK_BM3(List<string> BMLIVE, ChromeDriver chromedriver, DataGridViewRow row, string username, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc, string token_EEAG)
        {
            try
            {
                var IDBM1 = BMLIVE[0].Split('|')[0];
                List<string> SLBM3 = new List<string>();
                List<string> CHITAOBM = new List<string>();

                chromedriver.Navigate().GoToUrl($"https://business.facebook.com/latest/settings/business_info?business_id={IDBM1}");
                Thread.Sleep(5000);
                var PageSource = chromedriver.PageSource;
                var UID_IG = Regex.Match(PageSource, "accessToken\":\"\",\"actorID\":\"(.*?)\"").Groups[1].Value.ToString();
                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                var cookiestring = "";
                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }
                cookiestring = cookiestring.Trim(';');
                HttpRequest httpRequest = new HttpRequest();
                httpRequest.AllowAutoRedirect = true;
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                httpRequest.KeepAlive = true;
                var cookieRaws = cookiestring.Split(';');
                foreach (var cookieraw in cookieRaws)
                {
                    var cookieJAr = cookieraw.Split('=');
                    try
                    {
                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                    }
                    catch { }
                }
                var TAO_FULL5 = "";
                if (cmb_Tao_1_5.InvokeRequired)
                {
                    cmb_Tao_1_5.Invoke(new Action(() =>
                    {
                        TAO_FULL5 = cmb_Tao_1_5.Text;

                    }));

                }
                int SOLUONG_BM = (int)sl_BM_kick3.Value;


                if (TAO_FULL5 == "FULL5")
                {
                    foreach (var ID in BMLIVE)
                    {

                        try
                        {
                            var IDBM = ID.Split('|')[0];
                            CHITAOBM.Add(IDBM);

                            if(CHITAOBM.Count >= SOLUONG_BM)
                            {
                                goto next;
                            }

                            httpRequest.AddHeader("authority", "business.facebook.com");
                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.54\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.54\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                            httpRequest.AddHeader("sec-fetch-dest", "document");
                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                            httpRequest.AddHeader("sec-fetch-user", "?1");
                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                            httpRequest.AddHeader("viewport-width", "863");


                            var link_get4 = $"https://business.facebook.com/latest/settings/business_info?business_id={IDBM}";
                            var ad_account_creation_limit = "";
                            var response = httpRequest.Get(link_get4);
                            if (response.IsOK)
                            {
                                var responseStr = response.ToString();
                                ad_account_creation_limit = Regex.Match(responseStr, "\"ad_account_creation_limit\":(.*?)},").Groups[1].Value.ToString();
                                if (ad_account_creation_limit == "3")
                                {
                                    if (rtb_BM3.InvokeRequired)
                                    {
                                        rtb_BM3.Invoke(new Action(() =>
                                        {
                                            rtb_BM3.AppendText(IDBM + Environment.NewLine);

                                        }));
                                    }
                                    if (rtb_status_kick.InvokeRequired)
                                    {
                                        rtb_status_kick.Invoke(new Action(() =>
                                        {
                                            rtb_status_kick.AppendText(IDBM + $"|=> BM{ad_account_creation_limit}" + Environment.NewLine);

                                        }));
                                    }
                                    goto next;
                                }


                            }



                            httpRequest.AddHeader("authority", "graph.facebook.com");
                            httpRequest.AddHeader("accept", "*/*");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httpRequest.AddHeader("origin", "https://business.facebook.com");
                            httpRequest.AddHeader("priority", "u=1, i");
                            httpRequest.AddHeader("referer", "https://business.facebook.com/");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                            httpRequest.AddHeader("sec-fetch-site", "same-site");

                            var link_get = $"https://graph.facebook.com/v20.0/{IDBM}?fields=owned_whatsapp_business_accounts.limit(50){{id,name}}&access_token={token_EEAG}&_callFlowletID=0&_triggerFlowletID=4174&qpl_active_e2e_trace_ids=";

                            response = httpRequest.Get(link_get);


                            if (response.IsOK)
                            {
                                var responseStr = response.ToString();


                                httpRequest.AddHeader("authority", "graph.facebook.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("origin", "https://business.facebook.com");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("referer", "https://business.facebook.com/");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "same-site");

                                var link_get2 = $"https://graph.facebook.com/graphql?access_token={token_EEAG}&method=post&doc_id=9763356653753255&variables={{\"input\":{{\"client_mutation_id\":\"2\",\"actor_id\":\"0\",\"business_id\":\"{IDBM}\",\"app_id\":\"225181538219344\",\"log_session_id\":\"WBxP-3605351016-4208684065\",\"acceptance_source\":\"DEVELOPERS_FACEBOOK_COM\"}}}}&_callFlowletID=0&_triggerFlowletID=4174&qpl_active_e2e_trace_ids=";

                                response = httpRequest.Get(link_get2);
                                if (response.IsOK)
                                {
                                    var responseStr1 = response.ToString();
                                    int k = (int)numericUpDown5.Value;
                                    var NAME = File.ReadAllLines("NAMEWHATAPP.txt").ToList();
                                    Random rnd = new Random();
                                    int indexRandom = rnd.Next(0, NAME.Count);
                                    string name_WhatApp1 = NAME[indexRandom];
                                    if (string.IsNullOrEmpty(name_WhatApp1))
                                    {
                                        if (tb_NAME_WHATAPP.InvokeRequired)
                                        {
                                            tb_NAME_WHATAPP.Invoke(new Action(() =>
                                            {
                                                name_WhatApp1 = tb_NAME_WHATAPP.Text;
                                            }));

                                        }
                                    }
                                    for (int K = 0; K < k; K++)
                                    {
                                        try
                                        {
                                            var name_WhatApp = name_WhatApp1 + $"{K + 1}";
                                            httpRequest.AddHeader("authority", "graph.facebook.com");
                                            httpRequest.AddHeader("accept", "*/*");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("origin", "https://business.facebook.com");
                                            httpRequest.AddHeader("priority", "u=1, i");
                                            httpRequest.AddHeader("referer", "https://business.facebook.com/");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                                            httpRequest.AddHeader("sec-fetch-site", "same-site");


                                            var link_get3 = $"https://graph.facebook.com/graphql?method=post&doc_id=29701466519469036&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{UID_IG}\",\"app_id\":\"1275424410903228\",\"log_session_id\":\"WBxP--1759509524586-637775013\",\"business_id\":\"{IDBM}\",\"api_account_type\":\"SELF\",\"creation_source\":\"BUSINESS_MANAGER\",\"friendly_name\":\"{name_WhatApp}\",\"timezone_id\":132,\"partner_business_id\":\"{IDBM}\",\"product\":\"SELF\"}}}}&access_token={token_EEAG}&_callFlowletID=0&_triggerFlowletID=4251&qpl_active_e2e_trace_ids=";

                                            response = httpRequest.Get(link_get3);
                                            if (response.IsOK)
                                            {
                                                var responseStr2 = response.ToString();
                                                if (responseStr2.Contains("message\":\"Rate limit exceeded"))
                                                {
                                                    if (rtb_status_kick.InvokeRequired)
                                                    {
                                                        rtb_status_kick.Invoke(new Action(() =>
                                                        {
                                                            rtb_status_kick.AppendText(IDBM + "|message\":\"Rate limit exceeded|=> KICK FAIL!" + Environment.NewLine);

                                                        }));
                                                    }

                                                    goto next;
                                                }
                                                if (responseStr2.Contains("data\":{\"xfb_create_whatsapp_business_api_account\":null}"))
                                                {
                                                    if (rtb_status_kick.InvokeRequired)
                                                    {
                                                        rtb_status_kick.Invoke(new Action(() =>
                                                        {
                                                            rtb_status_kick.AppendText(IDBM + "|=> SỐ LƯỢNG TẠO VƯỢT QUÁ CHO PHÉP" + Environment.NewLine);

                                                        }));
                                                    }
                                                    goto next;
                                                }
                                                else
                                                {
                                                    if (rtb_status_kick.InvokeRequired)
                                                    {
                                                        rtb_status_kick.Invoke(new Action(() =>
                                                        {
                                                            rtb_status_kick.AppendText(IDBM + $"|=> TẠO DONE {name_WhatApp}" + Environment.NewLine);

                                                        }));
                                                    }
                                                }




                                            }

                                        }
                                        catch { }
                                        int delay = (int)delay_kick_bm3.Value;
                                        Thread.Sleep(TimeSpan.FromSeconds(delay));
                                    }

                                }


                            }
                            Thread.Sleep(15000);

                            httpRequest.AddHeader("authority", "business.facebook.com");
                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.54\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.54\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                            httpRequest.AddHeader("sec-fetch-dest", "document");
                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                            httpRequest.AddHeader("sec-fetch-user", "?1");
                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                            httpRequest.AddHeader("viewport-width", "863");


                            link_get4 = $"https://business.facebook.com/latest/settings/business_info?business_id={IDBM}";

                            response = httpRequest.Get(link_get4);
                            if (response.IsOK)
                            {
                                var responseStr = response.ToString();
                                ad_account_creation_limit = Regex.Match(responseStr, "\"ad_account_creation_limit\":(.*?)},").Groups[1].Value.ToString();

                                row.Cells["cStatus"].Value = $"BM {IDBM} =>| BM{ad_account_creation_limit}";
                                if (rtb_status_kick.InvokeRequired)
                                {
                                    rtb_status_kick.Invoke(new Action(() =>
                                    {
                                        rtb_status_kick.AppendText(IDBM + $"|=> BM{ad_account_creation_limit}" + Environment.NewLine);

                                    }));
                                }


                            }

                            if (ad_account_creation_limit == "3")
                            {
                                if (rtb_BM3.InvokeRequired)
                                {
                                    rtb_BM3.Invoke(new Action(() =>
                                    {
                                        rtb_BM3.AppendText(IDBM + Environment.NewLine);

                                    }));
                                }
                                SLBM3.Add(IDBM);
                                var TTKQC = "";
                                if (cmb_TTKQCBM3.InvokeRequired)
                                {
                                    cmb_TTKQCBM3.Invoke(new Action(() =>
                                    {
                                        TTKQC = cmb_TTKQCBM3.Text;
                                    }));
                                }
                                else
                                {
                                    TTKQC = cmb_TTKQCBM3.Text;
                                }
                                if (TTKQC == "ON")
                                {
                                    int TTQC = (int)numericUpDown9.Value;
                                    for (int k = 0; k < TTQC; k++)
                                    {
                                        try
                                        {
                                            httpRequest.AddHeader("authority", "z-p3-graph.facebook.com");
                                            httpRequest.AddHeader("accept", "*/*");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("priority", "u=1, i");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                                            httpRequest.AddHeader("sec-fetch-site", "none");

                                            var currency = "";
                                            if (cmb_Tien_Te_TK_BM.InvokeRequired)
                                            {
                                                cmb_Tien_Te_TK_BM.Invoke(new Action(() =>
                                                {
                                                    currency = cmb_Tien_Te_TK_BM.Text;

                                                }));
                                            }
                                            else
                                            {
                                                currency = cmb_Tien_Te_TK_BM.Text;
                                            }


                                            var name = "";
                                            if (cmb_TEN_TK_BM.InvokeRequired)
                                            {
                                                cmb_TEN_TK_BM.Invoke(new Action(() =>
                                                {
                                                    name = cmb_TEN_TK_BM.Text;

                                                }));
                                            }
                                            else
                                            {
                                                name = cmb_TEN_TK_BM.Text;
                                            }


                                            var timezone_id = "";
                                            if (cmb_Mui_Gio_TK_BM.InvokeRequired)
                                            {
                                                cmb_Mui_Gio_TK_BM.Invoke(new Action(() =>
                                                {
                                                    timezone_id = cmb_Mui_Gio_TK_BM.Text;

                                                }));
                                            }
                                            else
                                            {
                                                timezone_id = cmb_Mui_Gio_TK_BM.Text;
                                            }



                                            var url_1 = $"https://z-p3-graph.facebook.com/v17.0/{IDBM}/adaccount?access_token={token_EEAG}&__cppo=1&__activeScenarioIDs=[]&__activeScenarios=[]&__interactionsMetadata=[]&_reqName=object:brand/adaccount&_reqSrc=AdAccountActions.brands&ad_account_created_from_bm_flag=true&currency={currency}&end_advertiser={IDBM}&invoicing_emails=[]&locale=vi_VN&media_agency=UNFOUND&method=post&name={name}&partner=UNFOUND&po_number=&pretty=0&suppress_http_code=1&timezone_id={timezone_id}&xref=f240a980fd9969";
                                            response = httpRequest.Get(url_1);
                                            if (response.IsOK)
                                            {
                                                var responseStr_TK = response.ToString();
                                                if (responseStr_TK.Contains("{\"id\":\"act_"))
                                                {
                                                    row.Cells["cStatus"].Value = "Tạo TK BM: " + IDBM + " DONE";
                                                    if (rtb_status_kick.InvokeRequired)
                                                    {
                                                        rtb_status_kick.Invoke(new Action(() =>
                                                        {
                                                            rtb_status_kick.AppendText(IDBM + $"|=> TẠO TTQC DONE {k + 1}" + Environment.NewLine);

                                                        }));
                                                    }

                                                }
                                                else
                                                {
                                                    row.Cells["cStatus"].Value = "Tạo TK BM: " + IDBM + " FAIL!";
                                                    if (rtb_status_kick.InvokeRequired)
                                                    {
                                                        rtb_status_kick.Invoke(new Action(() =>
                                                        {
                                                            rtb_status_kick.AppendText(IDBM + $"|=> TẠO TTQC FAIL {k + 1}" + Environment.NewLine);

                                                        }));
                                                    }
                                                }
                                            }

                                            int delayttk = (int)m_delay_ttk.Value;
                                            Thread.Sleep(TimeSpan.FromSeconds(delayttk));


                                        }
                                        catch { }
                                    }
                                    try
                                    {
                                        httpRequest.AddHeader("authority", "graph.facebook.com");
                                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("priority", "u=0, i");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "document");
                                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                        httpRequest.AddHeader("sec-fetch-site", "none");
                                        httpRequest.AddHeader("sec-fetch-user", "?1");
                                        httpRequest.AddHeader("upgrade-insecure-requests", "1");


                                        response = httpRequest.Get($"https://graph.facebook.com/v15.0/{IDBM}?access_token={token_EEAG}&fields=id,name,created_time,sharing_eligibility_status,allow_page_management_in_www,business_users{{role,id,name}},owned_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}}");
                                        if (response.IsOK)
                                        {
                                            List<string> ADMin = new List<string>();
                                            var responseSTR6 = response.ToString();
                                            HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                                            doc.LoadHtml(responseSTR6);
                                            JObject jobject = JObject.Parse(responseSTR6);
                                            var businessId = jobject["id"].ToString();
                                            var typeBm = jobject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                            var createdtime = jobject["created_time"].ToString();

                                            var statusBm = jobject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                            var owned_ad_accounts = jobject["owned_ad_accounts"]?["data"];
                                            var currency = "";
                                            var adtrust_dsl = "";
                                            if (owned_ad_accounts != null)
                                            {
                                                var owned_Ad_Accounts = owned_ad_accounts.ToObject<JArray>();
                                                foreach (var userObject in owned_Ad_Accounts)
                                                {
                                                    var id = userObject["id"]?.ToString().Replace("act_", "");
                                                    var name = userObject["name"]?.ToString();
                                                    currency = userObject["currency"]?.ToString();
                                                    adtrust_dsl = userObject["adtrust_dsl"]?.ToString();

                                                    if (rtb_status_kick.InvokeRequired)
                                                    {
                                                        rtb_status_kick.Invoke(new Action(() =>
                                                        {
                                                            rtb_status_kick.AppendText(IDBM + $"|{typeBm}|{statusBm}|{id}|{adtrust_dsl}|{currency}" + Environment.NewLine);

                                                        }));
                                                    }

                                                }
                                            }



                                            if (rtb_status_kick.InvokeRequired)
                                            {
                                                rtb_status_kick.Invoke(new Action(() =>
                                                {
                                                    rtb_status_kick.AppendText(IDBM + $"|{typeBm}|{statusBm}|{adtrust_dsl}|{currency}" + Environment.NewLine);

                                                }));
                                            }


                                        }
                                    }
                                    catch { }



                                }
                            }
                            else
                            {
                                if (rtb_BM1.InvokeRequired)
                                {
                                    rtb_BM1.Invoke(new Action(() =>
                                    {
                                        rtb_BM1.AppendText(IDBM + Environment.NewLine);

                                    }));
                                }
                            }

                        next:
                            Thread.Sleep(1000);
                        }
                        catch { }


                    }
                }
                else
                {
          
                    int k = (int)numericUpDown5.Value;
                    var NAME = File.ReadAllLines("NAMEWHATAPP.txt").ToList();
                    Random rnd = new Random();
                    int indexRandom = rnd.Next(0, NAME.Count);
                    string name_WhatApp1 = NAME[indexRandom];
                    if (string.IsNullOrEmpty(name_WhatApp1))
                    {
                        if (tb_NAME_WHATAPP.InvokeRequired)
                        {
                            tb_NAME_WHATAPP.Invoke(new Action(() =>
                            {
                                name_WhatApp1 = tb_NAME_WHATAPP.Text;
                            }));

                        }
                    }
                    for (int K = 0; K < k; K++)
                    {
                        List<string> BMCANTAO = new List<string>();
                        foreach (var ID in BMLIVE)
                        {
                            try
                            {
                                var IDBM = ID.Split('|')[0];
                                BMCANTAO.Add(IDBM);
                                if (BMCANTAO.Count >= SOLUONG_BM)
                                {
                                    goto next;
                                }

                                httpRequest.AddHeader("authority", "business.facebook.com");
                                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.54\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.54\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                httpRequest.AddHeader("sec-fetch-dest", "document");
                                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                httpRequest.AddHeader("sec-fetch-user", "?1");
                                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                httpRequest.AddHeader("viewport-width", "863");


                                var link_get4 = $"https://business.facebook.com/latest/settings/business_info?business_id={IDBM}";
                                var ad_account_creation_limit = "";
                                var response = httpRequest.Get(link_get4);
                                if (response.IsOK)
                                {
                                    var responseStr = response.ToString();
                                    ad_account_creation_limit = Regex.Match(responseStr, "\"ad_account_creation_limit\":(.*?)},").Groups[1].Value.ToString();
                                    if (ad_account_creation_limit == "3")
                                    {
                                        if (rtb_BM3.InvokeRequired)
                                        {
                                            rtb_BM3.Invoke(new Action(() =>
                                            {
                                                rtb_BM3.AppendText(IDBM + Environment.NewLine);

                                            }));
                                        }
                                        if (rtb_status_kick.InvokeRequired)
                                        {
                                            rtb_status_kick.Invoke(new Action(() =>
                                            {
                                                rtb_status_kick.AppendText(IDBM + $"|=> BM{ad_account_creation_limit}" + Environment.NewLine);

                                            }));
                                        }
                                        goto next;
                                    }


                                }



                                httpRequest.AddHeader("authority", "graph.facebook.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("origin", "https://business.facebook.com");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("referer", "https://business.facebook.com/");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "same-site");

                                var link_get = $"https://graph.facebook.com/v20.0/{IDBM}?fields=owned_whatsapp_business_accounts.limit(50){{id,name}}&access_token={token_EEAG}&_callFlowletID=0&_triggerFlowletID=4174&qpl_active_e2e_trace_ids=";

                                response = httpRequest.Get(link_get);


                                if (response.IsOK)
                                {
                                    var responseStr = response.ToString();


                                    httpRequest.AddHeader("authority", "graph.facebook.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("origin", "https://business.facebook.com");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("referer", "https://business.facebook.com/");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "same-site");

                                    var link_get2 = $"https://graph.facebook.com/graphql?access_token={token_EEAG}&method=post&doc_id=9763356653753255&variables={{\"input\":{{\"client_mutation_id\":\"2\",\"actor_id\":\"0\",\"business_id\":\"{IDBM}\",\"app_id\":\"225181538219344\",\"log_session_id\":\"WBxP-3605351016-4208684065\",\"acceptance_source\":\"DEVELOPERS_FACEBOOK_COM\"}}}}&_callFlowletID=0&_triggerFlowletID=4174&qpl_active_e2e_trace_ids=";

                                    response = httpRequest.Get(link_get2);
                                    if (response.IsOK)
                                    {
                                        try
                                        {
                                            var name_WhatApp = name_WhatApp1 + $"{K + 1}";
                                            httpRequest.AddHeader("authority", "graph.facebook.com");
                                            httpRequest.AddHeader("accept", "*/*");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("origin", "https://business.facebook.com");
                                            httpRequest.AddHeader("priority", "u=1, i");
                                            httpRequest.AddHeader("referer", "https://business.facebook.com/");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "empty");
                                            httpRequest.AddHeader("sec-fetch-mode", "cors");
                                            httpRequest.AddHeader("sec-fetch-site", "same-site");


                                            var link_get3 = $"https://graph.facebook.com/graphql?method=post&doc_id=29701466519469036&variables={{\"input\":{{\"client_mutation_id\":\"3\",\"actor_id\":\"{UID_IG}\",\"app_id\":\"1275424410903228\",\"log_session_id\":\"WBxP--1759509524586-637775013\",\"business_id\":\"{IDBM}\",\"api_account_type\":\"SELF\",\"creation_source\":\"BUSINESS_MANAGER\",\"friendly_name\":\"{name_WhatApp}\",\"timezone_id\":132,\"partner_business_id\":\"{IDBM}\",\"product\":\"SELF\"}}}}&access_token={token_EEAG}&_callFlowletID=0&_triggerFlowletID=4251&qpl_active_e2e_trace_ids=";

                                            response = httpRequest.Get(link_get3);
                                            if (response.IsOK)
                                            {
                                                var responseStr2 = response.ToString();
                                                if (responseStr2.Contains("message\":\"Rate limit exceeded"))
                                                {
                                                    if (rtb_status_kick.InvokeRequired)
                                                    {
                                                        rtb_status_kick.Invoke(new Action(() =>
                                                        {
                                                            rtb_status_kick.AppendText(IDBM + "|message\":\"Rate limit exceeded|=> KICK FAIL!" + Environment.NewLine);

                                                        }));
                                                    }

                                                    goto next;
                                                }
                                                if (responseStr2.Contains("data\":{\"xfb_create_whatsapp_business_api_account\":null}"))
                                                {
                                                    if (rtb_status_kick.InvokeRequired)
                                                    {
                                                        rtb_status_kick.Invoke(new Action(() =>
                                                        {
                                                            rtb_status_kick.AppendText(IDBM + "|=> SỐ LƯỢNG TẠO VƯỢT QUÁ CHO PHÉP" + Environment.NewLine);

                                                        }));
                                                    }
                                                    goto next;
                                                }
                                                else
                                                {
                                                    if (rtb_status_kick.InvokeRequired)
                                                    {
                                                        rtb_status_kick.Invoke(new Action(() =>
                                                        {
                                                            rtb_status_kick.AppendText(IDBM + $"|=> TẠO DONE {name_WhatApp}" + Environment.NewLine);

                                                        }));
                                                    }
                                                }




                                            }

                                        }
                                        catch { }
                                      




                                    }


                                }
                                Thread.Sleep(15000);

                                httpRequest.AddHeader("authority", "business.facebook.com");
                                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"141\", \"Not?A_Brand\";v=\"8\", \"Chromium\";v=\"141\"");
                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"141.0.7390.54\", \"Not?A_Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"141.0.7390.54\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                httpRequest.AddHeader("sec-fetch-dest", "document");
                                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                httpRequest.AddHeader("sec-fetch-user", "?1");
                                httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                httpRequest.AddHeader("viewport-width", "863");


                                link_get4 = $"https://business.facebook.com/latest/settings/business_info?business_id={IDBM}";

                                response = httpRequest.Get(link_get4);
                                if (response.IsOK)
                                {
                                    var responseStr = response.ToString();
                                    ad_account_creation_limit = Regex.Match(responseStr, "\"ad_account_creation_limit\":(.*?)},").Groups[1].Value.ToString();

                                    row.Cells["cStatus"].Value = $"BM {IDBM} =>| BM{ad_account_creation_limit}";
                                    if (rtb_status_kick.InvokeRequired)
                                    {
                                        rtb_status_kick.Invoke(new Action(() =>
                                        {
                                            rtb_status_kick.AppendText(IDBM + $"|=> BM{ad_account_creation_limit}" + Environment.NewLine);

                                        }));
                                    }


                                }

                                if (ad_account_creation_limit == "3")
                                {
                                    if (rtb_BM3.InvokeRequired)
                                    {
                                        rtb_BM3.Invoke(new Action(() =>
                                        {
                                            rtb_BM3.AppendText(IDBM + Environment.NewLine);

                                        }));
                                    }
                                    SLBM3.Add(IDBM);
                                    var TTKQC = "";
                                    if (cmb_TTKQCBM3.InvokeRequired)
                                    {
                                        cmb_TTKQCBM3.Invoke(new Action(() =>
                                        {
                                            TTKQC = cmb_TTKQCBM3.Text;
                                        }));
                                    }
                                    else
                                    {
                                        TTKQC = cmb_TTKQCBM3.Text;
                                    }
                                    if (TTKQC == "ON")
                                    {
                                        int TTQC = (int)numericUpDown9.Value;
                                        for (int z = 0; z < TTQC; z++)
                                        {
                                            try
                                            {
                                                httpRequest.AddHeader("authority", "z-p3-graph.facebook.com");
                                                httpRequest.AddHeader("accept", "*/*");
                                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                                httpRequest.AddHeader("priority", "u=1, i");
                                                httpRequest.AddHeader("sec-ch-ua", "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\", \"Google Chrome\";v=\"132\"");
                                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                                httpRequest.AddHeader("sec-fetch-site", "none");

                                                var currency = "";
                                                if (cmb_Tien_Te_TK_BM.InvokeRequired)
                                                {
                                                    cmb_Tien_Te_TK_BM.Invoke(new Action(() =>
                                                    {
                                                        currency = cmb_Tien_Te_TK_BM.Text;

                                                    }));
                                                }
                                                else
                                                {
                                                    currency = cmb_Tien_Te_TK_BM.Text;
                                                }


                                                var name = "";
                                                if (cmb_TEN_TK_BM.InvokeRequired)
                                                {
                                                    cmb_TEN_TK_BM.Invoke(new Action(() =>
                                                    {
                                                        name = cmb_TEN_TK_BM.Text;

                                                    }));
                                                }
                                                else
                                                {
                                                    name = cmb_TEN_TK_BM.Text;
                                                }


                                                var timezone_id = "";
                                                if (cmb_Mui_Gio_TK_BM.InvokeRequired)
                                                {
                                                    cmb_Mui_Gio_TK_BM.Invoke(new Action(() =>
                                                    {
                                                        timezone_id = cmb_Mui_Gio_TK_BM.Text;

                                                    }));
                                                }
                                                else
                                                {
                                                    timezone_id = cmb_Mui_Gio_TK_BM.Text;
                                                }



                                                var url_1 = $"https://z-p3-graph.facebook.com/v17.0/{IDBM}/adaccount?access_token={token_EEAG}&__cppo=1&__activeScenarioIDs=[]&__activeScenarios=[]&__interactionsMetadata=[]&_reqName=object:brand/adaccount&_reqSrc=AdAccountActions.brands&ad_account_created_from_bm_flag=true&currency={currency}&end_advertiser={IDBM}&invoicing_emails=[]&locale=vi_VN&media_agency=UNFOUND&method=post&name={name}&partner=UNFOUND&po_number=&pretty=0&suppress_http_code=1&timezone_id={timezone_id}&xref=f240a980fd9969";
                                                response = httpRequest.Get(url_1);
                                                if (response.IsOK)
                                                {
                                                    var responseStr_TK = response.ToString();
                                                    if (responseStr_TK.Contains("{\"id\":\"act_"))
                                                    {
                                                        row.Cells["cStatus"].Value = "Tạo TK BM: " + IDBM + " DONE";
                                                        if (rtb_status_kick.InvokeRequired)
                                                        {
                                                            rtb_status_kick.Invoke(new Action(() =>
                                                            {
                                                                rtb_status_kick.AppendText(IDBM + $"|=> TẠO TTQC DONE {k + 1}" + Environment.NewLine);

                                                            }));
                                                        }

                                                    }
                                                    else
                                                    {
                                                        row.Cells["cStatus"].Value = "Tạo TK BM: " + IDBM + " FAIL!";
                                                        if (rtb_status_kick.InvokeRequired)
                                                        {
                                                            rtb_status_kick.Invoke(new Action(() =>
                                                            {
                                                                rtb_status_kick.AppendText(IDBM + $"|=> TẠO TTQC FAIL {k + 1}" + Environment.NewLine);

                                                            }));
                                                        }
                                                    }
                                                }

                                                int delayttk = (int)m_delay_ttk.Value;
                                                Thread.Sleep(TimeSpan.FromSeconds(delayttk));


                                            }
                                            catch { }
                                        }
                                        try
                                        {
                                            httpRequest.AddHeader("authority", "graph.facebook.com");
                                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("priority", "u=0, i");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "document");
                                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                            httpRequest.AddHeader("sec-fetch-site", "none");
                                            httpRequest.AddHeader("sec-fetch-user", "?1");
                                            httpRequest.AddHeader("upgrade-insecure-requests", "1");


                                            response = httpRequest.Get($"https://graph.facebook.com/v15.0/{IDBM}?access_token={token_EEAG}&fields=id,name,created_time,sharing_eligibility_status,allow_page_management_in_www,business_users{{role,id,name}},owned_ad_accounts{{id,name,currency,spend_cap,account_status,created_time,adtrust_dsl}}");
                                            if (response.IsOK)
                                            {
                                                List<string> ADMin = new List<string>();
                                                var responseSTR6 = response.ToString();
                                                HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                                                doc.LoadHtml(responseSTR6);
                                                JObject jobject = JObject.Parse(responseSTR6);
                                                var businessId = jobject["id"].ToString();
                                                var typeBm = jobject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                                var createdtime = jobject["created_time"].ToString();

                                                var statusBm = jobject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                                var owned_ad_accounts = jobject["owned_ad_accounts"]?["data"];
                                                var currency = "";
                                                var adtrust_dsl = "";
                                                if (owned_ad_accounts != null)
                                                {
                                                    var owned_Ad_Accounts = owned_ad_accounts.ToObject<JArray>();
                                                    foreach (var userObject in owned_Ad_Accounts)
                                                    {
                                                        var id = userObject["id"]?.ToString().Replace("act_", "");
                                                        var name = userObject["name"]?.ToString();
                                                        currency = userObject["currency"]?.ToString();
                                                        adtrust_dsl = userObject["adtrust_dsl"]?.ToString();

                                                        if (rtb_status_kick.InvokeRequired)
                                                        {
                                                            rtb_status_kick.Invoke(new Action(() =>
                                                            {
                                                                rtb_status_kick.AppendText(IDBM + $"|{typeBm}|{statusBm}|{id}|{adtrust_dsl}|{currency}" + Environment.NewLine);

                                                            }));
                                                        }

                                                    }
                                                }



                                                if (rtb_status_kick.InvokeRequired)
                                                {
                                                    rtb_status_kick.Invoke(new Action(() =>
                                                    {
                                                        rtb_status_kick.AppendText(IDBM + $"|{typeBm}|{statusBm}|{adtrust_dsl}|{currency}" + Environment.NewLine);

                                                    }));
                                                }


                                            }
                                        }
                                        catch { }



                                    }
                                }
                                else
                                {
                                    if (K >= 4)
                                    {
                                        if (rtb_BM1.InvokeRequired)
                                        {
                                            rtb_BM1.Invoke(new Action(() =>
                                            {
                                                rtb_BM1.AppendText(IDBM + Environment.NewLine);

                                            }));
                                        }


                                    }
                                }
                     
                        

                            next:
                                Thread.Sleep(1000);
                            }
                            catch { }
                        }
                        int delay = (int)delay_kick_bm3.Value;
                        Thread.Sleep(TimeSpan.FromSeconds(delay));
                    }



                }
              

                row.Cells["cStatus"].Value = $"BM3 {SLBM3.Count}/{BMLIVE.Count}";
                if (rtb_status_kick.InvokeRequired)
                {
                    rtb_status_kick.Invoke(new Action(() =>
                    {
                        rtb_status_kick.AppendText($"BM3 {SLBM3.Count}/{BMLIVE.Count}" + Environment.NewLine);

                    }));
                }

            }
            catch { }


        }


        // REg BM IG T6
        private void REG_BMIG_T6(List<string> BMLIVE,ChromeDriver chromedriver, DataGridViewRow row, string username, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {

            int check_lai_BM = 0;
            int check_bm_5 = 0;
            int delay_tatbatsangtaoig = (int)delay_tatbatsangtao.Value;
        instagram:
            try
            {
                chromedriver.Navigate().GoToUrl("https://www.instagram.com");
                //chromedriver.Navigate().GoToUrl("https://www.instagram.com/accounts/edit/");
                //var html = chromedriver.PageSource;
                //var ig_asset_id = Regex.Match(html, "ig_asset_id\":\"(.*?)\"").Groups[1].Value.ToString();
                #region
                //httpRequest.AddHeader("authority", "business.facebook.com");
                //httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                //httpRequest.AddHeader("accept-language", "en-US,en;q=0.9,vi;q=0.8");
                //httpRequest.AddHeader("dpr", "1");
                //httpRequest.AddHeader("priority", "u=0, i"); 
                //httpRequest.AddHeader("referer", "https://business.facebook.com/business/loginpage/?next=https%3A%2F%2Fbusiness.facebook.com%2F%3Fnav_ref%3Dbiz_unified_f3_login_page_to_mbs&login_options%5B0%5D=FB&login_options%5B1%5D=IG&login_options%5B2%5D=SSO&config_ref=biz_login_tool_flavor_mbs");
                //httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                //httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                //httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Not;A=Brand\";v=\"99.0.0.0\", \"Google Chrome\";v=\"139.0.7258.128\", \"Chromium\";v=\"139.0.7258.128\"");
                //httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                //httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                //httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                //httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                //httpRequest.AddHeader("sec-fetch-dest", "document");
                //httpRequest.AddHeader("sec-fetch-mode", "navigate");
                //httpRequest.AddHeader("sec-fetch-site", "same-origin");
                //httpRequest.AddHeader("sec-fetch-user", "?1");
                //httpRequest.AddHeader("upgrade-insecure-requests", "1");
                //httpRequest.AddHeader("viewport-width", "1007");

                //var response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_assets?business_id={BMLIVE[0]}");
                //if (response.IsOK)
                //{
                //    var responseSTR1 = response.ToString();
                //    var url = response.Address.ToString();
                //    httpRequest.AddHeader("authority", "business.facebook.com");
                //    httpRequest.AddHeader("accept", "*/*");
                //    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9,vi;q=0.8");
                //    httpRequest.AddHeader("origin", "https://business.facebook.com");
                //    httpRequest.AddHeader("priority", "u=1, i");
                //    httpRequest.AddHeader("referer", $"https://business.facebook.com/latest/settings/business_assets/?business_id={BMLIVE[0]}&selected_asset_id={ig_asset_id}&selected_asset_type=instagram-account-v2");
                //    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "dark");
                //    httpRequest.AddHeader("sec-ch-ua", "\"Not;A=Brand\";v=\"99\", \"Google Chrome\";v=\"139\", \"Chromium\";v=\"139\"");
                //    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Not;A=Brand\";v=\"99.0.0.0\", \"Google Chrome\";v=\"139.0.7258.128\", \"Chromium\";v=\"139.0.7258.128\"");
                //    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                //    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                //    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                //    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                //    httpRequest.AddHeader("sec-fetch-dest", "empty");
                //    httpRequest.AddHeader("sec-fetch-mode", "cors");
                //    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                //    httpRequest.AddHeader("x-asbd-id", "359341");
                //    httpRequest.AddHeader("x-bh-flowsessionid", "upl_wizard_1755785292457_c2b4dfa5-982e-43fd-be2e-b23cbd6e9bb2");
                //    httpRequest.AddHeader("x-fb-friendly-name", "BizKitRemoveInstagramAccountMutation");
                //    httpRequest.AddHeader("x-fb-upl-sessionid", "upl_1755785292457_5db79d34-58d0-4b28-a564-1c2d72565020");
                //    var user = Regex.Match(responseSTR1, "user=(.*?)&").Groups[1].Value.ToString();
                //    var fb_dtsg= Regex.Match(responseSTR1, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                //    var lsd = Regex.Match(responseSTR1, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value.ToString();
                //    var jazoest = Regex.Match(responseSTR1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                //    var payload = $"av={user}&__aaid=0&__bid=1446161823293080&__user={user}&__a=1&__req=1h&__hs=20321.HYP:bizweb_comet_pkg.2.1...0&dpr=1&__ccg=EXCELLENT&__rev=1026161561&__s=syttcn:k18j8i:4o2t3o&__hsi=7541040400576540413&__dyn=7xeUmxa2C6onwn8yEqxemh0MBwCwpUnwgU765UW3qi4EObwNwnof8boG0kqcx60DU1LVEK12wvlwio3nwIK1RwBwXwEwgo9oO0i2cwgECu1vwywsE7O2l0Fwqo5W1bxq0D8gzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiEC3a0Voc8fVEHyU8U3ywbS1LwTwNAwGw8O362u1dxW1Fg4a4UO0hi7E5y1rwa222220CE2Mwcu&__csr=gfIY2iB9d78IYL13T9PjcgWiGNYAn4TeJJmxvjP48yA8H_Omyib4CnYOliliiilF-yAJaBAAHbFkExFkh9AFKycyL9HVm_H9RQSAmdifqkJGjSq8WjjjCGqnYxd9eIxQVAldelanAheDmiAJ4HJ2kBJGQ8oBmHVk8viQhqBxmHz9GGuFoOdzaKKXLDyVaG45CQAlenyWAK8JeA-aWSp7iF5KaijxeVkqaWgO4p8kbGDqWohytG488VQfJrB87o8UK58CmVdUpCAGWz6im8xuu7bzp8abDG4oObzAl6yonUWbyu9Cxa7EjoB28aEfUpAy8CmEkwEDxa8y8jg8e5aQm9y85fAwko4efBwUCxibz8uK0FolwhoK6u1nyE0Epf4shospE3JwMg0IGm0lDwbS1Tye0g60d6w8W0iMhy4BXCg2kyon9zE18XyA540qK0nrbl0wDEgEjmRu9w1fG0lQBgL1O5xoG2FxolyoaD1l1o5oKugU7QIv7MHsczXF2pspd2v82B0ho1Ui0cV7y5Bix1081SFJpB4w4vw3lbw5RGq6o2cw26Hw1tC0b2xa36aw0UwA819w5wwrK05GE3zwMK3B0q413w1EwxoB3cg0vy0fGo0Xe1mwfSiC0XE5a5omU5a04eQ2y293y1y0se0byw3-9i01Qe1spEx0hGjlw4bwjUqx64U1pQ06g27wGw2JU1fOa580fF4azEco9E0Z6m0X81IoO8xroW0VE0NV1Dw3O8qw2X83Hxecw23CVLwFxB040w921sQ26787C0agw17B0&__hsdp=guMV4M8zzB6eNp1aNA9h995IT6hWEr1TiGoAi-8paF5FUgKLAhomgAXF4h8LWeWZWm7bxC1bBu7xMlySmAmh1RKiQJr57AwCzFENykaxMxoghQ5UiovuEix65k962E8ES2icgowOAwHg28gdQ1ywmA4899i07Yg34x904jg9o5h1G11wkA05Ek08ow820rW0Voqw3880xW0zo0H-0rq08Dw1U609Ew&__hblp=0Wy8OeweK7Ekwmo88S2-azpEa8aE4m15xG7829yVU4t5z86i4VUky898cE8AEcF81299E4S2-48GbwbO2S0Bo6y1dwey0zokBAyE6GfwLxy5m58b89EG1LzomCU9o5y0OE711C1hwyxO4Ub86i682jxm0jq1iwo8520i6487CqewJxO4olxi3q3219wto7m79EbotxGm3-axq6o1mUaEO48cUnxW6Ed8vzryqwaW0XU7-1cACwQxC0Do29wxwwwtEeogK2a58W2S8wLyWwgo5-15w-whU8o8FUlg4O1dx23G1Xxu18wUwLG0E84-u7Ey3am21341Nwgo2uweCaxC3Hw50Awzw82326UW69UhwsE2QwbmuU8UaE2fxa14ggDHG2-&__sjsp=guMV4M8zzB6eNp1aNA9h995IT6hVsnf1DiGoAi-8paF5FUgKLAhomgAXF4h8LWeWZWm7bxC1bBu7xMlySmAmh1RK8iRIkui2qeCz69gG725x17gnx9xZWxa4olgAoawyzo98N1y3ai2J08x0Tg6a1qggwAB80vN0ci4A0hd0Bwl46E461ig0mxg08uE04Pq&__comet_req=11&fb_dtsg={fb_dtsg}&jazoest={jazoest}&lsd={lsd}&__spin_r=1026161561&__spin_b=trunk&__spin_t=1755785289&__jssesw=1&__crn=comet.bizweb.BusinessCometBizSuiteSettingsBusinessAssetsRoute&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitRemoveInstagramAccountMutation&variables={{\"businessID\":\"{BMLIVE[0]}\",\"instagramBusinessAssetOrAccountID\":\"{ig_asset_id}\",\"surfaceParams\":{{\"entry_point\":\"ASSET_BASIC_INFO\",\"flow_source\":\"BIZ_WEB\",\"tab\":\"BUSINESS_ASSETS\"}}}}&server_timestamps=true&doc_id=9416010698507836";

                //    response = httpRequest.Post("https://business.facebook.com/api/graphql/?_callFlowletID=0&_triggerFlowletID=4586&qpl_active_e2e_trace_ids=", payload, "application/x-www-form-urlencoded");
                //    if (response.IsOK)
                //    {
                //        var responseStr2 = response.ToString();



                //    }



                //}

                #endregion
                int batsangtao = 0;
            batsangtao:
                try
                {
                    for (int x = 0; x < 6; x++)
                    {
                        chromedriver.Navigate().GoToUrl("https://www.instagram.com");

                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                        var cookiestring = "";
                        foreach (var cookie in cookiess)
                        {
                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                        }
                        cookiestring = cookiestring.Trim(';');

                        var httpRequest = new HttpRequest();
                        httpRequest.AllowAutoRedirect = true;
                        httpRequest.Cookies = new CookieDictionary();
                        httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                        EnsurePostWWWLoginHDFull(httpRequest);
                        httpRequest.KeepAlive = true;
                        var cookieRaws = cookiestring.Split(';');
                        foreach (var cookieraw in cookieRaws)
                        {
                            var cookieJAr = cookieraw.Split('=');
                            try
                            {
                                httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                            }
                            catch { }
                        }
                        var x_csrftoken = Regex.Match(cookiestring, "csrftoken=(.*?);").Groups[1].Value.ToString();
                        if (string.IsNullOrEmpty(x_csrftoken))
                        {
                            x_csrftoken = Regex.Match(cookiestring, @"csrftoken=([^;]+)").Groups[1].Value.ToString();
                        }
                        httpRequest.AddHeader("authority", "www.instagram.com");
                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httpRequest.AddHeader("cache-control", "max-age=0");
                        httpRequest.AddHeader("dpr", "0.800000011920929");
                        httpRequest.AddHeader("priority", "u=0, i");
                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                        httpRequest.AddHeader("sec-fetch-dest", "document");
                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                        httpRequest.AddHeader("sec-fetch-user", "?1");
                        httpRequest.AddHeader("upgrade-insecure-requests", "1");
                        httpRequest.AddHeader("viewport-width", "1523");

                        var response = httpRequest.Get("https://www.instagram.com/accounts/edit/");
                        if (response.IsOK)
                        {

                            var responseStr1 = response.ToString();
                            var is_business_account = Regex.Match(responseStr1, "is_business_account\":(.*?),\"").Groups[1].Value.ToString();
                            var jazoest = Regex.Match(responseStr1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                            if (is_business_account == "true")
                            {
                                row.Cells["cStatus"].Value = "Tắt sáng tạo....";
                                Thread.Sleep(delay_tatbatsangtaoig);
                                httpRequest.AddHeader("authority", "www.instagram.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("referer", "https://www.instagram.com/accounts/convert_to_professional_account/");
                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                httpRequest.AddHeader("x-asbd-id", "359341");
                                httpRequest.AddHeader("x-csrftoken", $"{x_csrftoken}");
                                httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                httpRequest.AddHeader("x-ig-www-claim", "hmac.AR34YWnGjxxjCEwHaZzVZCzRgzIj_LiW4DczpSUaTS-pD6Cf");
                                httpRequest.AddHeader("x-instagram-ajax", "1022415872");
                                httpRequest.AddHeader("x-requested-with", "XMLHttpRequest");
                                httpRequest.AddHeader("x-web-session-id", "iu9lxw:8nvinr:vldo60");

                                var payload1 = $"entry_point=ig_web_settings&to_account_type=1&jazoest={jazoest}";

                                response = httpRequest.Post("https://www.instagram.com/api/v1/business/account/convert_account/", payload1, "application/x-www-form-urlencoded");
                                if (response.IsOK)
                                {

                                    var responseStr5 = response.ToString();
                                    Thread.Sleep(delay_tatbatsangtaoig);
                                    httpRequest.AddHeader("authority", "www.instagram.com");
                                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("cache-control", "max-age=0");
                                    httpRequest.AddHeader("dpr", "0.800000011920929");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "document");
                                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("sec-fetch-user", "?1");
                                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                    httpRequest.AddHeader("viewport-width", "1523");

                                    response = httpRequest.Get("https://www.instagram.com/accounts/edit/");
                                    if (response.IsOK)
                                    {

                                        var responseStr6 = response.ToString();
                                        is_business_account = Regex.Match(responseStr6, "is_business_account\":(.*?),\"").Groups[1].Value.ToString();
                                        if (is_business_account == "false")
                                        {
                                            row.Cells["cStatus"].Value = $"Tắt {x + 1} sáng tạo Done";

                                            Thread.Sleep(2000);


                                        }

                                    }

                                }

                            }

                            if (is_business_account == "false")
                            {
                                row.Cells["cStatus"].Value = "Bật sáng tạo....";
                                Thread.Sleep(delay_tatbatsangtaoig);

                                httpRequest.AddHeader("authority", "www.instagram.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=0, i");
                                httpRequest.AddHeader("referer", "https://www.instagram.com/accounts/convert_to_professional_account/");
                                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                httpRequest.AddHeader("x-asbd-id", "359341");
                                httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                httpRequest.AddHeader("x-ig-www-claim", "hmac.AR34YWnGjxxjCEwHaZzVZCzRgzIj_LiW4DczpSUaTS-pD6Cf");
                                httpRequest.AddHeader("x-requested-with", "XMLHttpRequest");
                                httpRequest.AddHeader("x-web-session-id", "e2e698:8nvinr:nx39nm");


                                response = httpRequest.Get("https://www.instagram.com/api/v1/business/account/get_suggested_categories/");
                                if (response.IsOK)
                                {
                                    var responseStr2 = response.ToString();
                                    var categoryIds = new List<string>();
                                    var jObject = JObject.Parse(responseStr2);

                                    foreach (var category in jObject["categories"])
                                    {
                                        var categoryId = category["category_id"]?.ToString();
                                        if (!string.IsNullOrEmpty(categoryId))
                                        {
                                            categoryIds.Add(categoryId);
                                        }
                                    }

                                    // Chọn ngẫu nhiên một category_id
                                    var random = new Random();
                                    var randomIndex = random.Next(categoryIds.Count);
                                    var randomCategoryId = categoryIds[randomIndex];
                                    Thread.Sleep(delay_tatbatsangtaoig);

                                    httpRequest.AddHeader("authority", "www.instagram.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("referer", "https://www.instagram.com/accounts/convert_to_professional_account/");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");

                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("x-asbd-id", "359341");
                                    httpRequest.AddHeader("x-csrftoken", $"{x_csrftoken}");
                                    httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                    httpRequest.AddHeader("x-ig-www-claim", "hmac.AR2Qo_jECY2DldCw3kYwS_uWKu1ALSUhGyO6jtxgrTQ-uu8C");
                                    httpRequest.AddHeader("x-instagram-ajax", "1022409608");
                                    httpRequest.AddHeader("x-requested-with", "XMLHttpRequest");
                                    httpRequest.AddHeader("x-web-session-id", "qm9btk:6b0awl:2ty6hw");
                                    var payload = $"category_id={randomCategoryId}&create_business_id=true&entry_point=ig_web_settings&set_public=true&should_bypass_contact_check=true&should_show_category=0&to_account_type=2&jazoest={jazoest}";

                                    response = httpRequest.Post("https://www.instagram.com/api/v1/business/account/convert_account/", payload, "application/x-www-form-urlencoded");
                                    if (response.IsOK)
                                    {
                                        var responseStr3 = response.ToString();

                                        Thread.Sleep(delay_tatbatsangtaoig);
                                        httpRequest.AddHeader("authority", "www.instagram.com");
                                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("cache-control", "max-age=0");
                                        httpRequest.AddHeader("dpr", "0.800000011920929");
                                        httpRequest.AddHeader("priority", "u=0, i");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "document");
                                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                        httpRequest.AddHeader("sec-fetch-user", "?1");
                                        httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                        httpRequest.AddHeader("viewport-width", "1523");

                                        response = httpRequest.Get("https://www.instagram.com/accounts/edit/");
                                        if (response.IsOK)
                                        {

                                            var responseStr4 = response.ToString();
                                            var is_business_account1 = Regex.Match(responseStr4, "is_business_account\":(.*?),\"").Groups[1].Value.ToString();

                                            if (is_business_account1 == "true")
                                            {
                                                row.Cells["cStatus"].Value = $"Bật {x + 1} sáng tạo Done";

                                                Thread.Sleep(2000);
                                            }


                                        }
                                    }
                                }
                            }
                        }

                    }

                    try
                    {
                        chromedriver.Navigate().GoToUrl("https://www.instagram.com/accounts/edit/");
                        var html = chromedriver.PageSource;
                        var is_business_account = Regex.Match(html, "is_business_account\":(.*?),\"").Groups[1].Value.ToString();
                        if (is_business_account == "false")
                        {
                            var cookiess = chromedriver.Manage().Cookies.AllCookies;
                            var cookiestring = "";
                            foreach (var cookie in cookiess)
                            {
                                cookiestring += cookie.Name + "=" + cookie.Value + ";";
                            }
                            cookiestring = cookiestring.Trim(';');

                            var httpRequest = new HttpRequest();
                            httpRequest.AllowAutoRedirect = true;
                            httpRequest.Cookies = new CookieDictionary();
                            httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                            EnsurePostWWWLoginHDFull(httpRequest);
                            httpRequest.KeepAlive = true;
                            var cookieRaws = cookiestring.Split(';');
                            foreach (var cookieraw in cookieRaws)
                            {
                                var cookieJAr = cookieraw.Split('=');
                                try
                                {
                                    httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                }
                                catch { }
                            }
                            var x_csrftoken = Regex.Match(cookiestring, "csrftoken=(.*?);").Groups[1].Value.ToString();
                            if (string.IsNullOrEmpty(x_csrftoken))
                            {
                                x_csrftoken = Regex.Match(cookiestring, @"csrftoken=([^;]+)").Groups[1].Value.ToString();
                            }
                            httpRequest.AddHeader("authority", "www.instagram.com");
                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                            httpRequest.AddHeader("cache-control", "max-age=0");
                            httpRequest.AddHeader("dpr", "0.800000011920929");
                            httpRequest.AddHeader("priority", "u=0, i");
                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                            httpRequest.AddHeader("sec-fetch-dest", "document");
                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                            httpRequest.AddHeader("sec-fetch-user", "?1");
                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                            httpRequest.AddHeader("viewport-width", "1523");

                            var response = httpRequest.Get("https://www.instagram.com/accounts/edit/");
                            if (response.IsOK)
                            {
                                var responseStr1 = response.ToString();
                                is_business_account = Regex.Match(responseStr1, "is_business_account\":(.*?),\"").Groups[1].Value.ToString();
                                var jazoest = Regex.Match(responseStr1, "&jazoest=(.*?)\"").Groups[1].Value.ToString();
                                if (is_business_account == "false")
                                {
                                    row.Cells["cStatus"].Value = "Bật sáng tạo....";
                                    Thread.Sleep(delay_tatbatsangtaoig);

                                    httpRequest.AddHeader("authority", "www.instagram.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=0, i");
                                    httpRequest.AddHeader("referer", "https://www.instagram.com/accounts/convert_to_professional_account/");
                                    httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                    httpRequest.AddHeader("x-asbd-id", "359341");
                                    httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                    httpRequest.AddHeader("x-ig-www-claim", "hmac.AR34YWnGjxxjCEwHaZzVZCzRgzIj_LiW4DczpSUaTS-pD6Cf");
                                    httpRequest.AddHeader("x-requested-with", "XMLHttpRequest");
                                    httpRequest.AddHeader("x-web-session-id", "e2e698:8nvinr:nx39nm");


                                    response = httpRequest.Get("https://www.instagram.com/api/v1/business/account/get_suggested_categories/");
                                    if (response.IsOK)
                                    {
                                        var responseStr2 = response.ToString();
                                        var categoryIds = new List<string>();
                                        var jObject = JObject.Parse(responseStr2);

                                        foreach (var category in jObject["categories"])
                                        {
                                            var categoryId = category["category_id"]?.ToString();
                                            if (!string.IsNullOrEmpty(categoryId))
                                            {
                                                categoryIds.Add(categoryId);
                                            }
                                        }

                                        // Chọn ngẫu nhiên một category_id
                                        var random = new Random();
                                        var randomIndex = random.Next(categoryIds.Count);
                                        var randomCategoryId = categoryIds[randomIndex];
                                        Thread.Sleep(delay_tatbatsangtaoig);

                                        httpRequest.AddHeader("authority", "www.instagram.com");
                                        httpRequest.AddHeader("accept", "*/*");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("priority", "u=1, i");
                                        httpRequest.AddHeader("referer", "https://www.instagram.com/accounts/convert_to_professional_account/");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                        httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                                        httpRequest.AddHeader("sec-fetch-mode", "cors");

                                        httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                        httpRequest.AddHeader("x-asbd-id", "359341");
                                        httpRequest.AddHeader("x-csrftoken", $"{x_csrftoken}");
                                        httpRequest.AddHeader("x-ig-app-id", "936619743392459");
                                        httpRequest.AddHeader("x-ig-www-claim", "hmac.AR2Qo_jECY2DldCw3kYwS_uWKu1ALSUhGyO6jtxgrTQ-uu8C");
                                        httpRequest.AddHeader("x-instagram-ajax", "1022409608");
                                        httpRequest.AddHeader("x-requested-with", "XMLHttpRequest");
                                        httpRequest.AddHeader("x-web-session-id", "qm9btk:6b0awl:2ty6hw");
                                        var payload = $"category_id={randomCategoryId}&create_business_id=true&entry_point=ig_web_settings&set_public=true&should_bypass_contact_check=true&should_show_category=0&to_account_type=2&jazoest={jazoest}";

                                        response = httpRequest.Post("https://www.instagram.com/api/v1/business/account/convert_account/", payload, "application/x-www-form-urlencoded");
                                        if (response.IsOK)
                                        {
                                            var responseStr3 = response.ToString();

                                            Thread.Sleep(delay_tatbatsangtaoig);
                                            httpRequest.AddHeader("authority", "www.instagram.com");
                                            httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                            httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                            httpRequest.AddHeader("cache-control", "max-age=0");
                                            httpRequest.AddHeader("dpr", "0.800000011920929");
                                            httpRequest.AddHeader("priority", "u=0, i");
                                            httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                            httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                            httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"135.0.7049.115\", \"Not-A.Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"135.0.7049.115\"");
                                            httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                            httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                            httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                                            httpRequest.AddHeader("sec-fetch-dest", "document");
                                            httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                            httpRequest.AddHeader("sec-fetch-site", "same-origin");
                                            httpRequest.AddHeader("sec-fetch-user", "?1");
                                            httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                            httpRequest.AddHeader("viewport-width", "1523");

                                            response = httpRequest.Get("https://www.instagram.com/accounts/edit/");
                                            if (response.IsOK)
                                            {

                                                var responseStr4 = response.ToString();
                                                var is_business_account1 = Regex.Match(responseStr4, "is_business_account\":(.*?),\"").Groups[1].Value.ToString();

                                                if (is_business_account1 == "true")
                                                {
                                                    row.Cells["cStatus"].Value = $"Bật {x + 1} sáng tạo Done";

                                                    Thread.Sleep(2000);
                                                }


                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }
                    catch { }
                }
                catch
                {

                    batsangtao++;
                    if (batsangtao > 5)
                    {
                        row.Cells["cStatus"].Value = "FAIL BAT SANG TAO!";
                    }
                    else
                    {
                        row.Cells["cStatus"].Value = "VANG";
                        goto batsangtao;
                    }


                }

           




                try
                {

                business:
                    row.Cells["cStatus"].Value = "REG BM....";
                    chromedriver.Navigate().GoToUrl("https://business.facebook.com/business/loginpage/?next=https%3A%2F%2Fbusiness.facebook.com%2F%3Fnav_ref%3Dbiz_unified_f3_login_page_to_mbs&login_options%5B0%5D=FB&login_options%5B1%5D=IG&login_options%5B2%5D=SSO&config_ref=biz_login_tool_flavor_mbs");

                    Thread.Sleep(2000);
                    var Login_IG = chromedriver.FindElements(By.XPath("//div[4]/div/div[@role='button']"));
                    if (Login_IG.Count > 0)
                    {
                        // Cuộn đến phần tử
                        var element = Login_IG.LastOrDefault();
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(10000);
                    }

                    Thread.Sleep(15000);
                    var url_business1 = chromedriver.Url;
                    var html1 = chromedriver.PageSource;
                    var idbm1 = "";
                    try
                    {
                        idbm1 = Regex.Match(html1, "business_id=(.*?)&").Groups[1].Value.ToString();
                    }
                    catch { }
                    if (string.IsNullOrEmpty(idbm1))
                    {
                        idbm1 = Regex.Match(html1, "asset_id=(.*?)&").Groups[1].Value.ToString();

                    }

                    if (string.IsNullOrEmpty(idbm1))
                    {
                        var originalTab = chromedriver.CurrentWindowHandle;

                        // Chuyển sang tab mới
                        chromedriver.SwitchTo().Window(chromedriver.WindowHandles[1]);

                        var url_business = chromedriver.Url;
                        if (url_business.Contains("https://www.instagram.com/accounts/suspended"))
                        {
                            row.Cells["cStatus"].Value = "282";
                            chromedriver.Close();
                            chromedriver.Quit();
                            goto next;


                        }
                    loginuid_pass:
                        var url = chromedriver.Url;
                        if (url.Contains("https://www.instagram.com/accounts/login/")
                            || url.Contains("https://www.instagram.com/#"))
                        {
                            row.Cells["cStatus"].Value = "LOGIN UID PASS";
                            chromedriver.Navigate().GoToUrl("https://www.instagram.com/accounts/login/");
                            var enter_user = chromedriver.FindElements(By.XPath("//input[@name='username']"));
                            if (enter_user.Count > 0)
                            {
                                enter_user.LastOrDefault().SendKeys(username);
                                Thread.Sleep(1000);

                            }

                            var enter_password = chromedriver.FindElements(By.XPath("//input[@name='password']"));
                            if (enter_password.Count > 0)
                            {
                                enter_password.LastOrDefault().SendKeys(password);
                                Thread.Sleep(1000);

                            }

                            var login = chromedriver.FindElements(By.XPath("//button[@type='submit']"));
                            if (login.Count > 0)
                            {
                                login.LastOrDefault().Click();
                                Thread.Sleep(5000);

                            }
                            if (!string.IsNullOrEmpty(c2FAvsCookie))
                            {
                                row.Cells["cStatus"].Value = "ENTER CODE 2FA ";
                                var code = GetCode(c2FAvsCookie);
                                var enter_code = chromedriver.FindElements(By.XPath("//input[@name='verificationCode']"));
                                if (enter_code.Count > 0)
                                {
                                    enter_code.LastOrDefault().SendKeys(code);
                                    Thread.Sleep(2000);
                                }
                                var confirm = chromedriver.FindElements(By.XPath("//form/div[2]/button"));
                                if (confirm.Count > 0)
                                {
                                    confirm.LastOrDefault().Click();
                                    Thread.Sleep(10000);
                                }
                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                var cookiestring = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                }
                                c2FAvsCookie = cookiestring;
                                row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                            }
                            else
                            {
                                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                                var cookiestring = "";
                                foreach (var cookie in cookiess)
                                {
                                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                                }
                                c2FAvsCookie = cookiestring;
                                row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                            }

                        }
                        url = chromedriver.Url;
                        if (url.Contains("https://www.instagram.com/challenge/"))
                        {

                            var dissmiss = chromedriver.FindElements(By.XPath("//div[@aria-label='Dismiss']"));
                            if (dissmiss.Count > 0)
                            {
                                dissmiss.LastOrDefault().Click();
                                Thread.Sleep(5000);
                            }
                            var cookiess = chromedriver.Manage().Cookies.AllCookies;
                            while (isStop)
                            {
                                Thread.Sleep(1000);

                            }
                            var cookiestring = "";
                            foreach (var cookie in cookiess)
                            {
                                cookiestring += cookie.Name + "=" + cookie.Value + ";";
                            }
                            c2FAvsCookie = cookiestring;
                            row.Cells["c2FAvsCookie"].Value = cookiestring.ToString();
                            goto business;
                        }
                        if (url_business.Contains("https://business.facebook.com/page_unavailable/"))
                        {
                            var LoginIG = chromedriver.FindElements(By.XPath("//div[1]/div[2]/a[@href='/business/loginpage/?is_null_state=true&option=IG']"));
                            if (LoginIG.Count > 0)
                            {
                                LoginIG.LastOrDefault().Click();
                                Thread.Sleep(2000);

                            }

                        }
                        else
                        {
                            var LoginasIG = chromedriver.FindElements(By.XPath("//div[1]/div[@role='button']"));
                            if (LoginasIG.Count > 0)
                            {
                                foreach (var item in LoginasIG)
                                {
                                    try
                                    {
                                        if (item.Text.Contains($"{username.ToLower()}"))
                                        {
                                            item.Click();
                                            Thread.Sleep(2000);

                                        }
                                    }
                                    catch { }
                                }
                            }

                        }

                        // Quay lại tab trước đó (tab gốc)
                        chromedriver.SwitchTo().Window(originalTab);
                        Thread.Sleep(10000);
                        chromedriver.Navigate().Refresh();
                        url = chromedriver.Url;
                        if (url.Contains("https://business.facebook.com/business/loginpage/?next=https%3A%2F%2Fbusiness.facebook.com%2F%3Fnav_ref%3Dbiz_unified_f3_login_page_to_mbs&login_options%5B0%5D=FB&login_options%5B1%5D=IG&login_options%5B2%5D=SSO&config_ref=biz_login_tool_flavor_mbs"))
                        {
                            chromedriver.Navigate().GoToUrl("https://www.instagram.com/accounts/login/");

                            goto loginuid_pass;
                        }
                        if (url.Contains("https://www.instagram.com/"))
                        {
                            goto business;
                        }
                    }





                }
                catch { }

            checkbm:
                var accessToken_EAAG = "";
                try
                {

                    try
                    {
                        chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub");
                        Thread.Sleep(1000);
                        var businessId = "";
                    
                        chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id=&placement=standalone&global_scope_id=");
                        Thread.Sleep(5000);
         
                        var html = chromedriver.PageSource;

                        accessToken_EAAG = Regex.Match(html, "init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                        if (string.IsNullOrEmpty(accessToken_EAAG))
                        {
                            chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id=&placement=standalone&global_scope_id=");
                            html = chromedriver.PageSource;
                            accessToken_EAAG = Regex.Match(html, "init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();

                            if (string.IsNullOrEmpty(accessToken_EAAG))
                            {
                                check_bm_5++;
                                if(check_bm_5 >= 3)
                                {
                                    chromedriver.Navigate().GoToUrl($"https://business.facebook.com/billing_hub/accounts?business_id={BMLIVE[2]}&placement=standalone&global_scope_id={BMLIVE[2]}");
                                    Thread.Sleep(2000);
                                    html = chromedriver.PageSource;
                                    accessToken_EAAG = Regex.Match(html, "init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();
                                }
                                else
                                { //MessageBox.Show("accessToken_EAAG NULL");
                                    row.Cells["cStatus"].Value = "accessToken_EAAG NULL";
                                    chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                                    goto instagram;

                                }

                               
                            }
                        }
                        Thread.Sleep(2000);

                        row.Cells["cStatus"].Value = "Check BM....";
                        var cookiess = chromedriver.Manage().Cookies.AllCookies;
                        var cookiestring = "";
                        foreach (var cookie in cookiess)
                        {
                            cookiestring += cookie.Name + "=" + cookie.Value + ";";
                        }
                        cookiestring = cookiestring.Trim(';');

                        var httpRequest = new HttpRequest();
                        httpRequest.AllowAutoRedirect = true;
                        httpRequest.Cookies = new CookieDictionary();
                        httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                        EnsurePostWWWLoginHDFull(httpRequest);
                        httpRequest.KeepAlive = true;
                        var cookieRaws = cookiestring.Split(';');
                        foreach (var cookieraw in cookieRaws)
                        {
                            var cookieJAr = cookieraw.Split('=');
                            try
                            {
                                httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                            }
                            catch { }
                        }
                        List<string> ADMINBM = new List<string>();
                        List<string> BMNEW = new List<string>();
                        List<string> BM_DEM = new List<string>();
                        int dem_bm = 0;
                        row.Cells["cCheckBM"].Value = "";
                        var checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={accessToken_EAAG}&limit=10&fields=%5B%22id%22,%22allow_page_management_in_www%22,%22business_users%7Brole%7D%22,%22sharing_eligibility_status%22,%22owned_ad_accounts.limit(1)%7Bcurrency,adtrust_dsl%7D%22,%22created_time%22,%22name%22,%20%22status%22%5D";
                        var response = httpRequest.Get(checkBM);
                        if (response.IsOK)
                        {
                            var responseSTR6 = response.ToString();
                            HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                            doc.LoadHtml(responseSTR6);
                            JObject jobject = JObject.Parse(responseSTR6);
                            var dataValues = jobject["data"];
                            if (dataValues != null)
                            {
                                var dataValuesArr = dataValues.ToObject<JArray>();
                            share_lai_1_bm:
                                BM_DEM = new List<string>();
                                foreach (var itemObject in dataValuesArr)
                                {
                                    businessId = itemObject["id"].ToString();
                               
                                    BM_DEM.Add(businessId);

                                    var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                                    var createdtime = itemObject["created_time"].ToString();
                                    var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                                    var nameBM = itemObject["name"].ToString();
                                    var userName = "";
                                    var business_users = itemObject["business_users"]?["data"];
                                    if (business_users != null)
                                    {
                                        var businessUsersArr = business_users.ToObject<JArray>();
                                        foreach (var userObject in businessUsersArr)
                                        {
                                            try
                                            {
                                                var role = userObject["role"]?.ToString();
                                                var userId = userObject["id"]?.ToString();
                                                userName = userObject["name"]?.ToString();
                                                ADMINBM.Add(userName);
                                            }
                                            catch { }

                                        }


                                    }
                                    var Chi_share_bm350 = "";
                                    if (cmb_chishare_bm350.InvokeRequired)
                                    {

                                        cmb_chishare_bm350.Invoke(new Action(() =>
                                        {
                                            Chi_share_bm350 = cmb_chishare_bm350.Text;

                                        }));
                                    }
                                    if (Chi_share_bm350 == "ON")
                                    {
                                        if(dem_bm == 1)
                                        {
                                            if (BM_DEM.Count == 1)
                                            {
                                                goto share_1_BM; 
                                            }

                                        }
                                      
                                        if (BMLIVE.Contains(businessId))
                                        {

                                            goto check_BM;
                                        }
                                        else
                                        {
                                            BMNEW.Add(businessId);
                                        }

                                    }
                                    else
                                    {
                                        if (ADMINBM.Count < 1)
                                        {

                                        }
                                        else
                                        {

                                            goto checkadmin;
                                        }
                                    }

                                share_1_BM:
                                    row.Cells["cCheckBM"].Value += $"{businessId}|{typeBm}|{statusBm}|";
                                    // Đổi màu chữ nếu là BM350
                                    if (typeBm == "BM350")
                                    {
                                        var color350 = "";
                                        if (cmb_color350.InvokeRequired)
                                        {
                                            cmb_color350.Invoke(new Action(() =>
                                            {
                                                color350 = cmb_color350.Text;
                                            }));
                                        }
                                        row.Cells["cCheckBM"].Style.ForeColor = Color.FromName(color350);
                                    }
                                    else
                                    {
                                        row.Cells["cCheckBM"].Style.ForeColor = Color.Black; // Mặc định màu đen
                                    }

                                    StreamWriter sw2 = new StreamWriter("BMCLONE.txt", true);
                                    sw2.WriteLine($"{businessId}|{typeBm}|{statusBm}|{username}" + DateTime.Now);
                                    sw2.Close();


                                    if (statusBm == "BM Live")
                                    {
                                        httpRequest.AddHeader("authority", "business.facebook.com");
                                        httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                        httpRequest.AddHeader("dpr", "0.800000011920929");
                                        httpRequest.AddHeader("priority", "u=0, i");
                                        httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                                        httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"");
                                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                        httpRequest.AddHeader("sec-fetch-dest", "document");
                                        httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                                        httpRequest.AddHeader("sec-ch-ua-platform-version", "\"\"");
                                        httpRequest.AddHeader("sec-fetch-mode", "navigate");
                                        httpRequest.AddHeader("sec-fetch-site", "none");
                                        httpRequest.AddHeader("sec-fetch-user", "?1");
                                        httpRequest.AddHeader("upgrade-insecure-requests", "1");
                                        httpRequest.AddHeader("viewport-width", "1334");
                                        response = httpRequest.Get($"https://business.facebook.com/latest/settings/business_users/?global_scope_id={businessId}&business_id={businessId}&nav_ref=bizweb_biz_home_scope_selector&redirect_session_id=682002f6-727b-4b16-9b53-6d96b4f77f5b");
                                        if (response.IsOK)
                                        {
                                            var responseStr01 = response.ToString();
                                            var scriptAddThongTin = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id,\r\n    businessUserID = require(\"CurrentBusinessUser\").business_user_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsUpdateBusinessUserForIGMAMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=2g&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=cjs5u2:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48W2a4p8aHwzzXwKwt8jwGzEaE8o4-222SU5G4E5yexfwjES1xwjokGvwOwem32fwLCyKbwzwea0Lo6-3u36iU9E2cwNwDwjouwqo4e220hi7E5y1rw&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsUpdateBusinessUserForIGMAMutation&variables={{\"businessUserID\":\"${{businessUserID}}\",\"firstName\":null,\"lastName\":null,\"email\":\"akajsjss111@hotmail.com\",\"roles\":null,\"business_account_task_ids\":null,\"expireTime\":null,\"clientTimezoneID\":null,\"businessID\":\"${{businessId}}\",\"nonce\":null,\"should_send_email_notif\":null,\"entryPoint\":\"BIZWEB_SETTINGS_ADD_CONTACT_INFO_UPDATE_BUSINESS_USER_FOR_IGMA\"}}&server_timestamps=true&doc_id=6412870625471134`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                            chromedriver.ExecuteScript(scriptAddThongTin);
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);
                                            }
                                            Thread.Sleep(100);
                                            chromedriver.Navigate().Refresh();
                                            while (isStop)
                                            {
                                                Thread.Sleep(1000);
                                            }

                                            var STT = "";
                                            if (cmb_Admin_BM.InvokeRequired)
                                            {
                                                cmb_Admin_BM.Invoke(new Action(() =>
                                                {
                                                    STT = cmb_Admin_BM.Text;
                                                }));
                                            }
                                            else
                                            {
                                                STT = cmb_Admin_BM.Text;
                                            }
                                            var ADMIN = "";
                                            if (STT == "Quyền Admin")
                                            {
                                                ADMIN = "ADMIN";
                                            }
                                            if (STT == "Quyền Nhân Viên")
                                            {
                                                ADMIN = "EMPLOYEE";
                                            }
                                            var hotmail_mailmoakt = "";
                                            row.Cells["cStatus"].Value = "Share BM....";
                                            if (cmb_MAIL_SHARE_BM_IG.InvokeRequired)
                                            {
                                                cmb_MAIL_SHARE_BM_IG.Invoke(new Action(() =>
                                                {
                                                    hotmail_mailmoakt = cmb_MAIL_SHARE_BM_IG.Text;
                                                }));


                                            }
                                            if (hotmail_mailmoakt == "HOTMAIL")
                                            {

                                                List<string> Mail = new List<string>();
                                                List<string> MailBM350 = new List<string>();
                                                if (rtb_hotmail_BM350.InvokeRequired)
                                                {
                                                    rtb_hotmail_BM350.Invoke(new Action(() =>
                                                    {

                                                        MailBM350 = rtb_hotmail_BM350.Lines.ToList();
                                                    }));


                                                }

                                                if (rtb_hotmail.InvokeRequired)
                                                {
                                                    rtb_hotmail.Invoke(new Action(() =>
                                                    {
                                                        Mail = rtb_hotmail.Lines.ToList();
                                                    }));
                                                }
                                                var rnd = new Random();
                                                var rnd1 = new Random();

                                                var hotmail_pass = Mail[rnd.Next(Mail.Count)].ToString();
                                                var hotmail_pass_BM350 = MailBM350[rnd1.Next(MailBM350.Count)].ToString();
                                                var mail_backup = hotmail_pass.Split('|')[0].ToString();
                                                var mail_backup_BM350 = hotmail_pass_BM350.Split('|')[0].ToString();
                                                if (typeBm == "BM350")
                                                {
                                                    row.Cells["cStatus"].Value = $"Share BM {businessId} => {mail_backup_BM350}";
                                                }
                                                else
                                                {
                                                    row.Cells["cStatus"].Value = $"Share BM {businessId} => {mail_backup}";
                                                }
                                                var usernamemail = mail_backup.Split('@')[0].ToString();
                                                var usernamemail_BM350 = mail_backup_BM350.Split('@')[0].ToString();
                                                var domain = mail_backup.Split('@')[1].ToString();

                                                var list_kt = File.ReadAllLines("kytuhotmail.txt").ToList();
                                                Random rd = new Random();
                                                var index = rd.Next(0, list_kt.Count);
                                                var kt = list_kt[index];
                                                var mail_share = "";
                                                if (typeBm == "BM350")
                                                {
                                                    var share_bm350 = "";
                                                    if (cmb_sharebmt6_350.InvokeRequired)
                                                    {
                                                        cmb_sharebmt6_350.Invoke(new Action(() =>
                                                        {

                                                            share_bm350 = cmb_sharebmt6_350.Text;

                                                        }));

                                                    }
                                                    if (share_bm350 == "Share_Ve_link_T3")
                                                    {
                                                        mail_share = usernamemail_BM350 + "%2B" + "_BMB" + businessId + "@" + domain;
                                                    }
                                                    else
                                                    {
                                                        mail_share = usernamemail_BM350 + "%2B" + "_BMA" + businessId + "@" + domain;

                                                    }

                                                }
                                                else
                                                {
                                                    var share_bm50 = "";
                                                    if (cmb_sharebmt6_50.InvokeRequired)
                                                    {
                                                        cmb_sharebmt6_50.Invoke(new Action(() =>
                                                        {

                                                            share_bm50 = cmb_sharebmt6_50.Text;

                                                        }));

                                                    }
                                                    if (share_bm50 == "Share_Ve_link_T3")
                                                    {
                                                        mail_share = usernamemail + "%2B" + "_BMIII" + businessId + "@" + domain;
                                                    }
                                                    else
                                                    {
                                                        mail_share = usernamemail + "%2B" + kt + businessId + "@" + domain;

                                                    }

                                                }

                                                var scriptInvite = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsInvitePeopleModalMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=6s&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=m2vooy:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmwoEeogzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiF-3a0Voc8-2-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1FwgU88158uwm85K&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&qpl_active_flow_ids=558499583&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsInvitePeopleModalMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"${{uid}}\",\"business_id\":\"${{businessId}}\",\"business_emails\":[\"{mail_share}\"],\"business_account_task_ids\":[\"926381894526285\",\"603931664885191\",\"1327662214465567\",\"862159105082613\",\"6161001899617846786\",\"1633404653754086\",\"967306614466178\",\"2848818871965443\",\"245181923290198\",\"388517145453246\"],\"invite_origin_surface\":\"MBS_INVITE_USER_FLOW\",\"assets\":[],\"expiry_time\":0,\"is_spark_permission\":false,\"client_timezone_id\":\"Asia/Jakarta\"}}}}&server_timestamps=true&doc_id=23919966164285762&fb_api_analytics_tags=[\"qpl_active_flow_ids=558499583\"]`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                                while (isStop)
                                                {
                                                    Thread.Sleep(1000);
                                                }
                                                var resultInvite = chromedriver.ExecuteScript(scriptInvite);
                                                while (isStop)
                                                {
                                                    Thread.Sleep(1000);
                                                }
                                                Thread.Sleep(1000);
                                                if (resultInvite != null)
                                                {
                                                    var resultInviteText = resultInvite.ToString();
                                                    if (resultInviteText.Contains("errors"))
                                                    {
                                                        row.Cells["cStatus"].Value = "MOI THAT BAI";
                                                    }

                                                    chromedriver.Navigate().Refresh();
                                                    goto next;
                                                }
                                                else
                                                {
                                                    row.Cells["cStatus"].Value = "MOI THANH CONG";
                                                    Thread.Sleep(1000);
                                                    if (typeBm == "BM350")
                                                    {
                                                        row.Cells["cStatus"].Value = $"Share BM {businessId} => {mail_backup_BM350} DONE";
                                                        chromedriver.Navigate().Refresh();
                                                        goto next;
                                                    }
                                                    else
                                                    {
                                                        row.Cells["cStatus"].Value = $"Share BM {businessId} => {mail_backup} DONE";
                                                        chromedriver.Navigate().Refresh();
                                                        goto next;
                                                    }
                                                    

                                                }


                                            }

                                        }


                                    }
                                    else
                                    {
                                        row.Cells["cStatus"].Value = $"BM {businessId} DIE";
                                        goto next;
                                    }

                                check_BM:
                                checkadmin:
                                    Thread.Sleep(1);



                                }

                                if(BM_DEM.Count == 1)
                                {
                                    dem_bm++;
                                    goto share_lai_1_bm;
                                }
                                if(BM_DEM.Count == BMLIVE.Count)
                                {
                                    check_lai_BM++;
                                    if(check_lai_BM == 2)
                                    {
                                        row.Cells["cStatus"].Value = "MAX 5BM";
                                        goto next;
                                    }
                                    else
                                    {
                                        goto instagram;
                                    }
                                  
                                   
                                }
                                if (BMNEW.Count == 0)
                                {
                                    goto instagram;
                                }

                            }
                        }
                        else
                        {
                            row.Cells["cStatus"].Value = $"Check BM FAIL ......";
                            goto checkbm;

                        }
                    }
                    catch
                    {
                        row.Cells["cStatus"].Value = $"Check BM FAIL ......";
                        goto checkbm;
                    }



                }
                catch { }





            next:
                Thread.Sleep(1);


            }
            catch { }







        }




        // === CẬP NHẬT HÀM REG_BM_2025 ===
        private void REG_BM_2025(DataGridViewRow row, string username, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            string profilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Profiles", username);
            ChromeDriver chromedriver = null;
            try
            {
                chromedriver = Createchromedrive_IG_NEW(profilePath);
                chromedriver.Navigate().GoToUrl("https://www.instagram.com/");
                // TODO: Các bước automation với chromedriver tại đây...
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in REG_BM_2025: {ex.Message}");
            }
            finally
            {
                if (chromedriver != null)
                {
                    try
                    {
                        chromedriver.Quit();
                    }
                    catch { }
                    WaitForChromeToExit(profilePath, TimeSpan.FromSeconds(10)); // Đảm bảo chrome thoát xong

                    if (Directory.Exists(profilePath))
                    {
                        try
                        {
                            Directory.Delete(profilePath, true);
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Failed to delete profile {username}: {ex.Message}");
                        }
                    }
                }
            }
        }

        // === SỬA HÀM CREATE ===
        private ChromeDriver Createchromedrive_IG_NEW(string profilePath)
        {
            ChromeOptions options = new ChromeOptions();
            options.AddArguments(
                $"--user-data-dir={profilePath}",
                "--disable-3d-apis",
                "--disable-background-networking",
                "--disable-bundled-ppapi-flash",
                "--disable-client-side-phishing-detection",
                "--disable-default-apps",
                "--disable-hang-monitor",
                "--disable-prompt-on-repost",
                "--disable-sync",
                "--disable-webgl",
                "--enable-blink-features=ShadowDOMV0",
                "--enable-logging",
                "--disable-notifications",
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-web-security",
                "--disable-rtc-smoothness-algorithm",
                "--disable-webrtc-hw-decoding",
                "--disable-webrtc-hw-encoding",
                "--disable-webrtc-multiple-routes",
                "--disable-webrtc-hw-vp8-encoding",
                "--enforce-webrtc-ip-permission-check",
                "--force-webrtc-ip-handling-policy",
                "--ignore-certificate-errors",
                "--disable-infobars",
                "--disable-popup-blocking",
                "--window-size=500,650",
                "--force-device-scale-factor=0.8"
            );

            var on_off_chrome = "";
            if (cmb_AN_CHROME.InvokeRequired)
            {
                cmb_AN_CHROME.Invoke(new Action(() =>
                {
                    on_off_chrome = cmb_AN_CHROME.Text;
                }));
            }
            else
            {
                on_off_chrome = cmb_AN_CHROME.Text;
            }

            if (on_off_chrome == "ON")
            {
                options.AddArguments("--headless", "--disable-gpu", "--no-sandbox", "--disable-dev-shm-usage");
            }

            if (c == 10) c = 0;
            if (0 <= c && c <= 4)
            {
                options.AddArguments($"--window-position={470 * c},0");
            }
            if (5 <= c && c < 10)
            {
                if (k == 5 || k == 10) k = 0;
                options.AddArguments($"--window-position={470 * k},650");
            }

            ChromeDriverService chromeDriverService = ChromeDriverService.CreateDefaultService();
            chromeDriverService.DisableBuildCheck = true;
            chromeDriverService.HideCommandPromptWindow = true;
            ChromeDriver chromeDriver = new ChromeDriver(chromeDriverService, options);
            chromeDriver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(60);
            chromeDriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);
            c++;
            k++;
            return chromeDriver;
        }

        private ChromeDriver Createchromedrive_REG_IG(string profilePath)
        {
            ChromeOptions options = new ChromeOptions();
            options.AddArguments(
                $"--user-data-dir={profilePath}",
                "--disable-3d-apis",
                "--disable-background-networking",
                "--disable-bundled-ppapi-flash",
                "--disable-client-side-phishing-detection",
                "--disable-default-apps",
                "--disable-hang-monitor",
                "--disable-prompt-on-repost",
                "--disable-sync",
                "--disable-webgl",
                "--enable-blink-features=ShadowDOMV0",
                "--enable-logging",
                "--disable-notifications",
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-web-security",
                "--disable-rtc-smoothness-algorithm",
                "--disable-webrtc-hw-decoding",
                "--disable-webrtc-hw-encoding",
                "--disable-webrtc-multiple-routes",
                "--disable-webrtc-hw-vp8-encoding",
                "--enforce-webrtc-ip-permission-check",
                "--force-webrtc-ip-handling-policy",
                "--ignore-certificate-errors",
                "--disable-infobars",
                "--disable-popup-blocking",
                "--window-size=500,650",
                "--force-device-scale-factor=0.8"
            );

            var on_off_chrome = "";
            if (cmb_AN_CHROME.InvokeRequired)
            {
                cmb_AN_CHROME.Invoke(new Action(() =>
                {
                    on_off_chrome = cmb_AN_CHROME.Text;
                }));
            }
            else
            {
                on_off_chrome = cmb_AN_CHROME.Text;
            }


            if (c == 10) c = 0;
            if (0 <= c && c <= 4)
            {
                options.AddArguments($"--window-position={470 * c},0");
            }
            if (5 <= c && c < 10)
            {
                if (k == 5 || k == 10) k = 0;
                options.AddArguments($"--window-position={470 * k},650");
            }

            ChromeDriverService chromeDriverService = ChromeDriverService.CreateDefaultService();
            chromeDriverService.DisableBuildCheck = true;
            chromeDriverService.HideCommandPromptWindow = true;
            ChromeDriver chromeDriver = new ChromeDriver(chromeDriverService, options);
            chromeDriver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(60);
            chromeDriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);
            c++;
            k++;
            return chromeDriver;
        }


        // === THÊM HÀM CHỜ CHROME THOÁT ===
        private void WaitForChromeToExit(string profilePath, TimeSpan timeout)
        {
            var sw = Stopwatch.StartNew();
            while (sw.Elapsed < timeout)
            {
                bool chromeStillRunning = false;
                var query = "SELECT ProcessId, CommandLine FROM Win32_Process WHERE Name = 'chrome.exe'";
                using (var searcher = new ManagementObjectSearcher(query))
                {
                    foreach (ManagementObject process in searcher.Get())
                    {
                        var cmdLine = process["CommandLine"]?.ToString() ?? "";
                        if (cmdLine.Contains(profilePath))
                        {
                            chromeStillRunning = true;
                            break;
                        }
                    }
                }

                if (!chromeStillRunning)
                    break;

                Thread.Sleep(500);
            }
        }




        private async void cHECKBMToolStripMenuItem_Click(object sender, EventArgs e)
        {

            var tasks = new List<Task>();
            foreach (var entry in lstDataChromeIG)
            {
                ChromeDriver chromeDriver = entry.Key;
                AccountData1 accountData = entry.Value;

                // Kiểm tra xem cột "cSelect" có tồn tại không
                if (accountData.Row1.Cells[9] != null)
                {
                    var cSelectValue = accountData.Row1.Cells[9].Value;

                    // Kiểm tra xem cột "cSelect" có được chọn hay không
                    if (cSelectValue != null && (bool)cSelectValue)
                    {
                        // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                        tasks.Add(Task.Run(() =>
                        {
                            CHECK_BM_IG(chromeDriver, accountData.Row1, accountData.User1);


                        }));
                    }
                }
                else
                {
                    // Cột "cSelect" không tồn tại
                    MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                }
            }
            await Task.WhenAll(tasks);




        }

        private void CHECK_BM_IG(ChromeDriver chromedriver, DataGridViewRow row, string username)
        {

            try
            {

                chromedriver.Navigate().GoToUrl("https://business.facebook.com/billing_hub");

                var html = chromedriver.PageSource;

                var tokenEAAG = Regex.Match(html, "init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString(); 

                row.Cells["cStatus"].Value = "Check BM .....";
                // Check BM

                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                var cookiestring = "";
                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }
                cookiestring = cookiestring.Trim(';');

                HttpRequest httpRequest = new HttpRequest();
                httpRequest.AllowAutoRedirect = true;
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                EnsurePostWWWLoginHDFull(httpRequest);
                httpRequest.KeepAlive = true;
                var cookieRaws = cookiestring.Split(';');
                foreach (var cookieraw in cookieRaws)
                {
                    var cookieJAr = cookieraw.Split('=');
                    try
                    {
                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                    }
                    catch { }
                }



                var checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={tokenEAAG}&limit=100&fields=%5B%22id%22,%22allow_page_management_in_www%22,%22business_users%7Brole%7D%22,%22sharing_eligibility_status%22,%22owned_ad_accounts.limit(1)%7Bcurrency,adtrust_dsl%7D%22,%22created_time%22,%22name%22,%20%22status%22%5D";
                var response = httpRequest.Get(checkBM);
                if (response.IsOK)
                {
                    var responseSTR6 = response.ToString();
                    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                    doc.LoadHtml(responseSTR6);
                    JObject jobject = JObject.Parse(responseSTR6);
                    var dataValues = jobject["data"];
                    if (dataValues != null)
                    {
                        var dataValuesArr = dataValues.ToObject<JArray>();
                        foreach (var itemObject in dataValuesArr)
                        {
                            var businessId = itemObject["id"].ToString();
                            var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                            var createdtime = itemObject["created_time"].ToString();
                            var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                            var nameBM = itemObject["name"].ToString();

                            row.Cells["cCheckBM"].Value += $"{businessId}|{typeBm}|{statusBm}|";
                            // Đổi màu chữ nếu là BM350
                            if (typeBm == "BM350")
                            {
                                row.Cells["cCheckBM"].Style.ForeColor = Color.Red; // Đặt màu đỏ
                            }
                            else
                            {
                                row.Cells["cCheckBM"].Style.ForeColor = Color.Black; // Mặc định màu đen
                            }

                            StreamWriter sw2 = new StreamWriter("BMCLONE.txt", true);
                            sw2.WriteLine($"{businessId}|{typeBm}|{statusBm}|" + DateTime.Now);
                            sw2.Close();

                        }
                    }

                }




            }
            catch { }


        }


        private async void sHAREBMIGToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var tasks = new List<Task>();
            foreach (var entry in lstDataChromeIG)
            {
                ChromeDriver chromeDriver = entry.Key;
                AccountData1 accountData = entry.Value;

                // Kiểm tra xem cột "cSelect" có tồn tại không
                if (accountData.Row1.Cells[9] != null)
                {
                    var cSelectValue = accountData.Row1.Cells[9].Value;

                    // Kiểm tra xem cột "cSelect" có được chọn hay không
                    if (cSelectValue != null && (bool)cSelectValue)
                    {
                        // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                        tasks.Add(Task.Run(() =>
                        {
                            SHARE_BM_IG(chromeDriver, accountData.Row1, accountData.User1);


                        }));
                    }
                }
                else
                {
                    // Cột "cSelect" không tồn tại
                    MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                }
            }
            await Task.WhenAll(tasks);
        }

        private void SHARE_BM_IG(ChromeDriver chromedriver, DataGridViewRow row, string username)
        {
            try
            {

                chromedriver.Navigate().GoToUrl("https://business.facebook.com/billing_hub");

                var html = chromedriver.PageSource;

                var tokenEAAG = Regex.Match(html, "init\",\\[{\"accessToken\":\"(.*?)\"").Groups[1].Value.ToString();

                row.Cells["cStatus"].Value = "Check BM .....";
                // Check BM

                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                var cookiestring = "";
                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }
                cookiestring = cookiestring.Trim(';');

                HttpRequest httpRequest = new HttpRequest();
                httpRequest.AllowAutoRedirect = true;
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                EnsurePostWWWLoginHDFull(httpRequest);
                httpRequest.KeepAlive = true;
                var cookieRaws = cookiestring.Split(';');
                foreach (var cookieraw in cookieRaws)
                {
                    var cookieJAr = cookieraw.Split('=');
                    try
                    {
                        httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                    }
                    catch { }
                }


                var checkBM = $"https://graph.facebook.com/v15.0/me/businesses?access_token={tokenEAAG}&limit=100&fields=%5B%22id%22,%22allow_page_management_in_www%22,%22business_users%7Brole%7D%22,%22sharing_eligibility_status%22,%22owned_ad_accounts.limit(1)%7Bcurrency,adtrust_dsl%7D%22,%22created_time%22,%22name%22,%20%22status%22%5D";
                var response = httpRequest.Get(checkBM);
                if (response.IsOK)
                {
                    var responseSTR6 = response.ToString();
                    HtmlAgilityPack.HtmlDocument doc = new HtmlAgilityPack.HtmlDocument();
                    doc.LoadHtml(responseSTR6);
                    JObject jobject = JObject.Parse(responseSTR6);
                    var dataValues = jobject["data"];
                    if (dataValues != null)
                    {
                        var dataValuesArr = dataValues.ToObject<JArray>();
                        foreach (var itemObject in dataValuesArr)
                        {
                            var businessId = itemObject["id"].ToString();
                            var typeBm = itemObject["sharing_eligibility_status"].ToString() == "enabled" ? "BM350" : "BM50";
                            var createdtime = itemObject["created_time"].ToString();
                            var statusBm = itemObject["allow_page_management_in_www"].ToString().ToLower() == "true" ? "BM Live" : "BM Die";
                            var nameBM = itemObject["name"].ToString();
                            if(statusBm == "BM Live")
                            {
                                chromedriver.Navigate().GoToUrl("https://business.facebook.com/latest/settings/business_users/?business_id=");
                                var scriptAddThongTin = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id,\r\n    businessUserID = require(\"CurrentBusinessUser\").business_user_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsUpdateBusinessUserForIGMAMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=2g&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=cjs5u2:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmw9O48W2a4p8aHwzzXwKwt8jwGzEaE8o4-222SU5G4E5yexfwjES1xwjokGvwOwem32fwLCyKbwzwea0Lo6-3u36iU9E2cwNwDwjouwqo4e220hi7E5y1rw&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsUpdateBusinessUserForIGMAMutation&variables={{\"businessUserID\":\"${{businessUserID}}\",\"firstName\":null,\"lastName\":null,\"email\":\"akajsjss111@hotmail.com\",\"roles\":null,\"business_account_task_ids\":null,\"expireTime\":null,\"clientTimezoneID\":null,\"businessID\":\"${{businessId}}\",\"nonce\":null,\"should_send_email_notif\":null,\"entryPoint\":\"BIZWEB_SETTINGS_ADD_CONTACT_INFO_UPDATE_BUSINESS_USER_FOR_IGMA\"}}&server_timestamps=true&doc_id=6412870625471134`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                chromedriver.ExecuteScript(scriptAddThongTin);
                                while (isStop)
                                {
                                    Thread.Sleep(1000);
                                }
                                Thread.Sleep(100);
                                chromedriver.Navigate().Refresh();
                                while (isStop)
                                {
                                    Thread.Sleep(1000);
                                }
                                httpRequest.AddHeader(":authority", "graph.facebook.com");
                                httpRequest.AddHeader("accept", "*/*");
                                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                httpRequest.AddHeader("priority", "u=1, i");
                                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                httpRequest.AddHeader("sec-fetch-dest", "empty");
                                httpRequest.AddHeader("sec-fetch-mode", "cors");
                                httpRequest.AddHeader("sec-fetch-site", "none");
                                var STT = "";
                                if (cmb_Admin_BM.InvokeRequired)
                                {
                                    cmb_Admin_BM.Invoke(new Action(() =>
                                    {
                                        STT = cmb_Admin_BM.Text;
                                    }));
                                }
                                else
                                {
                                    STT = cmb_Admin_BM.Text;
                                }
                                var ADMIN = "";
                                if (STT == "Quyền Admin")
                                {
                                    ADMIN = "ADMIN";
                                }
                                if (STT == "Quyền Nhân Viên")
                                {
                                    ADMIN = "EMPLOYEE";
                                }
                                var hotmail_mailmoakt = "";

                                if (cmb_MAIL_SHARE_BM_IG.InvokeRequired)
                                {
                                    cmb_MAIL_SHARE_BM_IG.Invoke(new Action(() =>
                                    {
                                        hotmail_mailmoakt = cmb_MAIL_SHARE_BM_IG.Text;
                                    }));


                                }
                                if (hotmail_mailmoakt == "HOTMAIL")
                                {

                                    var hotmnail_pass = "";
                                    if (typeBm == "BM50")
                                    {
                                        if (rtb_hotmail.InvokeRequired)
                                        {
                                            rtb_hotmail.Invoke(new Action(() =>
                                            {
                                                hotmnail_pass = rtb_hotmail.Text;
                                            }));
                                        }

                                    }
                                    else
                                    {
                                        if (rtb_hotmail_BM350.InvokeRequired)
                                        {
                                            rtb_hotmail_BM350.Invoke(new Action(() =>
                                            {
                                                hotmnail_pass = rtb_hotmail_BM350.Text;
                                            }));
                                        }
                                    }
                                


                                    var mail_backup = hotmnail_pass.Split('|')[0].ToString();
                                    var usernamemail = mail_backup.Split('@')[0].ToString();
                                    var domain = mail_backup.Split('@')[1].ToString();

                                    var list_kt = File.ReadAllLines("kytuhotmail.txt").ToList();
                                    Random rd = new Random();
                                    var index = rd.Next(0, list_kt.Count);
                                    var kt = list_kt[index];
                                  

                                    httpRequest.AddHeader(":authority", "graph.facebook.com");
                                    httpRequest.AddHeader("accept", "*/*");
                                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                                    httpRequest.AddHeader("priority", "u=1, i");
                                    httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                                    httpRequest.AddHeader("sec-fetch-dest", "empty");
                                    httpRequest.AddHeader("sec-fetch-mode", "cors");
                                    httpRequest.AddHeader("sec-fetch-site", "none");

                                    var mail_share = usernamemail + "%2B" + kt + businessId + "@" + domain;

                                    var scriptInvite = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsInvitePeopleModalMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=6s&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=m2vooy:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmwoEeogzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiF-3a0Voc8-2-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1FwgU88158uwm85K&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&qpl_active_flow_ids=558499583&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsInvitePeopleModalMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"${{uid}}\",\"business_id\":\"${{businessId}}\",\"business_emails\":[\"{mail_share}\"],\"business_account_task_ids\":[\"926381894526285\",\"603931664885191\",\"1327662214465567\",\"862159105082613\",\"6161001899617846786\",\"1633404653754086\",\"967306614466178\",\"2848818871965443\",\"245181923290198\",\"388517145453246\"],\"invite_origin_surface\":\"MBS_INVITE_USER_FLOW\",\"assets\":[],\"expiry_time\":0,\"is_spark_permission\":false,\"client_timezone_id\":\"Asia/Jakarta\"}}}}&server_timestamps=true&doc_id=23919966164285762&fb_api_analytics_tags=[\"qpl_active_flow_ids=558499583\"]`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                    while (isStop)
                                    {
                                        Thread.Sleep(1000);
                                    }
                                    var resultInvite = chromedriver.ExecuteScript(scriptInvite);
                                    while (isStop)
                                    {
                                        Thread.Sleep(1000);
                                    }
                                    Thread.Sleep(1000);
                                    if (resultInvite != null)
                                    {
                                        var resultInviteText = resultInvite.ToString();
                                        if (resultInviteText.Contains("errors"))
                                        {
                                            row.Cells["cStatus"].Value = "MOI THAT BAI";
                                        }

                                    }
                                    else
                                    {
                                        row.Cells["cStatus"].Value = "MOI THANH CONG";
                                    }


                                }
                                else
                                {
                                    HttpRequest httprequest_Mail_MOAKT = new HttpRequest();
                                    httprequest_Mail_MOAKT.Cookies = new CookieDictionary();
                                    httprequest_Mail_MOAKT.KeepAlive = true;
                                    httprequest_Mail_MOAKT.AllowAutoRedirect = true;
                                    httprequest_Mail_MOAKT.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36";
                                    var mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                    if (string.IsNullOrEmpty(mail_share))
                                    {
                                        mail_share = mailmoakt_com(httprequest_Mail_MOAKT);
                                    }

                                    var scriptInvite = $"let token = require(\"DTSGInitialData\").token || document.querySelector('[name=\"fb_dtsg\"]').value,\r\n    uid = require(\"CurrentUserInitialData\").USER_ID || document.cookie.match(/c_user=([0-9]+)/)[1],\r\n    businessId = require(\"CurrentBusinessUser\").business_id;\r\n\r\nfetch(\"https://business.facebook.com/api/graphql/?_callFlowletID=3860&_triggerFlowletID=3860\", {{\r\n    headers: {{\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n        \"x-fb-friendly-name\": \"BizKitSettingsInvitePeopleModalMutation\"\r\n    }},\r\n    body: `av=${{uid}}&__usid=6-Tsiqcgzf3m1eb:Psiqcib1f13xh9:0-Asiqcgzolcxdk-RV=6:F=&__aaid=0&__bid=${{businessId}}&__user=${{uid}}&__a=1&__req=6s&__hs=19959.HYP:bizweb_comet_pkg.2.1..0.0&dpr=1&__ccg=GOOD&__rev=1015950991&__s=m2vooy:pbzma4:as9gve&__hsi=7406736738879158218&__dyn=7xeUmxa2C6onwn8K2Wmh0MBwCwpUnwgU7SbzEdF8ixy361twYwJw4BwHz8hw9-0r-qbwgEdo4to4C0KEswIwuo9oeUa8462mcw4JwgECu1vw9m1YwBgao6C1uwiUmwoEeogzE8EhAwGK2efK2W1Qxe2GewGwxwjU88brwmEiwm8W4-1ezo661dxiF-3a0Voc8-2-qaUK2e0UE2ZwrUdUcpbwCw8O362u1dxW1FwgU88158uwm85K&__csr=gfIpIQJiiRi9t8DbqPtqkXbh3h5t8_EB4qEhZGO9R8hnkAj94O8QBBmSiR8OluFllJlRFZ_SGJd6CqCBuWABiAqq9LqZA_K8yHCjzESL-iWiijGnpEDHg-cyokDzHy48AiJ4BAUlBGAWRp94ihkKiECKqvG44rhpaBAxibQcwA-EGiaAgiGm9KGxK4Ey9-al6gymayoPGh5yVp8ryt2F9EvAUyazU-i2KqcwQxG8xuq2JohAHAKcy8gAUDxqEy2G1axmag9Elz8OdzUDG6US3u0yQfxqEixm1UAxu04kE6ibgj9cUtg8QgE24w9u1-eFEB3egjuVVlGX4x29CGECUoCxFa3a6ryk9AAxmHOzeabxf-489pO2UaK498uwBx-2V1O3W1QU6S260xk1vwso184Ctrhk1hgoho-dwNlPkA9oly6dOpi1aUpUkw7IF022gG96gka2-2dg5i0lK0eYxS0oh0dKE0i3zo1fQ1kwwa0FAOUMF88FqBwby0UE8A321mxp00lao8E2H2xb61klw0xmU1-U0o8DBw1bO0vK5cMtw5oo5e480HWU6mi0qa0dq80oK2a589R7cawywl61pwqobQ028i4olS48a920rUeo88Oqq0FFU0TG2a02aiz01rd0yy9FXoc86a0c4Bg4d0d2po1w9QaCg1XFo0sEy80j5ws9UnDDgG0deBo1j80z-uu0qm0gO3O0KsjcoC4pQQ5Uvy8cEak4y97WjgO68&__comet_req=11&fb_dtsg=${{token}}&jazoest=25365&lsd=Z1d4jKYEGWH95IlAa2j0-A&__spin_r=1015950991&__spin_b=trunk&__spin_t=1724515282&__jssesw=1&qpl_active_flow_ids=558499583&fb_api_caller_class=RelayModern&fb_api_req_friendly_name=BizKitSettingsInvitePeopleModalMutation&variables={{\"input\":{{\"client_mutation_id\":\"5\",\"actor_id\":\"${{uid}}\",\"business_id\":\"${{businessId}}\",\"business_emails\":[\"{mail_share}\"],\"business_account_task_ids\":[\"926381894526285\",\"603931664885191\",\"1327662214465567\",\"862159105082613\",\"6161001899617846786\",\"1633404653754086\",\"967306614466178\",\"2848818871965443\",\"245181923290198\",\"388517145453246\"],\"invite_origin_surface\":\"MBS_INVITE_USER_FLOW\",\"assets\":[],\"expiry_time\":0,\"is_spark_permission\":false,\"client_timezone_id\":\"Asia/Jakarta\"}}}}&server_timestamps=true&doc_id=23919966164285762&fb_api_analytics_tags=[\"qpl_active_flow_ids=558499583\"]`,\r\n    method: \"POST\",\r\n    mode: \"cors\",\r\n    credentials: \"include\"\r\n}}).then(response => response.json()).then(data => {{\r\n    console.log(\"Done\");\r\n    console.log(data);\r\n}});";
                                    while (isStop)
                                    {
                                        Thread.Sleep(1000);
                                    }
                                    var resultInvite = chromedriver.ExecuteScript(scriptInvite);
                                    while (isStop)
                                    {
                                        Thread.Sleep(1000);
                                    }
                                    Thread.Sleep(1000);
                                    if (resultInvite != null)
                                    {
                                        var resultInviteText = resultInvite.ToString();
                                        if (resultInviteText.Contains("errors"))
                                        {
                                            row.Cells["cStatus"].Value = "MOI THAT BAI";
                                        }

                                    }
                                    else
                                    {
                                        row.Cells["cStatus"].Value = "MOI THANH CONG";
                                    }



                                    var link = link_moakt(httprequest_Mail_MOAKT);
                                    if (string.IsNullOrEmpty(link))
                                    {
                                        Thread.Sleep(2000);
                                        link = link_moakt(httprequest_Mail_MOAKT);

                                    }
                                    if (!string.IsNullOrEmpty(link))
                                    {

                                        if (rtb_Link_BM_IG.InvokeRequired)
                                        {
                                            rtb_Link_BM_IG.Invoke(new Action(() =>
                                            {
                                                rtb_Link_BM_IG.AppendText(businessId + "|" + link + Environment.NewLine);

                                            }));
                                        }
                                        row.Cells["cStatus"].Value = $"SHARE BM {businessId} DONE";



                                    }
                                    else
                                    {
                                        row.Cells["cStatus"].Value = $"SHARE BM {businessId} FAIL";

                                    }
                                }
                         
                            }
                            else
                            {
                                row.Cells["cStatus"].Value = $"BM {businessId} DIE";
                            }
                        

                        }
                    }

                }


            


            }
            catch { }
        }
        private string link_moakt(HttpRequest httprequest)
        {
            try
            {
                httprequest.AddHeader("authority", "moakt.com");
                httprequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httprequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httprequest.AddHeader("referer", "https://moakt.com/vi/inbox");
                httprequest.AddHeader("priority", "u=0, i");
                httprequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httprequest.AddHeader("sec-ch-ua-mobile", "?0");
                httprequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httprequest.AddHeader("sec-fetch-dest", "document");
                httprequest.AddHeader("sec-fetch-mode", "navigate");
                httprequest.AddHeader("sec-fetch-site", "same-origin");
                httprequest.AddHeader("sec-fetch-user", "?1");
                httprequest.AddHeader("upgrade-insecure-requests", "1");
                var response = httprequest.Get("https://moakt.com/vi/inbox");
                var responseStr2 = response.ToString();
                var token = Regex.Match(responseStr2, "\\/vi\\/email\\/(.*?)\"").Groups[1].Value;


                httprequest.AddHeader("authority", "moakt.com");
                httprequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httprequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httprequest.AddHeader("priority", "u=0, i");
                httprequest.AddHeader("referer", "https://moakt.com/vi/inbox");
                httprequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httprequest.AddHeader("sec-ch-ua-mobile", "?0");
                httprequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httprequest.AddHeader("sec-fetch-dest", "document");
                httprequest.AddHeader("sec-fetch-mode", "navigate");
                httprequest.AddHeader("sec-fetch-site", "same-origin");
                httprequest.AddHeader("sec-fetch-user", "?1");
                httprequest.AddHeader("upgrade-insecure-requests", "1");
                response = httprequest.Get($"https://moakt.com/vi/email/{token}");
                var responseStr3 = response.ToString();


                httprequest.AddHeader("authority", "moakt.com");
                httprequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httprequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httprequest.AddHeader("priority", "u=0, i");
                httprequest.AddHeader("referer", $"https://moakt.com/vi/email/{token}");
                httprequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httprequest.AddHeader("sec-ch-ua-mobile", "?0");
                httprequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httprequest.AddHeader("sec-fetch-dest", "iframe");
                httprequest.AddHeader("sec-fetch-mode", "navigate");
                httprequest.AddHeader("sec-fetch-site", "same-origin");
                httprequest.AddHeader("upgrade-insecure-requests", "1");

                response = httprequest.Get($"https://moakt.com/vi/email/{token}/content/");
                var responseStr4 = response.ToString();
                var linkBM = "";
                var token2 = Regex.Match(responseStr4, "https:\\/\\/fb\\.me\\/(.*?)\"").Groups[1].Value.ToString();
                if (!string.IsNullOrEmpty(token2))
                {
                    linkBM = $"https://fb.me/{token2}";
                }
                var token3 = Regex.Match(responseStr4, "https:\\/\\/www\\.facebook\\.com\\/aymt\\/offsite\\/\\?(.*?)\"").Groups[1].Value.Replace("amp;", "").ToString();
                if (!string.IsNullOrEmpty(token3))
                {
                    linkBM = $"https://www.facebook.com/aymt/offsite/?{token3}";
                }
                var token4 = Regex.Match(responseStr4, "https:\\/\\/business\\.facebook\\.com\\/invitation\\/\\?token=(.*?)\"").Groups[1].Value.ToString();
                if (!string.IsNullOrEmpty(token4))
                {
                    linkBM = $"https://business.facebook.com/invitation/?token={token4}";
                }

                //var linkBM = $"https://www.facebook.com/aymt/offsite/?{token3}";


                return linkBM;

            }
            catch { }
            return "";

        }
        private string mailmoakt_com(HttpRequest httprequest)
        {
            try
            {

                httprequest.AddHeader("authority", "moakt.com");
                httprequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httprequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httprequest.AddHeader("cache-control", "max-age=0");
                httprequest.AddHeader("priority", "u=0, i");
                httprequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httprequest.AddHeader("sec-ch-ua-mobile", "?0");
                httprequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httprequest.AddHeader("sec-fetch-dest", "document");
                httprequest.AddHeader("sec-fetch-mode", "navigate");
                httprequest.AddHeader("sec-fetch-site", "none");
                httprequest.AddHeader("sec-fetch-user", "?1");
                httprequest.AddHeader("upgrade-insecure-requests", "1");

                var response = httprequest.Get("https://moakt.com/");
                var responseStr = response.ToString();
                var cookie = httprequest.Cookies.ToString();

                List<string> domain = new List<string>()
                {
                   "teml.net",
                    "tmpeml.com",
                    "tmpbox.net",
                    "moakt.cc",
                    "disbox.net",
                    "tmpmail.org",
                    "tmpmail.net",
                    "tmails.net",
                    "disbox.org",
                    "moakt.co",
                    "moakt.ws",
                    "tmail.ws",
                    "bareed.ws"

                };
                httprequest.AddHeader("authority", "moakt.com");
                httprequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httprequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httprequest.AddHeader("cache-control", "max-age=0");
                httprequest.AddHeader("priority", "u=0, i");
                httprequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httprequest.AddHeader("sec-ch-ua-mobile", "?0");
                httprequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httprequest.AddHeader("sec-fetch-dest", "document");
                httprequest.AddHeader("sec-fetch-mode", "navigate");
                httprequest.AddHeader("sec-fetch-site", "none");
                httprequest.AddHeader("sec-fetch-user", "?1");
                httprequest.AddHeader("upgrade-insecure-requests", "1");
                var username_mailMoakt = File.ReadAllLines("UsernameMoaKt.txt").ToList();
                Random rndnumber = new Random();
                int indexRandomnumber = rndnumber.Next(0, 10000000);
                Random rnd = new Random();
                int indexRandom = rnd.Next(0, username_mailMoakt.Count);
                string name = username_mailMoakt[indexRandom]+ indexRandomnumber;

                Random rnd1 = new Random();
                int indexRandom_1 = rnd1.Next(0, domain.Count);
                string domain_moakt = domain[indexRandom_1];

                var payload = $"domain={domain_moakt}&username={name}&setemail=Tạo+mới&preferred_domain=teml.net";
                response = httprequest.Post("https://moakt.com/vi/inbox", payload, "application/x-www-form-urlencoded");
                var responseStr1 = response.ToString();

                if (responseStr1.Contains(name))
                {
                    var mail_moakt = name + "@" + domain_moakt;
                    return mail_moakt;


                }
            }
            catch { }

            return "";

        }




        // GỠ CHECKPOINT 956 chrome

        private string OPEN956_CHROME(ChromeDriver chromedriver, DataGridViewRow row)
        {
            try
            {
                var Uid = row.Cells["cUID"].Value.ToString();
                var pass = row.Cells["cPass"].Value.ToString();
                var Cookie_2FA = "";
                try
                {
                    row.Cells["c2FA"].Value.ToString();
                }
                catch { }


                var MAIL = row.Cells["cMail"].Value.ToString();
                var Passmail = row.Cells["cPassMail"].Value.ToString();
                var MAIL_KP = row.Cells["cMailKP"].Value.ToString();



                var next1 = chromedriver.FindElements(By.XPath("//div[5]/div/div"));
                if (next1.Count > 0)
                {
                    try
                    {
                        // Cuộn đến phần tử
                        var element = next1.LastOrDefault();
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(2000);
                    }
                    catch { }

                }
                var next2 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                if (next2.Count > 0)
                {
                    try
                    {
                        // Cuộn đến phần tử
                        var element = next2.LastOrDefault();
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(10000);
                    }
                    catch { }
                }



                var e_mail = chromedriver.FindElements(By.XPath("//div/div/div[@role='presentation']"));
                if (e_mail.Count > 0)
                {
                    foreach (var element in e_mail)
                    {
                        try
                        {
                            var text = element.Text;
                            if (text.Contains("e-mail") || text.Contains("Get a code by email"))
                            {
                                element.Click();
                            }
                            if (text.Contains("รับรหัสทางอีเมล"))
                            {
                                element.Click();

                                var next55 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                                if (next55.Count > 0)
                                {

                                    next55.LastOrDefault().Click();
                                    Thread.Sleep(5000);
                                }
                            }
                        }
                        catch { }
                    }
                }


                var next2_1 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                if (next2_1.Count > 0)
                {
                    try
                    {
                        foreach (var element in next2_1)
                        {

                            var text = element.Text;
                            if (text == "รับรหัสทางอีเมล")
                            {
                                element.Click();
                                Thread.Sleep(1000);
                            }

                        }

                    }
                    catch { }
                }

                var mail = row.Cells["cMail"].Value.ToString();
                var passmail = row.Cells["cPassMail"].Value.ToString();
                var maskmail = MaskEmail(mail);
                var chon_mail = chromedriver.FindElements(By.XPath("//div[2]/div/div[@role='listitem']"));
                if (chon_mail.Count > 0)
                {
                    try
                    {
                        // Cuộn đến phần tử
                        var element = chon_mail.LastOrDefault();
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(1000);
                    }
                    catch { }
                }




                var mail_lay_code = chromedriver.FindElements(By.XPath("//div/div/div[@role='presentation']"));
                if (mail_lay_code.Count == 0)
                {
                    mail_lay_code = chromedriver.FindElements(By.XPath("//div/div/div[@role='radio']"));
                }
                foreach (var element in mail_lay_code)
                {
                    var text = element.Text;
                    if (text.Contains(maskmail))
                    {
                        try
                        {
                            element.Click();
                        }
                        catch { }
                    }

                }

                var next3 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                if (next3.Count > 0)
                {
                    try
                    {
                        // Cuộn đến phần tử
                        var element = next3.LastOrDefault();
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(1000);
                    }
                    catch { }

                }


                var codehotmail1 = "";
                // MAIL GET CODE
                var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail, passmail);

                if (string.IsNullOrEmpty(accessToken))
                {
                    Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                    (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail, passmail);
                }
                Thread.Sleep(1000);

                var uid = row.Cells["cUID"].Value.ToString();
                Task.Delay(TimeSpan.FromSeconds(50)).Wait();

                row.Cells["cStatus"].Value = "lấy Code mail.....";
                codehotmail1 = ReadHotmail956_Chrome_c(username1, accessToken, uid);
                int code_mail = 0;
                while (string.IsNullOrEmpty(codehotmail1))
                {

                    Thread.Sleep(1000);
                    var getanewcode = chromedriver.FindElements(By.XPath("//div/span/div[@role='button']"));
                    getanewcode[1].Click();
                    Task.Delay(TimeSpan.FromSeconds(50)).Wait();
                    codehotmail1 = ReadHotmail956_Chrome_c(username1, accessToken, uid);
                    code_mail++;
                    if (code_mail > 4)
                    {
                        row.Cells["cStatus"].Value = "lấy Code mail FAIL!";
                        return "FAIL";
                    }
                }

                var entercodemail = chromedriver.FindElements(By.XPath("//div[1]/div/div//label"));
                if (entercodemail.Count > 0)
                {
                    entercodemail.LastOrDefault().SendKeys(codehotmail1);
                }

                var next4 = chromedriver.FindElements(By.XPath("//div/div[2]/div[@role='button']"));
                if (next4.Count > 0)
                {
                    try
                    {
                        // Cuộn đến phần tử
                        var element = next4[1];
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(10000);
                    }
                    catch { }
                }

                var next5 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                if (next5.Count == 0)
                {
                    next5 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                }
                if (next5.Count > 0)
                {
                    try
                    {
                        // Cuộn đến phần tử
                        var element = next5.LastOrDefault();
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(5000);
                    }
                    catch { }

                }


                var next6 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                if (next6.Count > 0)
                {

                    try
                    {
                        // Cuộn đến phần tử
                        var element = next6.LastOrDefault();
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(5000);
                    }
                    catch { }
                }

                var newpass = "VuThai95@952025";

                var enter_pass = chromedriver.FindElements(By.XPath("//label/div[1]/input"));
                if (enter_pass.Count > 0)
                {

                    enter_pass.LastOrDefault().SendKeys(newpass);

                    var Save_CHANGE = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                    if (Save_CHANGE.Count > 0)
                    {
                        Save_CHANGE.LastOrDefault().Click();
                    }



                }


                var mail_delete = chromedriver.FindElements(By.XPath("//div[@role='checkbox']"));
                if (mail_delete.Count > 0)
                {
                    goto next_1;
                }

                next6 = chromedriver.FindElements(By.XPath("//div/div/div[@role='button']"));
                if (next6.Count > 0)
                {

                    try
                    {
                        // Cuộn đến phần tử
                        var element = next6.LastOrDefault();
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(5000);
                    }
                    catch { }
                }

                mail_delete = chromedriver.FindElements(By.XPath("//div[@role='checkbox']"));
            next_1:
                if (mail_delete.Count > 0)
                {
                    foreach (var element in mail_delete)
                    {
                        var text = element.Text;
                        if (!text.Contains(mail))
                        {
                            element.Click();
                            Thread.Sleep(1000);
                        }
                    }

                }

                var next7 = chromedriver.FindElements(By.XPath("//div/div[2]/div[@role='button']"));
                if (next7.Count > 0)
                {
                    try
                    {
                        // Cuộn đến phần tử
                        var element = next7.LastOrDefault();
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(2000);
                    }
                    catch { }
                }


                var next8 = chromedriver.FindElements(By.XPath("//div/div[2]/div[@role='button']"));
                if (next8.Count > 0)
                {
                    try
                    {
                        // Cuộn đến phần tử
                        var element = next8[2];
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(10000);
                    }
                    catch { }
                }
                var next9 = chromedriver.FindElements(By.XPath("//div/div[4]/div[@role='button']"));
                if (next9.Count > 0)
                {
                    try
                    {
                        // Cuộn đến phần tử
                        var element = next9.LastOrDefault();
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(3000);
                    }
                    catch { }

                }


                var FB = chromedriver.FindElements(By.XPath("//div//a[@href='https://www.facebook.com/']"));
                if (FB.Count > 0)
                {
                    try
                    {
                        // Cuộn đến phần tử
                        var element = FB.LastOrDefault();
                        ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", element);
                        // Đợi một chút để trang có thể cuộn xong
                        Thread.Sleep(500);
                        // Click vào phần tử
                        element.Click();
                        Thread.Sleep(5000);
                    }
                    catch { }
                    var urldissmiss = chromedriver.Url;
                    if (urldissmiss.Contains("checkpoint/601051028565049/"))
                    {
                        var dissmiss = chromedriver.FindElements(By.XPath("//div[@role='button']"));
                        dissmiss[2].Click();
                    }

                    //StreamWriter sw01 = new StreamWriter("956MAIL.txt", true);
                    //sw01.WriteLine()
                    row.Cells["cStatus"].Value = "Gỡ 956 MAIL DONE";
                    if (enter_pass.Count > 0)
                    {
                        StreamWriter SW = new StreamWriter("956Mail.txt", true);
                        SW.WriteLine(Uid + "|" + newpass + "|" + MAIL + "|" + Passmail + "|" + MAIL_KP);
                        SW.Close();
                    }
                    if (string.IsNullOrEmpty(Cookie_2FA))
                    {
                        StreamWriter SW = new StreamWriter("956Mail.txt", true);
                        SW.WriteLine(Uid + "|" + pass + "|" + MAIL + "|" + Passmail + "|" + MAIL_KP);
                        SW.Close();
                    }
                    else
                    {
                        StreamWriter SW = new StreamWriter("956Mail.txt", true);
                        SW.WriteLine(Uid + "|" + pass + "|" + Cookie_2FA + "|" + MAIL + "|" + Passmail + "|" + MAIL_KP);
                        SW.Close();
                    }

                    return "DONE";
                }

            }
            catch { }
            return "FAIL";
        }
        private string TEXT_CAPTCHA(ChromeDriver chromdriver)
        {
            try
            {
                var html = chromdriver.PageSource;
                var urlcaptcha = Regex.Match(html, "text_captcha_image_uri\":\"(.*?)\"").Groups[1].Value.Replace("\\", "");
                var cookies = chromdriver.Manage().Cookies.AllCookies;
                HttpRequest httpRequest = new HttpRequest();
                httpRequest.Cookies = new CookieDictionary();
                foreach (var cookie in cookies)
                {
                    try
                    {
                        httpRequest.Cookies.Add(cookie.Name, cookie.Value);
                    }
                    catch { }
                }
                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromdriver).ExecuteScript("return navigator.userAgent;");
                httpRequest.AddHeader("authority", "www.facebook.com");
                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httpRequest.AddHeader("priority", "u=0, i");
                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.86\", \"Chromium\";v=\"131.0.6778.86\", \"Not_A Brand\";v=\"24.0.0.0\"");
                httpRequest.AddHeader("dpr", "1");
                httpRequest.AddHeader("viewport-width", "1191");
                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                httpRequest.AddHeader("sec-fetch-dest", "document");
                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                httpRequest.AddHeader("sec-fetch-site", "none");
                httpRequest.AddHeader("sec-fetch-user", "?1");
                httpRequest.AddHeader("upgrade-insecure-requests", "1");

                var response1 = httpRequest.Get(urlcaptcha);
                var responseStr = response1.ToBytes();
                var responseString = response1.ToString();
                //var cookie2 = httpRequest.Cookies.ToString();
                var text = Convert.ToBase64String(responseStr);
                var sodu = httpRequest.Get("https://autocaptcha.pro/apiv3/balance?key=f4ff134fd1bd4d7758b9c23b310f0aa9").ToString();
                var sd = JObject.Parse(sodu)["balance"].ToString();

                if (tbsodu.InvokeRequired)
                {
                    tbsodu.Invoke(new Action(() =>
                    {
                        // Xóa nội dung cũ trước khi thêm giá trị mới
                        tbsodu.Clear();
                        // Thêm giá trị mới vào TextBox
                        tbsodu.AppendText(sd);

                    }));
                }
                else
                {
                    // Xóa nội dung cũ trước khi thêm giá trị mới
                    tbsodu.Clear();
                    // Thêm giá trị mới vào TextBox
                    tbsodu.AppendText(sd);
                }
                string url = "https://autocaptcha.pro/apiv3/process";
                // Chuẩn bị dữ liệu JSON cho yêu cầu
                //var img = $"data:image/jpeg;base64,{text}";
                var Key = "";
                if (cmbKeyCaptcha.InvokeRequired)
                {
                    cmbKeyCaptcha.Invoke(new Action(() =>
                    {
                        Key = cmbKeyCaptcha.Text;
                    }));
                }
                else
                {
                    Key = cmbKeyCaptcha.Text;
                }
                var jsonData = @"{
                    " + "\n" +
               $@"    ""key"":""{Key}"",
                    " + "\n" +
                @"    ""type"":""imagetotext"",
                    " + "\n" +
                $@"    ""img"":""{text}"",
                    " + "\n" +
                @"    ""module"":""common"",
                    " + "\n" +
                @"    ""casesensitive"":false
                    " + "\n" +
                @"
                    " + "\n" +
                @"}";
                // Gửi yêu cầu POST và nhận phản hồi
                var response = httpRequest.Post(url, jsonData, "application/json");
                var responseweb = response.ToString();

                var captchaResponse = JObject.Parse(responseweb)["captcha"].ToString();

                return captchaResponse;

            }
            catch { }

            return "";
        }

        private string ReadHotmail_c(string user, string accessToken, string uid)
        {

            List<string> code_mail = new List<string>();
            if (string.IsNullOrEmpty(accessToken))
            {
                // Nếu không có accessToken, không thực hiện
                return "";
            }

            try
            {
                using (var client = new ImapClient())
                {
                    // Kết nối đến máy chủ IMAP của Outlook (Office365)
                    client.Connect("outlook.office365.com", 993, SecureSocketOptions.SslOnConnect);

                    // Xác thực bằng OAuth2
                    var oauth2 = new SaslMechanismOAuth2(user, accessToken);
                    client.Authenticate(oauth2);

                    // Mở thư mục inbox
                    var inbox = client.Inbox;
                    inbox.Open(FolderAccess.ReadWrite);
                    // Lấy thời gian hiện tại
                    DateTime ngaygiohientai = DateTime.Now;
                    // Tính thời gian giảm đi 1 phút (hoặc có thể tùy chỉnh nếu cần)
                    DateTime targetTime = ngaygiohientai.AddMinutes(-1);
                    ////lùi lại 1 ngày
                    DateTime ngaygioluilai = ngaygiohientai.AddDays(-1);
                    DateTime targetTime1 = ngaygioluilai.AddMinutes(-1);
                    //// Tính thời gian giảm đi 5 phút
                    //// Tìm các email chưa đọc
                    //var uids = inbox.Search(SearchQuery.NotSeen);
                    //// Tìm email mới nhận sau thời điểm 5 phút trước
                    //var uids = inbox.Search(SearchQuery.DeliveredAfter(targetTime));
                    // Tìm email nhận trong vòng 5 phút gần nhất hoặc email từ ngày trước nhưng vẫn hợp lệ
                    var searchQuery = SearchQuery.DeliveredAfter(targetTime)
                                    .Or(SearchQuery.DeliveredAfter(targetTime1));
                    var uids = inbox.Search(searchQuery);
                    foreach (var uidMessage in uids)
                    {
                        var message = inbox.GetMessage(uidMessage);
                        var msg = message.HtmlBody;
                        var time = message.Date;
                        // Đánh dấu email là đã đọc sau khi xử lý
                        inbox.AddFlags(uidMessage, MessageFlags.Seen, true);

                        // Kiểm tra thời gian email nhận và nếu trong khoảng thời gian quy định
                        if (time >= targetTime || time >= targetTime1)
                        {
                            // Kiểm tra nếu email chứa link Facebook liên quan đến password
                            if (msg.Contains("https://www.facebook.com/n/?settings&amp;tab=account&amp;section=password&amp"))
                            {
                                var document = new HtmlDocument();
                                document.LoadHtml(msg);

                                // Tìm kiếm mã trong nội dung tin nhắn
                                var codeNode = document.DocumentNode.SelectSingleNode("//table/tr/td/table/tr[4]/td[2]/table/tr[4]/td[1]/span/div/table");
                                var code = codeNode?.InnerText.Trim(); // Kiểm tra null và loại bỏ khoảng trắng
                                if (!string.IsNullOrEmpty(code))
                                {
                                    code_mail.Add(code);
                                }

                            }

                            // Kiểm tra nếu email chứa link Facebook với ID người dùng
                            if (msg.Contains($"https://www.facebook.com/profile.php?id={uid}") || msg.Contains($"https://www.facebook.com/"))
                            {
                                var document = new HtmlDocument();
                                document.LoadHtml(msg);
                                var codeNode = document.DocumentNode.SelectSingleNode("//table/tr/td/table/tr[4]/td[2]/table/tr[4]/td[1]/span/div/table");
                                var code = codeNode?.InnerText.Trim(); // Kiểm tra null và loại bỏ khoảng trắng
                                if (!string.IsNullOrEmpty(code))
                                {
                                    code_mail.Add(code);
                                }
                                // Xóa email đã xử lý


                            }
                        }

                        // Xóa email đã xử lý
                        inbox.AddFlags(uidMessage, MessageFlags.Deleted, true);
                    }

                    // Ngắt kết nối sau khi xử lý
                    client.Disconnect(true);
                }


                if (code_mail.Count == 1)
                {
                    return code_mail[0];
                }
                if (code_mail.Count > 1)
                {
                    return code_mail[code_mail.Count - 1];
                }


                // Nếu không tìm thấy mã
                return "";
            }
            catch (Exception ex)
            {
                // Xử lý lỗi (ví dụ: log lỗi)
                return "LOGIN HOTMAIL FAIL";
            }
        }
        private string ReadHotmail956_Chrome_c(string user, string accessToken, string uid)
        {
            if (string.IsNullOrEmpty(accessToken))
            {
                // Nếu không có accessToken, không thực hiện
                return "";
            }

            try
            {
                using (var client = new ImapClient())
                {
                    // Kết nối đến máy chủ IMAP của Outlook (Office365)
                    client.Connect("outlook.office365.com", 993, SecureSocketOptions.SslOnConnect);

                    // Xác thực bằng OAuth2
                    var oauth2 = new SaslMechanismOAuth2(user, accessToken);
                    client.Authenticate(oauth2);

                    // Mở thư mục inbox
                    var inbox = client.Inbox;
                    inbox.Open(FolderAccess.ReadWrite);

                    // Lấy thời gian hiện tại
                    DateTime ngaygiohientai = DateTime.Now;
                    // Tính thời gian giảm đi 1 phút (hoặc có thể tùy chỉnh nếu cần)
                    DateTime targetTime = ngaygiohientai.AddMinutes(-5);
                    ////lùi lại 1 ngày
                    DateTime ngaygioluilai = ngaygiohientai.AddDays(-1);
                    DateTime targetTime1 = ngaygioluilai.AddMinutes(-5);
                    //// Tìm các email chưa đọc
                    //var uids = inbox.Search(SearchQuery.NotSeen);
                    // Tìm email mới nhận sau thời điểm 10 phút trước
                    //var uids = inbox.Search(SearchQuery.DeliveredAfter(targetTime));

                    // Tìm email nhận trong vòng 5 phút gần nhất hoặc email từ ngày trước nhưng vẫn hợp lệ
                    var searchQuery = SearchQuery.DeliveredAfter(targetTime)
                                    .Or(SearchQuery.DeliveredAfter(targetTime1));
                    var uids = inbox.Search(searchQuery);

                    foreach (var uidMessage in uids)
                    {
                        var message = inbox.GetMessage(uidMessage);
                        var msg = message.HtmlBody;
                        var time = message.Date;

                        // Kiểm tra thời gian email nhận và nếu trong khoảng thời gian quy định
                        if (time >= targetTime || time >= targetTime1)
                        {

                            // Kiểm tra thời gian và nội dung email
                            if (time >= targetTime && msg.Contains("https://www.facebook.com/email_open_log_pic.php?"))
                            {
                                var document = new HtmlDocument();
                                document.LoadHtml(msg);

                                // Tìm kiếm mã trong nội dung tin nhắn
                                var codeNode = document.DocumentNode.SelectSingleNode("/html[1]/table[1]/tr[1]/td[1]/table[1]/tr[1]/td[1]/body[1]/table[1]/tr[1]/td[1]/table[1]/tr[4]/td[2]/table[1]/tr[4]");
                                if (codeNode == null)
                                {
                                    goto mail;
                                }
                                var text = codeNode?.InnerText.Trim(); // Kiểm tra null và loại bỏ khoảng trắng
                                                                       // Sử dụng Regex để tìm mã gồm 6 chữ số
                                var match = Regex.Match(text, @"\d{6}");
                                // Kiểm tra nếu tìm thấy mã
                                if (match.Success)
                                {
                                    // Xóa email đã xử lý
                                    inbox.AddFlags(uidMessage, MessageFlags.Deleted, true);
                                    return match.Value; // Trả về mã tìm được
                                }
                            }
                        mail:
                            if (time >= targetTime && msg.Contains("https://www.facebook.com/n/?settings&amp;tab=account&amp;section=password&amp"))
                            {
                                var document = new HtmlDocument();
                                document.LoadHtml(msg);

                                // Tìm kiếm mã trong nội dung tin nhắn
                                var codeNode = document.DocumentNode.SelectSingleNode("//table/tr/td/table/tr[4]/td[2]/table/tr[4]/td[1]/span/div/table");
                                var code = codeNode?.InnerText.Trim(); // Kiểm tra null và loại bỏ khoảng trắng
                                                                       // Xóa email đã xử lý
                                inbox.AddFlags(uidMessage, MessageFlags.Deleted, true);
                                return code ?? ""; //Trả về mã nếu tìm thấy
                            }
                        }

                        // Đánh dấu email là đã đọc sau khi xử lý
                        inbox.AddFlags(uidMessage, MessageFlags.Seen, true);

                        // Xóa email đã xử lý
                        inbox.AddFlags(uidMessage, MessageFlags.Deleted, true);
                    }

                    // Ngắt kết nối sau khi xử lý
                    client.Disconnect(true);
                }

                // Nếu không tìm thấy mã
                return "";
            }
            catch (Exception ex)
            {
                // Xử lý lỗi (ví dụ: log lỗi)
                return "";
            }



        }
        private string FUN_CAPTCHA(ChromeDriver chromdriver)
        {
            try
            {
                var html = chromdriver.PageSource;
                var urlcaptcha = Regex.Match(html, "text_captcha_image_uri\":\"(.*?)\"").Groups[1].Value.Replace("\\", "");
                var cookies = chromdriver.Manage().Cookies.AllCookies;
                HttpRequest httpRequest = new HttpRequest();
                httpRequest.Cookies = new CookieDictionary();
                foreach (var cookie in cookies)
                {
                    try
                    {
                        httpRequest.Cookies.Add(cookie.Name, cookie.Value);
                    }
                    catch { }
                }
                httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromdriver).ExecuteScript("return navigator.userAgent;");
                httpRequest.AddHeader("authority", "www.facebook.com");
                httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httpRequest.AddHeader("priority", "u=0, i");
                httpRequest.AddHeader("sec-ch-prefers-color-scheme", "light");
                httpRequest.AddHeader("sec-ch-ua", "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"");
                httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Google Chrome\";v=\"131.0.6778.86\", \"Chromium\";v=\"131.0.6778.86\", \"Not_A Brand\";v=\"24.0.0.0\"");
                httpRequest.AddHeader("dpr", "1");
                httpRequest.AddHeader("viewport-width", "1191");
                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httpRequest.AddHeader("sec-ch-ua-platform-version", "\"10.0.0\"");
                httpRequest.AddHeader("sec-fetch-dest", "document");
                httpRequest.AddHeader("sec-fetch-mode", "navigate");
                httpRequest.AddHeader("sec-fetch-site", "none");
                httpRequest.AddHeader("sec-fetch-user", "?1");
                httpRequest.AddHeader("upgrade-insecure-requests", "1");

                var response1 = httpRequest.Get(urlcaptcha);
                var responseStr = response1.ToBytes();
                var responseString = response1.ToString();
                //var cookie2 = httpRequest.Cookies.ToString();
                var text = Convert.ToBase64String(responseStr);
                var sodu = httpRequest.Get("https://autocaptcha.pro/apiv3/balance?key=f4ff134fd1bd4d7758b9c23b310f0aa9").ToString();
                var sd = JObject.Parse(sodu)["balance"].ToString();

                if (tbsodu.InvokeRequired)
                {
                    tbsodu.Invoke(new Action(() =>
                    {
                        // Xóa nội dung cũ trước khi thêm giá trị mới
                        tbsodu.Clear();
                        // Thêm giá trị mới vào TextBox
                        tbsodu.AppendText(sd);

                    }));
                }
                else
                {
                    // Xóa nội dung cũ trước khi thêm giá trị mới
                    tbsodu.Clear();
                    // Thêm giá trị mới vào TextBox
                    tbsodu.AppendText(sd);
                }
                string url = "https://autocaptcha.pro/apiv3/process";
                // Chuẩn bị dữ liệu JSON cho yêu cầu
                //var img = $"data:image/jpeg;base64,{text}";
                var Key = "";
                if (cmbKeyCaptcha.InvokeRequired)
                {
                    cmbKeyCaptcha.Invoke(new Action(() =>
                    {
                        Key = cmbKeyCaptcha.Text;
                    }));
                }
                else
                {
                    Key = cmbKeyCaptcha.Text;
                }
                var jsonData = @"{
                    " + "\n" +
               $@"    ""key"":""{Key}"",
                    " + "\n" +
                @"    ""type"":""imagetotext"",
                    " + "\n" +
                $@"    ""img"":""{text}"",
                    " + "\n" +
                @"    ""module"":""common"",
                    " + "\n" +
                @"    ""casesensitive"":false
                    " + "\n" +
                @"
                    " + "\n" +
                @"}";
                // Gửi yêu cầu POST và nhận phản hồi
                var response = httpRequest.Post(url, jsonData, "application/json");
                var responseweb = response.ToString();

                var captchaResponse = JObject.Parse(responseweb)["captcha"].ToString();

                return captchaResponse;

            }
            catch { }

            return "";
        }

        const string baseURL = "https://api.mail.tm";

        private (string, string, string) GetNewEmail(HttpRequest http)
        {
            var domainsResponse = http.Get($"{baseURL}/domains").ToString();

            JObject jobject = JObject.Parse(domainsResponse);
            JArray domainArr = jobject["hydra:member"].ToObject<JArray>();

            var domain = domainArr[new Random().Next(0, domainArr.Count)]["domain"].ToString();
            var username = (GenerateRandomUsername() + "@" + domain).ToLower();
            var password = "Honghai!123";
            var payload =
            new
            {
                address = username,
                password = password
            };

            var payloadJson = JsonConvert.SerializeObject(payload);

            var registerResponse = http.Post($"{baseURL}/accounts", payloadJson, "application/json").ToString();

            var tokenResponse = http.Post($"{baseURL}/token", payloadJson, "application/json").ToString();

            var token = JObject.Parse(tokenResponse)["token"].ToString();

            return (username, password, token);
        }
        private void EnsurePostWWWLoginHDFullHOTMAIL(HttpRequest httpRequest)
        {
            httpRequest["accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
            httpRequest["accept-language"] = "vi-VN,vi;q=0.9,fr-FR;q=0.8,fr;q=0.7,en-US;q=0.6,en;q=0.5";
            httpRequest["cache-control"] = "max-age=0";
            httpRequest["sec-ch-ua"] = "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"";
            httpRequest["sec-ch-ua-mobile"] = "?0";
            httpRequest["sec-ch-ua-platform"] = "\"Windows\"";
            httpRequest["sec-ch-ua-platform-version:"] = "10.0.0";
            httpRequest["sec-fetch-dest"] = "document";
            httpRequest["sec-fetch-mode"] = "navigate";
            httpRequest["sec-fetch-site"] = "none";
            httpRequest["sec-fetch-user"] = "?1";

        }
        private HttpRequest CreateHttpRequestHOTMAIL(string user_agent)
        {
            HttpRequest httpRequest = new HttpRequest
            {
                Cookies = new CookieDictionary(),
                AllowAutoRedirect = true,
                UserAgent = user_agent,
                KeepAlive = true
            };
            httpRequest.AddHeader("Upgrade-Insecure-Requests", "1");
            return httpRequest;
        }
        private string LoginMailAPI(string mail, string passmail, DataGridViewRow row)
        {
            try
            {
                row.Cells["cStatus"].Value = "Login HOTMAIL .....";

                var httpRequest = CreateHttpRequestHOTMAIL("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36");
                EnsurePostWWWLoginHDFullHOTMAIL(httpRequest);
                var response = httpRequest.Get("https://login.live.com/login.srf?wa=wsignin1.0&rpsnv=166&ct=1733155710&rver=7.5.2211.0&wp=MBI_SSL&wreply=https%3a%2f%2foutlook.live.com%2fowa%2f%3fnlp%3d1%26cobrandid%3dab0455a0-8d03-46b9-b18b-df2f57b9e44c%26deeplink%3dowa%252f%26RpsCsrfState%3d50d02663-7afb-39b8-04fb-40da6ec04aec&id=292841&aadredir=1&CBCXT=out&lw=1&fl=dob%2cflname%2cwld&cobrandid=ab0455a0-8d03-46b9-b18b-df2f57b9e44c");
                if (response.IsOK)
                {
                    var responseStr = response.ToString();
                    // nhập mail nhấn tiếp
                    var urlGetCredentialType = Regex.Match(responseStr, "urlGetCredentialType:'(.*?)',").Groups[1].Value;
                    var uaid = Regex.Match(responseStr, "urlGetCredentialType.*?uaid=(.*?)',").Groups[1].Value;
                    var flowToken = Regex.Match(responseStr, "name=\"PPFT\".*?value=\"(.*?)\"\\/").Groups[1].Value;
                    var payload = $"{{\"checkPhones\":false,\"country\":\"\",\"federationFlags\":3,\"flowToken\":\"{flowToken}\",\"forceotclogin\":false,\"isCookieBannerShown\":false,\"isExternalFederationDisallowed\":false,\"isFederationDisabled\":false,\"isFidoSupported\":true,\"isOtherIdpSupported\":true,\"isRemoteConnectSupported\":false,\"isRemoteNGCSupported\":true,\"isSignup\":false,\"originalRequest\":\"\",\"otclogindisallowed\":false,\"uaid\":\"{uaid}\",\"username\":\"{mail}\"}}";
                    var responseEntermail = httpRequest.Post(urlGetCredentialType, payload, "application/json; charset=utf-8");
                    if (responseEntermail.IsOK)
                    {
                        var responseStr1 = responseEntermail.ToString();
                        // nhập passmail nhấn tiếp
                        var url = Regex.Match(responseStr, "urlPostMsa:'(.*?)'").Groups[1].Value;
                        var PPFT = Regex.Match(responseStr, "PPFT\" id=\"i0327\" value=\"(.*?)\"\\/").Groups[1].Value.ToString();
                        var PPSX = Regex.Match(responseStr, "sRandomBlob:'(.*?)'").Groups[1].Value;
                        var payload1 = $"ps=2&psRNGCDefaultType=&psRNGCEntropy=&psRNGCSLK=&canary=&ctx=&hpgrequestid=&PPFT={PPFT}&PPSX={PPSX}&NewUser=1&FoundMSAs=&fspost=0&i21=0&CookieDisclosure=0&IsFidoSupported=1&isSignupPost=0&isRecoveryAttemptPost=0&i13=0&login={mail}&loginfmt={mail}&type=11&LoginOptions=3&lrt=&lrtPartition=&hisRegion=&hisScaleUnit=&passwd={passmail}";
                        var responsepost = httpRequest.Post(url, payload1, "application/x-www-form-urlencoded");
                        if (responsepost.IsOK)
                        {
                            var responseStr2 = responsepost.ToString();
                            if (responseStr2.Contains("Abuse?"))
                            {
                                row.Cells["cStatus"].Value = "Mail Khóa => PHONE";
                                // mail khóa sdt
                                return "mail khoa";
                            }
                            if (responseStr2.Contains("https://account.live.com/tou/accrue?mkt=VI-VN&uiflavor=web"))
                            {
                                row.Cells["cStatus"].Value = "LOGIN HOTMAIL Fail => XÁC MINH ĐĂNG NHẬP!";
                                return "login fail";
                                // xác minh đăng nhập
                                //var url2 = Regex.Match(responseStr2, "action=\"(.*?)\"").Groups[1].Value;
                                //var pprid = Regex.Match(responseStr2, "pprid\" value=\"(.*?)\"").Groups[1].Value;
                                //var ipt = Regex.Match(responseStr2, "ipt\" value=\"(.*?)\"").Groups[1].Value;
                                //var uaid1 = Regex.Match(responseStr2, "id=\"uaid\" value=\"(.*?)\"").Groups[1].Value;
                                //var payload2 = $"pprid={pprid}&ipt={ipt}&uaid={uaid1}";
                                //var responsepost1 = httpRequest.Post(url2, payload2, "application/x-www-form-urlencoded");

                                //if (responsepost1.IsOK)
                                //{
                                //    var responseStr4 = responsepost1.ToString();

                                //    //var canary = Regex.Match(responseStr4, "sCanary\":\"(.*?)\"").Groups[1].Value.ToString();
                                //    //if (!string.IsNullOrEmpty(canary))
                                //    //{
                                //    //    var urlRU = Regex.Match(responseStr4, "urlRU\":\"(.*?)\",").Groups[1].Value;
                                //    //    var payload3 = canary.Replace("\\u002b", "+").Replace("\\u002f", "/").Replace("\\u003d", "=").Replace("\\u003b", ";");
                                //    //    var reponsepost2 = httpRequest.Post(urlRU, payload3, "application/x-www-form-urlencoded");
                                //    //    var responseStr5 = reponsepost2.ToString();
                                //    //    var id = Regex.Match(urlRU, "id=(.*?)&").Groups[1].Value;
                                //    //    var opid = Regex.Match(urlRU, "opid%3D(.*?)%26").Groups[1].Value;
                                //    //    var opidt = Regex.Match(urlRU, "opidt%3D(.*?)&").Groups[1].Value;
                                //    //    var uaid2 = Regex.Match(responseStr4, "sUnauthSessionID\":\"(.*?)\",\"sAppId").Groups[1].Value;
                                //    //    var urlGET = $"https://login.live.com/login.srf?id={id}&opid={opid}&opidt={opidt}&uaid={uaid2}";
                                //    //    var responseGET = httpRequest.Get(urlGET);
                                //    //    var reponseStrGet = responseGET.ToString();

                                //    //}

                                //}


                            }
                            if (responseStr2.Contains("https://account.live.com/proofs/Add?mkt=VI-VN&uiflavor=web"))
                            {
                                row.Cells["cStatus"].Value = "LOGIN HOTMAIL Fail => THÊM MAIL KHÔI PHỤC";
                                return "login fail";
                                // thêm mail khôi phục báo lên data thêm chức năng thêm mail kp
                                //var urlAdd = Regex.Match(responseStr2, "action=\"(.*?)\"").Groups[1].Value;
                                //var pprid = Regex.Match(responseStr2, "pprid\" value=\"(.*?)\"").Groups[1].Value;
                                //var ipt = Regex.Match(responseStr2, "ipt\" value=\"(.*?)\"").Groups[1].Value;
                                //var uaid1 = Regex.Match(responseStr2, "id=\"uaid\" value=\"(.*?)\"").Groups[1].Value;
                                //var payload2 = $"pprid={pprid}&ipt={ipt}&uaid={uaid1}";
                                //var responsepost1 = httpRequest.Post(urlAdd, payload2, "application/x-www-form-urlencoded");

                                //if (responsepost1.IsOK)
                                //{
                                //    var responseStr4 = responsepost1.ToString();
                                //}



                            }


                            // nhấn yes 
                            var PPFT1 = Regex.Match(responseStr2, "sFT:'(.*?)',").Groups[1].Value.ToString();
                            if (!string.IsNullOrEmpty(PPFT1))
                            {
                                var url1 = Regex.Match(responseStr2, "urlPost:'(.*?)'").Groups[1].Value.ToString();
                                var payload2 = $"LoginOptions=1&type=28&ctx=&hpgrequestid=&PPFT={PPFT1}&canary=";
                                var responsepost2 = httpRequest.Post(url1, payload2, "application/x-www-form-urlencoded");
                                var responseStr3 = responsepost2.ToString();
                                var getlogin = httpRequest.Get("https://outlook.live.com/mail/0/").ToString();
                                row.Cells["cStatus"].Value = "LOGIN HOTMAIL DONE";
                                return "LOGINHOTMAILDONE";
                                // đăng nhập hotmail thành công
                            }
                            else
                            {
                                row.Cells["cStatus"].Value = "LOGIN HOTMAIL Fail => SAI PASS";

                                return "login fail";
                                //sai pass
                            }

                        }

                    }

                }
            }
            catch { }
            return "login fail";
        }
        static string GenerateRandomUsername()
        {
            string[] adjectives = { "Fast", "Clever", "Brave", "Mighty", "Silent" };
            string[] nouns = { "Lion", "Eagle", "Shark", "Panther", "Wolf" };

            Random random = new Random();
            string randomAdjective = adjectives[random.Next(adjectives.Length)];
            string randomNoun = nouns[random.Next(nouns.Length)];
            int randomNumber = random.Next(100000, 999999);

            return randomAdjective + randomNoun + randomNumber;
        }


        static JArray GetMailMessages(HttpRequest http)
        {
            var mailMessagesResponse = http.Get($"{baseURL}/messages").ToString();
            return JObject.Parse(mailMessagesResponse)["hydra:member"].ToObject<JArray>();
        }
        private string GetEmail(HttpRequest httpRequest)
        {
            var emailSrc = httpRequest.Get("https://10minutemail.net/address.api.php").ToString();
            return Regex.Match(emailSrc, "mail_get_mail\":\"(.*?)\"").Groups[1].Value;
        }

        private string GetCodeMail10p(HttpRequest httpRequest)
        {
            var getMailId = httpRequest.Get("https://10minutemail.net/address.api.php").ToString();

            JObject jobject = JObject.Parse(getMailId);
            var maiList = jobject["mail_list"];
            var lstMailitem = maiList.ToObject<JArray>();

            var lstMailId = new Dictionary<string, string>();
            foreach (JObject mailitem in lstMailitem)
            {
                lstMailId.Add(mailitem["from"].ToString(), mailitem["mail_id"].ToString());
            }

            var mailId = lstMailId.Where(x => x.Key.Contains("instagram")).FirstOrDefault().Value;
            var readMail = httpRequest.Get("https://10minutemail.net/mail.api.php?mailid=" + mailId).ToString();
            var body = Regex.Match(readMail, "body\":\\[{\"(.*?)}").Groups[1].Value;
            var stringCode = Regex.Match(readMail, "confirmation code:(.*?)}").Groups[1].Value;

            return Regex.Match(stringCode, @"\d{6}").ToString();
        }

        private string GetCode(string key2fa)
        {
            byte[] secretKey = Base32Encoding.ToBytes(key2fa.Trim().Replace(" ", ""));
            Totp totp = new Totp(secretKey);
            return totp.ComputeTotp(DateTime.UtcNow);

        }
        private ChromeDriver Createchromedrive1()
        {
            ChromeOptions options = new ChromeOptions();
            options.AddArguments("--disable-3d-apis", "--disable-background-networking", "--disable-bundled-ppapi-flash", "--disable-client-side-phishing-detection", "--disable-default-apps", "--disable-hang-monitor", "--disable-prompt-on-repost", "--disable-sync", "--disable-webgl", "--enable-blink-features=ShadowDOMV0", "--enable-logging", "--disable-notifications", "--no-sandbox", "--disable-gpu", "--disable-dev-shm-usage", "--disable-web-security", "--disable-rtc-smoothness-algorithm", "--disable-webrtc-hw-decoding", "--disable-webrtc-hw-encoding", "--disable-webrtc-multiple-routes", "--disable-webrtc-hw-vp8-encoding", "--enforce-webrtc-ip-permission-check", "--force-webrtc-ip-handling-policy", "--ignore-certificate-errors", "--disable-infobars", "--disable-blink-features=\"BlockCredentialedSubresources\"", "--disable-popup-blocking");
            ChromeDriverService chromeDriverService = ChromeDriverService.CreateDefaultService();
            chromeDriverService.DisableBuildCheck = true;
            chromeDriverService.HideCommandPromptWindow = true;
            ChromeDriver chromeDriver = new ChromeDriver(chromeDriverService, options);
            chromeDriver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(60);
            chromeDriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);
            return chromeDriver;
        }
        public string MaskEmail(string email)
        {
            int atIndex = email.IndexOf('@');
            if (atIndex <= 1)
            {
                throw new ArgumentException("Email address is too short to mask properly.");
            }

            string localPart = email.Substring(0, atIndex);
            string domainPart = email.Substring(atIndex);

            // Keep the first character and the last character of the local part
            string maskedLocalPart = localPart[0] + new string('*', localPart.Length - 2) + localPart[localPart.Length - 1];

            return maskedLocalPart + domainPart;
        }

        private void KillChromeDriver()
        {
            Process[] processes = Process.GetProcessesByName("chromedriver");
            foreach (Process process in processes)
            {
                process.Kill();
            }
        }



        private void MAIL_accessToken(DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {
                var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(mail, passmail);
                if (string.IsNullOrEmpty(accessToken))
                {
                    (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(mail, passmail);
                }
                if (string.IsNullOrEmpty(accessToken))
                {
                    (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(mail, passmail);
                }
                else
                {
                    row.Cells["cMailKP"].Value = accessToken;

                }



            }
            catch { }



        }

        private void REG_PHONE(DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {

                //W8QKJZTOD6LFHM4D realme
                //
           
                var Stt = row.Cells["cStt"].Value.ToString();
                int stt = int.Parse(Stt);
              

                string deviceID = null;
                string deviceID1 = null;
                var listDevice = KAutoHelper.ADBHelper.GetDevices();
                //if (stt1 > listDevice.Count)
                //{
                //}
                if (listDevice != null && listDevice.Count > 0)
                {
                    try
                    {
                        deviceID = listDevice[0];
                        deviceID1 = listDevice[1];
                    }
                    catch { }
                }

                //var STT = "";
                //try
                //{
                //    STT = row.Cells["cStatus"].Value.ToString();
                //}
                //catch
                //{
                //    int x = 0;
                //    foreach (DataGridViewRow row1 in dgv1.Rows)
                //    {
                //        try
                //        {
                //           if(x == 0)
                //           {
                //                row1.Cells["cStatus"].Value = "RFCTC0SJLBB";
                //                x = 1;
                //                goto next;
                //           }
                //            if (x == 1)
                //            {
                //                row1.Cells["cStatus"].Value = "W8QKJZTOD6LFHM4D";
                //                x = 0;
                //            }
                //        next:
                //            Thread.Sleep(1);
                //        }
                //        catch { }
                //    }
                //}

                //STT = row.Cells["cStatus"].Value.ToString();
                //if (STT== "RFCTC0SJLBB" && deviceID == "RFCTC0SJLBB")
                //{
                    row.Cells["cStatus"].Value = "REG....... ";
                    // chọn APP
                    //KAutoHelper.ADBHelper.TapByPercent(deviceID, 15.4, 45.8);
                    //Thread.Sleep(TimeSpan.FromSeconds(2));
                    //Tạo TK
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 69.6, 86.3);
                    Thread.Sleep(TimeSpan.FromSeconds(2));
                    //BẮT ĐẦU
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 66.9, 45.8);
                    Thread.Sleep(TimeSpan.FromSeconds(2));
                    // không cho phép sử dụng danh bạ
                    //KAutoHelper.ADBHelper.TapByPercent(deviceID, 53.8, 87.8);

                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 19.1, 22.3);
                    Thread.Sleep(TimeSpan.FromSeconds(2));
                    var firstnames = File.ReadAllLines("firstname.txt").ToList();
                    Random rnd2 = new Random();
                    int indexRandom2 = rnd2.Next(0, firstnames.Count);

                    var firstname1 = firstnames[indexRandom2];
                    var lastnames = File.ReadAllLines("lastname.txt").ToList();
                    Random rnd = new Random();
                    int indexRandom = rnd.Next(0, lastnames.Count);

                    var lastname1 = lastnames[indexRandom];
                    //nhập tên
                    KAutoHelper.ADBHelper.InputText(deviceID, lastname1);
                    Thread.Sleep(TimeSpan.FromSeconds(2));
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 75.6, 22.0);
                    Thread.Sleep(TimeSpan.FromSeconds(2));

                    KAutoHelper.ADBHelper.InputText(deviceID, firstname1);


                    // tiếp tục
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 54.1, 31.3);
                    Thread.Sleep(TimeSpan.FromSeconds(2));

                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 54.9, 32.8);
                    Thread.Sleep(TimeSpan.FromSeconds(2));
                    //ngay 01
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 27.0, 47.2);
                    Random random = new Random();
                    // Sinh một số ngẫu nhiên từ 0 đến 100
                    int randomNumber = random.Next(1, 31);
                    string day = randomNumber.ToString();
                    KAutoHelper.ADBHelper.InputText(deviceID, day);
                    //// ĐẶT
                    //KAutoHelper.ADBHelper.TapByPercent(deviceID, 70.3, 64.5);
                    Thread.Sleep(TimeSpan.FromSeconds(2));
                    //tháng 12
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 49.6, 35.5);
                    Thread.Sleep(TimeSpan.FromSeconds(2));
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 49.6, 35.5);
                    Random random1 = new Random();
                    // Sinh một số ngẫu nhiên từ 0 đến 100
                    int randomNumber1 = random1.Next(1, 12);
                    string month = "Th" + randomNumber1.ToString();

                    KAutoHelper.ADBHelper.InputText(deviceID, month);
                    Thread.Sleep(TimeSpan.FromSeconds(2));
                    //// ĐẶT
                    //KAutoHelper.ADBHelper.TapByPercent(deviceID, 69.2, 63.4);
                    // năm 1999
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 71.4, 35.0);
                    Thread.Sleep(TimeSpan.FromSeconds(2));
                    Random random2 = new Random();
                    // Sinh một số ngẫu nhiên từ 0 đến 100
                    int randomNumber2 = random2.Next(1980, 2007);
                    string year = randomNumber2.ToString();
                    KAutoHelper.ADBHelper.InputText(deviceID, year);
                    Thread.Sleep(TimeSpan.FromSeconds(2));

                    // ĐẶT
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 69.6, 50.9);
                    Thread.Sleep(TimeSpan.FromSeconds(2));
                    // Tiếp
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 60.2, 41.3);
                    Thread.Sleep(TimeSpan.FromSeconds(5));

                    Random random3 = new Random();
                    // Sinh một số ngẫu nhiên từ 0 đến 100
                    int randomNumber3 = random3.Next(1, 3);
                    if (randomNumber3 == 1)
                    {
                        // nữ
                        KAutoHelper.ADBHelper.TapByPercent(deviceID, 88.4, 25.3);
                        Thread.Sleep(TimeSpan.FromSeconds(5));
                        // Tiếp
                    }
                    else
                    {
                        // nam
                        KAutoHelper.ADBHelper.TapByPercent(deviceID, 88.8, 31.8);
                        Thread.Sleep(TimeSpan.FromSeconds(5));
                        // Tiếp
                    }

                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 38.3, 53.5);
                    Thread.Sleep(TimeSpan.FromSeconds(5));
                    //dăng ky bằng mail
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 64.3, 50.4);
                    Thread.Sleep(TimeSpan.FromSeconds(5));

                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 50.8, 28.6);
                    KAutoHelper.ADBHelper.InputText(deviceID, mail);
                    //tiếp
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 57.1, 42.6);
                    Thread.Sleep(TimeSpan.FromSeconds(5));
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 56.4, 24.2);

                    Thread.Sleep(TimeSpan.FromSeconds(5));
                    Random random8 = new Random();
                    // Sinh một số ngẫu nhiên từ 0 đến 100
                    int randomNumber8 = random8.Next(1, 1000);
                    var passvia = firstnames[indexRandom2] + "@" + randomNumber8;

                    KAutoHelper.ADBHelper.InputText(deviceID, passvia);
                    Thread.Sleep(TimeSpan.FromSeconds(5));
                    // tiếp
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 51.9, 35.2);
                    Thread.Sleep(TimeSpan.FromSeconds(5));
                    row.Cells["cCheckBM"].Value = $"{mail}|{passvia}|{mail}|{passmail}";
                    StreamWriter SW01 = new StreamWriter("CLONEREGPHONE.txt", true);
                    SW01.WriteLine($"{mail}|{passvia}|{mail}|{passmail}");
                    SW01.Close();
                    Thread.Sleep(TimeSpan.FromSeconds(5));
                    // lúc khác
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 58.7, 35.5);
                    Thread.Sleep(TimeSpan.FromSeconds(5));
                    // tôi đồng ý
                    KAutoHelper.ADBHelper.TapByPercent(deviceID, 50.4, 84.1);
                    Thread.Sleep(TimeSpan.FromSeconds(5));





                //}

                //if (STT == "W8QKJZTOD6LFHM4D" && deviceID1 == "W8QKJZTOD6LFHM4D")
                //{
                //    row.Cells["cStatus"].Value = "REG....... ";
                //    //Tạo TK
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 69.6, 86.3);
                //    Thread.Sleep(TimeSpan.FromSeconds(2));
                //    //Tạo TK MỚI
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID, 52.6, 48.9);
                //    Thread.Sleep(TimeSpan.FromSeconds(2));
                //    //// Bắt đầu
                //    //KAutoHelper.ADBHelper.TapByPercent(deviceID, 50.4, 77.5);
                //    //Thread.Sleep(TimeSpan.FromSeconds(5));
                //    //Nhap HO
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 9.7, 24.3);
                //    var firstnames1 = File.ReadAllLines("firstname.txt").ToList();
                //    Random rnd20 = new Random();
                //    int indexRandom20 = rnd20.Next(0, firstnames1.Count);

                //    var firstname10 = firstnames1[indexRandom20];
                //    var lastnames1 = File.ReadAllLines("lastname.txt").ToList();
                //    Random rnd30 = new Random();
                //    int indexRandom30 = rnd30.Next(0, lastnames1.Count);

                //    var lastname10= lastnames1[indexRandom30];

                //    //nhập tên
                //    InputDelay(deviceID1, lastname10, 20);
                //    //KAutoHelper.ADBHelper.InputText(deviceID1, lastname10);
                //    Thread.Sleep(TimeSpan.FromSeconds(2));
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 65.8, 25.0);
                //    Thread.Sleep(TimeSpan.FromSeconds(2));
                //    InputDelay(deviceID1, firstname10, 20);
                //    //KAutoHelper.ADBHelper.InputText(deviceID1, firstname10);
                //    Thread.Sleep(TimeSpan.FromSeconds(5));
                //    // tiep
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 51.1, 33.8);
                //    Thread.Sleep(TimeSpan.FromSeconds(5));

                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 22.9, 34.8);
                //    Thread.Sleep(TimeSpan.FromSeconds(2));

                //    //ngay 01
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 27.0, 47.2);
                //    Random random = new Random();
                //    // Sinh một số ngẫu nhiên từ 0 đến 100
                //    int randomNumber = random.Next(1, 31);
                //    string day = randomNumber.ToString();
                //    KAutoHelper.ADBHelper.InputText(deviceID1, day);
                //    //// ĐẶT
                //    //KAutoHelper.ADBHelper.TapByPercent(deviceID, 70.3, 64.5);
                //    Thread.Sleep(TimeSpan.FromSeconds(2));
                //    //tháng 12
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 49.6, 35.5);
                //    Thread.Sleep(TimeSpan.FromSeconds(2));
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 49.6, 35.5);
                //    Random random1 = new Random();
                //    // Sinh một số ngẫu nhiên từ 0 đến 100
                //    int randomNumber1 = random1.Next(1, 12);
                //    string month = "thg " + randomNumber1.ToString();

                //    KAutoHelper.ADBHelper.InputText(deviceID1, month);
                //    Thread.Sleep(TimeSpan.FromSeconds(2));
                //    //// ĐẶT
                //    //KAutoHelper.ADBHelper.TapByPercent(deviceID, 69.2, 63.4);
                //    // năm 1999
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 71.4, 35.0);
                //    Thread.Sleep(TimeSpan.FromSeconds(2));
                //    Random random2 = new Random();
                //    // Sinh một số ngẫu nhiên từ 0 đến 100
                //    int randomNumber2 = random2.Next(1980, 2007);
                //    string year = randomNumber2.ToString();
                //    KAutoHelper.ADBHelper.InputText(deviceID1, year);
                //    Thread.Sleep(TimeSpan.FromSeconds(2));
                //    // ĐẶT
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 73.3, 52.9);
                //    Thread.Sleep(TimeSpan.FromSeconds(5));
                //    // Tiếp
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 49.6, 42.8);
                //    Thread.Sleep(TimeSpan.FromSeconds(5));
                //    Random random3 = new Random();
                //    // Sinh một số ngẫu nhiên từ 0 đến 100
                //    int randomNumber3 = random3.Next(1, 3);
                //    if (randomNumber3 == 1)
                //    {
                //        // nữ
                //        KAutoHelper.ADBHelper.TapByPercent(deviceID1, 88.4, 25.3);
                //        Thread.Sleep(TimeSpan.FromSeconds(5));
                        
                //    }
                //    else
                //    {
                //        // nam
                //        KAutoHelper.ADBHelper.TapByPercent(deviceID1, 88.8, 31.8);
                //        Thread.Sleep(TimeSpan.FromSeconds(5));
                      
                //    }

                //    // Tiếp
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 50.4, 57.5);
                //    Thread.Sleep(TimeSpan.FromSeconds(5));

                //    // ĐĂNG KÝ BẰNG MAIL
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 56.8, 51.9);
                //    Thread.Sleep(TimeSpan.FromSeconds(5));

                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 50.8, 28.6);
                //    KAutoHelper.ADBHelper.InputText(deviceID1, mail);
                //    //tiếp
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 57.1, 42.6);
                //    Thread.Sleep(TimeSpan.FromSeconds(5));
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 56.4, 24.2);

                //    Thread.Sleep(TimeSpan.FromSeconds(5));
                //    Random random8 = new Random();
                //    // Sinh một số ngẫu nhiên từ 0 đến 100
                //    int randomNumber8 = random8.Next(1, 1000);
                //    var passvia = firstnames1[indexRandom20] + "@" + randomNumber8;
                //    InputDelay(deviceID1, passvia, 20);

                //    //KAutoHelper.ADBHelper.InputText(deviceID1, passvia);
                //    Thread.Sleep(TimeSpan.FromSeconds(5));
                //    // tiếp
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 51.9, 35.2);
                //    Thread.Sleep(TimeSpan.FromSeconds(5));
                //    row.Cells["cCheckBM"].Value = $"{mail}|{passvia}|{mail}|{passmail}";
                //    StreamWriter SW01 = new StreamWriter("CLONEREGPHONE.txt", true);
                //    SW01.WriteLine($"{mail}|{passvia}|{mail}|{passmail}");
                //    SW01.Close();
                //    // lúc khác
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 58.7, 35.5);
                //    Thread.Sleep(TimeSpan.FromSeconds(5));
                //    // tôi đồng ý
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 50.4, 84.1);



                //}
               
             
                var noveri = "";

                if (cmb_noveri.InvokeRequired)
                {
                    cmb_noveri.Invoke(new Action(() =>
                    {
                        noveri = cmb_noveri.Text;
                    }));
                }

                if (noveri == "OFF")
                {
                    string codehotmail = "";
                    var GMAIL_HOTMAIL = "";
                    if(cmb_HOTMAIL_GMAIL.InvokeRequired)
                    {
                        cmb_HOTMAIL_GMAIL.Invoke(new Action(() =>
                        {
                            GMAIL_HOTMAIL= cmb_HOTMAIL_GMAIL.Text;
                        }));

                    }
                    if(GMAIL_HOTMAIL == "HOTMAIL")
                    {
                        Thread.Sleep(TimeSpan.FromSeconds(60));

                        var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(mail, passmail);
                        if (string.IsNullOrEmpty(accessToken))
                        {
                            (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(mail, passmail);
                        }
                        if (string.IsNullOrEmpty(accessToken))
                        {
                            (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(mail, passmail);
                        }
                        codehotmail = ReadHotmail_phone(username1, accessToken);
                    }
                    else
                    {

                        var chromedriver = Createchromedrive();

                        chromedriver.Navigate().GoToUrl("https://accounts.google.com/v3/signin/identifier?continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&ifkv=AXH0vVsIBgyJ6AP7liivGEgC0r5bchx_czNV2vjMgOjmd06taFwkk8WzcFnEQCkXkX_tblbUtlsg&rip=1&sacu=1&service=mail&flowName=GlifWebSignIn&flowEntry=ServiceLogin&dsh=S1211431054%3A1744783107260030");

                        Thread.Sleep(5000);

                        var entergmail = chromedriver.FindElements(By.XPath("//input[@type='email']"));
                        if (entergmail.Count > 0)
                        {
                            entergmail.LastOrDefault().SendKeys(mail);
                            Thread.Sleep(2000);
                        }
                        var Next = chromedriver.FindElements(By.XPath("//div/div/button/span[text()='Next']"));
                        if(Next.Count > 0)
                        {
                            Next.LastOrDefault().Click();
                            Thread.Sleep(2000);

                        }

                        var enterpassgmail = chromedriver.FindElements(By.XPath("//input[@type='password']"));
                        if (enterpassgmail.Count > 0)
                        {
                            enterpassgmail.LastOrDefault().SendKeys(passmail);
                            Thread.Sleep(2000);
                        }
                        Next = chromedriver.FindElements(By.XPath("//div/div/button/span[text()='Next']"));
                        if (Next.Count > 0)
                        {
                            Next.LastOrDefault().Click();
                            Thread.Sleep(2000);

                        }

                        var Comfrim = chromedriver.FindElements(By.XPath("//form/span/input[@name='confirm']"));
                        if(Comfrim.Count > 0)
                        {
                            Comfrim.LastOrDefault().Click();
                            Thread.Sleep(2000);
                        }
                        chromedriver.Navigate().GoToUrl("https://mail.google.com/");

                        Thread.Sleep(5000);
                        var html = chromedriver.PageSource;
                        codehotmail = Regex.Match(html, "Đây là mã xác nhận của bạn: (.*?) Không.").Groups[1].Value.ToString();
                        if (string.IsNullOrEmpty(codehotmail))
                        {
                            codehotmail = Regex.Match(html, "data-legacy-last-non-draft-message-id=.*?>(.*?) là mã xác nhận Facebook của bạ").Groups[1].Value.ToString();
                        }
                        if (string.IsNullOrEmpty(codehotmail))
                        {
                            codehotmail = Regex.Match(html, "data-legacy-last-non-draft-message-id=\".*?>(.*?) là mã xác nhận của bạ").Groups[1].Value.ToString();
                        }
                        if (string.IsNullOrEmpty(codehotmail))
                        {
                            codehotmail = Regex.Match(html, "\">(\\d{5}) is your Facebook confirmation code").Groups[1].Value.ToString();
                        }
                        if (string.IsNullOrEmpty(codehotmail))
                        {
                            codehotmail = Regex.Match(html, "\">(\\d{5}) is your confirmation code").Groups[1].Value.ToString();
                        }
                        chromedriver.Quit();
                        //KillChromeDriver();
                        Thread.Sleep(2000);
                
                    }


                    //if (STT == "W8QKJZTOD6LFHM4D" && deviceID1 == "W8QKJZTOD6LFHM4D")
                    //{
                    //    // nhập code
                    //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 49.2, 28.1);
                    //    Thread.Sleep(TimeSpan.FromSeconds(2));
                    //    KAutoHelper.ADBHelper.InputText(deviceID1, codehotmail);
                    //    Thread.Sleep(TimeSpan.FromSeconds(2));
                    //    // tiếp
                    //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 69.6, 37.0);
                    //    Thread.Sleep(TimeSpan.FromSeconds(20));

                    //    //chọn APP
                    //    KAutoHelper.ADBHelper.TapByPercent(deviceID1, 15.4, 45.8);
                    //    Thread.Sleep(TimeSpan.FromSeconds(2));

                    //}
                    //if (STT == "RFCTC0SJLBB" && deviceID == "RFCTC0SJLBB")
                    //{
                        // nhập code
                        KAutoHelper.ADBHelper.TapByPercent(deviceID, 49.2, 28.1);
                        Thread.Sleep(TimeSpan.FromSeconds(2));
                        KAutoHelper.ADBHelper.InputText(deviceID, codehotmail);
                        Thread.Sleep(TimeSpan.FromSeconds(2));
                        // tiếp
                        KAutoHelper.ADBHelper.TapByPercent(deviceID, 69.6, 37.0);
                        Thread.Sleep(TimeSpan.FromSeconds(20));

                        //chọn APP
                        //KAutoHelper.ADBHelper.TapByPercent(deviceID, 15.4, 45.8);
                        //Thread.Sleep(TimeSpan.FromSeconds(2));

                        //bỏ qua
                        //KAutoHelper.ADBHelper.TapByPercent(deviceID, 59.4, 90.0);
                        //// lúc khác
                        //Thread.Sleep(TimeSpan.FromSeconds(10));
                        //KAutoHelper.ADBHelper.TapByPercent(deviceID, 47.7, 89.9);
                        //// bỏ qua
                        //Thread.Sleep(TimeSpan.FromSeconds(2));
                        //KAutoHelper.ADBHelper.TapByPercent(deviceID, 41.3, 60.6);
                        //// tiếp tục
                        //Thread.Sleep(TimeSpan.FromSeconds(3));
                        //KAutoHelper.ADBHelper.TapByPercent(deviceID, 49.2, 89.2);

                        //// Bỏ qua
                        //Thread.Sleep(TimeSpan.FromSeconds(2));
                        //KAutoHelper.ADBHelper.TapByPercent(deviceID, 46.2, 89.7);

                        //Thread.Sleep(TimeSpan.FromSeconds(2));
                        //KAutoHelper.ADBHelper.TapByPercent(deviceID, 48.1, 89.5);



                        //Thread.Sleep(TimeSpan.FromSeconds(5));
                        //KAutoHelper.ADBHelper.TapByPercent(deviceID, 88.8, 10.8);

                        //// vuốt lên
                        //KAutoHelper.ADBHelper.SwipeByPercent(deviceID, 46, 80, 46, 16, 1000);
                        //// Đăng xuất
                        //KAutoHelper.ADBHelper.TapByPercent(deviceID, 45.1, 85);
                        //KAutoHelper.ADBHelper.TapByPercent(deviceID, 45.1, 91.2);
                        //Thread.Sleep(TimeSpan.FromSeconds(2));

                        //// Lúc Khác
                        //Thread.Sleep(TimeSpan.FromSeconds(5));
                        //KAutoHelper.ADBHelper.TapByPercent(deviceID, 61.3, 59.4);


                        // ĐĂNG XUẤT
                        //Thread.Sleep(TimeSpan.FromSeconds(5));
                        //KAutoHelper.ADBHelper.TapByPercent(deviceID, 80.1, 52.6);
                }
                    row.Cells["cStatus"].Value = "REG DONE";
                    Thread.Sleep(TimeSpan.FromSeconds(5));
                //}
                //else
                //{
                //    // ĐĂNG XUẤT
                //    Thread.Sleep(TimeSpan.FromSeconds(20));
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID, 6.0, 6.2);
                //    // THOÁT
                //    Thread.Sleep(TimeSpan.FromSeconds(5));
                //    KAutoHelper.ADBHelper.TapByPercent(deviceID, 78.2, 57.5);
                //    Thread.Sleep(TimeSpan.FromSeconds(5));

                //    row.Cells["cStatus"].Value = "REG NOVERI DONE";

                //}
            }
            catch { }


        }

        private void InputDelay(string deviceID , string text , int x)
        {
            try
            {
                foreach (var c in text)
                {

                    KAutoHelper.ADBHelper.InputText(deviceID, c.ToString());
                    Thread.Sleep(TimeSpan.FromMilliseconds(x));

                }

            }
            catch { }

        }


        private void REGCLONE(DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {
            try
            {

                var Ip = "";

                if (cmb_IP.InvokeRequired)
                {
                    cmb_IP.Invoke(new Action(() =>
                    {
                        Ip = cmb_IP.Text;
                    }));
                }
                else
                {
                    Ip = cmb_IP.Text;
                }

            login:
                var chromedriver = Createchromedrive();

                var lastnames = File.ReadAllLines("lastname.txt").ToList();
                Random rnd = new Random();
                int indexRandom = rnd.Next(0, lastnames.Count);

                var lastname1 = lastnames[indexRandom].ToLower();

                var firstnames = File.ReadAllLines("firstname.txt").ToList();
                Random rnd2 = new Random();
                int indexRandom2 = rnd2.Next(0, firstnames.Count);

                var firstname1 = firstnames[indexRandom2].ToLower();
                chromedriver.Navigate().GoToUrl("https://www.facebook.com/r.php?entry_point=login");

                var Firstname = chromedriver.FindElements(By.XPath("//input[@name='firstname']"));
                if (Firstname.Count > 0)
                {
                    Firstname.FirstOrDefault().SendKeys(firstname1);
                    Thread.Sleep(1000);
                }
                var lastname = chromedriver.FindElements(By.XPath("//input[@name='lastname']"));
                if (lastname.Count > 0)
                {
                    lastname.FirstOrDefault().SendKeys(lastname1);
                    Thread.Sleep(1000);
                }

                Random random = new Random();
                // Sinh một số ngẫu nhiên từ 0 đến 100
                int randomNumber = random.Next(1, 31);

                var birthday_day = chromedriver.FindElements(By.XPath($"//span/select[@name='birthday_day']"));
                if (birthday_day.Count > 0)
                {
                    birthday_day.FirstOrDefault().Click();
                    Thread.Sleep(2000);
                }

                if (Ip == "VN")
                {
                    var day = chromedriver.FindElement(By.XPath($"//select[1]//option[{randomNumber}]"));
                    // Cuộn tới phần tử
                    ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", day);
                    // Nhấp vào phần tử
                    day.Click();
                    Thread.Sleep(1000);
                }
                else
                {
                    var day = chromedriver.FindElement(By.XPath($"//select[2]//option[{randomNumber}]"));
                    // Cuộn tới phần tử
                    ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", day);
                    // Nhấp vào phần tử
                    day.Click();
                    Thread.Sleep(1000);
                }


                Random random1 = new Random();
                // Sinh một số ngẫu nhiên từ 0 đến 100
                int randomNumber1 = random1.Next(1, 12);

                var birthday_month = chromedriver.FindElements(By.XPath($"//select[@name='birthday_month']"));
                if (birthday_month.Count > 0)
                {
                    birthday_month.FirstOrDefault().Click();
                    Thread.Sleep(2000);
                }

                if (Ip == "VN")
                {
                    var month = chromedriver.FindElement(By.XPath($"//select[2]//option[{randomNumber1}]"));
                    // Cuộn tới phần tử
                    ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", month);
                    // Nhấp vào phần tử
                    month.Click();
                    Thread.Sleep(1000);
                }
                else
                {
                    var month = chromedriver.FindElement(By.XPath($"//select[1]//option[{randomNumber1}]"));
                    // Cuộn tới phần tử
                    ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", month);
                    // Nhấp vào phần tử
                    month.Click();
                    Thread.Sleep(1000);
                }


                Random random2 = new Random();
                // Sinh một số ngẫu nhiên từ 0 đến 100
                int randomNumber2 = random2.Next(1980, 2006);
                var birthday_year = chromedriver.FindElements(By.XPath($"//select[@name='birthday_year']"));
                if (birthday_year.Count > 0)
                {
                    birthday_year.FirstOrDefault().Click();
                    Thread.Sleep(2000);
                }
                var year = chromedriver.FindElement(By.XPath($"//select[3]/option[@value='{randomNumber2}']"));
                // Cuộn tới phần tử
                ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", year);
                // Nhấp vào phần tử
                year.Click();
                Thread.Sleep(1000);
                Random random3 = new Random();
                // Sinh một số ngẫu nhiên từ 0 đến 100
                int randomNumber3 = random3.Next(0, 2);
                var Gender = chromedriver.FindElements(By.XPath("//label/input[@type='radio']"));
                if (Gender.Count > 0)
                {
                    if (randomNumber3 == 0)
                    {
                        Gender[0].Click();
                        Thread.Sleep(2000);

                    }
                    if (randomNumber3 == 1)
                    {
                        Gender[1].Click();

                    }
                }

                var entermail = chromedriver.FindElements(By.XPath("//input[@name='reg_email__']"));
                if (entermail.Count > 0)
                {
                    entermail.FirstOrDefault().SendKeys(mail);
                    Thread.Sleep(2000);
                }


                var enterpass = chromedriver.FindElements(By.XPath("//input[@name='reg_passwd__']"));
                if (enterpass.Count > 0)
                {
                    enterpass.FirstOrDefault().SendKeys(passmail);
                    Thread.Sleep(2000);
                }



                var singup = chromedriver.FindElements(By.XPath("//div/div//button[@name='websubmit']"));
                if (singup.Count > 0)
                {
                    singup.FirstOrDefault().Click();
                    Thread.Sleep(2000);
                }


                Thread.Sleep(TimeSpan.FromSeconds(10));
                var url = chromedriver.Url;
                if (url.Contains("https://www.facebook.com/r.php?entry_point=login"))
                {

                    chromedriver.Quit();
                    chromedriver.Close();
                    goto login;


                }

                var noveri = "";

                if (cmb_noveri.InvokeRequired)
                {
                    cmb_noveri.Invoke(new Action(() =>
                    {
                        noveri = cmb_noveri.Text;
                    }));
                }

                if (noveri == "OFF")
                {
                    Thread.Sleep(TimeSpan.FromSeconds(50));
                    var codehotmail = "";
                    if (Ip == "VN")
                    {
                        var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(mail, passmail);
                        if (string.IsNullOrEmpty(accessToken))
                        {
                            (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(mail, passmail);
                        }
                        if (string.IsNullOrEmpty(accessToken))
                        {
                            (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2_2(mail, passmail);
                        }
                        codehotmail = ReadHotmail_c(username1, accessToken);
                    }
                    else
                    {
                        codehotmail = ReadHotmail_c(mail, mailkhoiphuc);
                    }




                    var entercode = chromedriver.FindElements(By.XPath("//label/div/input[@name='code']"));
                    if (entercode.Count > 0)
                    {
                        entercode.FirstOrDefault().SendKeys(codehotmail);
                        Thread.Sleep(5000);
                    }


                    var confirm = chromedriver.FindElement(By.XPath("//div/button[@name='confirm']"));
                    // Cuộn tới phần tử
                    ((IJavaScriptExecutor)chromedriver).ExecuteScript("arguments[0].scrollIntoView(true);", confirm);
                    // Nhấp vào phần tử
                    confirm.Click();
                    Thread.Sleep(10000);

                    chromedriver.Navigate().GoToUrl("https://www.facebook.com/");
                    var html = chromedriver.PageSource;
                    var UID = Regex.Match(html, "user=(.*?)&").Groups[1].Value.ToString();
                    if (!string.IsNullOrEmpty(UID))
                    {
                        row.Cells["cStatus"].Value = "REG DONE";
                        var cookies = chromedriver.Manage().Cookies.AllCookies;
                        string wd = "";
                        foreach (var cookie in cookies)
                        {
                            try
                            {
                                wd += $"{cookie.Name}={cookie.Value};";
                            }
                            catch { }
                        }
                        Thread.Sleep(100);
                        StreamWriter sw = new StreamWriter("REGCLONE.txt", true);
                        sw.WriteLine(UID + "|" + passmail + "|" + wd + "|" + mail + "|" + passmail);
                        sw.Close();
                        Thread.Sleep(100);

                        chromedriver.Quit();
                        chromedriver.Close();

                    }

                }



            }
            catch { }

        }

        //LOGIN GMAIL CHROME
        private void lOGINGMAILCHROMEToolStripMenuItem_Click(object sender, EventArgs e)
        {
            _ = Task.Run(async () =>
            {
                var tasks = new List<Task>();
                // Lọc các dòng đã chọn từ DataGridView, bao gồm cả click vào checkbox và chọn từ ContextMenuStrip
                var lstRowCheck = dgv1.Rows.Cast<DataGridViewRow>()
                    .Where(row => row.Cells["cSelect"].Value != null && Convert.ToBoolean(row.Cells["cSelect"].Value))
                    .ToList();
                foreach (var row in lstRowCheck)
                {

                    var chromeDriver = Createchromedrivehotmail();
                    tasks.Add(Task.Run(() =>
                    {
                        Login_GMAIL(chromeDriver, row);
                    }));
                    await Task.Delay(2000);
                }
                // Đợi tất cả các task hoàn thành
                await Task.WhenAll(tasks);
            });


        }
        private void Login_GMAIL(ChromeDriver chromedriver, DataGridViewRow row)
        {

            try
            {
                var mail = row.Cells["cUID"].Value.ToString();
                var passmail = row.Cells["cPass"].Value.ToString();
                // Điều hướng đến trang mới (ví dụ: Instagram)
                chromedriver.Navigate().GoToUrl("https://accounts.google.com/");


                Thread.Sleep(5000);

                var entergmail = chromedriver.FindElements(By.XPath("//input[@type='email']"));
                if (entergmail.Count > 0)
                {
                    entergmail.LastOrDefault().SendKeys(mail);
                    Thread.Sleep(2000);
                }
                var Next = chromedriver.FindElements(By.XPath("//div/div/button/span[text()='Next']"));
                if (Next.Count > 0)
                {
                    Next.LastOrDefault().Click();
                    Thread.Sleep(2000);

                }

                var enterpassgmail = chromedriver.FindElements(By.XPath("//input[@type='password']"));
                if (enterpassgmail.Count > 0)
                {
                    enterpassgmail.LastOrDefault().SendKeys(passmail);
                    Thread.Sleep(2000);
                }
                Next = chromedriver.FindElements(By.XPath("//div/div/button/span[text()='Next']"));
                if (Next.Count > 0)
                {
                    Next.LastOrDefault().Click();
                    Thread.Sleep(2000);

                }

                var Comfrim = chromedriver.FindElements(By.XPath("//form/span/input[@name='confirm']"));
                if (Comfrim.Count > 0)
                {
                    Comfrim.LastOrDefault().Click();
                    Thread.Sleep(2000);
                }
                chromedriver.Navigate().GoToUrl("https://mail.google.com/");

                row.Cells["cStatus"].Value = "LOGIN DONE";
            }
            catch { row.Cells["cStatus"].Value = "LOGIN FAIL!"; }


        }

        private void CHECKIG_LIVE_DIE()
        {

            try
            {
                #region


                //foreach (DataGridViewRow row1 in dgv1.Rows)
                //{
                //    try
                //    {
                //        var chromedriver = Createchromedrive();
                //        var name = row1.Cells["cUID"].Value.ToString().ToLower().Trim();

                //        chromedriver.Navigate().GoToUrl($"https://imginn.com/search?q={name}");



                //        var text = chromedriver.FindElements(By.XPath("//div[2]/div[2]/div"));
                //        if (text.Count > 0)
                //        {
                //            var No_result_for = text.LastOrDefault().Text.ToString();

                //            if (No_result_for == $"No result for {name}")
                //            {

                //                row1.Cells["cStatus"].Value = "282";

                //                goto next;
                //            }

                //        }
                //        var nameig = chromedriver.FindElements(By.XPath("//div[@class='username']"));
                //        if (nameig.Count > 0)
                //        {

                //            foreach (var item in nameig)
                //            {
                //                try
                //                {
                //                    var text1 = item.Text;
                //                    if (text1 == $"@{name.ToLower()}")
                //                    {
                //                        row1.Cells["cStatus"].Value = "LIVE";
                //                        goto next;
                //                    }

                //                }
                //                catch { }

                //            }

                //            row1.Cells["cStatus"].Value = "282";

                //        }

                //    next:
                //        chromedriver.Quit();
                //        KillChromeDriver();
                //        Thread.Sleep(2000);


                //    }
                //    catch { }

                //}

                #endregion

                foreach (DataGridViewRow row1 in dgv1.Rows)
                {
                    var delay = (int)delay_check_ig.Value;
                    Thread.Sleep(TimeSpan.FromSeconds(delay));
                    var name = "";
                    var namecheck = "";
                    try
                    {
                        name = row1.Cells["cUID"].Value.ToString().Trim();
                        namecheck = row1.Cells["cUID"].Value.ToString().ToLower().Trim();
                    }
                    catch { }
                    var pass = row1.Cells["cPass"].Value.ToString().Trim();
                    var cookie = "";
                    try
                    {
                        cookie = row1.Cells["c2FAvsCookie"].Value.ToString().Trim();
                    }
                    catch { }
                    var c2fa = "";
                    try
                    {
                        c2fa = row1.Cells["cMail"].Value.ToString().Trim();
                    }
                    catch { }

                    var mail = "";
                    try
                    {
                        mail = row1.Cells["cPassMail"].Value.ToString().Trim();
                    }
                    catch { }
                    var passmail = "";
                    try
                    {
                        passmail = row1.Cells["cMailKP"].Value.ToString().Trim();
                    }
                    catch { }
                    var account = $"{name}|{pass}|{cookie}|{c2fa}|{mail}|{passmail}";
                    HttpRequest httpRequest = new HttpRequest();
                    httpRequest.AllowAutoRedirect = true;
                    httpRequest.Cookies = new CookieDictionary();
                    httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36";
                    httpRequest.KeepAlive = true;
                    httpRequest.AddHeader("authority", "www.instagram.com");
                    httpRequest.AddHeader("accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7");
                    httpRequest.AddHeader("accept-language", "en-US,en;q=0.9,vi;q=0.8");
                    httpRequest.AddHeader("priority", "u=0, i");
                    httpRequest.AddHeader("sec-ch-ua", "\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Google Chrome\";v=\"138\"");
                    httpRequest.AddHeader("sec-ch-ua-full-version-list", "\"Not)A;Brand\";v=\"8.0.0.0\", \"Chromium\";v=\"138.0.7204.169\", \"Google Chrome\";v=\"138.0.7204.169\"");
                    httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                    httpRequest.AddHeader("sec-ch-ua-model", "\"\"");
                    httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                    httpRequest.AddHeader("sec-ch-ua-platform-version", "\"19.0.0\"");
                    httpRequest.AddHeader("sec-fetch-dest", "document");
                    httpRequest.AddHeader("sec-fetch-mode", "navigate");
                    httpRequest.AddHeader("sec-fetch-site", "same-origin");
                    httpRequest.AddHeader("sec-fetch-user", "?1");
                    httpRequest.AddHeader("upgrade-insecure-requests", "1");
      
                    //httpRequest.AddHeader("", "");
                    //httpRequest.AddHeader("", "");
                    //httpRequest.AddHeader("", "");
                    var response = httpRequest.Get($"https://www.instagram.com/{namecheck}/?__a=1");

                    if (response.IsOK)
                    {
                        var responseStr = response.ToString();
                        if (responseStr.Contains("errorSummary"))
                        {
                            row1.Cells["cStatus"].Value = "282";
                            if (rtb_282.InvokeRequired)
                            {
                                rtb_282.Invoke(new Action(() =>
                                {
                                    rtb_282.AppendText(account + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_282.AppendText(account + Environment.NewLine);
                            }

                        }
                        else
                        {
                            row1.Cells["cStatus"].Value = "LIVE";

                            if (rtb_LIVE.InvokeRequired)
                            {
                                rtb_LIVE.Invoke(new Action(() =>
                                {
                                    rtb_LIVE.AppendText(account + Environment.NewLine);
                                }));
                            }
                            else
                            {
                                rtb_LIVE.AppendText(account + Environment.NewLine);
                            }

                        }

                    }


                }


            }
            catch { }






        }


        private bool changeHmaProxy()
        {
            try
            {
                Process process = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        CreateNoWindow = true,
                        UseShellExecute = true,
                        FileName = "cmd.exe",
                        WindowStyle = ProcessWindowStyle.Hidden,
                        Arguments = "/C netsh interface set interface  \"HMA VPN WireGuard\" disable",
                        Verb = "runas"
                    }
                };
                process.Start();
                process.WaitForExit();
                Thread.Sleep(3000);
                return true;
            }
            catch (Exception error)
            {
                MessageBox.Show(error.ToString());
                return false;
            }
        }




        private void Login_LAY_Cookie(DataGridViewRow row, string uid, string password, string c2FAvsCookie, string mail, string passmail, string mailkhoiphuc)
        {


            try
            {
                var chromedriver = Createchromedrive();

                chromedriver.Navigate().GoToUrl("https://www.facebook.com/");
                //chromeDriver.Navigate().GoToUrl("https://business.facebook.com/login");
                Thread.Sleep(2000);
                row.Cells["cStatus"].Value = "Login....";
                IWebElement tbmai = chromedriver.FindElement(By.Name("email"));
                tbmai.SendKeys(uid);

                Thread.Sleep(1000);
                IWebElement tbpass = chromedriver.FindElement(By.Name("pass"));
                tbpass.SendKeys(password);

                Thread.Sleep(1000);
                IWebElement btnlogin = chromedriver.FindElement(By.Name("login"));
                btnlogin.Click();

                Thread.Sleep(5000);

                Thread.Sleep(3000);
                var htmlfacebook = chromedriver.PageSource;
                var usermanex = Regex.Match(htmlfacebook, "user=(.*?)&").Groups[1].Value;



                var cookiess = chromedriver.Manage().Cookies.AllCookies;
                var cookiestring = "";
                foreach (var cookie in cookiess)
                {
                    cookiestring += cookie.Name + "=" + cookie.Value + ";";
                }

                row.Cells["cCheckBM"].Value = usermanex + "|" + password + "|" + cookiestring + "|" + uid + "|" + passmail;



                StreamWriter sw = new StreamWriter("Via.txt", true);
                sw.WriteLine(usermanex + "|" + password + "|" + cookiestring + "|" + uid + "|" + passmail);
                sw.Close();


            }
            catch { }






        }
        private async Task<string> Mail_Dong_Van()
        {
        mua:
            try
            {
                using (HttpClient httpClient = new HttpClient())
                {
                    // Cấu hình User-Agent giống như bạn đã làm trước
                    httpClient.DefaultRequestHeaders.UserAgent.ParseAdd("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36");

                    // Lấy Thông tin từ TextBox
                    var key = Tx_Key_API_DongVan.Text;
                    string UrlSo_du = $"https://api.dongvanfb.net/user/balance?apikey={key}";

                    // Gửi yêu cầu GET và lấy phản hồi dạng string
                    var response = await httpClient.GetStringAsync(UrlSo_du);

                    // Parse JSON trả về
                    var jsonResponse = JObject.Parse(response);

                    // Lấy giá trị balance từ JSON
                    int balance = jsonResponse["balance"].Value<int>();

                    // Chuyển giá trị balance thành string
                    var so_du = balance.ToString();

                    // Cập nhật TextBox (đảm bảo chạy trên thread UI)
                    if (tb_so_du_DongVan.InvokeRequired)
                    {
                        tb_so_du_DongVan.Invoke(new Action(() =>
                        {
                            tb_so_du_DongVan.Clear();
                            tb_so_du_DongVan.AppendText(so_du);
                        }));
                    }
                    else
                    {
                        tb_so_du_DongVan.Clear();
                        tb_so_du_DongVan.AppendText(so_du);
                    }


                    int number = int.Parse(so_du);
                    if (number <= 10000)
                    {
                        MessageBox.Show($"Nạp Tiền");
                        return "FAIL";
                    }


                    string url_check = $"https://api.dongvanfb.net/user/account_type?apikey={key}";

                    // Gửi yêu cầu GET và lấy phản hồi dạng string
                    response = await httpClient.GetStringAsync(url_check);
                    // Parse JSON trả về
                    jsonResponse = JObject.Parse(response);

                    var dataValues = jsonResponse["data"];
                    List<string> ID_Amuont = new List<string>();
                    if (dataValues != null)
                    {
                        var dataValuesArr = dataValues.ToObject<JArray>();
                        foreach (var itemObject in dataValuesArr)
                        {
                            var id = itemObject["id"].ToString();
                            var name = itemObject["name"].ToString();
                            var quality = itemObject["quality"].ToString();
                            var price = itemObject["price"].ToString();
                            ID_Amuont.Add($"{id}|{quality}");
                        }
                    }

                    int sl = (int)soluong_mua_Mail.Value;
                    if (sl == 0)
                    {
                        MessageBox.Show($"Nhập Số Lượng Mua ");
                        return "FAIL";

                    }

                    var ID_Mua = "";
                    if (cmb_ID_MAIL.InvokeRequired)
                    {
                        cmb_ID_MAIL.Invoke(new Action(() =>
                        {
                            ID_Mua = cmb_ID_MAIL.Text;

                        }));
                    }
                    else
                    {
                        ID_Mua = cmb_ID_MAIL.Text;
                    }
                    foreach (var id_sl in ID_Amuont)
                    {
                        var id_clone = id_sl.Split('|')[0].ToString();
                        var slclone = id_sl.Split('|')[1].ToString();
                        if (id_clone == ID_Mua)
                        {
                            if (slclone == "0")
                            {
                                MessageBox.Show($"HẾT MAIL ID {id_clone}");
                                return "FAIL";
                            }
                        }
                    }

                    var sl_mua = sl.ToString();

                    string url_mua = $"https://api.dongvanfb.net/user/buy?apikey={key}&account_type={ID_Mua}&quality={sl_mua}&type=full";
                    // Gửi yêu cầu GET và lấy phản hồi dạng string
                    response = await httpClient.GetStringAsync(url_mua);
                    // Parse JSON trả về
                    jsonResponse = JObject.Parse(response);


                    // Lấy mảng "lists" từ đối tượng JSON
                    JArray lists = (JArray)jsonResponse["data"]["list_data"];

                    // Lấy ra tất cả các giá trị của "account"
                    List<string> accounts = new List<string>();
                    foreach (var item in lists)
                    {
                        string account = item.ToString();
                        accounts.Add(account);
                        StreamWriter sw = new StreamWriter("MAILDONGVAN.txt", true);
                        sw.WriteLine(account);
                        sw.Close();

                    }

                    var lstAccount = accounts.ToList();
                    foreach (var Account in lstAccount)
                    {


                        var usernamemail = Account.Split('|')[0].ToString();
                        var passwordmail = "";

                        try
                        {
                            passwordmail = Account.Split('|')[1].ToString();
                        }
                        catch
                        {
                            passwordmail = "";
                        }

                        int add = 0;

                        dgv1.Invoke(new Action(() =>
                        {
                            add = dgv1.Rows.Add((dgv1.RowCount + 1), "", "", "", usernamemail, passwordmail, "");

                        }));

                    }

                    return "DONE";
                }
            }
            catch
            {
                goto mua;
            }
        }




        // NHẬN BM NEW
        private async void nHẬNBMNEWToolStripMenuItem_Click(object sender, EventArgs e)
        {


            try
            {

                var tasks = new List<Task>();
                foreach (var entry in lstDataChrome)
                {
                    ChromeDriver chromeDriver = entry.Key;
                    AccountData accountData = entry.Value;

                    // Kiểm tra xem cột "cSelect" có tồn tại không
                    if (accountData.Row.Cells[9] != null)
                    {
                        var cSelectValue = accountData.Row.Cells[9].Value;

                        // Kiểm tra xem cột "cSelect" có được chọn hay không
                        if (cSelectValue != null && (bool)cSelectValue)
                        {
                            // Nếu tài khoản được chọn, thêm tác vụ vào danh sách tasks
                            tasks.Add(Task.Run(() =>
                            {
                                NHAN_BM_BACKUP(chromeDriver, accountData.Row);
                            }));
                        }
                    }
                    else
                    {
                        // Cột "cSelect" không tồn tại
                        MessageBox.Show("Column 'cSelect' not found in the DataGridView.");
                    }
                }
                await Task.WhenAll(tasks);
            }
            catch { }


        }


        private void NHAN_BM_BACKUP(ChromeDriver chromedriver, DataGridViewRow row)
        {
            try
            {
            doclink:
                DOC_LINK_BACKUP(chromedriver, row);


                List<string> Link = new List<string>();

                var STT = row.Cells["cSTT"].Value.ToString();
                var password = row.Cells["cPass"].Value.ToString();
                if (STT == "1")
                {
                    if (rtb_linkmail1_backup.InvokeRequired)
                    {
                        rtb_linkmail1_backup.Invoke(new Action(() =>
                        {
                            Link = rtb_linkmail1_backup.Lines.ToList();

                        }));
                    }
                }

                if (STT == "2")
                {
                    if (rtb_linkmail2_backup.InvokeRequired)
                    {
                        rtb_linkmail2_backup.Invoke(new Action(() =>
                        {
                            Link = rtb_linkmail2_backup.Lines.ToList();

                        }));
                    }
                }
                if (STT == "3")
                {
                    if (rtb_linkmail3_backup.InvokeRequired)
                    {
                        rtb_linkmail3_backup.Invoke(new Action(() =>
                        {
                            Link = rtb_linkmail3_backup.Lines.ToList();

                        }));
                    }
                }



                foreach (var link in Link)
                {
                    try
                    {
                        var IDBM = "";
                        chromedriver.Navigate().GoToUrl(link);
                        Thread.Sleep(2000);
                        try
                        {
                            var LOGINFACEBOOK = chromedriver.FindElements(By.XPath("//div//div[@role='button']"));
                            if (LOGINFACEBOOK.Count > 0)
                            {
                                LOGINFACEBOOK[0].Click();

                            }
                            var HTMl = chromedriver.PageSource;
                            var businessID = Regex.Match(HTMl, "businessID\":\"(.*?)\"").Groups[1].Value.ToString();
                            var businessName = Regex.Match(HTMl, "businessName\":\"(.*?)\"").Groups[1].Value.ToString();
                            IDBM = businessID;

                            var cookiess = chromedriver.Manage().Cookies.AllCookies;
                            var cookiestring = "";
                            foreach (var cookie in cookiess)
                            {
                                cookiestring += cookie.Name + "=" + cookie.Value + ";";
                            }
                            cookiestring = cookiestring.Trim(';');

                            HttpRequest httpRequest = new HttpRequest();
                            httpRequest.AllowAutoRedirect = true;
                            httpRequest.Cookies = new CookieDictionary();
                            httpRequest.UserAgent = (string)((IJavaScriptExecutor)chromedriver).ExecuteScript("return navigator.userAgent;");
                            EnsurePostWWWLoginHDFull(httpRequest);
                            httpRequest.KeepAlive = true;
                            var cookieRaws = cookiestring.Split(';');
                            foreach (var cookieraw in cookieRaws)
                            {
                                var cookieJAr = cookieraw.Split('=');
                                try
                                {
                                    httpRequest.Cookies.Add(cookieJAr[0], cookieJAr[1]);
                                }
                                catch { }
                            }
                            var manguon = chromedriver.PageSource;
                            var userid = Regex.Match(manguon, "USER_ID\":\"(.*?)\"").Groups[1].Value;
                            var token = Regex.Match(manguon, "URL=\\/invitation\\/\\?token=(.*?);").Groups[1].Value;
                            var join_id = Regex.Match(manguon, "&amp;join_id=(.*?)&").Groups[1].Value;
                            var fb_dtsg = Regex.Match(manguon, "DTSGInitialData\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                            var lsd = Regex.Match(manguon, "LSD\",\\[],{\"token\":\"(.*?)\"").Groups[1].Value;
                            var datapass = $"first_name={userid}&last_name={userid}&invitation_token={token}&receive_marketing_messages=false&user_preferred_business_email&join_id={join_id}&mma_qpl_join_id&__aaid=0&__user={userid}&__a=1&__req=2&__hs=19967.BP:DEFAULT.2.0..0.0&dpr=1&__ccg=EXCELLENT&__rev=1016140233&__s=eq4kgy:g2a9c6:2ln3ia&__hsi=7409593093397164476&__dyn=7xeUmwkHgydwn8K2Wmh0no6u5U4e1Fx-ewSwMxW0DUS2S0lW4o3Bw5VCwjE3awbG78b87C1xwEwpU1vohwnU5W0IU9k2C1FwnE3_x20CU-0KU3mwkE5G1HwywnE2Lx-0lK3qazo11E2ZwrU6C0oe0ue1TwmU&__csr=&fb_dtsg={fb_dtsg}&jazoest=25507&lsd={lsd}&__spin_r=1016140233&__spin_b=trunk&__spin_t=1725180329&__jssesw=1&qpl_active_flow_ids=433725819,692797008&ajax_password={password}";
                            var postnhanlinkbm2 = httpRequest.Post("https://business.facebook.com/business/invitation/login/", datapass, "application/x-www-form-urlencoded");
                            if (postnhanlinkbm2.IsOK)
                            {
                                var responseStr = postnhanlinkbm2.ToString();
                                if (responseStr.Contains("for (;;);{\"__ar\":1,\"rid\":\""))
                                {
                                    row.Cells[7].Value = $"NHẬN LINK {link} DONE IDBM: {IDBM}";

                                    chromedriver.Navigate().GoToUrl("https://business.facebook.com/");

                                    if (STT == "1")
                                    {
                                        if (rtb_DONE1.InvokeRequired)
                                        {
                                            rtb_DONE1.Invoke(new Action(() =>
                                            {
                                                rtb_DONE1.AppendText(IDBM + "|" + businessName + "|" + link + Environment.NewLine);

                                            }));
                                        }

                                    }
                                    if (STT == "2")
                                    {
                                        if (rtb_DONE2.InvokeRequired)
                                        {
                                            rtb_DONE2.Invoke(new Action(() =>
                                            {
                                                rtb_DONE2.AppendText(IDBM + "|" + businessName + "|" + link + Environment.NewLine);

                                            }));
                                        }
                                    }
                                    if (STT == "3")
                                    {
                                        if (rtb_DONE3.InvokeRequired)
                                        {
                                            rtb_DONE3.Invoke(new Action(() =>
                                            {
                                                rtb_DONE3.AppendText(IDBM + "|" + businessName + "|" + link + Environment.NewLine);

                                            }));
                                        }

                                    }
                                }
                                else
                                {
                                    row.Cells[8].Value = $"NHẬN LINK {link} FAIL! IDBM: {IDBM}";

                                    if (STT == "1")
                                    {
                                        if (rtb_FAIL1.InvokeRequired)
                                        {
                                            rtb_FAIL1.Invoke(new Action(() =>
                                            {
                                                rtb_FAIL1.AppendText(IDBM + "|" + businessName + "|" + link + Environment.NewLine);

                                            }));
                                        }
                                    }
                                    if (STT == "2")
                                    {
                                        if (rtb_FAIL2.InvokeRequired)
                                        {
                                            rtb_FAIL2.Invoke(new Action(() =>
                                            {
                                                rtb_FAIL2.AppendText(IDBM + "|" + businessName + "|" + link + Environment.NewLine);

                                            }));
                                        }
                                    }
                                    if (STT == "3")
                                    {
                                        if (rtb_FAIL3.InvokeRequired)
                                        {
                                            rtb_FAIL3.Invoke(new Action(() =>
                                            {
                                                rtb_FAIL3.AppendText(IDBM + "|" + businessName + "|" + link + Environment.NewLine);

                                            }));
                                        }
                                    }

                                }
                            }
                            else
                            {
                                row.Cells[8].Value = $"NHẬN LINK {link} FAIL! IDBM: {IDBM}";

                                if (STT == "1")
                                {
                                    if (rtb_FAIL1.InvokeRequired)
                                    {
                                        rtb_FAIL1.Invoke(new Action(() =>
                                        {
                                            rtb_FAIL1.AppendText(IDBM + "|" + businessName + "|" + link + Environment.NewLine);

                                        }));
                                    }
                                }
                                if (STT == "2")
                                {
                                    if (rtb_FAIL2.InvokeRequired)
                                    {
                                        rtb_FAIL2.Invoke(new Action(() =>
                                        {
                                            rtb_FAIL2.AppendText(IDBM + "|" + businessName + "|" + link + Environment.NewLine);

                                        }));
                                    }
                                }
                                if (STT == "3")
                                {
                                    if (rtb_FAIL3.InvokeRequired)
                                    {
                                        rtb_FAIL3.Invoke(new Action(() =>
                                        {
                                            rtb_FAIL3.AppendText(IDBM + "|" + businessName + "|" + link + Environment.NewLine);

                                        }));
                                    }
                                }
                            }

                        }
                        catch { }


                        Thread.Sleep(100);






                    }
                    catch { }

                    int delay = (int)delay_link_bm_backup.Value;
                    Thread.Sleep(TimeSpan.FromSeconds(delay));
                }

                var LOOP = "";
                if (cmb_DUNG_DOC_LINK_BACKUP.InvokeRequired)
                {
                    cmb_DUNG_DOC_LINK_BACKUP.Invoke(new Action(() =>
                    {
                        LOOP = cmb_DUNG_DOC_LINK_BACKUP.Text;

                    }));

                }
                if (LOOP == "ON")
                {
                    int delayloop = (int)ndelayloop.Value;
                    Thread.Sleep(TimeSpan.FromMinutes(delayloop));

                    goto doclink;
                }
            }
            catch { }

        }



        private void DOC_LINK_BACKUP(ChromeDriver chromedriver, DataGridViewRow row)
        {
            try
            {

                var STT = row.Cells["cSTT"].Value.ToString();

                List<string> Mail = new List<string>();
                List<string> Link1 = new List<string>();
                List<string> Link2 = new List<string>();
                List<string> Link3 = new List<string>();
                // Lấy dữ liệu từ rich_MAIL_DOC_LINK
                if (rtb_MAIL_DOCLINK_BACKUP.InvokeRequired)
                {
                    rtb_MAIL_DOCLINK_BACKUP.Invoke(new Action(() =>
                    {
                        Mail = rtb_MAIL_DOCLINK_BACKUP.Lines.ToList();
                    }));
                }
                else
                {
                    Mail = rtb_MAIL_DOCLINK_BACKUP.Lines.ToList();
                }

                if (STT == "1")
                {
                    var mail_share1 = Mail[0].Split('|')[0].ToString();
                    var pass_mail_1 = Mail[0].Split('|')[1].ToString();
                    var (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail_share1, pass_mail_1);
                    if (string.IsNullOrEmpty(accessToken))
                    {
                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                        (username1, password1, accessToken, refreshToken) = TurnOnOAUTH2(mail_share1, pass_mail_1);
                    }
                    Link1 = GetLinkBm(mail_share1, pass_mail_1, accessToken, refreshToken);
                    // Làm sạch rtblink_doc và thêm các liên kết vào đó
                    if (rtb_linkmail1_backup.InvokeRequired)
                    {
                        rtb_linkmail1_backup.Invoke(new Action(() =>
                        {
                            rtb_linkmail1_backup.Clear();
                        }));
                    }
                    else
                    {
                        rtb_linkmail1_backup.Clear();
                    }
                    // Cập nhật liên kết vào rtblink_doc
                    foreach (var link in Link1)
                    {
                        StreamWriter sw = new StreamWriter("Linkmail1.txt", true);
                        sw.WriteLine(link);
                        sw.Close();
                        if (rtb_linkmail1_backup.InvokeRequired)
                        {
                            rtb_linkmail1_backup.Invoke(new Action(() =>
                            {
                                rtb_linkmail1_backup.AppendText(link + Environment.NewLine);
                            }));
                        }
                        else
                        {
                            rtb_linkmail1_backup.AppendText(link + Environment.NewLine);
                        }
                    }
                }
                if (STT == "2")
                {
                    var mail_share2 = Mail[1].Split('|')[0].ToString();
                    var pass_mail_2 = Mail[1].Split('|')[1].ToString();
                    var (username2, password2, accessToken2, refreshToken2) = TurnOnOAUTH2(mail_share2, pass_mail_2);
                    if (string.IsNullOrEmpty(accessToken2))
                    {
                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                        (username2, password2, accessToken2, refreshToken2) = TurnOnOAUTH2(mail_share2, pass_mail_2);
                    }
                    Link2 = GetLinkBm(mail_share2, pass_mail_2, accessToken2, refreshToken2);
                    // Làm sạch rtblink_doc và thêm các liên kết vào đó
                    if (rtb_linkmail2_backup.InvokeRequired)
                    {
                        rtb_linkmail2_backup.Invoke(new Action(() =>
                        {
                            rtb_linkmail2_backup.Clear();
                        }));
                    }
                    else
                    {
                        rtb_linkmail2_backup.Clear();
                    }
                    // Cập nhật liên kết vào rtblink_doc
                    foreach (var link in Link2)
                    {
                        StreamWriter sw = new StreamWriter("Linkmail2.txt", true);
                        sw.WriteLine(link);
                        sw.Close();
                        if (rtb_linkmail2_backup.InvokeRequired)
                        {
                            rtb_linkmail2_backup.Invoke(new Action(() =>
                            {
                                rtb_linkmail2_backup.AppendText(link + Environment.NewLine);
                            }));
                        }
                        else
                        {
                            rtb_linkmail2_backup.AppendText(link + Environment.NewLine);
                        }
                    }

                }
                if (STT == "3")
                {
                    var mail_share3 = Mail[2].Split('|')[0].ToString();
                    var pass_mail_3 = Mail[2].Split('|')[1].ToString();
                    var (username3, password3, accessToken3, refreshToken3) = TurnOnOAUTH2(mail_share3, pass_mail_3);
                    if (string.IsNullOrEmpty(accessToken3))
                    {
                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();
                        (username3, password3, accessToken3, refreshToken3) = TurnOnOAUTH2(mail_share3, pass_mail_3);
                    }
                    Link3 = GetLinkBm(mail_share3, pass_mail_3, accessToken3, refreshToken3);
                    // Làm sạch rtblink_doc và thêm các liên kết vào đó
                    if (rtb_linkmail3_backup.InvokeRequired)
                    {
                        rtb_linkmail3_backup.Invoke(new Action(() =>
                        {
                            rtb_linkmail3_backup.Clear();
                        }));
                    }
                    else
                    {
                        rtb_linkmail3_backup.Clear();
                    }
                    // Cập nhật liên kết vào rtblink_doc
                    foreach (var link in Link3)
                    {
                        StreamWriter sw = new StreamWriter("Linkmail3.txt", true);
                        sw.WriteLine(link);
                        sw.Close();

                        if (rtb_linkmail3_backup.InvokeRequired)
                        {
                            rtb_linkmail3_backup.Invoke(new Action(() =>
                            {
                                rtb_linkmail3_backup.AppendText(link + Environment.NewLine);
                            }));
                        }
                        else
                        {
                            rtb_linkmail3_backup.AppendText(link + Environment.NewLine);
                        }
                    }
                }

            }
            catch (Exception e)
            {

            }
        }

            


        private List<string> GetLinkBm(String mail, String pass, String accessToken, String freshtoken)
        {

            List<string> link = new List<string>();

            if (accessToken == null)
            {

            }

            bool isOauth2 = false;
            //while (true)
            //{
            //    if (isStop)
            //    {
            //        break;
            //    }
            try
            {

                int countReadLink = 0;
                using (var client = new ImapClient())
                {

                    String imapDomain = mail.Contains("gmail.com") ? "imap.gmail.com" : "imap-mail.outlook.com";

                    bool isExp = false;

                    if (!isOauth2)
                    {
                        try
                        {
                            client.Connect(imapDomain, 993, true);
                            client.Authenticate(mail, pass);
                        }
                        catch (Exception ex)
                        {
                            isExp = true;
                            if (client.IsConnected)
                            {
                                client.Disconnect(true);
                            }
                        }
                    }

                    if (isExp || isOauth2)
                    {
                        var oauth2 = new SaslMechanismOAuth2(mail, accessToken);
                        client.Connect("outlook.office365.com", 993, SecureSocketOptions.SslOnConnect);
                        client.Authenticate(oauth2);
                        isOauth2 = true;

                    }

                    var inbox = client.Inbox;
                    inbox.Open(FolderAccess.ReadWrite);

                    var uids = client.Inbox.Search(SearchQuery.NotSeen);


                    foreach (UniqueId uni in uids)
                    {
                        var message = inbox.GetMessage(uni);

                        String subJect = message.Subject.ToString().ToLower();
                        //appendLog(mail + "------> " + subJect);

                        String bmLink = "";

                        if (message.From.ToString().Contains("facebook"))
                        {
                            String body = message.GetTextBody(MimeKit.Text.TextFormat.Html).ToString();

                            //int index = body.IndexOf("https://fb.me/");
                            int index1 = body.IndexOf("https://www.facebook.com/aymt/offsite/");
                            if (index1 > 0)
                            {
                                String canLink = body.Substring(index1, 199);
                                //canLink = canLink.Split('"')[0];
                                canLink = canLink.Replace("amp;", "");
                                countReadLink++;
                                // Console.WriteLine("CanLink: {0}", canLink);
                                bmLink = canLink;
                                link.Add(canLink);
                            }

                        }
                        inbox.AddFlags(uni, MessageFlags.Seen, true);
                        // Đánh dấu email là xóa (cần thực hiện trước khi gọi Expunge)
                        inbox.AddFlags(uni, MessageFlags.Deleted, true);

                    }

                    client.Disconnect(true);
                }
                //appendLog(countReadLink + " Link được tìm thấy " + mail);
            }

            catch (Exception exnew)
            {
                //appendLog(mail + " " + exnew.Message);
                //break;
            }

            Task.Delay(5000);

            //}

            return link;
        }

        private List<string> GetLinkBm_IG(String mail, String pass, String accessToken, String freshtoken)
        {

            List<string> link = new List<string>();

            if (accessToken == null)
            {
                return link;
            }

            bool isOauth2 = false;
            //while (true)
            //{
            //    if (isStop)
            //    {
            //        break;
            //    }
            try
            {

                int countReadLink = 0;
                using (var client = new ImapClient())
                {

                    String imapDomain = mail.Contains("gmail.com") ? "imap.gmail.com" : "imap-mail.outlook.com";

                    bool isExp = false;

                    if (!isOauth2)
                    {
                        try
                        {
                            client.Connect(imapDomain, 993, true);
                            client.Authenticate(mail, pass);
                        }
                        catch (Exception ex)
                        {
                            isExp = true;
                            if (client.IsConnected)
                            {
                                client.Disconnect(true);
                            }
                        }
                    }

                    if (isExp || isOauth2)
                    {
                        var oauth2 = new SaslMechanismOAuth2(mail, accessToken);
                        client.Connect("outlook.office365.com", 993, SecureSocketOptions.SslOnConnect);
                        client.Authenticate(oauth2);
                        isOauth2 = true;

                    }

                    var inbox = client.Inbox;
                    inbox.Open(FolderAccess.ReadWrite);

                    var uids = client.Inbox.Search(SearchQuery.NotSeen);


                    foreach (UniqueId uni in uids)
                    {
                        var message = inbox.GetMessage(uni);

                        String subJect = message.Subject.ToString().ToLower();
                        //appendLog(mail + "------> " + subJect);

                        String bmLink = "";

                        if (message.From.ToString().Contains("facebook"))
                        {
                            String body = message.GetTextBody(MimeKit.Text.TextFormat.Html).ToString();
                            var LOAI_LINK = "";
                            if (cmb_LOAI_LINK.InvokeRequired)
                            {
                                cmb_LOAI_LINK.Invoke(new Action(() =>
                                {
                                    LOAI_LINK = cmb_LOAI_LINK.Text;
                                }));
                            }

                            if(LOAI_LINK == "https://fb.me/")
                            {
                                int index = body.IndexOf("https://fb.me/");
                                //int index1 = body.IndexOf("https://www.facebook.com/aymt/offsite/");
                                if (index > 0)
                                {
                                    //String canLink = body.Substring(index1, 199);
                                    //String canLink = body.Substring(index, 199);
                                    //canLink = canLink.Split('"')[0];
                                    //canLink = canLink.Replace("amp;", "");
                                    //countReadLink++;
                                    // Console.WriteLine("CanLink: {0}", canLink);
                                    //bmLink = canLink;
                                    //link.Add(canLink);
                                    var mailsahre_idbm = Regex.Match(body, "href=\"mailto:(.*?)\"").Groups[1].Value.ToString();
                                    var LOAIBM = "";
                                    if (mailsahre_idbm.Contains("_bv"))
                                    {

                                        LOAIBM = "BM350V";
                                        goto next;
                                    }
                                    if (mailsahre_idbm.Contains("_bx"))
                                    {

                                        LOAIBM = "BM50X";
                                        goto next;
                                    }
                                    if (mailsahre_idbm.Contains("_bmb"))
                                    {

                                        LOAIBM = "BM350III";
                                        goto next;
                                    }
                                    if (mailsahre_idbm.Contains("_bmiii"))
                                    {

                                        LOAIBM = "BMIII";
                                        goto next;
                                    }
                                    if (mailsahre_idbm.Contains("_bma"))
                                    {
                                        LOAIBM = "BM350";
                                        goto next;
                                    }
                                    else
                                    {
                                        LOAIBM = "BM50";
                                    }
                                next:
                                    // Sử dụng Regex để tìm mã gồm 6 chữ số
                                    var IDBM = Regex.Match(mailsahre_idbm, @"\d+").Value;
                                    string canLink = body.Substring(index, 50);
                                    canLink = canLink.Split('"')[0];
                                    link.Add($"{IDBM}|{canLink}|{LOAIBM}");
                                }
                            }
                            else
                            {
                                int index = body.IndexOf("https://business.facebook.com/invitation/");
                                //int index1 = body.IndexOf("https://www.facebook.com/aymt/offsite/");
                                if (index > 0)
                                {
                                    //String canLink = body.Substring(index1, 199);
                                    //String canLink = body.Substring(index, 199);
                                    //canLink = canLink.Split('"')[0];
                                    //canLink = canLink.Replace("amp;", "");
                                    //countReadLink++;
                                    // Console.WriteLine("CanLink: {0}", canLink);
                                    //bmLink = canLink;
                                    //link.Add(canLink);
                                    var mailsahre_idbm = Regex.Match(body, "href=\"mailto:(.*?)\"").Groups[1].Value.ToString();
                                    var LOAIBM = "";
                                    if (mailsahre_idbm.Contains("_bv"))
                                    {

                                        LOAIBM = "BM350V";
                                        goto next;
                                    }
                                    if (mailsahre_idbm.Contains("_bx"))
                                    {

                                        LOAIBM = "BM50X";
                                        goto next;
                                    }
                                    if (mailsahre_idbm.Contains("_bmb"))
                                    {

                                        LOAIBM = "BM350III";
                                        goto next;
                                    }
                                    if (mailsahre_idbm.Contains("_bmiii"))
                                    {

                                        LOAIBM = "BMIII";
                                        goto next;
                                    }
                                    if (mailsahre_idbm.Contains("_bma"))
                                    {
                                        LOAIBM = "BM350";
                                        goto next;
                                    }
                                    else
                                    {
                                        LOAIBM = "BM50";
                                    }
                                next:
                                    // Sử dụng Regex để tìm mã gồm 6 chữ số
                                    var IDBM = Regex.Match(mailsahre_idbm, @"\d+").Value;
                                    string canLink = Regex.Match(body, "https:\\/\\/business\\.facebook\\.com\\/invitation\\/\\?token=(.*?)\"").Groups[1].Value.ToString();
                                    //string canLink = body.Substring(index, 371);
                                    canLink = $"https://business.facebook.com/invitation/?token={canLink}";
                                    link.Add($"{IDBM}|{canLink}|{LOAIBM}");
                                }

                            }
                           
            

                        }
                        inbox.AddFlags(uni, MessageFlags.Seen, true);
                        // Đánh dấu email là xóa (cần thực hiện trước khi gọi Expunge)
                        inbox.AddFlags(uni, MessageFlags.Deleted, true);

                    }

                    client.Disconnect(true);
                }
                //appendLog(countReadLink + " Link được tìm thấy " + mail);
            }

            catch (Exception exnew)
            {
                //appendLog(mail + " " + exnew.Message);
                //break;
            }

            Task.Delay(5000);

            //}

            return link;
        }
        private void aDDMAILKPToolStripMenuItem_Click(object sender, EventArgs e)
        {
            _ = Task.Run(async () =>
            {
                var tasks = new List<Task>();
                // Lọc các dòng đã chọn từ DataGridView, bao gồm cả click vào checkbox và chọn từ ContextMenuStrip
                var lstRowCheck = dgv1.Rows.Cast<DataGridViewRow>()
                    .Where(row => row.Cells["cSelect"].Value != null && Convert.ToBoolean(row.Cells["cSelect"].Value))
                    .ToList();
                foreach (var row in lstRowCheck)
                {

                    var chromeDriver = Createchromedrivehotmail();
                    tasks.Add(Task.Run(() =>
                    {
                        Login_HotMail_ADD_MAILKP(chromeDriver, row);
                    }));
                    await Task.Delay(2000);
                }
                // Đợi tất cả các task hoàn thành
                await Task.WhenAll(tasks);
            });




        }
        // lOGIN HOTMAIL CHROME
        private void Login_HotMail_ADD_MAILKP(ChromeDriver driver, DataGridViewRow row)
        {

            try
            {
                driver.Navigate().GoToUrl("https://login.live.com/");
                var mail = row.Cells["cMAIL"].Value.ToString();
                var passmail = row.Cells["cPassMail"].Value.ToString();

                var Enter_mail = driver.FindElements(By.XPath("//div//input[@placeholder='Email, phone, or Skype']"));
                if (Enter_mail.Count() > 0)
                {
                    Enter_mail.LastOrDefault().SendKeys(mail);
                    Thread.Sleep(1000);
                }
                var Next = driver.FindElements(By.XPath("//div//button[@type='submit']"));
                if (Next.Count() > 0)
                {
                    Next.LastOrDefault().Click();
                    Thread.Sleep(1000);
                }
                var Enter_passmail = driver.FindElements(By.XPath("//div//input[@name='passwd']"));
                if (Enter_passmail.Count > 0)
                {
                    Enter_passmail.LastOrDefault().SendKeys(passmail);
                    Thread.Sleep(1000);
                }
                var SignIn = driver.FindElements(By.XPath("//div//button[text()='Sign in']"));
                if (SignIn.Count() > 0)
                {
                    SignIn.LastOrDefault().Click();
                    Thread.Sleep(5000);
                }
                var url = driver.Url;
                if (url.Contains("https://privacynotice.account.microsoft.com/notice"))
                {
                    var ok = driver.FindElements(By.XPath("//html/body/div/div/div[2]/button/span/span/span"));
                    if (ok.Count > 0)
                    {
                        ok.LastOrDefault().Click();
                        Thread.Sleep(6000);
                    }


                }

                var text = "";
                var Were_updating_our_terms = driver.FindElements(By.XPath("//div//div[@role='heading']"));
                if (Were_updating_our_terms.Count() > 0)
                {
                    text = Were_updating_our_terms.LastOrDefault().Text;
                }
                if (text == "We're updating our terms")
                {
                    var Next1 = driver.FindElements(By.XPath("//div//button[@id='iNext']"));
                    if (Next.Count() > 0)
                    {
                        Next1.LastOrDefault().Click();
                        Thread.Sleep(1000);
                    }
                }
                Were_updating_our_terms = driver.FindElements(By.XPath("//div//div[@role='heading']"));
                if (Were_updating_our_terms.Count() > 0)
                {
                    text = Were_updating_our_terms.LastOrDefault().Text;
                }
                if (text == "Stay signed in?")
                {
                    var Yes = driver.FindElements(By.XPath("//div//button[@aria-label='Yes']"));
                    if (Yes.Count > 0)
                    {
                        Yes.LastOrDefault().Click();
                        Thread.Sleep(1000);
                    }
                    driver.Navigate().GoToUrl("https://hotmail.com/");

                    url = driver.Url;

                    if (url.Contains("https://outlook.live.com/mail/0/")|| url.Contains("https://account.live.com/proofs/Add?mkt=EN-US"))
                    {
                        row.Cells["cStatus"].Value = "Login HotMail Done";
                        Thread.Sleep(2000);
                        driver.Navigate().GoToUrl("https://account.live.com/proofs/Add?mkt=EN-US&uiflavor=web&id=38936&mpcxt=CATB&ocxt=TFA&posturl=https://login.live.com/ppsecure/post.srf%3flc%3d1033%26mkt%3den-US%26id%3d38936%26opid%3dEEE4AEF6B32F24E5%26opidt%3d1743648807%26uaid%3df882e989070d4719a7b8be51ffcb4988&ru=https://login.live.com/login.srf%3fid%3d38936%26opid%3dEEE4AEF6B32F24E5%26opidt%3d1743648807");

                        Random rd = new Random();
                        int randomnumber = rd.Next(1, 1000);
                        var mailkp_add = mail.Split('@')[0] + randomnumber + "@fviainboxes.com";

                        var enter_mailkp = driver.FindElements(By.XPath("//input[@name='EmailAddress']"));
                        if (enter_mailkp.Count > 0)
                        {
                            enter_mailkp.LastOrDefault().SendKeys(mailkp_add);
                            Thread.Sleep(2000);

                        }
                        var next = driver.FindElements(By.XPath("//input[@id='iNext']"));
                        if (next.Count > 0)
                        {
                            next.LastOrDefault().Click();
                            Thread.Sleep(2000);
                        }


                        HttpRequest httpRequest = new HttpRequest();
                        httpRequest.AllowAutoRedirect = true;
                        httpRequest.Cookies = new CookieDictionary();
                        httpRequest.UserAgent = (string)((IJavaScriptExecutor)driver).ExecuteScript("return navigator.userAgent;");
                        httpRequest.KeepAlive = true;

                        var code = fviainboxes(row, httpRequest, mailkp_add);
                        if (string.IsNullOrEmpty(code))
                        {
                            code = fviainboxes(row, httpRequest, mailkp_add);
                        }
                        if (string.IsNullOrEmpty(code))
                        {
                            row.Cells["cStatus"].Value = "LẤY CODE FAIL";
                            goto uot4;
                        }
                        var enter_code = driver.FindElements(By.XPath("//input[@id='iOttText']"));
                        if (enter_code.Count > 0)
                        {
                            enter_code.LastOrDefault().SendKeys(code);
                            Thread.Sleep(2000);

                        }
                        next = driver.FindElements(By.XPath("//input[@id='iNext']"));
                        if (next.Count > 0)
                        {
                            next.LastOrDefault().Click();
                            Thread.Sleep(2000);
                        }


                        driver.Navigate().GoToUrl("https://login.live.com/login.srf?wa=wsignin1.0&rpsnv=174&ct=1743657431&rver=7.5.2156.0&wp=SA_20MIN&wreply=https%3A%2F%2Faccount.live.com%2Fproofs%2Fmanage%2Fadditional%3Fmkt%3Den-US%26refd%3Daccount.microsoft.com%26refp%3Dsecurity%26uaid%3D85769a5c6ab04556a854862a2c5443df&lc=1033&id=38936&mkt=en-US&uaid=85769a5c6ab04556a854862a2c5443df");
                        Thread.Sleep(5000);
                        var verify_mail = driver.FindElements(By.XPath("/html/body/div[1]/div/div/div/div[2]/div[1]/div/div/div/div/div[2]/div[2]/form[2]/div[1]/div/div"));
                        if (verify_mail.Count > 0)
                        {
                            var text1 = verify_mail.LastOrDefault().Text;
                            if (text1 == "Verify your identity")
                            {
                                row.Cells["cStatus"].Value = "ADD MAIL KP DONE";

                                row.Cells["cCheckBM"].Value = $"{mail}|{passmail}|{mailkp_add}";

                                StreamWriter sw0 = new StreamWriter("MAILADDMAILKP.txt", true);
                                sw0.WriteLine($"{mail}|{passmail}|{mailkp_add}");
                                sw0.Close();

                            }
                        }

                    }
                }







            uot4:
                Thread.Sleep(1);
            }
            catch { }


        }


        private string fviainboxes(DataGridViewRow row, HttpRequest httpRequest, string mailkp)
        {
            try
            {
                row.Cells["cStatus"].Value = "Login fviainboxes";


                var username = mailkp.Split('@')[0].ToString();

                httpRequest.AddHeader("authority", "fviainboxes.com");
                httpRequest.AddHeader("path", $"/messages?username={username}&domain=fviainboxes.com");
                httpRequest.AddHeader("scheme", "https");

                httpRequest.AddHeader("accept", "application/json, text/plain, */*");
                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httpRequest.AddHeader("authorization", "Bearer af2b556e5e719052ca9193bace296b4fe9015bdc6c2c6ec28447d57c56187941");
                httpRequest.AddHeader("priority", "u=1, i");
                httpRequest.AddHeader("referer", "https://fviainboxes.com/");
                httpRequest.AddHeader("sec-ch-ua", "\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\"");
                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httpRequest.AddHeader("sec-fetch-dest", "empty");
                httpRequest.AddHeader("sec-fetch-mode", "cors");
                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                var url = $"https://fviainboxes.com/messages?username={username}&domain=fviainboxes.com";

                var response = httpRequest.Get(url);

                if (response.IsOK)
                {

                    var responseStr = response.ToString();
                    if (responseStr.Contains("{\"result\":[{\"id\":\""))
                    {
                        // Đăng Nhập Thành Công
                        row.Cells["cStatus"].Value = "Login fviainboxes DONE";
                        var id = Regex.Match(responseStr, "{\"result\":\\[{\"id\":\"(.*?)\"").Groups[1].Value.ToString();

                        // Đọc Thư

                        httpRequest.AddHeader("authority", "fviainboxes.com");
                        httpRequest.AddHeader("accept", "application/json, text/plain, */*");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httpRequest.AddHeader("authorization", "Bearer af2b556e5e719052ca9193bace296b4fe9015bdc6c2c6ec28447d57c56187941");
                        httpRequest.AddHeader("priority", "u=1, i");
                        httpRequest.AddHeader("referer", "https://fviainboxes.com/");
                        httpRequest.AddHeader("sec-ch-ua", "\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                        httpRequest.AddHeader("sec-fetch-site", "same-origin");


                        var url1 = $"https://fviainboxes.com/message?username={username}&domain=fviainboxes.com&id={id}";

                        response = httpRequest.Get(url1);

                        if (response.IsOK)
                        {
                            var responseStr1 = response.ToString();
                            if (responseStr1.Contains("DOCTYPE html PUBLIC"))
                            {
                                row.Cells["cStatus"].Value = "LẤY CODE ";
                                var match = Regex.Match(responseStr1, "span.*?\\\\(.*?)\\/span").Groups[1].Value.ToString();
                                var code = Regex.Match(match, @"\d{6}").Value.ToString();
                                return code;




                            }
                        }

                    }


                }



            }
            catch { }
            return "";
        }


        public const string ClientId = "9e5f94bc-e8a4-4e73-b8be-63364c29d753";
        private (string, string, string, string) TurnOnOAUTH2(string username, string password)
        {
            try
            {
                var httpRequest = new Leaf.xNet.HttpRequest();
                httpRequest.ConnectTimeout = 60000;
                httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Thunderbird/128.2.3";
                httpRequest["Accept"] = "*";
                httpRequest.AllowAutoRedirect = true;
                httpRequest.AddHeader("Accept-Language", "en-US,en;q=0.5");
                httpRequest.AddHeader("Accept-Encoding", "gzip, deflate, br, zstd, value");
                httpRequest.AddHeader("Priority", "u=0, i");
                httpRequest.AddHeader("Upgrade-Insecure-Requests", "1");
                httpRequest.AddHeader("Sec-Fetch-Dest", "document");
                httpRequest.AddHeader("Sec-Fetch-Mode", "navigate");
                httpRequest.AddHeader("Sec-Fetch-Site", "same-origin");
                httpRequest.AddHeader("Sec-Fetch-User", "?1");

                var responseStr = string.Empty;
                Leaf.xNet.HttpResponse httpResponse = httpRequest.Get("https://outlook.live.com/owa/");
                if (httpResponse.IsOK)
                {
                    responseStr = httpResponse.ToString();
                    string url = $"https://login.microsoftonline.com/common/oauth2/v2.0/authorize?response_type=code&client_id={ClientId}&redirect_uri=https://localhost&scope=https://outlook.office.com/IMAP.AccessAsUser.All+https://outlook.office.com/POP.AccessAsUser.All+https://outlook.office.com/SMTP.Send+offline_access&login_hint={username}";

                    httpResponse = httpRequest.Get(url);
                    if (httpResponse.IsOK)
                    {
                        responseStr = httpResponse.ToString();

                        var sfttag = Regex.Match(responseStr, "sFTTag:'(.*?)',").Groups[1].Value;
                        var document = new HtmlDocument();
                        document.LoadHtml(sfttag);

                        var ppft = document.DocumentNode.SelectNodes("//*[@name='PPFT']").FirstOrDefault().Attributes["value"].Value;
                        var urlPost = Regex.Match(responseStr, "https://login.live.com/ppsecure/post.srf?.*?(?=',oCaptchaInfo)").Value;
                         //urlPost = urlPost = Regex.Match(responseStr, @"urlPost:'(https://login\.live\.com/ppsecure/post\.srf\?[^']*)'").Groups[1].Value;

                        var payload = $"ps=2&psRNGCDefaultType=&psRNGCEntropy=&psRNGCSLK=&canary=&ctx=&hpgrequestid=&PPFT={ppft}&PPSX=Passp&NewUser=1&FoundMSAs=&fspost=0&i21=0&CookieDisclosure=0&IsFidoSupported=1&isSignupPost=0&isRecoveryAttemptPost=0&i13=1&login={username}&loginfmt={username}&type=11&LoginOptions=1&lrt=&lrtPartition=&hisRegion=&hisScaleUnit=&passwd={password}";
                        httpRequest.AllowAutoRedirect = false;

                        httpResponse = httpRequest.Post(urlPost, payload, "application/x-www-form-urlencoded");

                        var location = httpResponse.Location;

                        if (httpResponse.IsOK)
                        {
                            responseStr = httpResponse.ToString();
                            if (responseStr.Contains("Abuse?"))
                            {
                                MessageBox.Show("Mail Lock");
                                return ("", "", "", "");
                            }

                            if (responseStr.Contains("document.fmHF.submit"))
                            {
                                document = new HtmlDocument();
                                document.LoadHtml(responseStr);

                                var formAction = document.GetElementbyId("fmHF");
                                string actionUrl = formAction.Attributes["action"].Value;

                                if (actionUrl.Contains("confirm?mkt="))
                                {
                                    var confirmDoc = formAction.SelectNodes("//input");

                                    var confirmPayload = new Dictionary<string, string>();

                                    foreach (var item in confirmDoc)
                                    {
                                        var name = item.Attributes["name"].Value;
                                        var value = item.Attributes["value"].Value;
                                        if (name == null || value == null)
                                        {
                                            continue;
                                        }

                                        confirmPayload.Add(name, value);
                                    }

                                    httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(confirmPayload));
                                    if (httpResponse.IsOK)
                                    {
                                        responseStr = httpResponse.ToString();

                                        document = new HtmlDocument();
                                        document.LoadHtml(responseStr);

                                        var confirmInputNodes = document.DocumentNode.SelectNodes("//input");
                                        confirmPayload = new Dictionary<string, string>();

                                        foreach (var item in confirmInputNodes)
                                        {
                                            var name = item.Attributes["name"].Value;
                                            var value = item.Attributes["value"].Value;
                                            if (name == null || value == null)
                                            {
                                                continue;
                                            }

                                            confirmPayload.Add(name, value);
                                        }

                                        httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(confirmPayload));
                                        if (httpResponse.IsOK)
                                        {
                                            responseStr = httpResponse.ToString();
                                        }
                                    }
                                }

                                for (int i = 0; i < 3; i++)
                                {
                                    if (actionUrl.Contains("Add?mkt="))
                                    {
                                        var skipDoc = formAction.SelectNodes("//input");
                                        Dictionary<string, string> skipPayload = new Dictionary<string, string>();
                                        foreach (var item in skipDoc)
                                        {
                                            var name = item.Attributes["name"].Value;
                                            var value = item.Attributes["value"].Value;
                                            if (name == null || value == null)
                                            {
                                                continue;
                                            }

                                            skipPayload.Add(name, value);
                                        }

                                        httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(skipPayload));
                                        if (httpResponse.IsOK)
                                        {
                                            responseStr = httpResponse.ToString();
                                            document = new HtmlDocument();
                                            document.LoadHtml(responseStr);

                                            skipPayload = new Dictionary<string, string>();
                                            var skipInputNodes = document.DocumentNode.SelectNodes("//input");
                                            foreach (var item in skipInputNodes)
                                            {
                                                var name = item.Attributes["name"].Value;
                                                var value = item.Attributes["value"].Value;
                                                if (name == null || value == null)
                                                {
                                                    continue;
                                                }

                                                skipPayload.Add(name, value);
                                            }

                                            skipPayload.Remove("action");
                                            skipPayload.Add("action", "Skip");

                                            httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(skipPayload));
                                            if (httpResponse.IsOK)
                                            {
                                                responseStr = httpResponse.ToString();
                                                break;
                                            }
                                        }
                                    }
                                }


                                var submitDoc = formAction.SelectNodes("//input");
                                var submitPayload = new Dictionary<string, string>();

                                foreach (var item in submitDoc)
                                {
                                    var name = item.Attributes["name"].Value;
                                    var value = item.Attributes["value"].Value;
                                    if (name == null || value == null)
                                    {
                                        continue;
                                    }

                                    submitPayload.Add(name, value);
                                }

                                httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(submitPayload));
                                if (httpResponse.IsOK)
                                {
                                    responseStr = httpResponse.ToString();

                                    document = new HtmlDocument();
                                    document.LoadHtml(responseStr);

                                    var inputNodes = document.DocumentNode.SelectNodes("//input");
                                    submitPayload = new Dictionary<string, string>();
                                    foreach (var item in submitDoc)
                                    {
                                        var name = item.Attributes["name"].Value;
                                        var value = item.Attributes["value"].Value;
                                        if (name == null || value == null)
                                        {
                                            continue;
                                        }

                                        submitPayload.Add(name, value);
                                    }

                                    submitPayload.Add("ucaction", "Yes");

                                    httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(submitPayload));
                                    if (httpResponse.IsOK)
                                    {
                                        var sublocation = httpResponse.Location;
                                        if (sublocation.Contains("success"))
                                        {
                                            httpResponse = httpRequest.Get(sublocation);
                                            if (httpResponse.IsOK)
                                            {
                                                sublocation = httpResponse.Location;
                                            }

                                            if (sublocation.Contains("localhost"))
                                            {
                                                location = sublocation;
                                            }
                                        }
                                    }
                                }

                            }
                        }

                        string localhostCode = location.Split('=')[1];
                        string body = $"client_id={ClientId}&grant_type=authorization_code&redirect_uri=https%3A%2F%2Flocalhost&code={localhostCode}";
                        httpResponse = httpRequest.Post("https://login.microsoftonline.com/common/oauth2/v2.0/token", body, "application/x-www-form-urlencoded");
                        if (httpResponse.IsOK)
                        {
                            responseStr = httpResponse.ToString();
                            dynamic results = JsonConvert.DeserializeObject<dynamic>(responseStr);
                            var access_token = results.access_token;
                            var fresh_token = results.refresh_token;

                            return (username, password, access_token, fresh_token);
                        }
                    }
                }
            }
            catch { }

            return ("", "", "", "");
        }
        private (string, string, string, string) TurnOnOAUTH2_BM_IG(string username, string password,string mailkhoiphuc)
        {
            try
            {
                var httpRequest = new Leaf.xNet.HttpRequest();
                httpRequest.ConnectTimeout = 60000;
                httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Thunderbird/128.2.3";
                httpRequest["Accept"] = "*";
                httpRequest.AllowAutoRedirect = true;
                httpRequest.AddHeader("Accept-Language", "en-US,en;q=0.5");
                httpRequest.AddHeader("Accept-Encoding", "gzip, deflate, br, zstd, value");
                httpRequest.AddHeader("Priority", "u=0, i");
                httpRequest.AddHeader("Upgrade-Insecure-Requests", "1");
                httpRequest.AddHeader("Sec-Fetch-Dest", "document");
                httpRequest.AddHeader("Sec-Fetch-Mode", "navigate");
                httpRequest.AddHeader("Sec-Fetch-Site", "same-origin");
                httpRequest.AddHeader("Sec-Fetch-User", "?1");

                var responseStr = string.Empty;
                Leaf.xNet.HttpResponse httpResponse = httpRequest.Get("https://outlook.live.com/owa/");
                if (httpResponse.IsOK)
                {
                    responseStr = httpResponse.ToString();
                    string url = $"https://login.microsoftonline.com/common/oauth2/v2.0/authorize?response_type=code&client_id={ClientId}&redirect_uri=https://localhost&scope=https://outlook.office.com/IMAP.AccessAsUser.All+https://outlook.office.com/POP.AccessAsUser.All+https://outlook.office.com/SMTP.Send+offline_access&login_hint={username}";

                    httpResponse = httpRequest.Get(url);
                    if (httpResponse.IsOK)
                    {
                        responseStr = httpResponse.ToString();
                        var urlPost = Regex.Match(responseStr, "urlPost:'(.*?)',.*?oCaptchaInfo:").Groups[1].Value;
                        var sfttag = Regex.Match(responseStr, "sFTTag:'(.*?)',").Groups[1].Value;
                
                        var oGetCredTypeResult = Regex.Match(responseStr, "oGetCredTypeResult:{\"(.*?)}").Groups[1].Value.ToString();
                        var document = new HtmlDocument();
                        document.LoadHtml(sfttag);
                        var ppft = document.DocumentNode.SelectNodes("//*[@name='PPFT']").FirstOrDefault().Attributes["value"].Value;
                        var data = Regex.Match(oGetCredTypeResult, "data\":\"(.*?)\"").Groups[1].Value.ToString();
                        var uaid = Regex.Match(responseStr, "&uaid=(.*?)\"").Groups[1].Value;
                        var payload = $"login={username}&flowtoken={ppft}&purpose=eOTT_OtcLogin&channel=Email&ChallengeViewSupported=64&uaid={uaid}&AltEmailE={data}&ProofConfirmation={mailkhoiphuc}";

                        httpResponse = httpRequest.Post("https://login.live.com/GetOneTimeCode.srf?id=292841&client_id=0000000040C8F39E", payload, "application/x-www-form-urlencoded");
                        if (httpResponse.IsOK)
                        {
                           var responseStr1 = httpResponse.ToString();
                       
                            var code = fviainboxes_BM_IG(mailkhoiphuc);
                            var PPFT = Regex.Match(responseStr1, "FlowToken\":\"(.*?)\"").Groups[1].Value.ToString();
                            payload = $"SentProofIDE={data}&ProofConfirmation={mailkhoiphuc}&ProofType=1&otc={code}&ps=3&psRNGCDefaultType=&psRNGCEntropy=&psRNGCSLK=&canary=&ctx=&hpgrequestid=&PPFT={PPFT}&PPSX=Pa&NewUser=1&FoundMSAs=&fspost=0&i21=0&CookieDisclosure=0&IsFidoSupported=1&isSignupPost=0&isRecoveryAttemptPost=0&i13=0&login={username}&loginfmt={username}&type=27&LoginOptions=3&lrt=&lrtPartition=&hisRegion=&hisScaleUnit=";

                  
                            httpResponse = httpRequest.Post(urlPost, payload, "application/x-www-form-urlencoded");
                            if (httpResponse.IsOK)
                            {
                                var responseStr2 = httpResponse.ToString();
                                var urlPost1 = Regex.Match(responseStr2, @"urlPost:'(https://login\.live\.com/ppsecure/post\.srf\?[^']*)'").Groups[1].Value;
                                payload = $"PPFT={ppft}&canary=&LoginOptions=1&type=28&hpgrequestid=&ctx=";
                                httpResponse = httpRequest.Post(urlPost1, payload, "application/x-www-form-urlencoded");
                                httpRequest.AllowAutoRedirect = false;
                                var location = httpResponse.Location;

                                if (httpResponse.IsOK)
                                {
                                    responseStr = httpResponse.ToString();
                                    if (responseStr.Contains("Abuse?"))
                                    {
                                        MessageBox.Show("Mail Lock");
                                        return ("", "", "", "");
                                    }

                                    if (responseStr.Contains("document.fmHF.submit"))
                                    {
                                        document = new HtmlDocument();
                                        document.LoadHtml(responseStr);

                                        var formAction = document.GetElementbyId("fmHF");
                                        string actionUrl = formAction.Attributes["action"].Value;

                                        if (actionUrl.Contains("confirm?mkt="))
                                        {
                                            var confirmDoc = formAction.SelectNodes("//input");

                                            var confirmPayload = new Dictionary<string, string>();

                                            foreach (var item in confirmDoc)
                                            {
                                                var name = item.Attributes["name"].Value;
                                                var value = item.Attributes["value"].Value;
                                                if (name == null || value == null)
                                                {
                                                    continue;
                                                }

                                                confirmPayload.Add(name, value);
                                            }

                                            httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(confirmPayload));
                                            if (httpResponse.IsOK)
                                            {
                                                responseStr = httpResponse.ToString();

                                                document = new HtmlDocument();
                                                document.LoadHtml(responseStr);

                                                var confirmInputNodes = document.DocumentNode.SelectNodes("//input");
                                                confirmPayload = new Dictionary<string, string>();

                                                foreach (var item in confirmInputNodes)
                                                {
                                                    var name = item.Attributes["name"].Value;
                                                    var value = item.Attributes["value"].Value;
                                                    if (name == null || value == null)
                                                    {
                                                        continue;
                                                    }

                                                    confirmPayload.Add(name, value);
                                                }

                                                httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(confirmPayload));
                                                if (httpResponse.IsOK)
                                                {
                                                    responseStr = httpResponse.ToString();
                                                }
                                            }
                                        }

                                        for (int i = 0; i < 3; i++)
                                        {
                                            if (actionUrl.Contains("Add?mkt="))
                                            {
                                                var skipDoc = formAction.SelectNodes("//input");
                                                Dictionary<string, string> skipPayload = new Dictionary<string, string>();
                                                foreach (var item in skipDoc)
                                                {
                                                    var name = item.Attributes["name"].Value;
                                                    var value = item.Attributes["value"].Value;
                                                    if (name == null || value == null)
                                                    {
                                                        continue;
                                                    }

                                                    skipPayload.Add(name, value);
                                                }

                                                httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(skipPayload));
                                                if (httpResponse.IsOK)
                                                {
                                                    responseStr = httpResponse.ToString();
                                                    document = new HtmlDocument();
                                                    document.LoadHtml(responseStr);

                                                    skipPayload = new Dictionary<string, string>();
                                                    var skipInputNodes = document.DocumentNode.SelectNodes("//input");
                                                    foreach (var item in skipInputNodes)
                                                    {
                                                        var name = item.Attributes["name"].Value;
                                                        var value = item.Attributes["value"].Value;
                                                        if (name == null || value == null)
                                                        {
                                                            continue;
                                                        }

                                                        skipPayload.Add(name, value);
                                                    }

                                                    skipPayload.Remove("action");
                                                    skipPayload.Add("action", "Skip");

                                                    httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(skipPayload));
                                                    if (httpResponse.IsOK)
                                                    {
                                                        responseStr = httpResponse.ToString();
                                                        break;
                                                    }
                                                }
                                            }
                                        }


                                        var submitDoc = formAction.SelectNodes("//input");
                                        var submitPayload = new Dictionary<string, string>();

                                        foreach (var item in submitDoc)
                                        {
                                            var name = item.Attributes["name"].Value;
                                            var value = item.Attributes["value"].Value;
                                            if (name == null || value == null)
                                            {
                                                continue;
                                            }

                                            submitPayload.Add(name, value);
                                        }

                                        httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(submitPayload));
                                        if (httpResponse.IsOK)
                                        {
                                            responseStr = httpResponse.ToString();

                                            document = new HtmlDocument();
                                            document.LoadHtml(responseStr);

                                            var inputNodes = document.DocumentNode.SelectNodes("//input");
                                            submitPayload = new Dictionary<string, string>();
                                            foreach (var item in submitDoc)
                                            {
                                                var name = item.Attributes["name"].Value;
                                                var value = item.Attributes["value"].Value;
                                                if (name == null || value == null)
                                                {
                                                    continue;
                                                }

                                                submitPayload.Add(name, value);
                                            }

                                            submitPayload.Add("ucaction", "Yes");

                                            httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(submitPayload));
                                            if (httpResponse.IsOK)
                                            {
                                                var sublocation = httpResponse.Location;
                                                if (sublocation.Contains("success"))
                                                {
                                                    httpResponse = httpRequest.Get(sublocation);
                                                    if (httpResponse.IsOK)
                                                    {
                                                        sublocation = httpResponse.Location;
                                                    }

                                                    if (sublocation.Contains("localhost"))
                                                    {
                                                        location = sublocation;
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }

                                string localhostCode = location.Split('=')[1];
                                string body = $"client_id={ClientId}&grant_type=authorization_code&redirect_uri=https%3A%2F%2Flocalhost&code={localhostCode}";
                                httpResponse = httpRequest.Post("https://login.microsoftonline.com/common/oauth2/v2.0/token", body, "application/x-www-form-urlencoded");
                                if (httpResponse.IsOK)
                                {
                                    responseStr = httpResponse.ToString();
                                    dynamic results = JsonConvert.DeserializeObject<dynamic>(responseStr);
                                    var access_token = results.access_token;
                                    var fresh_token = results.refresh_token;

                                    return (username, password, access_token, fresh_token);
                                }

                            }
                      
                        }






                       
                   

                    
                    }
                }
            }
            catch { }

            return ("", "", "", "");
        }

    
        private string fviainboxes_BM_IG(string mailkp)
        {
            try
            {
                HttpRequest httpRequest = new HttpRequest();
                httpRequest.AllowAutoRedirect = true;
                httpRequest.Cookies = new CookieDictionary();
                httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Safari/537.36";
                httpRequest.KeepAlive = true;
                var username = mailkp.Split('@')[0].ToString();
                httpRequest.AddHeader("authority", "fviainboxes.com");
                httpRequest.AddHeader("path", $"/messages?username={username}&domain=fviainboxes.com");
                httpRequest.AddHeader("scheme", "https");
                httpRequest.AddHeader("accept", "application/json, text/plain, */*");
                httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                httpRequest.AddHeader("authorization", "Bearer af2b556e5e719052ca9193bace296b4fe9015bdc6c2c6ec28447d57c56187941");
                httpRequest.AddHeader("priority", "u=1, i");
                httpRequest.AddHeader("referer", "https://fviainboxes.com/");
                httpRequest.AddHeader("sec-ch-ua", "\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\"");
                httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                httpRequest.AddHeader("sec-fetch-dest", "empty");
                httpRequest.AddHeader("sec-fetch-mode", "cors");
                httpRequest.AddHeader("sec-fetch-site", "same-origin");
                var url = $"https://fviainboxes.com/messages?username={username}&domain=fviainboxes.com";

                var response = httpRequest.Get(url);

                if (response.IsOK)
                {

                    var responseStr = response.ToString();
                    if (responseStr.Contains("{\"result\":[{\"id\":\""))
                    {
                        // Đăng Nhập Thành Công
                
                        var id = Regex.Match(responseStr, "{\"result\":\\[{\"id\":\"(.*?)\"").Groups[1].Value.ToString();

                        // Đọc Thư

                        httpRequest.AddHeader("authority", "fviainboxes.com");
                        httpRequest.AddHeader("accept", "application/json, text/plain, */*");
                        httpRequest.AddHeader("accept-language", "en-US,en;q=0.9");
                        httpRequest.AddHeader("authorization", "Bearer af2b556e5e719052ca9193bace296b4fe9015bdc6c2c6ec28447d57c56187941");
                        httpRequest.AddHeader("priority", "u=1, i");
                        httpRequest.AddHeader("referer", "https://fviainboxes.com/");
                        httpRequest.AddHeader("sec-ch-ua", "\"Chromium\";v=\"134\", \"Not:A-Brand\";v=\"24\", \"Google Chrome\";v=\"134\"");
                        httpRequest.AddHeader("sec-ch-ua-mobile", "?0");
                        httpRequest.AddHeader("sec-ch-ua-platform", "\"Windows\"");
                        httpRequest.AddHeader("sec-fetch-dest", "empty");
                        httpRequest.AddHeader("sec-fetch-mode", "cors");
                        httpRequest.AddHeader("sec-fetch-site", "same-origin");


                        var url1 = $"https://fviainboxes.com/message?username={username}&domain=fviainboxes.com&id={id}";

                        response = httpRequest.Get(url1);

                        if (response.IsOK)
                        {
                            var responseStr1 = response.ToString();
                            if (responseStr1.Contains("Your single-use code is:"))
                            {
                                var code = Regex.Match(responseStr1, @"Your single-use code is:\s*(\d+)").Groups[1].Value.ToString(); 
                                return code;
                            }
                        }

                    }


                }



            }
            catch { }
            return "";
        }


        private (string, string, string, string) TurnOnOAUTH2_2(string username, string password)
        {
            try
            {
                var httpRequest = new Leaf.xNet.HttpRequest();
                httpRequest.ConnectTimeout = 60000;
                httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Thunderbird/128.2.3";
                httpRequest["Accept"] = "*";
                httpRequest.AllowAutoRedirect = true;
                httpRequest.AddHeader("Accept-Language", "en-US,en;q=0.5");
                httpRequest.AddHeader("Accept-Encoding", "gzip, deflate, br, zstd, value");
                httpRequest.AddHeader("Priority", "u=0, i");
                httpRequest.AddHeader("Upgrade-Insecure-Requests", "1");
                httpRequest.AddHeader("Sec-Fetch-Dest", "document");
                httpRequest.AddHeader("Sec-Fetch-Mode", "navigate");
                httpRequest.AddHeader("Sec-Fetch-Site", "same-origin");
                httpRequest.AddHeader("Sec-Fetch-User", "?1");

                var responseStr = string.Empty;
                Leaf.xNet.HttpResponse httpResponse = httpRequest.Get("https://outlook.live.com/owa/");
                if (httpResponse.IsOK)
                {
                    responseStr = httpResponse.ToString();
                    string url = $"https://login.microsoftonline.com/common/oauth2/v2.0/authorize?response_type=code&client_id={ClientId}&redirect_uri=https://localhost&scope=https://outlook.office.com/IMAP.AccessAsUser.All+https://outlook.office.com/POP.AccessAsUser.All+https://outlook.office.com/SMTP.Send+offline_access&login_hint={username}";

                    httpResponse = httpRequest.Get(url);
                    if (httpResponse.IsOK)
                    {
                        responseStr = httpResponse.ToString();

                        var sfttag = Regex.Match(responseStr, "sFTTag:'(.*?)',").Groups[1].Value;
                        var document = new HtmlDocument();
                        document.LoadHtml(sfttag);

                        var ppft = document.DocumentNode.SelectNodes("//*[@name='PPFT']").FirstOrDefault().Attributes["value"].Value;
                        var urlPost = Regex.Match(responseStr, "https://login.live.com/ppsecure/post.srf?.*?(?=',oCaptchaInfo)").Value;

                        var payload = $"ps=2&psRNGCDefaultType=&psRNGCEntropy=&psRNGCSLK=&canary=&ctx=&hpgrequestid=&PPFT={ppft}&PPSX=Passp&NewUser=1&FoundMSAs=&fspost=0&i21=0&CookieDisclosure=0&IsFidoSupported=1&isSignupPost=0&isRecoveryAttemptPost=0&i13=1&login={username}&loginfmt={username}&type=11&LoginOptions=1&lrt=&lrtPartition=&hisRegion=&hisScaleUnit=&passwd={password}";
                        httpRequest.AllowAutoRedirect = false;

                        httpResponse = httpRequest.Post(urlPost, payload, "application/x-www-form-urlencoded");

                        var location = httpResponse.Location;

                        if (httpResponse.IsOK)
                        {
                            responseStr = httpResponse.ToString();
                            if (responseStr.Contains("Abuse?"))
                            {
                                MessageBox.Show("Mail Lock");
                                return ("", "", "", "");
                            }

                            if (responseStr.Contains("document.fmHF.submit"))
                            {
                                document = new HtmlDocument();
                                document.LoadHtml(responseStr);

                                var formAction = document.GetElementbyId("fmHF");
                                string actionUrl = formAction.Attributes["action"].Value;

                                if (actionUrl.Contains("confirm?mkt="))
                                {
                                    var confirmDoc = formAction.SelectNodes("//input");

                                    var confirmPayload = new Dictionary<string, string>();

                                    foreach (var item in confirmDoc)
                                    {
                                        var name = item.Attributes["name"].Value;
                                        var value = item.Attributes["value"].Value;
                                        if (name == null || value == null)
                                        {
                                            continue;
                                        }

                                        confirmPayload.Add(name, value);
                                    }

                                    httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(confirmPayload));
                                    if (httpResponse.IsOK)
                                    {
                                        responseStr = httpResponse.ToString();

                                        document = new HtmlDocument();
                                        document.LoadHtml(responseStr);

                                        var confirmInputNodes = document.DocumentNode.SelectNodes("//input");
                                        confirmPayload = new Dictionary<string, string>();

                                        foreach (var item in confirmInputNodes)
                                        {
                                            var name = item.Attributes["name"].Value;
                                            var value = item.Attributes["value"].Value;
                                            if (name == null || value == null)
                                            {
                                                continue;
                                            }

                                            confirmPayload.Add(name, value);
                                        }

                                        httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(confirmPayload));
                                        if (httpResponse.IsOK)
                                        {
                                            responseStr = httpResponse.ToString();
                                        }
                                    }
                                }

                                for (int i = 0; i < 3; i++)
                                {
                                    if (actionUrl.Contains("Add?mkt="))
                                    {
                                        var skipDoc = formAction.SelectNodes("//input");
                                        Dictionary<string, string> skipPayload = new Dictionary<string, string>();
                                        foreach (var item in skipDoc)
                                        {
                                            var name = item.Attributes["name"].Value;
                                            var value = item.Attributes["value"].Value;
                                            if (name == null || value == null)
                                            {
                                                continue;
                                            }

                                            skipPayload.Add(name, value);
                                        }

                                        httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(skipPayload));
                                        if (httpResponse.IsOK)
                                        {
                                            responseStr = httpResponse.ToString();
                                            document = new HtmlDocument();
                                            document.LoadHtml(responseStr);

                                            skipPayload = new Dictionary<string, string>();
                                            var skipInputNodes = document.DocumentNode.SelectNodes("//input");
                                            foreach (var item in skipInputNodes)
                                            {
                                                var name = item.Attributes["name"].Value;
                                                var value = item.Attributes["value"].Value;
                                                if (name == null || value == null)
                                                {
                                                    continue;
                                                }

                                                skipPayload.Add(name, value);
                                            }

                                            skipPayload.Remove("action");
                                            skipPayload.Add("action", "Skip");

                                            httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(skipPayload));
                                            if (httpResponse.IsOK)
                                            {
                                                responseStr = httpResponse.ToString();
                                                break;
                                            }
                                        }
                                    }
                                }


                                var submitDoc = formAction.SelectNodes("//input");
                                var submitPayload = new Dictionary<string, string>();

                                foreach (var item in submitDoc)
                                {
                                    var name = item.Attributes["name"].Value;
                                    var value = item.Attributes["value"].Value;
                                    if (name == null || value == null)
                                    {
                                        continue;
                                    }

                                    submitPayload.Add(name, value);
                                }

                                httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(submitPayload));
                                if (httpResponse.IsOK)
                                {
                                    responseStr = httpResponse.ToString();

                                    document = new HtmlDocument();
                                    document.LoadHtml(responseStr);

                                    var inputNodes = document.DocumentNode.SelectNodes("//input");
                                    submitPayload = new Dictionary<string, string>();
                                    foreach (var item in submitDoc)
                                    {
                                        var name = item.Attributes["name"].Value;
                                        var value = item.Attributes["value"].Value;
                                        if (name == null || value == null)
                                        {
                                            continue;
                                        }

                                        submitPayload.Add(name, value);
                                    }

                                    submitPayload.Add("ucaction", "Yes");

                                    httpResponse = httpRequest.Post(actionUrl, new FormUrlEncodedContent(submitPayload));
                                    if (httpResponse.IsOK)
                                    {
                                        var sublocation = httpResponse.Location;
                                        if (sublocation.Contains("success"))
                                        {
                                            httpResponse = httpRequest.Get(sublocation);
                                            if (httpResponse.IsOK)
                                            {
                                                sublocation = httpResponse.Location;
                                            }

                                            if (sublocation.Contains("localhost"))
                                            {
                                                location = sublocation;
                                            }
                                        }
                                    }
                                }

                            }
                        }

                        string localhostCode = location.Split('=')[1];
                        string body = $"client_id={ClientId}&grant_type=authorization_code&redirect_uri=https%3A%2F%2Flocalhost&code={localhostCode}";
                        httpResponse = httpRequest.Post("https://login.microsoftonline.com/common/oauth2/v2.0/token", body, "application/x-www-form-urlencoded");
                        if (httpResponse.IsOK)
                        {
                            responseStr = httpResponse.ToString();
                            dynamic results = JsonConvert.DeserializeObject<dynamic>(responseStr);
                            var access_token = results.access_token;
                            var fresh_token = results.refresh_token;

                            return (username, password, access_token, fresh_token);
                        }
                    }
                }
            }
            catch { }

            return ("", "", "", "");
        }
        private string ReadHotmail_c(string user, string accessToken)
        {

            List<string> code_mail = new List<string>();
            if (string.IsNullOrEmpty(accessToken))
            {
                // Nếu không có accessToken, không thực hiện
                return "";
            }

            try
            {
                using (var client = new ImapClient())
                {
                    // Kết nối đến máy chủ IMAP của Outlook (Office365)
                    client.Connect("outlook.office365.com", 993, SecureSocketOptions.SslOnConnect);

                    // Xác thực bằng OAuth2
                    var oauth2 = new SaslMechanismOAuth2(user, accessToken);
                    client.Authenticate(oauth2);

                    // Mở thư mục inbox
                    var inbox = client.Inbox;
                    inbox.Open(FolderAccess.ReadWrite);
                    // Lấy thời gian hiện tại
                    DateTime ngaygiohientai = DateTime.Now;
                    // Tính thời gian giảm đi 1 phút (hoặc có thể tùy chỉnh nếu cần)
                    DateTime targetTime = ngaygiohientai.AddMinutes(-100);
                    ////lùi lại 1 ngày
                    DateTime ngaygioluilai = ngaygiohientai.AddDays(-1);
                    DateTime targetTime1 = ngaygioluilai.AddMinutes(-100);
                    //// Tính thời gian giảm đi 5 phút
                    //// Tìm các email chưa đọc
                    //var uids = inbox.Search(SearchQuery.NotSeen);
                    //// Tìm email mới nhận sau thời điểm 5 phút trước
                    //var uids = inbox.Search(SearchQuery.DeliveredAfter(targetTime));
                    // Tìm email nhận trong vòng 5 phút gần nhất hoặc email từ ngày trước nhưng vẫn hợp lệ
                    var searchQuery = SearchQuery.DeliveredAfter(targetTime)
                                    .Or(SearchQuery.DeliveredAfter(targetTime1));
                    var uids = inbox.Search(searchQuery);
                    foreach (var uidMessage in uids)
                    {
                        var message = inbox.GetMessage(uidMessage);
                        var msg = message.HtmlBody;
                        var time = message.Date;
                        // Đánh dấu email là đã đọc sau khi xử lý
                        inbox.AddFlags(uidMessage, MessageFlags.Seen, true);

                        // Kiểm tra thời gian email nhận và nếu trong khoảng thời gian quy định
                        if (time >= targetTime || time >= targetTime1)
                        {

                            // Kiểm tra nếu email chứa link Facebook với ID người dùng
                            if (msg.Contains($"https://www.facebook.com/"))
                            {
                                var document = new HtmlDocument();
                                document.LoadHtml(msg);
                                var codeNode = document.DocumentNode.SelectSingleNode("//tr/td/span/span");
                                var code = codeNode?.InnerText.Trim(); // Kiểm tra null và loại bỏ khoảng trắng
                                if (!string.IsNullOrEmpty(code))
                                {
                                    var match = code.Split('-')[1].ToString();
                                    return match;

                                }
                                else
                                {
                                    codeNode = document.DocumentNode.SelectSingleNode("//span/center/table");
                                    code = codeNode?.InnerText.Trim(); // Kiểm tra null và loại bỏ khoảng trắng
                                    if (!string.IsNullOrEmpty(code))
                                    {
                                        var match = code.Split('-')[1].ToString();
                                        return match;

                                    }
                                }
                                // Xóa email đã xử lý


                            }
                        }

                        // Xóa email đã xử lý
                        inbox.AddFlags(uidMessage, MessageFlags.Deleted, true);
                    }

                    // Ngắt kết nối sau khi xử lý
                    client.Disconnect(true);
                }


                if (code_mail.Count == 1)
                {
                    return code_mail[0];
                }
                if (code_mail.Count > 1)
                {
                    return code_mail[code_mail.Count - 1];
                }


                // Nếu không tìm thấy mã
                return "";
            }
            catch (Exception ex)
            {
                // Xử lý lỗi (ví dụ: log lỗi)
                return "LOGIN HOTMAIL FAIL";
            }
        }
        private string ReadHotmail_phone(string user, string accessToken)
        {

            List<string> code_mail = new List<string>();
            if (string.IsNullOrEmpty(accessToken))
            {
                // Nếu không có accessToken, không thực hiện
                return "";
            }

            try
            {
                using (var client = new ImapClient())
                {
                    // Kết nối đến máy chủ IMAP của Outlook (Office365)
                    client.Connect("outlook.office365.com", 993, SecureSocketOptions.SslOnConnect);

                    // Xác thực bằng OAuth2
                    var oauth2 = new SaslMechanismOAuth2(user, accessToken);
                    client.Authenticate(oauth2);

                    // Mở thư mục inbox
                    var inbox = client.Inbox;
                    inbox.Open(FolderAccess.ReadWrite);
                    // Lấy thời gian hiện tại
                    DateTime ngaygiohientai = DateTime.Now;
                    // Tính thời gian giảm đi 1 phút (hoặc có thể tùy chỉnh nếu cần)
                    DateTime targetTime = ngaygiohientai.AddMinutes(-100);
                    ////lùi lại 1 ngày
                    DateTime ngaygioluilai = ngaygiohientai.AddDays(-1);
                    DateTime targetTime1 = ngaygioluilai.AddMinutes(-100);
                    //// Tính thời gian giảm đi 5 phút
                    //// Tìm các email chưa đọc
                    //var uids = inbox.Search(SearchQuery.NotSeen);
                    //// Tìm email mới nhận sau thời điểm 5 phút trước
                    //var uids = inbox.Search(SearchQuery.DeliveredAfter(targetTime));
                    // Tìm email nhận trong vòng 5 phút gần nhất hoặc email từ ngày trước nhưng vẫn hợp lệ
                    var searchQuery = SearchQuery.DeliveredAfter(targetTime)
                                    .Or(SearchQuery.DeliveredAfter(targetTime1));
                    var uids = inbox.Search(searchQuery);
                    foreach (var uidMessage in uids)
                    {
                        var message = inbox.GetMessage(uidMessage);
                        var msg = message.HtmlBody;
                        var time = message.Date;
                        // Đánh dấu email là đã đọc sau khi xử lý
                        inbox.AddFlags(uidMessage, MessageFlags.Seen, true);

                        // Kiểm tra thời gian email nhận và nếu trong khoảng thời gian quy định
                        if (time >= targetTime || time >= targetTime1)
                        {

                            // Kiểm tra nếu email chứa link Facebook với ID người dùng
                            if (msg.Contains($"https://www.facebook.com/"))
                            {
                                var document = new HtmlDocument();
                                document.LoadHtml(msg);
                                var codeNode = document.DocumentNode.SelectSingleNode("//tr/td/span/span");
                                var code = codeNode?.InnerText.Trim(); // Kiểm tra null và loại bỏ khoảng trắng
                                if (!string.IsNullOrEmpty(code))
                                {
                                    //var match = code.Split('-')[1].ToString();
                                    return code;

                                }
                                else
                                {
                                    codeNode = document.DocumentNode.SelectSingleNode("//td/span/center");
                                    code = codeNode?.InnerText.Trim(); // Kiểm tra null và loại bỏ khoảng trắng
                                    if (!string.IsNullOrEmpty(code))
                                    {
                                        //var match = code.Split('-')[1].ToString();
                                        return code;

                                    }
                                }
                                // Xóa email đã xử lý


                            }
                        }

                        // Xóa email đã xử lý
                        inbox.AddFlags(uidMessage, MessageFlags.Deleted, true);
                    }

                    // Ngắt kết nối sau khi xử lý
                    client.Disconnect(true);
                }


                if (code_mail.Count == 1)
                {
                    return code_mail[0];
                }
                if (code_mail.Count > 1)
                {
                    return code_mail[code_mail.Count - 1];
                }


                // Nếu không tìm thấy mã
                return "";
            }
            catch (Exception ex)
            {
                // Xử lý lỗi (ví dụ: log lỗi)
                return "LOGIN HOTMAIL FAIL";
            }
        }
        private string ReadHotmail_IG(string user, string accessToken)
        {

            List<string> code_mail = new List<string>();
            if (string.IsNullOrEmpty(accessToken))
            {
                // Nếu không có accessToken, không thực hiện
                return "";
            }

            try
            {
                using (var client = new ImapClient())
                {
                    // Kết nối đến máy chủ IMAP của Outlook (Office365)
                    client.Connect("outlook.office365.com", 993, SecureSocketOptions.SslOnConnect);

                    // Xác thực bằng OAuth2
                    var oauth2 = new SaslMechanismOAuth2(user, accessToken);
                    client.Authenticate(oauth2);

                    // Mở thư mục inbox
                    var inbox = client.Inbox;
                    inbox.Open(FolderAccess.ReadWrite);
                    // Lấy thời gian hiện tại
                    DateTime ngaygiohientai = DateTime.Now;
                    // Tính thời gian giảm đi 1 phút (hoặc có thể tùy chỉnh nếu cần)
                    DateTime targetTime = ngaygiohientai.AddMinutes(-100);
                    ////lùi lại 1 ngày
                    DateTime ngaygioluilai = ngaygiohientai.AddDays(-1);
                    DateTime targetTime1 = ngaygioluilai.AddMinutes(-100);
                    //// Tính thời gian giảm đi 5 phút
                    //// Tìm các email chưa đọc
                    //var uids = inbox.Search(SearchQuery.NotSeen);
                    //// Tìm email mới nhận sau thời điểm 5 phút trước
                    //var uids = inbox.Search(SearchQuery.DeliveredAfter(targetTime));
                    // Tìm email nhận trong vòng 5 phút gần nhất hoặc email từ ngày trước nhưng vẫn hợp lệ
                    var searchQuery = SearchQuery.DeliveredAfter(targetTime)
                                    .Or(SearchQuery.DeliveredAfter(targetTime1));
                    var uids = inbox.Search(searchQuery);
                    foreach (var uidMessage in uids)
                    {
                        var message = inbox.GetMessage(uidMessage);
                        var msg = message.HtmlBody;
                        var time = message.Date;
                        // Đánh dấu email là đã đọc sau khi xử lý
                        inbox.AddFlags(uidMessage, MessageFlags.Seen, true);

                        // Kiểm tra thời gian email nhận và nếu trong khoảng thời gian quy định
                        if (time >= targetTime || time >= targetTime1)
                        {

                            // Kiểm tra nếu email chứa link Facebook với ID người dùng
                            if (msg.Contains($"https://www.facebook.com/"))
                            {
                                var document = new HtmlDocument();
                                document.LoadHtml(msg);
                                var codeNode = document.DocumentNode.SelectSingleNode("//html[1]/body[1]/table[1]/tr[1]/td[1]/table[1]/tr[4]/td[1]/table[1]/tr[2]");
                                var code = codeNode?.InnerText.Trim(); // Kiểm tra null và loại bỏ khoảng trắng
                                if (!string.IsNullOrEmpty(code))
                                {
                                    //var match = code.Split('-')[1].ToString();
                                    return code;

                                }

                                // Xóa email đã xử lý


                            }
                        }

                        // Xóa email đã xử lý
                        inbox.AddFlags(uidMessage, MessageFlags.Deleted, true);
                    }

                    // Ngắt kết nối sau khi xử lý
                    client.Disconnect(true);
                }


                if (code_mail.Count == 1)
                {
                    return code_mail[0];
                }
                if (code_mail.Count > 1)
                {
                    return code_mail[code_mail.Count - 1];
                }


                // Nếu không tìm thấy mã
                return "";
            }
            catch (Exception ex)
            {
                // Xử lý lỗi (ví dụ: log lỗi)
                return "LOGIN HOTMAIL FAIL";
            }
        }
        private void EnsurePostWWWLoginHDFull(HttpRequest httpRequest)
        {
            // fb login
            httpRequest["authority"] = "www.facebook.com";
            httpRequest["accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7";
            httpRequest["sec-fetch-dest"] = "document";
            httpRequest["sec-fetch-mode"] = "navigate";
            httpRequest["sec-fetch-site"] = "same-origin";
            httpRequest["sec-fetch-user"] = "?1";
            httpRequest["priority"] = "u=0, i";
            httpRequest["sec-ch-ua"] = "\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"";
            httpRequest["sec-fetch-site"] = "none";
            httpRequest["sec-ch-ua-mobile"] = "?0";
            httpRequest["sec-ch-ua-platform"] = "1";
            httpRequest["upgrade-insecure-requests"] = "\"Windows\"";
            httpRequest["cache-control"] = "max-age=0";
            httpRequest["upgrade-insecure-requests"] = "1";
            httpRequest["Accept-Language"] = "en-US,en;q=0.9";
        }
     

        private List<string> ReadHotmail_LINK1(string user, string accessToken)
        {
            List<string> link = new List<string>();

            if (string.IsNullOrEmpty(accessToken))
            {
                // set status doc mail loi
                return link;
            }
            try
            {
                using (var client = new ImapClient())
                {
                    // Kết nối đến máy chủ IMAP của Outlook (Office365)
                    client.Connect("outlook.office365.com", 993, SecureSocketOptions.SslOnConnect);

                    // Xác thực bằng OAuth2
                    var oauth2 = new SaslMechanismOAuth2(user, accessToken);
                    client.Authenticate(oauth2);

                    // Mở thư mục inbox
                    var inbox = client.Inbox;
                    inbox.Open(FolderAccess.ReadWrite);
                    // Lấy thời gian hiện tại
                    DateTime ngaygiohientai = DateTime.Now;
                    // Tính thời gian giảm đi 1 phút (hoặc có thể tùy chỉnh nếu cần)
                    DateTime targetTime = ngaygiohientai.AddMinutes(-5);
                    ////lùi lại 1 ngày
                    DateTime ngaygioluilai = ngaygiohientai.AddDays(-1);

                    DateTime targetTime1 = ngaygioluilai.AddMinutes(-5);
                    //// Tìm các email chưa đọc
                    //var uids = inbox.Search(SearchQuery.NotSeen);

                    //// Tìm email mới nhận sau thời điểm 10 phút trước
                    //var uids = inbox.Search(SearchQuery.DeliveredAfter(targetTime));
                    // Tìm email nhận trong vòng 5 phút gần nhất hoặc email từ ngày trước nhưng vẫn hợp lệ
                    var searchQuery = SearchQuery.DeliveredAfter(targetTime)
                                    .Or(SearchQuery.DeliveredAfter(targetTime1));
                    var uids = inbox.Search(searchQuery);

                    foreach (var uidMessage in uids)
                    {
                        var message = inbox.GetMessage(uidMessage);
                        var msg = message.HtmlBody;
                        var time = message.Date;
                        // Đánh dấu email là đã đọc sau khi xử lý
                        inbox.AddFlags(uidMessage, MessageFlags.Seen, true);

                        // Kiểm tra thời gian email nhận và nếu trong khoảng thời gian quy định
                        if (time >= targetTime || time >= targetTime1)
                        {
                            // Kiểm tra thời gian và nội dung email
                            if (time >= targetTime && msg.Contains("https://business.facebook.com/"))
                            {
                      


                                var LOAI_LINK = "";
                                if (cmb_LOAI_LINK.InvokeRequired)
                                {
                                    cmb_LOAI_LINK.Invoke(new Action(() =>
                                    {
                                        LOAI_LINK = cmb_LOAI_LINK.Text;
                                    }));
                                }

                                if (LOAI_LINK == "https://fb.me/")
                                {          // Tìm kiếm các liên kết trong nội dung email
                                    int index = msg.IndexOf("https://fb.me/");
                                    //int index1 = msg.IndexOf("https://www.facebook.com/aymt/offsite/");
                                    if (index > 0)
                                    {
                                        //string canLink = msg.Substring(index1, 200);
                                        string canLink = msg.Substring(index, 200);
                                        //canLink = canLink.Split('"')[0];
                                        canLink = canLink.Replace("amp;", "").Replace("\"", "");
                                        link.Add(canLink);
                                    }
                                }
                                else
                                {
                                    int index = msg.IndexOf("https://business.facebook.com/invitation/");
                                    //int index1 = body.IndexOf("https://www.facebook.com/aymt/offsite/");
                                    if (index > 0)
                                    {
                                        string canLink = Regex.Match(msg, "https:\\/\\/business\\.facebook\\.com\\/invitation\\/\\?token=(.*?)\"").Groups[1].Value.ToString();
                                        //string canLink = body.Substring(index, 371);
                                        canLink = $"https://business.facebook.com/invitation/?token={canLink}";
                                        link.Add(canLink);
                                    }
                                }
                            }
                        }

                        // Xóa email đã xử lý
                        inbox.AddFlags(uidMessage, MessageFlags.Deleted, true);
                    }

                    // Ngắt kết nối sau khi xử lý
                    client.Disconnect(true);
                }

                // Nếu không tìm thấy mã
                return link;
            }
            catch (Exception ex)
            {
                // Xử lý lỗi (ví dụ: log lỗi)
                return link;
            }

        }

        private List<string> ReadHotmail_LINK(String mail, String pass, String accessToken, String freshtoken)
        {

            List<string> link = new List<string>();

            if (accessToken == null)
            {
                return link;
            }

            bool isOauth2 = false;
            //while (true)
            //{
            //    if (isStop)
            //    {
            //        break;
            //    }
            try
            {

                int countReadLink = 0;
                using (var client = new ImapClient())
                {

                    String imapDomain = mail.Contains("gmail.com") ? "imap.gmail.com" : "imap-mail.outlook.com";

                    bool isExp = false;

                    if (!isOauth2)
                    {
                        try
                        {
                            client.Connect(imapDomain, 993, true);
                            client.Authenticate(mail, pass);
                        }
                        catch (Exception ex)
                        {
                            isExp = true;
                            if (client.IsConnected)
                            {
                                client.Disconnect(true);
                            }
                        }
                    }

                    if (isExp || isOauth2)
                    {
                        var oauth2 = new SaslMechanismOAuth2(mail, accessToken);
                        client.Connect("outlook.office365.com", 993, SecureSocketOptions.SslOnConnect);
                        client.Authenticate(oauth2);
                        isOauth2 = true;

                    }

                    var inbox = client.Inbox;
                    inbox.Open(FolderAccess.ReadWrite);

                    var uids = client.Inbox.Search(SearchQuery.NotSeen);


                    foreach (UniqueId uni in uids)
                    {
                        var message = inbox.GetMessage(uni);

                        String subJect = message.Subject.ToString().ToLower();
                        //appendLog(mail + "------> " + subJect);

                        String bmLink = "";

                        if (message.From.ToString().Contains("facebook"))
                        {
                            String body = message.GetTextBody(MimeKit.Text.TextFormat.Html).ToString();
                            var LOAI_LINK = "";
                            if (cmb_LOAI_LINK.InvokeRequired)
                            {
                                cmb_LOAI_LINK.Invoke(new Action(() =>
                                {
                                    LOAI_LINK = cmb_LOAI_LINK.Text;
                                }));
                            }

                            if (LOAI_LINK == "https://fb.me/")
                            {
                                int index = body.IndexOf("https://fb.me/");
                                //int index1 = body.IndexOf("https://www.facebook.com/aymt/offsite/");
                                if (index > 0)
                                {
                                    //String canLink = body.Substring(index1, 199);
                                    //String canLink = body.Substring(index, 199);
                                    //canLink = canLink.Split('"')[0];
                                    //canLink = canLink.Replace("amp;", "");
                                    //countReadLink++;
                                    // Console.WriteLine("CanLink: {0}", canLink);
                                    //bmLink = canLink;
                                    //link.Add(canLink);
                 
                                    string canLink = body.Substring(index, 50);
                                    canLink = canLink.Split('"')[0];
                                    link.Add($"{canLink}");
                                }
                            }
                            else
                            {
                                int index = body.IndexOf("https://business.facebook.com/invitation/");
                                //int index1 = body.IndexOf("https://www.facebook.com/aymt/offsite/");
                                if (index > 0)
                                {
                                    //String canLink = body.Substring(index1, 199);
                                    //String canLink = body.Substring(index, 199);
                                    //canLink = canLink.Split('"')[0];
                                    //canLink = canLink.Replace("amp;", "");
                                    //countReadLink++;
                                    // Console.WriteLine("CanLink: {0}", canLink);
                                    //bmLink = canLink;
                                    //link.Add(canLink);
                    
                                    string canLink = Regex.Match(body, "https:\\/\\/business\\.facebook\\.com\\/invitation\\/\\?token=(.*?)\"").Groups[1].Value.ToString();
                                    //string canLink = body.Substring(index, 371);
                                    canLink = $"https://business.facebook.com/invitation/?token={canLink}";
                                    link.Add($"{canLink}");
                                }

                            }



                        }
                        inbox.AddFlags(uni, MessageFlags.Seen, true);
                        // Đánh dấu email là xóa (cần thực hiện trước khi gọi Expunge)
                        inbox.AddFlags(uni, MessageFlags.Deleted, true);

                    }

                    client.Disconnect(true);
                }
                //appendLog(countReadLink + " Link được tìm thấy " + mail);
            }

            catch (Exception exnew)
            {
                //appendLog(mail + " " + exnew.Message);
                //break;
            }

            Task.Delay(5000);

            //}

            return link;
        }
        private void LoadDataForDgv(string filePath, DataGridView dgv)
        {
            // Kiểm tra nếu file tồn tại
            if (File.Exists(filePath))
            {
                try
                {
                    // Đọc toàn bộ nội dung file
                    string[] lines = File.ReadAllLines(filePath);

                    if (lines.Length > 0)
                    {
                        // Xóa các hàng hiện tại trong DataGridView
                        dgv.Rows.Clear();

                        // Thêm dữ liệu vào DataGridView từ các dòng còn lại
                        for (int i = 0; i < lines.Length; i++)
                        {
                            object[] row = lines[i].Split('|');
                            dgv.Rows.Add(row);
                        }
                    }
                }
                catch //(Exception ex)
                {
                    //MessageBox.Show($"Có lỗi xảy ra khi đọc file: {ex.Message}");
                }
            }
            else
            {
                //MessageBox.Show("File không tồn tại!");
            }
        }

        private void Form1_FormClosed_1(object sender, FormClosedEventArgs e)
        {
            var dictionary = new Dictionary<string, DataGridView>
            {
                { "file1.txt", dgv1},
                { "file2.txt", dgv_mail},
                 { "file3.txt",dgv2_IG}
            };

            foreach (var item in dictionary)
            {
                FormClose(item.Key, item.Value);
            }
        }

        private void FormClose(string filePath, DataGridView dgv)
        {
            // Tạo hoặc ghi đè file
            using (StreamWriter sw = new StreamWriter(filePath))
            {
                // Lưu dữ liệu của từng hàng
                foreach (DataGridViewRow row in dgv.Rows)
                {
                    if (!row.IsNewRow) // Bỏ qua hàng mới (nếu có)
                    {
                        string[] cells = new string[dgv.Columns.Count];

                        for (int i = 0; i < dgv.Columns.Count; i++)
                        {
                            if (filePath == "file1.txt")
                            {
                                if (i == 9)
                                {
                                    cells[i] = row.Cells[i].Value == null || Convert.ToBoolean(row.Cells[i].Value) == false ? "false" : "true";
                                    continue;
                                }
                            }
                            if (filePath == "file2.txt")
                            {
                                if (i == 5)
                                {
                                    cells[i] = row.Cells[i].Value == null || Convert.ToBoolean(row.Cells[i].Value) == false ? "false" : "true";
                                    continue;
                                }
                            }
                            if (filePath == "file3.txt")
                            {
                                if (i == 3)
                                {
                                    cells[i] = row.Cells[i].Value == null || Convert.ToBoolean(row.Cells[i].Value) == false ? "false" : "true";
                                    continue;
                                }
                            }

                            cells[i] = row.Cells[i].Value?.ToString() ?? string.Empty; // Lấy giá trị của ô, xử lý giá trị null
                        }
                        sw.WriteLine(string.Join("|", cells));
                    }
                }
            }
        }


        // Ctrl+C ,V
        private List<string> listusernamedgv1 = new List<string>();

        private void dgv1_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == System.Windows.Forms.Keys.V)
            {
                //Lấy nội dung từ clipboard
                string clipboardText = Clipboard.GetText();

                var lstAccount = clipboardText.Split('\n').ToList();

                foreach (var account in lstAccount)
                {
                    var via = account.Replace("\r", "").Replace("||", "|");
                    var accountRaw = via.Split('|');
                    var username = accountRaw[0].ToString();

                    if (!listusernamedgv1.Contains(username))
                    {

                        listusernamedgv1.Add(username);
                        var password = "";
                        var mailvs2FAvsCookie = "";
                        try
                        {
                            password = accountRaw[1];
                        }
                        catch
                        {
                            password = "";
                        }
                        try
                        {
                            mailvs2FAvsCookie = accountRaw[2];
                        }
                        catch
                        {
                            mailvs2FAvsCookie = "";
                        }
                        int add = 0;

                        dgv1.Invoke(new Action(() =>
                        {
                            if (mailvs2FAvsCookie.Contains("@"))
                            {
                                var passmail = "";
                                var mailkhoiphuc = "";
                                try
                                {
                                    passmail = accountRaw[3];

                                }
                                catch
                                {
                                    passmail = "";

                                }
                                try
                                {
                                    mailkhoiphuc = accountRaw[4];

                                }
                                catch
                                {
                                    mailkhoiphuc = "";

                                }
                                add = dgv1.Rows.Add((dgv1.RowCount + 1), username, password, "", mailvs2FAvsCookie, passmail, mailkhoiphuc);
                            }
                            if (mailvs2FAvsCookie.Contains("datr"))
                            {
                                var mail = "";
                                var passmail = "";
                                var mailkhoiphuc = "";
                                try
                                {
                                    mail = accountRaw[3];
                                }
                                catch
                                {
                                    mail = "";
                                }
                                try
                                {
                                    passmail = accountRaw[4];
                                }
                                catch
                                {
                                    passmail = "";
                                }
                                try
                                {
                                    mailkhoiphuc = accountRaw[5];
                                }
                                catch
                                {
                                    mailkhoiphuc = "";
                                }

                                add = dgv1.Rows.Add((dgv1.RowCount + 1), username, password, mailvs2FAvsCookie, mail, passmail, mailkhoiphuc);

                            }
                            if (!mailvs2FAvsCookie.Contains("@") && !mailvs2FAvsCookie.Contains("datr"))
                            {
                                var mail = "";
                                var passmail = "";
                                var mailkhoiphuc = "";
                                try
                                {
                                    mail = accountRaw[3];
                                }
                                catch
                                {
                                    mail = "";
                                }
                                try
                                {
                                    passmail = accountRaw[4];
                                }
                                catch
                                {
                                    passmail = "";
                                }
                                try
                                {
                                    mailkhoiphuc = accountRaw[5];
                                }
                                catch
                                {
                                    mailkhoiphuc = "";
                                }
                                add = dgv1.Rows.Add((dgv1.RowCount + 1), username, password, mailvs2FAvsCookie, mail, passmail, mailkhoiphuc);
                            }


                        }));

                    }

                }

            }
        }


        private void bôiĐenToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv1.Rows)
            {
                for (int i = 0; i < row.Cells.Count; i++)
                {
                    if (row.Cells[i].Selected == true)
                    {
                        row.Cells["cSelect"].Value = true;
                    }
                }
            }
        }

        private void tấtCảToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv1.Rows)
            {
                row.Cells["cSelect"].Value = true;
            }
        }

        private void bôiĐenToolStripMenuItem1_Click_1(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv1.Rows)
            {
                for (int i = 0; i < row.Cells.Count; i++)
                {
                    if (row.Cells[i].Selected == true)
                    {
                        row.Cells["cSelect"].Value = false;
                    }
                }
            }
        }

        private void tấtCảToolStripMenuItem1_Click_1(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv1.Rows)
            {
                row.Cells["cSelect"].Value = false;
            }
        }

        private List<string> originalAccountList = new List<string>();
        private void dòngĐãChọnToolStripMenuItem_Click_1(object sender, EventArgs e)
        {
            for (int i = dgv1.Rows.Count - 1; i >= 0; i--)
            {
                DataGridViewRow row = dgv1.Rows[i];
                if (row.Cells[9].Value is bool isChecked && isChecked)
                {
                    var username = row.Cells[1].Value.ToString(); // Giả sử tên người dùng ở cột thứ hai
                    listusernamedgv1.Remove(username); // Xóa khỏi danh sách người dùng
                    originalAccountList.RemoveAll(acc => acc.StartsWith(username + "|")); // Xóa khỏi danh sách tài khoản gốc
                    dgv1.Rows.RemoveAt(i);
                }
            }
        }

        private void tấtCảToolStripMenuItem2_Click_1(object sender, EventArgs e)
        {
            dgv1.Rows.Clear();
            listusernamedgv1.Clear(); // Xóa danh sách người dùng hiện tại

            // Tải lại tất cả tài khoản gốc
            foreach (var account in originalAccountList)
            {
                var accountRaw = account.Split('|');
                var username = accountRaw[0];
                var password = accountRaw[1];
                var mailvs2FAvsCookie = accountRaw[2];
                if (mailvs2FAvsCookie.Contains("@"))
                {
                    var passmail = accountRaw[3];
                    var mailkhoiphuc = accountRaw[4];
                    dgv1.Rows.Add((dgv1.RowCount + 1), username, password, "", mailvs2FAvsCookie, passmail, mailkhoiphuc);
                }
                if (mailvs2FAvsCookie.Contains("datr"))
                {

                    var mail = accountRaw[3];
                    var passmail = accountRaw[4];
                    var mailkhoiphuc = accountRaw[5];
                    dgv1.Rows.Add((dgv1.RowCount + 1), username, password, mailvs2FAvsCookie, mail, passmail, mailkhoiphuc);

                }
                if (!mailvs2FAvsCookie.Contains("@") && !mailvs2FAvsCookie.Contains("datr"))
                {
                    var mail = accountRaw[3];
                    var passmail = accountRaw[4];
                    var mailkhoiphuc = accountRaw[5];
                    dgv1.Rows.Add((dgv1.RowCount + 1), username, password, mailvs2FAvsCookie, mail, passmail, mailkhoiphuc);
                }

                listusernamedgv1.Add(username); // Cập nhật danh sách người dùng
            }
        }




      


        // chrome chia 10 màn
        private ChromeDriver Createchromedrive()
        {
            ChromeOptions options = new ChromeOptions();
            options.AddArguments("--disable-3d-apis",
                "--disable-background-networking",
                "--disable-bundled-ppapi-flash",
                "--disable-client-side-phishing-detection",
                "--disable-default-apps",
                "--disable-hang-monitor",
                "--disable-prompt-on-repost",
                "--disable-sync",
                "--disable-webgl",
                "--enable-blink-features=ShadowDOMV0",
                "--enable-logging",
                "--disable-notifications",
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-web-security",
                "--disable-rtc-smoothness-algorithm",
                "--disable-webrtc-hw-decoding",
                "--disable-webrtc-hw-encoding",
                "--disable-webrtc-multiple-routes",
                "--disable-webrtc-hw-vp8-encoding",
                "--enforce-webrtc-ip-permission-check",
                "--force-webrtc-ip-handling-policy",
                "--ignore-certificate-errors",
                "--disable-infobars",
                "--disable-blink-features=\"BlockCredentialedSubresources\"",
                "--disable-popup-blocking");
            options.AddArgument("--window-size=500,650");
            options.AddArgument("--force-device-scale-factor=0.8");

            string userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36";
            options.AddArguments($"--user-agent={userAgent}");
            //var ON_OFF_EXTENSIONS = "";
            //if (cmb_EXTENSIONS.InvokeRequired)
            //{
            //    cmb_EXTENSIONS.Invoke(new Action(() =>
            //    {
            //        ON_OFF_EXTENSIONS = cmb_EXTENSIONS.Text;
            //    }));

            //}
            //else
            //{
            //    ON_OFF_EXTENSIONS = cmb_EXTENSIONS.Text;
            //}
            //if (ON_OFF_EXTENSIONS == "ON")
            //{
            //    // Thêm extension vào Chrome
            //    var extensionDirectory = ""; // Đường dẫn đến file .crx của bạn
            //    if (tb_Duong_dan_file.InvokeRequired)
            //    {
            //        tb_Duong_dan_file.Invoke(new Action(() =>
            //        {
            //            extensionDirectory = tb_Duong_dan_file.Text;

            //        }));
            //    }
            //    else
            //    {
            //        extensionDirectory = tb_Duong_dan_file.Text;
            //    }

            //    options.AddArguments($"--load-extension={extensionDirectory}");

            //}


            if (i == 10)
            {
                i = 0;
            }
            if (0 <= i & i <= 4)
            {
                options.AddArguments($"--window-position={470 * i},0");
            }
            if (5 <= i & i < 10)
            {
                if (x == 5 || x == 10)
                {
                    x = 0;
                }
                options.AddArguments($"--window-position={470 * x},650");
            }

            ChromeDriverService chromeDriverService = ChromeDriverService.CreateDefaultService();
            chromeDriverService.DisableBuildCheck = true;
            chromeDriverService.HideCommandPromptWindow = true;
            ChromeDriver chromeDriver = new ChromeDriver(chromeDriverService, options);
            chromeDriver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(60);
            chromeDriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);
            i++;
            x++;
            return chromeDriver;
        }

        private ChromeDriver Createchromedrivehotmail()
        {
            ChromeOptions options = new ChromeOptions();
            options.AddArguments("--disable-3d-apis",
                "--disable-background-networking",
                "--disable-bundled-ppapi-flash",
                "--disable-client-side-phishing-detection",
                "--disable-default-apps",
                "--disable-hang-monitor",
                "--disable-prompt-on-repost",
                "--disable-sync",
                "--disable-webgl",
                "--enable-blink-features=ShadowDOMV0",
                "--enable-logging",
                "--disable-notifications",
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-web-security",
                "--disable-rtc-smoothness-algorithm",
                "--disable-webrtc-hw-decoding",
                "--disable-webrtc-hw-encoding",
                "--disable-webrtc-multiple-routes",
                "--disable-webrtc-hw-vp8-encoding",
                "--enforce-webrtc-ip-permission-check",
                "--force-webrtc-ip-handling-policy",
                "--ignore-certificate-errors",
                "--disable-infobars",
                "--disable-blink-features=\"BlockCredentialedSubresources\"",
                "--disable-popup-blocking");
            options.AddArgument("--window-size=500,650");
            options.AddArgument("--force-device-scale-factor=0.8");
            if (c == 10)
            {
                c = 0;
            }
            if (0 <= c & c <= 4)
            {
                options.AddArguments($"--window-position={470 * c},0");
            }
            if (5 <= c & c < 10)
            {
                if (k == 5 || k == 10)
                {
                    k = 0;
                }
                options.AddArguments($"--window-position={470 * k},650");
            }

            ChromeDriverService chromeDriverService = ChromeDriverService.CreateDefaultService();
            chromeDriverService.DisableBuildCheck = true;
            chromeDriverService.HideCommandPromptWindow = true;
            ChromeDriver chromeDriver = new ChromeDriver(chromeDriverService, options);
            chromeDriver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(60);
            chromeDriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);
            c++;
            k++;
            return chromeDriver;
        }

        private ChromeDriver Createchromedrive_IG()
        {
            ChromeOptions options = new ChromeOptions();
            options.AddArguments("--disable-3d-apis",
                "--disable-background-networking",
                "--disable-bundled-ppapi-flash",
                "--disable-client-side-phishing-detection",
                "--disable-default-apps",
                "--disable-hang-monitor",
                "--disable-prompt-on-repost",
                "--disable-sync",
                "--disable-webgl",
                "--enable-blink-features=ShadowDOMV0",
                "--enable-logging",
                "--disable-notifications",
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-web-security",
                "--disable-rtc-smoothness-algorithm",
                "--disable-webrtc-hw-decoding",
                "--disable-webrtc-hw-encoding",
                "--disable-webrtc-multiple-routes",
                "--disable-webrtc-hw-vp8-encoding",
                "--enforce-webrtc-ip-permission-check",
                "--force-webrtc-ip-handling-policy",
                "--ignore-certificate-errors",
                "--disable-infobars",
                "--disable-blink-features=\"BlockCredentialedSubresources\"",
                "--disable-popup-blocking");
            options.AddArgument("--window-size=500,650");
            options.AddArgument("--force-device-scale-factor=0.8");
            var on_off_chrome = "";
            if (cmb_AN_CHROME.InvokeRequired)
            {
                cmb_AN_CHROME.Invoke(new Action(() =>
                {
                    on_off_chrome = cmb_AN_CHROME.Text;

                }));
            }
            if (on_off_chrome == "ON")
            {
                options.AddArgument("--headless");
                options.AddArgument("--disable-gpu");
                options.AddArgument("--no-sandbox");
                options.AddArgument("--disable-dev-shm-usage");
            }
         

            if (c == 10)
            {
                c = 0;
            }
            if (0 <= c & c <= 4)
            {
                options.AddArguments($"--window-position={470 * c},0");
            }
            if (5 <= c & c < 10)
            {
                if (k == 5 || k == 10)
                {
                    k = 0;
                }
                options.AddArguments($"--window-position={470 * k},650");
            }

            ChromeDriverService chromeDriverService = ChromeDriverService.CreateDefaultService();
            chromeDriverService.DisableBuildCheck = true;
            chromeDriverService.HideCommandPromptWindow = true;
            ChromeDriver chromeDriver = new ChromeDriver(chromeDriverService, options);
            chromeDriver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(60);
            chromeDriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);
            c++;
            k++;
            return chromeDriver;
        }
        // chrome chia 10 màn
        private ChromeDriver Createchromedrive_USERAGENT()
        {
            ChromeOptions options = new ChromeOptions();
            options.AddArguments("--disable-3d-apis",
                "--disable-background-networking",
                "--disable-bundled-ppapi-flash",
                "--disable-client-side-phishing-detection",
                "--disable-default-apps",
                "--disable-hang-monitor",
                "--disable-prompt-on-repost",
                "--disable-sync",
                "--disable-webgl",
                "--enable-blink-features=ShadowDOMV0",
                "--enable-logging",
                "--disable-notifications",
                "--no-sandbox",
                "--disable-dev-shm-usage",
                "--disable-web-security",
                "--disable-rtc-smoothness-algorithm",
                "--disable-webrtc-hw-decoding",
                "--disable-webrtc-hw-encoding",
                "--disable-webrtc-multiple-routes",
                "--disable-webrtc-hw-vp8-encoding",
                "--enforce-webrtc-ip-permission-check",
                "--force-webrtc-ip-handling-policy",
                "--ignore-certificate-errors",
                "--disable-infobars",
                "--disable-blink-features=\"BlockCredentialedSubresources\"",
                "--disable-popup-blocking");
            options.AddArgument("--window-size=500,650");
            options.AddArgument("--force-device-scale-factor=0.8");
            // Set the User-Agent here
            string userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36";
            options.AddArguments($"--user-agent={userAgent}");





            //var ON_OFF_EXTENSIONS = "";
            //if (cmb_EXTENSIONS.InvokeRequired)
            //{
            //    cmb_EXTENSIONS.Invoke(new Action(() =>
            //    {
            //        ON_OFF_EXTENSIONS = cmb_EXTENSIONS.Text;
            //    }));

            //}
            //else
            //{
            //    ON_OFF_EXTENSIONS = cmb_EXTENSIONS.Text;
            //}
            //if (ON_OFF_EXTENSIONS == "ON")
            //{
            //    // Thêm extension vào Chrome
            //    var extensionDirectory = ""; // Đường dẫn đến file .crx của bạn
            //    if (tb_Duong_dan_file.InvokeRequired)
            //    {
            //        tb_Duong_dan_file.Invoke(new Action(() =>
            //        {
            //            extensionDirectory = tb_Duong_dan_file.Text;

            //        }));
            //    }
            //    else
            //    {
            //        extensionDirectory = tb_Duong_dan_file.Text;
            //    }

            //    options.AddArguments($"--load-extension={extensionDirectory}");

            //}


            if (i == 10)
            {
                i = 0;
            }
            if (0 <= i & i <= 4)
            {
                options.AddArguments($"--window-position={470 * i},0");
            }
            if (5 <= i & i < 10)
            {
                if (x == 5 || x == 10)
                {
                    x = 0;
                }
                options.AddArguments($"--window-position={470 * x},650");
            }

            ChromeDriverService chromeDriverService = ChromeDriverService.CreateDefaultService();
            chromeDriverService.DisableBuildCheck = true;
            chromeDriverService.HideCommandPromptWindow = true;
            ChromeDriver chromeDriver = new ChromeDriver(chromeDriverService, options);
            chromeDriver.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(60);
            chromeDriver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);
            i++;
            x++;
            return chromeDriver;
        }


        private void dgv1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            // Kiểm tra xem người dùng có click vào cột "cSelect" không
            if (e.ColumnIndex == dgv1.Columns["cSelect"].Index)
            {
                // Lấy DataGridViewCheckBoxCell từ ô cSelect
                DataGridViewCheckBoxCell checkBoxCell = dgv1.Rows[e.RowIndex].Cells["cSelect"] as DataGridViewCheckBoxCell;

                // Kiểm tra nếu ô là DataGridViewCheckBoxCell
                if (checkBoxCell != null)
                {
                    // Kiểm tra xem ô có giá trị hay không (null)
                    if (checkBoxCell.Value == DBNull.Value || checkBoxCell.Value == null)
                    {
                        // Nếu giá trị là null, gán mặc định là false
                        checkBoxCell.Value = true;
                    }
                    else
                    {
                        try
                        {
                            // Nếu có giá trị, toggle giữa true và false
                            bool currentValue = (bool)checkBoxCell.Value;
                            checkBoxCell.Value = !currentValue; // Toggle giá trị
                        }
                        catch
                        {
                            // Nếu giá trị là null, gán mặc định là false
                            checkBoxCell.Value = true;

                        }

                    }
                }
            }
        }

        private void dgv1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            // Kiểm tra nếu là dòng bạn muốn thay đổi màu (ví dụ: dòng số 1)
            if (e.RowIndex >= 0) // Đảm bảo rằng RowIndex hợp lệ
            {
                if (e.RowIndex % 2 == 0) // Dòng chẵn
                {
                    dgv1.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightBlue; // Màu nền cho dòng chẵn
                }
                else // Dòng lẻ
                {
                    dgv1.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightGray; // Màu nền cho dòng lẻ
                }
            }
        }
        //DgvMAIl
        private void bôiĐenToolStripMenuItem2_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv_mail.Rows)
            {
                for (int i = 0; i < row.Cells.Count; i++)
                {
                    if (row.Cells[i].Selected == true)
                    {
                        row.Cells["cSelect1"].Value = true;
                    }
                }
            }
        }

        private void tấtCảToolStripMenuItem3_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv_mail.Rows)
            {
                row.Cells["cSelect1"].Value = true;
            }
        }

        private void bôiĐenToolStripMenuItem3_Click(object sender, EventArgs e)
        {

            foreach (DataGridViewRow row in dgv_mail.Rows)
            {
                for (int i = 0; i < row.Cells.Count; i++)
                {
                    if (row.Cells[i].Selected == true)
                    {
                        row.Cells["cSelect1"].Value = false;
                    }
                }
            }
        }

        private void tấtCảToolStripMenuItem4_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv_mail.Rows)
            {
                row.Cells["cSelect1"].Value = false;
            }
        }
        private List<string> originalAccountListMAIL = new List<string>();
        private List<string> listusernamedgv_MAIL = new List<string>();
        private void dòngĐãChọnToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            for (int i = dgv_mail.Rows.Count - 1; i >= 0; i--)
            {
                DataGridViewRow row = dgv_mail.Rows[i];
                if (row.Cells[5].Value is bool isChecked && isChecked)
                {
                    var username = row.Cells[1].Value.ToString(); // Giả sử tên người dùng ở cột thứ hai
                    listusernamedgv_MAIL.Remove(username); // Xóa khỏi danh sách người dùng
                    originalAccountListMAIL.RemoveAll(acc => acc.StartsWith(username + "|")); // Xóa khỏi danh sách tài khoản gốc
                    dgv_mail.Rows.RemoveAt(i);
                }
            }
        }

        private void tấtCảToolStripMenuItem8_Click(object sender, EventArgs e)
        {

            dgv_mail.Rows.Clear();
            listusernamedgv_MAIL.Clear(); // Xóa danh sách người dùng hiện tại

            // Tải lại tất cả tài khoản gốc
            foreach (var account in originalAccountListMAIL)
            {
                var accountRaw = account.Split('|');
                var username = accountRaw[0];
                var password = accountRaw[1];
                var token = "";
                try
                {
                    token = accountRaw[2];
                }
                catch { }

                dgv_mail.Rows.Add((dgv_mail.RowCount + 1), username, password, token);

                listusernamedgv_MAIL.Add(username); // Cập nhật danh sách người dùng
            }



        }

        private void dgv_mail_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control && e.KeyCode == System.Windows.Forms.Keys.V)
            {
                //Lấy nội dung từ clipboard
                string clipboardText = Clipboard.GetText();

                var lstAccount = clipboardText.Split('\n').ToList();

                foreach (var account in lstAccount)
                {
                    var via = account.Replace("\r", "").Replace("||", "|");
                    var accountRaw = via.Split('|');
                    var username = accountRaw[0].ToString();

                    if (!listusernamedgv_MAIL.Contains(username))
                    {

                        listusernamedgv_MAIL.Add(username);
                        var password = "";
                        var token = "";
                        try
                        {
                            password = accountRaw[1];
                        }
                        catch
                        {
                            password = "";
                        }
                        try
                        {
                            token = accountRaw[2];
                        }
                        catch
                        {
                            token = "";
                        }
                        int add = 0;

                        dgv_mail.Invoke(new Action(() =>
                        {
                            add = dgv_mail.Rows.Add((dgv_mail.RowCount + 1), username, password, token);

                        }));

                    }

                }

            }
        }

        private void dgv_mail_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            // Kiểm tra xem người dùng có click vào cột "cSelect" không
            if (e.ColumnIndex == dgv_mail.Columns["cSelect1"].Index)
            {
                // Lấy DataGridViewCheckBoxCell từ ô cSelect
                DataGridViewCheckBoxCell checkBoxCell = dgv_mail.Rows[e.RowIndex].Cells["cSelect1"] as DataGridViewCheckBoxCell;

                // Kiểm tra nếu ô là DataGridViewCheckBoxCell
                if (checkBoxCell != null)
                {
                    // Kiểm tra xem ô có giá trị hay không (null)
                    if (checkBoxCell.Value == DBNull.Value || checkBoxCell.Value == null)
                    {
                        // Nếu giá trị là null, gán mặc định là false
                        checkBoxCell.Value = true;
                    }
                    else
                    {
                        try
                        {
                            // Nếu có giá trị, toggle giữa true và false
                            bool currentValue = (bool)checkBoxCell.Value;
                            checkBoxCell.Value = !currentValue; // Toggle giá trị
                        }
                        catch
                        {
                            // Nếu giá trị là null, gán mặc định là false
                            checkBoxCell.Value = true;
                        }

                    }
                }
            }
        }

        private void dgv_mail_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            // Kiểm tra nếu là dòng bạn muốn thay đổi màu (ví dụ: dòng số 1)
            if (e.RowIndex >= 0) // Đảm bảo rằng RowIndex hợp lệ
            {
                if (e.RowIndex % 2 == 0) // Dòng chẵn
                {
                    dgv_mail.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightBlue; // Màu nền cho dòng chẵn
                }
                else // Dòng lẻ
                {
                    dgv_mail.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightGray; // Màu nền cho dòng lẻ
                }
            }
        }


        //dgv_IG
        private void bôiĐenToolStripMenuItem4_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv2_IG.Rows)
            {
                for (int i = 0; i < row.Cells.Count; i++)
                {
                    if (row.Cells[i].Selected == true)
                    {
                        row.Cells["cSelect2"].Value = true;
                    }
                }
            }
        }

        private void tấtCảToolStripMenuItem5_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv2_IG.Rows)
            {
                row.Cells["cSelect2"].Value = true;
            }
        }

        private void bôiĐenToolStripMenuItem5_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv2_IG.Rows)
            {
                for (int i = 0; i < row.Cells.Count; i++)
                {
                    if (row.Cells[i].Selected == true)
                    {
                        row.Cells["cSelect2"].Value = false;
                    }
                }
            }
        }

        private void tấtCảToolStripMenuItem6_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv2_IG.Rows)
            {
                row.Cells["cSelect2"].Value = false;
            }
        }

        private void bôiĐenToolStripMenuItem6_Click(object sender, EventArgs e)
        {
            for (int i = dgv2_IG.Rows.Count - 1; i >= 0; i--)
            {
                DataGridViewRow row = dgv2_IG.Rows[i];
                if (row.Cells[3].Value is bool isChecked && isChecked)
                {
                    var username = row.Cells[1].Value.ToString(); // Giả sử tên người dùng ở cột thứ hai
                    dgv2_IG.Rows.RemoveAt(i);
                }
            }
        }
        private void tấtCảToolStripMenuItem7_Click(object sender, EventArgs e)
        {
            dgv2_IG.Rows.Clear();

        }

        private void dgv2_IG_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            // Kiểm tra nếu là dòng bạn muốn thay đổi màu (ví dụ: dòng số 1)
            if (e.RowIndex >= 0) // Đảm bảo rằng RowIndex hợp lệ
            {
                if (e.RowIndex % 2 == 0) // Dòng chẵn
                {
                    dgv2_IG.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightBlue; // Màu nền cho dòng chẵn
                }
                else // Dòng lẻ
                {
                    dgv2_IG.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightGray; // Màu nền cho dòng lẻ
                }
            }
        }
        // Dgv BM
        private void bôiĐenToolStripMenuItem7_Click(object sender, EventArgs e)
        {

            foreach (DataGridViewRow row in dgv_BM.Rows)
            {
                for (int i = 0; i < row.Cells.Count; i++)
                {
                    if (row.Cells[i].Selected == true)
                    {
                        row.Cells["cSelectBM"].Value = true;
                    }
                }
            }


        }

        private void tấtCảToolStripMenuItem9_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv_BM.Rows)
            {
                row.Cells["cSelectBM"].Value = true;
            }
        }

        private void bôiĐenToolStripMenuItem8_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv_BM.Rows)
            {
                for (int i = 0; i < row.Cells.Count; i++)
                {
                    if (row.Cells[i].Selected == true)
                    {
                        row.Cells["cSelectBM"].Value = false;
                    }
                }
            }
        }

        private void tấtCảToolStripMenuItem10_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewRow row in dgv_BM.Rows)
            {
                row.Cells["cSelectBM"].Value = false;
            }
        }

        private void xóaALLToolStripMenuItem_Click(object sender, EventArgs e)
        {
            dgv_BM.Rows.Clear();
        }

        private void dgv_BM_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            // Kiểm tra nếu là dòng bạn muốn thay đổi màu (ví dụ: dòng số 1)
            if (e.RowIndex >= 0) // Đảm bảo rằng RowIndex hợp lệ
            {
                if (e.RowIndex % 2 == 0) // Dòng chẵn
                {
                    dgv_BM.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightBlue; // Màu nền cho dòng chẵn
                }
                else // Dòng lẻ
                {
                    dgv_BM.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightGray; // Màu nền cho dòng lẻ
                }
            }
        }

        private void dgv_BM_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            // Kiểm tra xem người dùng có click vào cột "cSelect" không
            if (e.ColumnIndex == dgv_BM.Columns["cSelectBM"].Index)
            {
                // Lấy DataGridViewCheckBoxCell từ ô cSelect
                DataGridViewCheckBoxCell checkBoxCell = dgv_BM.Rows[e.RowIndex].Cells["cSelectBM"] as DataGridViewCheckBoxCell;

                // Kiểm tra nếu ô là DataGridViewCheckBoxCell
                if (checkBoxCell != null)
                {
                    // Kiểm tra xem ô có giá trị hay không (null)
                    if (checkBoxCell.Value == DBNull.Value || checkBoxCell.Value == null)
                    {
                        // Nếu giá trị là null, gán mặc định là false
                        checkBoxCell.Value = true;
                    }
                    else
                    {

                        try
                        {
                            // Nếu có giá trị, toggle giữa true và false
                            bool currentValue = (bool)checkBoxCell.Value;
                            checkBoxCell.Value = !currentValue; // Toggle giá trị
                        }
                        catch { }

                    }
                }
            }
        }

        private void xÓAALLToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            dgv_AC.Rows.Clear();
        }

        private void dgv_AC_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            // Kiểm tra nếu là dòng bạn muốn thay đổi màu (ví dụ: dòng số 1)
            if (e.RowIndex >= 0) // Đảm bảo rằng RowIndex hợp lệ
            {
                if (e.RowIndex % 2 == 0) // Dòng chẵn
                {
                    dgv_AC.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightBlue; // Màu nền cho dòng chẵn
                }
                else // Dòng lẻ
                {
                    dgv_AC.Rows[e.RowIndex].DefaultCellStyle.BackColor = Color.LightGray; // Màu nền cho dòng lẻ
                }
            }
        }

        private void kILLChromeDriverToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Process[] processes = Process.GetProcessesByName("chromedriver");
            foreach (Process process in processes)
            {
                process.Kill();
            }
        }

        private void cmb_Chuc_Nang_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void button2_Click_1(object sender, EventArgs e)
        {
            for (int i = 1; i <= 40; i++)
            {
                var rtb = this.Controls.Find($"rtb_LINKBMFAIL_IG_{i}", true)
                                       .FirstOrDefault() as RichTextBox;
                if (rtb != null)
                {
                    rtb.Clear(); // Xóa nội dung
                }
            }
        }




        private void bt_CLEAR_FAIL_Click(object sender, EventArgs e)
        {
            rtb_Link_FAIL.Clear();
        }

        private void bt_CLEAR_LINK_Click(object sender, EventArgs e)
        {
            for (int i = 1; i <= 20; i++)
            {
                var rtb = this.Controls.Find($"rtb_LINKBM_{i}", true)
                                       .FirstOrDefault() as RichTextBox;
                if (rtb != null)
                {
                    rtb.Clear(); // Xóa nội dung
                }
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            for (int i = 1; i <= 40; i++)
            {
                var rtb = this.Controls.Find($"rtb_LINKBM_IG_{i}", true)
                                       .FirstOrDefault() as RichTextBox;
                if (rtb != null)
                {
                    rtb.Clear(); // Xóa nội dung
                }
            }
        }

     
    }
}
